<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Aop</name>
    </assembly>
    <members>
        <member name="T:Spring.Aop.Config.AopNamespaceParser">
            <summary>
            Namespace parser for the aop namespace.
            </summary>
            <remarks>
            Using the <code>advisor</code> tag you can configure an <see cref="T:Spring.Aop.IAdvisor"/> and have it
            applied to all the relevant objects in your application context automatically.  The
            <code>advisor</code> tag supports only referenced <see cref="T:Spring.Aop.IPointcut"/>s.
            </remarks>
            <author>Rob harrop</author>
            <author>Adrian Colyer</author>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Config.AopNamespaceParser.Init">
            <summary>
            Register the <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> for the '<code>config</code>' tag.
            </summary>
        </member>
        <member name="T:Spring.Aop.Config.AopNamespaceUtils">
            <summary>
            Utility class for handling registration of auto-proxy creators used internally by the
            <code>aop</code> and <code>tx</code> namespace tags.
            </summary>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <author>Erich Eichinger (.NET)</author>
        </member>
        <member name="F:Spring.Aop.Config.AopNamespaceUtils.AUTO_PROXY_CREATOR_OBJECT_NAME">
            <summary>
             The object name of the internally managed auto-proxy creator.
            </summary>
        </member>
        <member name="F:Spring.Aop.Config.AopNamespaceUtils.InfrastructureAutoProxyCreatorType">
            <summary>
            The type of the APC that handles advisors with object role <see cref="F:Spring.Objects.Factory.Config.ObjectRole.ROLE_INFRASTRUCTURE"/>.
            </summary>
        </member>
        <member name="M:Spring.Aop.Config.AopNamespaceUtils.RegisterAutoProxyCreatorIfNecessary(Spring.Objects.Factory.Xml.ParserContext,System.Xml.XmlElement)">
            <summary>
            Registers the internal auto proxy creator if necessary.
            </summary>
            <param name="parserContext">The parser context.</param>
            <param name="sourceElement">The source element.</param>
        </member>
        <member name="M:Spring.Aop.Config.AopNamespaceUtils.RegisterAutoProxyCreatorIfNecessary(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Registers the internal auto proxy creator if necessary.
            </summary>
        </member>
        <member name="M:Spring.Aop.Config.AopNamespaceUtils.ForceAutoProxyCreatorToUseDecoratorProxy(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Forces the auto proxy creator to use decorator proxy.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="T:Spring.Aop.Config.ConfigObjectDefinitionParser">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> for the <code>&lt;aop:config&gt;</code> tag.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Aop.Config.ConfigObjectDefinitionParser.PROXY_TARGET_TYPE">
            <summary>
            The '<code>proxy-target-type</code>' attribute
            </summary>
        </member>
        <member name="M:Spring.Aop.Config.ConfigObjectDefinitionParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlElement and register the resulting
            ObjectDefinitions with the <see cref="P:Spring.Objects.Factory.Xml.ParserContext.Registry"/> IObjectDefinitionRegistry
            embedded in the supplied <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/>
            </summary>
            <param name="element">The element to be parsed.</param>
            <param name="parserContext">The object encapsulating the current state of the parsing process.
            Provides access to a IObjectDefinitionRegistry</param>
            <returns>The primary object definition.</returns>
            <remarks>
            	<p>
            This method is never invoked if the parser is namespace aware
            and was called to process the root node.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Config.ConfigObjectDefinitionParser.ParseAdvisor(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the supplied advisor element and registers the resulting <see cref="T:Spring.Aop.IAdvisor"/> 
            </summary>
            <param name="advisorElement">The advisor element.</param>
            <param name="parserContext">The parser context.</param>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.AdvisorAdapterRegistrationManager">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> implementation
            that registers instances of any non-default
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> instances with the
            <see cref="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry"/>
            singleton.
            </summary>
            <remarks>
            <p>
            The only requirement for it to work is that it needs to be defined
            in an application context along with any arbitrary "non-native" Spring.NET
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> instances that need
            to be recognized by Spring.NET's AOP framework.
            </p>
            </remarks>
            <author>Dmitriy Kopylenko</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AdvisorAdapterRegistrationManager.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to the given new object instance <i>before</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            Does nothing, simply returns the supplied <paramref name="instance"/> as is.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AdvisorAdapterRegistrationManager.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance <i>after</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            Registers the supplied <paramref name="instance"/> with the
            <see cref="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry"/>
            singleton if it is an <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>
            instance.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="objectName">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceAdapter">
            <summary>
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> implementation
            to enable <see cref="T:Spring.Aop.IAfterReturningAdvice"/> to be used in the
            Spring.NET AOP framework.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter">
            <summary>
            Permits the handling of new advisors and advice types as extensions to
            the Spring AOP framework.
            </summary>
            <remarks>
            <p>
            Implementors can create AOP Alliance
            <see cref="T:AopAlliance.Intercept.IInterceptor"/>s from custom advice
            types, enabling these advice types to be used in the Spring.NET AOP
            framework, which uses interception under the covers.
            </p>
            <p>
            There is no need for most Spring.NET users to implement this interface;
            do so only if you need to introduce more
            <see cref="T:Spring.Aop.IAdvisor"/> or <see cref="T:AopAlliance.Aop.IAdvice"/>
            types to Spring.NET.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Does this adapter understand the supplied <paramref name="advice"/>?
            </summary>
            <remarks>
            <p>
            Is it valid to invoke the
            <see cref="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.Wrap(System.Object)"/>
            method with the given advice as an argument?
            </p>
            </remarks>
            <param name="advice">
            <see cref="T:AopAlliance.Aop.IAdvice"/> such as
            <see cref="T:Spring.Aop.IBeforeAdvice"/>.
            </param>
            <returns><see langword="true"/> if this adapter understands the
            supplied <paramref name="advice"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Return an AOP Alliance
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> exposing the
            behaviour of the given advice to an interception-based AOP
            framework.
            </summary>
            <remarks>
            <p>
            Don't worry about any <see cref="T:Spring.Aop.IPointcut"/>
            contained in the supplied <see cref="T:Spring.Aop.IAdvisor"/>;
            the AOP framework will take care of checking the pointcut.
            </p>
            </remarks>
            <param name="advisor">
            The advice. The
            <see cref="M:Spring.Aop.Framework.Adapter.IAdvisorAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)"/>
            method must have previously returned <see langword="true"/> on the
            supplied <paramref name="advisor"/>.
            </param>
            <returns>
            An AOP Alliance
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> exposing the
            behaviour of the given advice to an interception-based AOP
            framework.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Returns <see langword="true"/> if the supplied
            <paramref name="advice"/> is an instance of the
            <see cref="T:Spring.Aop.IAfterReturningAdvice"/> interface.
            </summary>
            <param name="advice">The advice to check.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> is
            an instance of the <see cref="T:Spring.Aop.IAfterReturningAdvice"/> interface;
            <see langword="false"/> if not or if the supplied
            <paramref name="advice"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Wraps the supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> within a
            <see cref="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor"/>
            instance.
            </summary>
            <param name="advisor">
            The advisor exposing the <see cref="T:AopAlliance.Aop.IAdvice"/> that
            is to be wrapped.
            </param>
            <returns>
            The supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> wrapped within a
            <see cref="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor">
            <summary>
            Interceptor to wrap an <see cref="T:Spring.Aop.IAfterReturningAdvice"/>
            instance.
            </summary>
            <remarks>
            <p>
            A more efficient alternative solution in cases where there is no
            interception advice and therefore no need to create an
            <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> object may be
            offered in future.
            </p>
            <p>
            Used internally by the AOP framework: application developers should not need
            to use this class directly.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:AopAlliance.Intercept.IMethodInterceptor">
            <summary>
            Intercepts calls on an interface on its way to the target.
            </summary>
            <remarks>
            <p>
            Such interceptions are nested "on top" of the target.
            </p>
            </remarks>
        </member>
        <member name="T:AopAlliance.Intercept.IInterceptor">
            <summary>
            Represents a generic interceptor.
            </summary>
            <remarks>
            <p>
            A generic interceptor can intercept runtime events that occur within a
            base program. Those events are materialized by (reified in) joinpoints.
            Runtime joinpoints can be invocations, field access, exceptions, etc.
            </p>
            <p>
            This interface is not used directly. Use the various derived interfaces
            to intercept specific events.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IJoinpoint"/>
        </member>
        <member name="T:AopAlliance.Aop.IAdvice">
            <summary>
            Tag interface for advice.
            </summary>
            <remarks>
            <p>
             Implementations can be any type of advice, such as interceptors.
            </p>
            </remarks>
        </member>
        <member name="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the call to the supplied <paramref name="invocation"/>.
            </summary>
            <remarks>
            <p>
            Polite implementations would certainly like to invoke
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>. 
            </p>
            </remarks>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor.#ctor(Spring.Aop.IAfterReturningAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor"/>
            class.
            </summary>
            <param name="advice">
            The advice to be applied after a target method successfully
            returns.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="advice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.AfterReturningAdviceInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Executes interceptor after the target method successfully returns.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.BeforeAdviceAdapter">
            <summary>
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> implementation
            to enable <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> to be used in the
            Spring.NET AOP framework.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.BeforeAdviceAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Returns <see langword="true"/> if the supplied
            <paramref name="advice"/> is an instance of the
            <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> interface.
            </summary>
            <param name="advice">The advice to check.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> is
            an instance of the <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> interface;
            <see langword="false"/> if not or if the supplied
            <paramref name="advice"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.BeforeAdviceAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Wraps the supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> within a
            <see cref="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor"/>
            instance.
            </summary>
            <param name="advisor">
            The advisor exposing the <see cref="T:AopAlliance.Aop.IAdvice"/> that
            is to be wrapped.
            </param>
            <returns>
            The supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> wrapped within a
            <see cref="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/>
            interface.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry">
            <summary>
            A registry of
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> instances.
            </summary>
            <remarks>
            <p>
            Implementations <b>must</b> also automatically register adapters for
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> types.
            </p>
            <note>
            This is an SPI interface, that should not need to be implemented by any
            Spring.NET user.
            </note>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.Wrap(System.Object)">
            <summary>
            Returns an <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>.
            </summary>
            <param name="advice">
            The object that should be an advice, such as
            <see cref="T:Spring.Aop.IBeforeAdvice"/> or
            <see cref="T:Spring.Aop.IThrowsAdvice"/>.
            </param>
            <returns> 
            An <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>. Never returns <cref lang="null"/>. If
            the <paramref name="advice"/> parameter is an
            <see cref="T:Spring.Aop.IAdvisor"/>, it will simply be returned.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If no registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> can wrap
            the supplied <paramref name="advice"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Returns an <see cref="T:AopAlliance.Intercept.IInterceptor"/> to
            allow the use of the supplied <paramref name="advisor"/> in an
            interception-based framework. 
            </summary>
            <remarks>
            <p>
            Don't worry about the pointcut associated with the
            <see cref="T:Spring.Aop.IAdvisor"/>; if it's an
            <see cref="T:Spring.Aop.IPointcutAdvisor"/>, just return an
            interceptor.
            </p>
            </remarks>
            <param name="advisor">
            The advisor to find an interceptor for.
            </param>
            <returns>
            An interceptor to expose this advisor's behaviour.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If the advisor type is not understood by any registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry.RegisterAdvisorAdapter(Spring.Aop.Framework.Adapter.IAdvisorAdapter)">
            <summary>
            Register the given <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </summary>
            <remarks>
            <p>
            Note that it is not necessary to register adapters for
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> instances: these
            must be automatically recognized by an
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/>
            implementation.
            </p>
            </remarks>
            <param name="adapter">
            An <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> that
            understands the particular advisor and advice types.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry"/> class.
            </summary>
            <remarks>
            <p>
            This constructor will also register the well-known
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> types.
            </p>
            </remarks>
            <seealso cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.Wrap(System.Object)">
            <summary>
            Returns an <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>.
            </summary>
            <param name="advice">
            The object that should be an advice, such as
            <see cref="T:Spring.Aop.IBeforeAdvice"/> or
            <see cref="T:Spring.Aop.IThrowsAdvice"/>.
            </param>
            <returns> 
            An <see cref="T:Spring.Aop.IAdvisor"/> wrapping the supplied
            <paramref name="advice"/>. Never returns <cref lang="null"/>. If
            the <paramref name="advice"/> parameter is an
            <see cref="T:Spring.Aop.IAdvisor"/>, it will simply be returned.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If no registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> can wrap
            the supplied <paramref name="advice"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Returns an <see cref="T:AopAlliance.Intercept.IInterceptor"/> to
            allow the use of the supplied <paramref name="advisor"/> in an
            interception-based framework.
            </summary>
            <param name="advisor">The advisor to find an interceptor for.</param>
            <returns>
            An interceptor to expose this advisor's behaviour.
            </returns>
            <exception cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            If the advisor type is not understood by any registered
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.DefaultAdvisorAdapterRegistry.RegisterAdvisorAdapter(Spring.Aop.Framework.Adapter.IAdvisorAdapter)">
            <summary>
            Register the given <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/>.
            </summary>
            <param name="adapter">
            An <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> that
            understands the particular advisor and advice types.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry">
            <summary>
            Provides Singleton-style access to the default
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/> instance.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry"/> class.
            </summary>
            <remarks>
            <p>
            This contructor is marked as <see langword="private"/> to enforce the
            Singleton pattern
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry.Instance">
            <summary>
            The default <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/> instance.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor">
            <summary>
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> implementation that
            wraps <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> instances.
            </summary>
            <remarks>
            <p>
            In the future Spring.NET may also offer a more efficient alternative
            solution in cases where there is no interception advice and therefore
            no need to create an <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>
            object.
            </p>
            <p>
            Used internally by the Spring.NET AOP framework: application developers
            should not need to use this class directly.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor.#ctor(Spring.Aop.IMethodBeforeAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor"/>
            class.
            </summary>
            <param name="advice">
            The <see cref="T:Spring.Aop.IMethodBeforeAdvice"/> that is to be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="advice"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.MethodBeforeAdviceInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Executes interceptor before the target method successfully returns.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.ThrowsAdviceAdapter">
            <summary>
            <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapter"/> implementation
            to enable <see cref="T:Spring.Aop.IThrowsAdvice"/> to be used in the
            Spring.NET AOP framework.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceAdapter.SupportsAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Returns <see langword="true"/> if the supplied
            <paramref name="advice"/> is an instance of the
            <see cref="T:Spring.Aop.IThrowsAdvice"/> interface.
            </summary>
            <param name="advice">The advice to check.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> is
            an instance of the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface;
            <see langword="false"/> if not or if the supplied
            <paramref name="advice"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceAdapter.GetInterceptor(Spring.Aop.IAdvisor)">
            <summary>
            Wraps the supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> within a
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/>
            instance.
            </summary>
            <param name="advisor">
            The advisor exposing the <see cref="T:AopAlliance.Aop.IAdvice"/> that
            is to be wrapped.
            </param>
            <returns>
            The supplied <paramref name="advisor"/>'s
            <see cref="P:Spring.Aop.IAdvisor.Advice"/> wrapped within a
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor">
             <summary>Interceptor to wrap an after throwing advice.</summary>
             <remarks>
             <p>
             Implementations of the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface
             <b>must</b> define methods of the form...
             <code lang="C#">
             AfterThrowing([MethodInfo method, Object[] args, Object target], Exception subclass); 
             </code>
             The method name is fixed (i.e. your methods <b>must</b> be named
             <c>AfterThrowing</c>. The first three arguments (<i>as a whole</i>) are
             optional, and only useful if futher information about the joinpoint is
             required. The return type <i>can</i> be anything, but is almost always
             <see langword="void"/> by convention.
             </p>
             <p>
             Please note that the object encapsulating the throws advice does not
             need to implement the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface.
             Throws advice methods are discovered via reflection... the
             <see cref="T:Spring.Aop.IThrowsAdvice"/> interface serves merely to
             <i>discover</i> objects that are to be considered as throws advice.
             Other mechanisms for discovering throws advice such as attributes are
             also equally valid... all that this class cares about is that a throws
             advice object implement one or more methods with a valid throws advice
             signature (see above, and the examples below).
             </p>
             <p>
             This is a framework class that should not normally need to be used
             directly by Spring.NET users.
             </p>
             </remarks>
             <example>
             <p>
             Find below some examples of valid <see cref="T:Spring.Aop.IThrowsAdvice"/>
             method signatures...
             </p>
             <code language="C#">
             public class GlobalExceptionHandlingAdvice : IThrowsAdvice
             {
                 public void AfterThrowing(Exception ex) {
                     // handles absolutely any and every Exception...
                 }
             }
             </code>
             <code language="C#">
             public class RemotingExceptionHandlingAdvice : IThrowsAdvice
             {
                 public void AfterThrowing(RemotingException ex) {
                     // handles any and every RemotingException (and subclasses of RemotingException)...
                 }
             }
             </code>
             <code language="C#">
             using System.Data;
             
             public class DataExceptionHandlingAdvice
             {
                 public void AfterThrowing(ConstraintException ex) {
                     // specialised handling of ConstraintExceptions
                 }
            
                 public void AfterThrowing(NoNullAllowedException ex) {
                     // specialised handling of NoNullAllowedExceptions
                 }
            
                 public void AfterThrowing(DataException ex) {
                     // handles all other DataExceptions...
                 }
             }
             </code>
             </example>
             <author>Rod Johnson</author>
             <author>Aleksandar Seovic (.NET)</author>
             <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
        </member>
        <member name="F:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.exceptionHandlers">
            <summary>
            The mapping of exception Types to MethodInfo handlers.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/> class.
            </summary>
            <remarks>
            </remarks>
            <param name="advice">
            The throws advice to check for exception handler methods.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="advice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If no (0) handler methods were discovered on the supplied <paramref name="advice"/>;
            or if more than one handler method suitable for a particular
            <see cref="T:System.Exception"/> type was discovered on the supplied
            <paramref name="advice"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Executes interceptor if (and only if) the supplied
            <paramref name="invocation"/> throws an exception that is mapped to
            an appropriate exception handler.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/> (this assumes no
            exception was thrown by the call to the supplied <paramref name="invocation"/>.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
            <seealso cref="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.GetExceptionHandler(System.Exception)">
            <summary>
            Gets the exception handler (if any) that has been mapped to the
            supplied <paramref name="exception"/>.
            </summary>
            <remarks>
            <p>
            Will return <cref lang="null"/> if not found.
            </p>
            </remarks>
            <returns>
            The exception handler for the <see cref="T:System.Type"/> of the
            supplied <paramref name="exception"/> given exception.
            </returns>
            <param name="exception">exception that was thrown</param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.InvokeHandlerMethod(AopAlliance.Intercept.IMethodInvocation,System.Exception,System.Reflection.MethodInfo)">
            <summary>
            Invokes handler method with appropriate number of parameters
            </summary>
            <param name="invocation">
            The original method invocation that was intercepted.
            </param>
            <param name="triggeringException">
            The exception that triggered this interceptor.
            </param>
            <param name="handlerMethod">
            The exception handler method to invoke.
            </param>
        </member>
        <member name="P:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor.HandlerMethodCount">
            <summary>
            Convenience property that returns the number of exception handler
            methods managed by this interceptor.
            </summary>
            <value>
            The number of exception handler methods managed by this interceptor.
            </value>
        </member>
        <member name="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException">
            <summary>
            Exception thrown when an attempt is made to use an unsupported
            <see cref="T:Spring.Aop.IAdvisor"/> or <see cref="T:AopAlliance.Aop.IAdvice"/>
            type.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class.
            </summary>
            <param name="advice">The advice that caused the exception.</param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class with
            the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class with
            the specified message and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.Adapter.UnknownAdviceTypeException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator">
            <summary>
            Summary description for AbstractPrototypeBasedTargetSourceCreator.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.ITargetSourceCreator">
            <summary>
            Implementations can create special target sources, such as pooling target
            sources, for particular objects. For example, they may base their choice
            on attributes, such as a pooling attribute, on the target type.
            </summary>
            <remarks><p>AbstractAutoProxyCreator can support a number of TargetSourceCreators,
            which will be applied in order.</p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ITargetSourceCreator.GetTargetSource(System.Type,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Create a special TargetSource for the given object, if any.
            </summary>
            <param name="objectType">The type of the object to create a TargetSource for</param>
            <param name="objectName">the name of the object</param>
            <param name="factory">the containing factory</param>
            <returns>a special TargetSource or null if this TargetSourceCreator isn't
             interested in the particular object</returns>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator.GetTargetSource(System.Type,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Create a special TargetSource for the given object, if any.
            </summary>
            <param name="objectType">the type of the object to create a TargetSource for</param>
            <param name="name">the name of the object</param>
            <param name="factory">the containing factory</param>
            <returns>
            a special TargetSource or null if this TargetSourceCreator isn't
            interested in the particular object
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.Target.AbstractPrototypeTargetSourceCreator.CreatePrototypeTargetSource(System.Type,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates the prototype target source.
            </summary>
            <param name="objectType">The type of the object to create a target source for.</param>
            <param name="name">The name.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator">
            <summary>
            Abstract IObjectPostProcessor implementation that creates AOP proxies.
            This class is completely generic; it contains no special code to handle
            any particular aspects, such as pooling aspects.
            </summary>
            <remarks>
            <p>Subclasses must implement the abstract FindCandidateAdvisors() method
            to return a list of Advisors applying to any object. Subclasses can also
            override the inherited ShouldSkip() method to exclude certain objects
            from autoproxying, but they must be careful to invoke the ShouldSkip()
            method of this class, which tries to avoid circular reference problems
            and infinite loops.</p>
            <p>Advisors or advices requiring ordering should implement the Ordered interface.
            This class sorts advisors by Ordered order value. Advisors that don't implement
            the Ordered interface will be considered to be unordered, and will appear
            at the end of the advisor chain in undefined order.</p>
            </remarks>
            <seealso cref="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindCandidateAdvisors(System.Type,System.String)"/>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator">
            <summary>
            ObjectPostProcessor implementation that wraps a group of objects with AOP proxies
            that delegate to the given interceptors before invoking the object itself.
            </summary>
            <remarks>
            <p>This class distinguishes between "common" interceptors: shared for all proxies it
            creates, and "specific" interceptors: unique per object instance. There need not
            be any common interceptors. If there are, they are set using the interceptorNames
            property. As with ProxyFactoryObject, interceptors names in the current factory
            are used rather than object references to allow correct handling of prototype
            advisors and interceptors: for example, to support stateful mixins.
            Any advice type is supported for "interceptorNames" entries.</p>
            <p>Such autoproxying is particularly useful if there's a large number of objects that need
            to be wrapped with similar proxies, i.e. delegating to the same interceptors.
            Instead of x repetitive proxy definitions for x target objects, you can register
            one single such post processor with the object factory to achieve the same effect.</p>
            <p>Subclasses can apply any strategy to decide if a object is to be proxied,
            e.g. by type, by name, by definition details, etc. They can also return
            additional interceptors that should just be applied to the specific object
            instance. The default concrete implementation is ObjectNameAutoProxyCreator,
            identifying the objects to be proxied via a list of object names.</p>
            <p>Any number of TargetSourceCreator implementations can be used with any subclass,
            to create a custom target source - for example, to pool prototype objects.
            Autoproxying will occur even if there is no advice if a TargetSourceCreator specifies
            a custom TargetSource. If there are no TargetSourceCreators set, or if none matches,
            a SingletonTargetSource will be used by default to wrap the object to be autoproxied.</p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
            <seealso cref="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.InterceptorNames"/>
            <seealso cref="T:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator"/>
        </member>
        <member name="T:Spring.Aop.Framework.ProxyConfig">
            <summary>
            Convenience superclass for configuration used in creating proxies,
            to ensure that all proxy creators have consistent properties.
            </summary>
            <remarks>
            <p>
            Note that it is no longer possible to configure subclasses to 
            expose the <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>.
            Interceptors should normally manage their own thread locals if they
            need to make resources available to advised objects. If it is
            absolutely necessary to expose the
            <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>, use an
            interceptor to do so.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyConfig.CopyFrom(Spring.Aop.Framework.ProxyConfig)">
            <summary>
            Copies the configuration from the supplied
            <paramref name="otherConfiguration"/> into this instance.
            </summary>
            <param name="otherConfiguration">
            The configuration to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="otherConfiguration"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyConfig.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.SyncRoot">
            <summary>
            Use to synchronize access to this ProxyConfig instance
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.ProxyTargetType">
            <summary>
            Is the target <see cref="T:System.Type"/> to be proxied in addition
            to any interfaces declared on the proxied <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.ProxyTargetAttributes">
            <summary>
            Is target type attributes, method attributes, method's return type attributes 
            and method's parameter attributes to be proxied in addition
            to any interfaces declared on the proxied <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.Optimize">
            <summary>
            Are any <i>agressive optimizations</i> to be performed?
            </summary>
            <remarks>
            <p>
            The exact meaning of <i>agressive optimizations</i> will differ
            between proxies, but there is usually some tradeoff.
            </p>
            <p>
            For example, optimization will usually mean that advice changes
            won't take effect after a proxy has been created. For this reason,
            optimization is disabled by default. An optimize value of
            <see langword="true"/> may be ignored if other settings preclude
            optimization: for example, if the
            <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> property
            is set to <see langword="true"/> and such a value is not compatible
            with the optimization.
            </p>
            <p>
            The default is <see langword="false"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy">
            <summary>
            Should proxies obtained from this configuration expose
            the AOP proxy to the
            <see cref="T:Spring.Aop.Framework.AopContext"/> class?
            </summary>
            <remarks>
            <p>
            The default is <see langword="false"/>, as enabling this property
            may impair performance.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.AopProxyFactory">
            <summary>
            Gets and set the factory to be used to create AOP proxies.
            </summary>
            <remarks>
            <p>
            This obviously allows one to customise the
            <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/> implementation,
            allowing different strategies to be dropped in without changing the
            core framework. For example, an
            <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/> implementation
            could return an <see cref="T:Spring.Aop.Framework.IAopProxy"/>
            using remoting proxies, <c>Reflection.Emit</c> or a code generation
            strategy. 
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyConfig.IsFrozen">
            <summary>
            Is this configuration frozen?
            </summary>
            <remarks>
            <p>
            The default is not frozen.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.logger">
            <summary>
            The logger for this class hierarchy.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.DO_NOT_PROXY">
            <summary>
            Convenience constant for subclasses: Return value for "do not proxy".
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS">
            <summary>
            Convenience constant for subclasses: Return value for
            "proxy without additional interceptors, just the common ones".
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.order">
            <summary>
            Default value is same as non-ordered
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.advisorAdapterRegistry">
            <summary>
            Default is global AdvisorAdapterRegistry
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.freezeProxy">
            <summary>
            Indicates whether to mark the create proxy as immutable.
            </summary>
            <remarks>
            Setting this to true effectively disables  modifying the generated 
            proxy's advisor configuration
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.interceptorNames">
            <summary>
            Names of common interceptors. 
            We must use object name rather than object references
            to handle prototype advisors/interceptors.
            Default is the empty array: no common interceptors.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.targetSourcedObjects">
            <summary>
            Set of object type + name strings, referring to all objects that this auto-proxy
            creator created a custom TargetSource for.  Used to detect own pre-built proxies
            (from "PostProcessBeforeInstantiation") in the "PostProcessAfterInitialization" method.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.#ctor">
            <summary>
            Create a new instance of this AutoProxyCreator
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Create a proxy with the configured interceptors if the object is
            identified as one to proxy by the subclass.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            No-op for before initialization.
            </summary>
            <param name="obj">The obj.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ShouldSkip(System.Type,System.String)">
            <summary>
            Subclasses should override this method to return true if this
            object should not be considered for autoproxying by this post processor.
            Sometimes we need to be able to avoid this happening if it will lead to
            a circular reference. This implementation returns false.
            </summary>
            <param name="targetType">the type of the object</param>
            <param name="targetName">the name of the object</param>
            <returns>if remarkable to skip</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.CustomizeProxyFactory(Spring.Aop.Framework.ProxyFactory)">
            <summary>
            Subclasses may choose to implement this: for example,
            to change the interfaces exposed
            </summary>
            <param name="pf">
            ProxyFactory that will be used to create the proxy immediably after this method returns.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.IsInfrastructureType(System.Type,System.String)">
            <summary>
            Determines whether the object is an infrastructure type,
            IAdvisor, IAdvice, IAdvisors or AbstractAutoProxyCreator
            </summary>
            <param name="type">The object type to compare</param>
            <param name="name">The name of the object</param>
            <returns>
            <c>true</c> if [is infrastructure type] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.GetCustomTargetSource(System.Type,System.String)">
            <summary>
            Create a target source for object instances. Uses any
            TargetSourceCreators if set. Returns null if no Custom TargetSource
            should be used.
            This implementation uses the customTargetSourceCreators property.
            Subclasses can override this method to use a different mechanism.
            </summary>
            <param name="objectType">the type of the object to create a TargetSource for</param>
            <param name="name">the name of the object</param>
            <returns>a TargetSource for this object</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.GetAdvicesAndAdvisorsForObject(System.Type,System.String,Spring.Aop.ITargetSource)">
            <summary>
            Return whether the given object is to be proxied, what additional
            advices (e.g. AOP Alliance interceptors) and advisors to apply.
            </summary>
            <remarks>
            <p>The previous targetName of this method was "GetInterceptorAndAdvisorForObject".
            It has been renamed in the course of general terminology clarification
            in Spring 1.1. An AOP Alliance Interceptor is just a special form of
            Advice, so the generic Advice term is preferred now.</p>
            <p>The third parameter, customTargetSource, is new in Spring 1.1;
            add it to existing implementations of this method.</p>
            </remarks>
            <param name="targetType">the new object instance</param>
            <param name="targetName">the name of the object</param>
            <param name="customTargetSource">targetSource returned by TargetSource property:
              may be ignored. Will be null unless a custom target source is in use.</param>
            <returns>an array of additional interceptors for the particular object;
            or an empty array if no additional interceptors but just the common ones;
            or null if no proxy at all, not even with the common interceptors.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.CreateProxy(System.Type,System.String,System.Collections.Generic.IList{System.Object},Spring.Aop.ITargetSource)">
            <summary>
            Create an AOP proxy for the given object.
            </summary>
            <param name="targetType">Type of the object.</param>
            <param name="targetName">The name of the object.</param>
            <param name="specificInterceptors">The set of interceptors that is specific to this
              object (may be empty but not null)</param>
            <param name="targetSource">The target source for the proxy, already pre-configured to access the object.</param>
            <returns>The AOP Proxy for the object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.CreateProxyFactory">
            <summary>
            Obtain a new proxy factory instance to be used for proxying a particular object
            </summary>
            <returns>A proxy factory instance for proxying a particular object</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.BuildAdvisors(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Determines the advisors for the given object, including the specific interceptors
            as well as the common interceptor, all adapted to the Advisor interface.
            </summary>
            <param name="targetName">The name of the object.</param>
            <param name="specificInterceptors">The set of interceptors that is specific to this
              object (may be empty, but not null)</param>
            <returns>The list of Advisors for the given object</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.GetCacheKey(System.Type,System.String)">
            <summary>
            Build a cache key for the given object type and object name
            </summary>
            <param name="objectType">The object type.</param>
            <param name="objectName">The object name.</param>
            <returns>The cache key for the given type and name</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessBeforeInstantiation(System.Type,System.String)">
            <summary>
            Create the proxy if have a custom TargetSource
            </summary>
            <param name="objectType">The object type</param>
            <param name="objectName">The object name</param>
            <returns>null if not creating a proxy, otherwise return the proxy.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessAfterInstantiation(System.Object,System.String)">
            <summary>
            Default behavior, return true and continue processing.
            </summary>
            <param name="objectInstance">The object instance</param>
            <param name="objectName">The object name.</param>
            <returns>true</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessPropertyValues(Spring.Objects.IPropertyValues,System.Collections.Generic.IList{System.Reflection.PropertyInfo},System.Object,System.String)">
            <summary>
            Default behavior, return passed in PropertyValues
            </summary>
            <param name="pvs">The property values that the factory is about to apply (never <code>null</code>).</param>
            <param name="pis">he relevant property infos for the target object (with ignored
            dependency types - which the factory handles specifically - already filtered out)</param>
            <param name="objectInstance">The object instance created, but whose properties have not yet 
            been set.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The passed in PropertyValues</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.AdvisorAdapterRegistry">
            <summary>
            Sets the AdvisorAdapterRegistry to use. 
            </summary>
            <remarks>
            Default is the global AdvisorAdapterRegistry.
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.CustomTargetSourceCreators">
            <summary>
            Sets custom TargetSourceCreators to be applied in this order.
            </summary>
            <remarks>
            <para>
            If the list is empty, or they all return null, a SingletonTargetSource
            will be created.
            </para>
            <para>
            TargetSourceCreators can only be invoked if this post processor is used
            in a IObjectFactory, and its ObjectFactoryAware callback is used.
            </para>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.InterceptorNames">
            <summary> 
            Sets the common interceptors, a list of <see cref="T:AopAlliance.Aop.IAdvice"/>, 
            <see cref="T:Spring.Aop.IAdvisor"/> and introduction object names.
            </summary>
            <remarks>
            <para>
            If this property isn't set, there will be zero common interceptors. 
            This is perfectly valid, if "specific" interceptors such as
            matching Advisors are all we want.
            </para>
            </remarks>
            <value>
            The list of <see cref="T:AopAlliance.Aop.IAdvice"/>, 
            <see cref="T:Spring.Aop.IAdvisor"/> and introduction object names.
            </value>
            <seealso cref="T:AopAlliance.Aop.IAdvice"/>
            <seealso cref="T:Spring.Aop.IAdvisor"/>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ApplyCommonInterceptorsFirst">
            <summary>
            Sets whether the common interceptors should be applied before
            object-specific ones. 
            </summary>
            <remarks>
            Default is true; else, object-specific interceptors will get applied first.
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.IsFrozen">
            <summary>
            Set whether or not the proxy should be frozen, preventing advice
            from being added to it once it is created.
            </summary>
            <remarks>
            	<p>Overridden from the super class to prevent the proxy configuration
            from being frozen before the proxy is created. The default is not frozen.
                </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            	<p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.Order">
            <summary>
            Propery Order
            </summary>
            <remarks>
            Ordering which will apply to this class's implementation
            of Ordered, used when applying multiple ObjectPostProcessors.
            Default value is int.MaxValue, meaning that it's non-ordered.
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.#ctor">
            <summary>
            Initialize 
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.InitObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            An new <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/> was set. Initialize this creator instance
            according to the specified object factory.
            </summary>
            <param name="objectFactory"></param>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.CreateAdvisorRetrievalHelper(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Create the <see cref="T:Spring.Aop.Framework.AutoProxy.IAdvisorRetrievalHelper"/> for retrieving the list of
            applicable advisor objects. The default implementation calls back into
            <see cref="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.IsEligibleAdvisorObject(System.String,System.Type,System.String)"/> thus it usually is sufficient to just
            override <see cref="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.IsEligibleAdvisorObject(System.String,System.Type,System.String)"/>. Override <see cref="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.CreateAdvisorRetrievalHelper(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)"/>
            only if you know what you are doing!
            </summary>
            <param name="objectFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.GetAdvicesAndAdvisorsForObject(System.Type,System.String,Spring.Aop.ITargetSource)">
            <summary>
            Return whether the given object is to be proxied, what additional
            advices (e.g. AOP Alliance interceptors) and advisors to apply.
            </summary>
            <remarks>
            	<p>The previous targetName of this method was "GetInterceptorAndAdvisorForObject".
            It has been renamed in the course of general terminology clarification
            in Spring 1.1. An AOP Alliance Interceptor is just a special form of
            Advice, so the generic Advice term is preferred now.</p>
            	<p>The third parameter, customTargetSource, is new in Spring 1.1;
            add it to existing implementations of this method.</p>
            </remarks>
            <param name="targetType">the type of the target object</param>
            <param name="targetName">the name of the target object</param>
            <param name="customTargetSource">targetSource returned by TargetSource property:
              may be ignored. Will be null unless a custom target source is in use.</param>
            <returns>
            an array of additional interceptors for the particular object;
            or an empty array if no additional interceptors but just the common ones;
            or null if no proxy at all, not even with the common interceptors.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindEligibleAdvisors(System.Type,System.String)">
            <summary>
            Find all eligible advices and for autoproxying this class.
            </summary>
            <param name="targetType">the type of the object to be advised</param>
            <param name="targetName">the name of the object to be advised</param>
            <returns>
            the empty list, not null, if there are no pointcuts or interceptors. 
            The by-order sorted list of advisors otherwise
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindCandidateAdvisors(System.Type,System.String)">
            <summary>
            Find all possible advisor candidates to use in auto-proxying
            </summary>
            <param name="targetType">the type of the object to be advised</param>
            <param name="targetName">the name of the object to be advised</param>
            <returns>the list of candidate advisors</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindAdvisorsThatCanApply(System.Collections.Generic.IList{Spring.Aop.IAdvisor},System.Type,System.String)">
            <summary>
            From the given list of candidate advisors, select the ones that are applicable 
            to the given target specified by targetType and name.
            </summary>
            <param name="candidateAdvisors">the list of candidate advisors to date</param>
            <param name="targetType">the target object's type</param>
            <param name="targetName">the target object's name</param>
            <returns>the list of applicable advisors</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.SortAdvisors(System.Collections.Generic.IList{Spring.Aop.IAdvisor})">
            <summary>
            Sorts the advisors.
            </summary>
            <param name="advisors">The advisors.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.ExtendAdvisors(System.Collections.Generic.IList{Spring.Aop.IAdvisor},System.Type,System.String)">
            <summary>
            Extension hook that subclasses can override to add additional advisors for the given object,
            given the sorted advisors obtained to date.<br/>
            The default implementation does nothing.<br/>
            Typically used to add advisors that expose contextual information required by some of the later advisors.
            </summary>
            <remarks>
            The advisor list passed into this method is already reduced to advisors applying to this particular object.
            If you want to register additional common advisor candidates, override <see cref="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.FindCandidateAdvisors(System.Type,System.String)"/>.
            </remarks>
            <param name="advisors">Advisors that have already been identified as applying to a given object</param>
            <param name="objectType">the type of the object to be advised</param>
            <param name="objectName">the name of the object to be advised</param>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.IsEligibleAdvisorObject(System.String,System.Type,System.String)">
            <summary>
            Whether the given advisor is eligible for the specified target. The default implementation
            always returns true.
            </summary>
            <param name="advisorName">the advisor name</param>
            <param name="targetType">the target object's type</param>
            <param name="targetName">the target object's name</param>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator.ObjectFactory">
            <summary>
            We override this method to ensure that all candidate advisors are materialized
            under a stack trace including this object. Otherwise, the dependencies won't
            be apparent to the circular-reference prevention strategy in AbstractObjectFactory.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.ObjectFactoryAdvisorRetrievalHelper">
            <summary>
            Helper for retrieving standard Spring advisors from an <see cref="T:Spring.Objects.Factory.IObjectFactory"/> for
            use with auto-proxying.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.IAdvisorRetrievalHelper">
            <summary>
            Interface encapsulating the advisor retrieval strategy used by 
            an <see cref="T:Spring.Aop.Framework.AutoProxy.AbstractAdvisorAutoProxyCreator"/> to retrieve the 
            applicable list of advisor objects.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.IAdvisorRetrievalHelper.FindAdvisorObjects(System.Type,System.String)">
            <summary>
            Get the list of advisor objects to apply on the target.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectFactoryAdvisorRetrievalHelper.#ctor(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Create a new helper for the specified <paramref name="objectFactory"/>.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectFactoryAdvisorRetrievalHelper.FindAdvisorObjects(System.Type,System.String)">
            <summary>
            Find all all eligible advisor objects in the current object factory.
            </summary>
            <param name="targetType">the type of the object to be advised</param>
            <param name="targetName">the name of the object to be advised</param>
            <returns>A list of eligible <see cref="T:Spring.Aop.IAdvisor"/> instances</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectFactoryAdvisorRetrievalHelper.AddAdvisorCandidate(System.Collections.Generic.List{Spring.Aop.IAdvisor},System.String)">
            <summary>
            Add the named advisor instance to the list of advisors.
            </summary>
            <param name="advisors">the advisor list</param>
            <param name="advisorName">the object name of the advisor to add</param>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectFactoryAdvisorRetrievalHelper.GetAdvisorCandidateNames(System.Type,System.String)">
            <summary>
            Gets the names of advisor candidates
            </summary>
            <param name="targetType">the type of the object to be advised</param>
            <param name="targetName">the name of the object to be advised</param>
            <returns>a non-null string array of advisor candidate names</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectFactoryAdvisorRetrievalHelper.IsEligibleObject(System.String,System.Type,System.String)">
            <summary>
            Determine, whether the specified aspect object is eligible.
            The default implementation accepts all except for advisors that are 
            part of the internal infrastructure.
            </summary>
            <param name="advisorName">the name of the candidate advisor</param>
            <param name="objectType">the type of the object to be advised</param>
            <param name="objectName">the name of the object to be advised</param>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.ObjectFactoryAdvisorRetrievalHelper.ObjectFactory">
            <summary>
            The object factory to lookup advisors from
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.AbstractFilteringAutoProxyCreator">
            <summary>
            The base class for AutoProxyCreator implementations that mark objects 
            eligible for proxying based on arbitrary criteria.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractFilteringAutoProxyCreator.ShouldSkip(System.Type,System.String)">
             <summary>
            Overridden to call <see cref="M:Spring.Aop.Framework.AutoProxy.AbstractFilteringAutoProxyCreator.IsEligibleForProxying(System.Type,System.String)"/>.
             </summary>
             <param name="targetType">the type of the object</param>
             <param name="targetName">the name of the object</param>
             <returns>if remarkable to skip</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractFilteringAutoProxyCreator.GetAdvicesAndAdvisorsForObject(System.Type,System.String,Spring.Aop.ITargetSource)">
            <summary>
            Override to always return <see cref="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS"/>.
            </summary>
            <remarks>
            Whether an object shall be proxied or not is determined by the result of <see cref="M:Spring.Aop.Framework.AutoProxy.AbstractFilteringAutoProxyCreator.IsEligibleForProxying(System.Type,System.String)"/>.
            </remarks>
            <param name="targetType">ingored</param>
            <param name="targetName">ignored</param>
            <param name="customTargetSource">ignored</param>
            <returns>
            Always <see cref="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS"/> to indicate, that the object shall be proxied.
            </returns>
            <seealso cref="F:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS"/>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AbstractFilteringAutoProxyCreator.IsEligibleForProxying(System.Type,System.String)">
            <summary>
            Decide, whether the given object is eligible for proxying.
            </summary>
            <remarks>
            Override this method to allow or reject proxying for the given object.
            </remarks>
            <param name="targetType">the object's type</param>
            <param name="targetName">the name of the object</param>
            <seealso cref="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ShouldSkip(System.Type,System.String)"/>        
            <returns>whether the given object shall be proxied.</returns>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.AttributeAutoProxyCreator">
            <summary>
            An AutoProxyCreator, that identifies objects to be proxied by checking <see cref="T:System.Attribute"/>s defined on their type.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AttributeAutoProxyCreator.IsEligibleForProxying(System.Type,System.String)">
            <summary>
            Determines, whether the given object shall be proxied by matching <paramref name="targetType"/> against <see cref="P:Spring.Aop.Framework.AutoProxy.AttributeAutoProxyCreator.AttributeTypes"/>.
            </summary>
            <param name="targetType">the object's type</param>
            <param name="targetName">the name of the object</param>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AttributeAutoProxyCreator.IsAnnotatedWithAnyOfAttribute(System.Type,System.Type[],System.Boolean)">
            <summary>
            Checks if <paramref name="objectType"/> is annotated with any of the attributes within the given list of <paramref name="attributeTypes"/>.
            </summary>
            <param name="objectType">the object's type</param>
            <param name="attributeTypes">the list of <see cref="T:System.Attribute"/> types to match agains.</param>
            <param name="checkInherited">whether to check base classes and intefaces for any of the given attributes.</param>
            <returns><see langword="true"/> if any of the attributes is found</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.AttributeAutoProxyCreator.IsAnnotatedWithAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Checks if <paramref name="objectType"/> is annotated with the specified <paramref name="attributeType"/>.
            </summary>
            <param name="objectType">the object's type</param>
            <param name="attributeType">the <see cref="T:System.Attribute"/> type to match agains.</param>
            <param name="checkInherited">whether to check base classes and intefaces for the specified attribute.</param>
            <returns><see langword="true"/> if the attributes is found</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AttributeAutoProxyCreator.CheckInherited">
            <summary>
            Indicates, whether to consider base types for filtering when checking declared attributes. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.AttributeAutoProxyCreator.AttributeTypes">
            <summary>
            The list of attribute types marking object types as eligible for auto-proxying by this AutoProxyCreator. Must not be <c>null</c>.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator">
            <summary>
            ObjectPostProcessor implementation that creates AOP proxies based on all candidate
            Advisors in the current IObjectFactory. This class is completely generic; it contains
            no special code to handle any particular aspects, such as pooling aspects.
            </summary>
            <author>Rod Johnson</author>
            <author>Adhari C Mahendra (.NET)</author>
            <author>Erich Eichinger (.NET)</author>
        </member>
        <member name="F:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.SEPARATOR">
            <summary>
            Separator between prefix and remainder of object name
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.FindCandidateAdvisors(System.Type,System.String)">
            <summary>
            Find all possible advisor candidates to use in auto-proxying
            </summary>
            <param name="targetType">the type of the object to be advised</param>
            <param name="targetName">the name of the object to be advised</param>
            <returns>the list of candidate advisors</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.IsEligibleAdvisorObject(System.String,System.Type,System.String)">
            <summary>
            Whether the given advisor is eligible for the specified target.
            </summary>
            <param name="advisorName">the advisor name</param>
            <param name="targetType">the target object's type</param>
            <param name="targetName">the target object's name</param>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.AfterPropertiesSet">
            <summary>
            Validate configuration
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.UsePrefix">
            <summary>
            Gets or sets a value indicating whether to exclude
            advisors with a certain prefix.
            </summary>
            <value><c>true</c> if [use prefix]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.AdvisorObjectNamePrefix">
            <summary>
            Set the prefix for object names that will cause them to be included for
            auto-proxying by this object. This prefix should be set to avoid circular
            references. Default value is the object name of this object + a dot.
            </summary>
            <value>The advisor object name prefix.</value>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <value>The name of the object in the factory.</value>
            <remarks>
            	<p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.InfrastructureAdvisorAutoProxyCreator">
            <summary>
            A special version of an APC that explicitely cares for infrastructure (=internal)
            advisors only
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.InfrastructureAdvisorAutoProxyCreator.CreateAdvisorRetrievalHelper(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Overridden to create a special version of an <see cref="T:Spring.Aop.Framework.AutoProxy.IAdvisorRetrievalHelper"/>
            that accepts only infrastructure advisor definitions
            </summary>
            <param name="objectFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/> implementation that replaces a group of objects 
            with a 'true' inheritance based AOP mechanism that delegates 
            to the given interceptors before invoking the object itself.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Allows for custom modification of an application context's object definitions.
            </summary>
            <remarks>
            <p>
            If the object name matches, replaces the type by a AOP proxied type based on inheritance.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.IsInfrastructureType(System.Type,System.String)">
            <summary>
            Determines whether the object is an infrastructure type,
            IAdvisor, IAdvice, IAdvisors, AbstractAutoProxyCreator or InheritanceBasedAopConfigurer.
            </summary>
            <param name="type">The object type to compare</param>
            <param name="name">The name of the object</param>
            <returns>
            <c>true</c> if [is infrastructure type] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.CreateProxyFactory(System.Type,System.String)">
            <summary>
            Create an AOP proxy for the given object.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="objectName">The name of the object.</param>
            <returns>The AOP Proxy for the object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.IsObjectNameMatch(System.String)">
            <summary>
            Return if the given object name matches one of the object names specified.
            </summary>
            <remarks>
            <p>
            The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,
            as well as direct equality. Can be overridden in subclasses.
            </p>
            </remarks>
            <param name="objectName">the object name to check</param>
            <returns>if the names match</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.ObjectNames">
            <summary>
            Set the names of the objects in IList fashioned way 
            that should automatically get intercepted.
            </summary>
            <remarks>
            A name can specify a prefix to match by ending with "*", e.g. "myObject,tx*"
            will match the object named "myObject" and all objects whose name start with "tx".
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.InterceptorNames">
            <summary> 
            Sets the common interceptors, a list of <see cref="T:AopAlliance.Aop.IAdvice"/>, 
            <see cref="T:Spring.Aop.IAdvisor"/> and introduction object names.
            </summary>
            <remarks>
            <para>
            If this property isn't set, there will be zero common interceptors. 
            This is perfectly valid, if "specific" interceptors such as
            matching Advisors are all we want.
            </para>
            </remarks>
            <value>
            The list of <see cref="T:AopAlliance.Aop.IAdvice"/>, 
            <see cref="T:Spring.Aop.IAdvisor"/> and introduction object names.
            </value>
            <seealso cref="T:AopAlliance.Aop.IAdvice"/>
            <seealso cref="T:Spring.Aop.IAdvisor"/>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.ProxyTargetAttributes">
            <summary>
            Is target type attributes, method attributes, method's return type attributes 
            and method's parameter attributes to be proxied in addition
            to any interfaces declared on the proxied <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.ProxyDeclaredMembersOnly">
            <summary>
            Gets or sets a value indicating whether inherited members should be proxied.
            </summary>
            <value>
            <see langword="true"/> if inherited members should be proxied; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.ProxyInterfaces">
            <summary>
            Gets or sets a value indicating whether interfaces members should be proxied.
            </summary>
            <value>
            <see langword="true"/> if interfaces members should be proxied; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.InheritanceBasedAopConfigurer.Order">
            <summary>
            Return the order value of this object, where a higher value means greater in
            terms of sorting.
            </summary>
            <remarks>
            Ordering which will apply to this class's implementation
            of Ordered, used when applying multiple ObjectPostProcessors.
            Default value is int.MaxValue, meaning that it's non-ordered.
            </remarks>
            <returns>The order value.</returns>
        </member>
        <member name="T:Spring.Aop.ITargetSource">
            <summary>
            Used to obtain the current "target" of an AOP invocation
            </summary>
            <remarks>
            <p>
            This target will be invoked via reflection if no around advice chooses
            to end the interceptor chain itself.
            </p>
            <p>
            If an <see cref="T:Spring.Aop.ITargetSource"/> is <c>"static"</c>, it
            will always return the same target, allowing optimizations in the AOP
            framework. Dynamic target sources can support pooling, hot swapping etc.
            </p>
            <p>
            Application developers don't usually need to work with target sources
            directly: this is an AOP framework interface.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.ITargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.ITargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <param name="target">The target object to release.</param>
        </member>
        <member name="P:Spring.Aop.ITargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.ITargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator">
            <summary>
            AutoProxyCreator that identifies objects to proxy via a list of names.
            </summary>
            <remarks>
            <para>
            Auto proxy creator that identifies objects to proxy via a list of names.
            Checks for direct, "xxx*", "*xxx" and "*xxx*" matches.
            </para>
            <para>In case of a IFactoryObject, only the objects created by the
            FactoryBean will get proxied.  If you intend to proxy a IFactoryObject instance itself
            specify the object name of the IFactoryObject including 
            the factory-object prefix "&amp;"  e.g. "&amp;MyFactoryObject".
            </para>
            </remarks>
            <seealso cref="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.IsMatch(System.String,System.String)"/>
            <author>Juergen Hoeller</author>
            <author>Adhari C Mahendra (.NET)</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator"/>.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.IsEligibleForProxying(System.Type,System.String)">
            <summary>
            Identify as object to proxy if the object name is in the configured list of names.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.IsMatch(System.String,System.String)">
            <summary>
            Return if the given object name matches the mapped name.
            </summary>
            <remarks>
            <p>
            The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,
            as well as direct equality. Can be overridden in subclasses.
            </p>
            </remarks>
            <param name="objectName">the object name to check</param>
            <param name="mappedName">the name in the configured list of names</param>
            <returns>if the names match</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.IsObjectNameMatch(System.Type,System.String,System.Collections.IList)">
            <summary>
            Convenience method that may be used by derived classes. Iterates over the list of <paramref name="objectNamePatterns"/> to match <paramref name="objectName"/> against.
            </summary>
            <param name="objType">the object's type. Must not be <c>null</c>.</param>
            <param name="objectName">the name of the object Must not be <c>null</c>.</param>
            <param name="objectNamePatterns">the list of patterns, that <paramref name="objectName"/> shall be matched against. Must not be <c>null</c>.</param>        
            <returns>
            If <paramref name="objectNamePatterns"/> is <c>null</c>, will always return <c>true</c>, otherwise
            if <paramref name="objectName"/> matches any of the patterns specified in <paramref name="objectNamePatterns"/>. 
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator.ObjectNames">
            <summary>
            Set the names of the objects in IList fashioned way that should automatically 
            get wrapped with proxies.
            A name can specify a prefix to match by ending with "*", e.g. "myObject,tx*"
            will match the object named "myObject" and all objects whose name start with "tx".
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.PointcutFilteringAutoProxyCreator">
            <summary>
            This AutoProxyCreator only proxies objects matching the specified <see cref="T:Spring.Aop.IPointcut"/>.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.PointcutFilteringAutoProxyCreator.IsEligibleForProxying(System.Type,System.String)">
            <summary>
            Determines, whether the given object shall be proxied.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.PointcutFilteringAutoProxyCreator.Pointcut">
            <summary>
            Set the pointcut used to filter objects that should automatically get wrapped with proxies.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AutoProxy.TypeNameAutoProxyCreator">
            <summary>
            AutoProxyCreator, that identifies objects to proxy by matching their <see cref="P:System.Type.FullName"/> against a list of patterns.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Aop.Framework.AutoProxy.TypeNameAutoProxyCreator.IsEligibleForProxying(System.Type,System.String)">
            <summary>
            Decide, whether the given object is eligible for proxying.
            </summary>
            <remarks>
            Override this method to allow or reject proxying for the given object.
            </remarks>
            <param name="targetType">the object's type</param>
            <param name="targetName">the name of the object</param>
            <seealso cref="M:Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.ShouldSkip(System.Type,System.String)"/>        
            <returns>whether the given object shall be proxied.</returns>
        </member>
        <member name="P:Spring.Aop.Framework.AutoProxy.TypeNameAutoProxyCreator.TypeNames">
            <summary>
             The list of patterns to match <see cref="P:System.Type.FullName"/> against. For pattern syntax, see <see cref="T:Spring.Aop.Support.TypeNameTypeFilter"/>
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyFactory">
            <summary>
            A reusable base implementation of <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/>, providing
            some useful default implementations
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Aop.Framework.IAopProxyFactory">
            <summary> 
            Factory interface for the creation of AOP proxies based on
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> configuration
            objects.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.IAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Creates an <see cref="T:Spring.Aop.Framework.IAopProxy"/> for the
            supplied <paramref name="advisedSupport"/> configuration.
            </summary>
            <param name="advisedSupport">The AOP configuration.</param>
            <returns>An <see cref="T:Spring.Aop.Framework.IAopProxy"/>.</returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="advisedSupport"/> configuration is
            invalid.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Creates an <see cref="T:Spring.Aop.Framework.IAopProxy"/> for the
            supplied <paramref name="advisedSupport"/> configuration.
            </summary>
            <param name="advisedSupport">The AOP configuration.</param>
            <returns>An <see cref="T:Spring.Aop.Framework.IAopProxy"/>.</returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="advisedSupport"/> configuration is
            invalid.
            </exception>
            <seealso cref="M:Spring.Aop.Framework.IAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)"/>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyFactory.DoCreateAopProxyInstance(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Actually creates the proxy instance based on the supplied <see cref="T:Spring.Aop.Framework.AdvisedSupport"/>.
            </summary>
            <returns>the proxy instance described by <paramref name="advisedSupport"/>. Must not be <c>null</c></returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyFactory.EliminateDuplicateAdvisors(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            If possible, checks for advisor duplicates on the supplied <paramref name="advisedSupport"/> and 
            eliminates them.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyFactory.IsAopProxyType(Spring.Aop.ITargetSource)">
            <summary>
            Checks, if the given <paramref name="targetSource"/> holds a proxy generated by this factory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder">
            <summary>
            Base class for AOP method builders that contains common functionalities.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.aopProxyGenerator">
            <summary>
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.targetMethods">
            <summary>
            The dictionary to cache the list of target  
            <see cref="T:System.Reflection.MethodInfo"/>s.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.onProxyTargetMethods">
            <summary>
            The dictionary to cache the list of target  
            <see cref="T:System.Reflection.MethodInfo"/>s defined on the proxy.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.interceptors">
            <summary>
            The local variable to store the list of method interceptors.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.targetType">
            <summary>
            The local variable to store the target type being proxied.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.arguments">
            <summary>
            The local variable to store method arguments.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.returnValue">
            <summary>
            The local variable to store the return value.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.genericTargetMethod">
            <summary>
            The local variable to store the closed generic method 
            when the target method is generic.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.genericOnProxyTargetMethod">
            <summary>
            The local variable to store the closed generic method 
            when the target method defined on the proxy is generic.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.targetMethodCacheField">
            <summary>
            The field to cache the target <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.onProxyTargetMethodCacheField">
            <summary>
            The field to cache the target <see cref="T:System.Reflection.MethodInfo"/> 
            defined on the proxy.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.methodReturnsValue">
            <summary>
            Indicates if the method returns a value.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="aopProxyGenerator">
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="explicitImplementation">
            <see langword="true"/> if the interface is to be
            implemented explicitly; otherwise <see langword="false"/>.
            </param>
            <param name="targetMethods">
            The dictionary to cache the list of target 
            <see cref="T:System.Reflection.MethodInfo"/>s.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator,System.Boolean,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="aopProxyGenerator">
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="explicitImplementation">
            <see langword="true"/> if the interface is to be
            implemented explicitly; otherwise <see langword="false"/>.
            </param>
            <param name="targetMethods">
            The dictionary to cache the list of target 
            <see cref="T:System.Reflection.MethodInfo"/>s.
            </param>
            <param name="onProxyTargetMethods">
            The dictionary to cache the list of target  
            <see cref="T:System.Reflection.MethodInfo"/>s defined on the proxy.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.GenerateMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Generates the proxy method.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.GenerateMethodCacheFieldId(System.Reflection.MethodInfo)">
            <summary>
            Generates unique method id for the cache field.
            </summary>
            <param name="method">The target method.</param>
            <returns>An unique method name.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.GenerateTargetMethodCacheField(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Create static field that will cache target method.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The target method.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.GenerateOnProxyTargetMethodCacheField(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Create static field that will cache target method when defined on the proxy.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The target method.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.MakeGenericMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Create a closed generic method for the current call 
            if target method is a generic definition.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The target method.</param>
            <param name="methodCacheField">
            The field that contains the method generic definition
            </param>
            <param name="localMethod">
            The local variable to store the closed generic method.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.PushTargetType(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target type on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.PushAdvisedProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes  
            the current <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> 
            instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.PushTargetMethodInfo(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Pushes the target <see cref="T:System.Reflection.MethodInfo"/> to stack.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.PushOnProxyTargetMethodInfo(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Pushes the target <see cref="T:System.Reflection.MethodInfo"/> defined on the proxy to stack.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.DeclareLocals(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Creates local variable declarations.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.BeginMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Initializes local variables
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.GenerateMethodLogic(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Generates method logic.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.CallInvoke(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls method using Invoke
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.SetupMethodArguments(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Setup proxied method arguments.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="parameters">The method's parameters.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.CallDirectProxiedMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Calls proxied method directly.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.EndMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Ends method by returning return value if appropriate.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.EmitLoadValueIndirect(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits MSIL instructions to load a value of the specified <paramref name="type"/> 
            onto the evaluation stack indirectly.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="type">The type of the value.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.EmitStoreValueIndirect(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emit MSIL instructions to store a value of the specified <paramref name="type"/> 
            at a supplied address.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="type">The type of the value.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyMethodBuilder.EmitUnboxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits MSIL instructions to convert the boxed representation 
            of the supplied <paramref name="type"/> to its unboxed form.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="type">The type specified in the instruction.</param>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyTypeBuilder">
            <summary>
            Base class for proxy builders that can be used 
            to create an AOP proxy for any object.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator">
            <summary>
            Describes the operations that generates IL instructions 
            used to build the Aop proxy type.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator.PushAdvisedProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes  
            the current <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> 
            instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyTypeBuilder.PushAdvisedProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes  
            the current <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> 
            instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AbstractAopProxyTypeBuilder.GetTypeAttributes(System.Type)">
            <summary>
            Calculates and returns the list of attributes that apply to the
            specified type.
            </summary>
            <remarks>
            Removes <see cref="T:System.SerializableAttribute"/> from the list.
            </remarks>
            <param name="type">The type to find attributes for.</param>
            <returns>
            A list of custom attributes that should be applied to type.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy">
            <summary>
            Represents the AOP configuration data built-in with the proxy.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Aop.Framework.IAdvised">
            <summary>
            Configuration data for an AOP proxy factory.
            </summary>
            <remarks>
            <p>
            This configuration includes the
            <see cref="T:AopAlliance.Intercept.IInterceptor"/>s,
            <see cref="T:Spring.Aop.IAdvisor"/>s, and (any) proxied interfaces.
            </p>
            <p>
            Any AOP proxy obtained from Spring.NET can be cast to this interface to
            allow the manipulation of said proxy's AOP advice.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.Framework.AdvisedSupport"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the end (or tail)
            of the advice (interceptor) chain.
            </summary>
            <remarks>
            <p>
            Please be aware that Spring.NET's AOP implementation only supports
            method advice (as encapsulated by the 
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> interface).
            </p>
            </remarks>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the supplied
            <paramref name="position"/> in the advice (interceptor) chain.
            </summary>
            <remarks>
            <p>
            Please be aware that Spring.NET's AOP implementation only supports
            method advice (as encapsulated by the 
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> interface).
            </p>
            </remarks>
            <param name="position">
            The zero (0) indexed position (from the head) at which the
            supplied <paramref name="advice"/> is to be inserted into the
            advice (interceptor) chain.
            </param>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.IsInterfaceProxied(System.Type)">
            <summary>
            Is the supplied <paramref name="intf"/> (interface)
            <see cref="T:System.Type"/> proxied?
            </summary>
            <param name="intf">
            The interface <see cref="T:System.Type"/> to test.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="intf"/>
            (interface) <see cref="T:System.Type"/> is proxied;
            <see langword="false"/> if not or the supplied
            <paramref name="intf"/> is <cref lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvisors(Spring.Aop.IAdvisors)">
            <summary>
            Adds the advisors from the supplied <paramref name="advisors"/> 
            to the list of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advisors">
            The <see cref="T:Spring.Aop.IAdvisors"/> to add advisors from.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisors"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddAdvisor(System.Int32,Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            list at which the supplied <paramref name="advisor"/>
            is to be inserted.
            </param>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>.
            </summary>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.AddIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            list at which the supplied <paramref name="introductionAdvisor"/>
            is to be inserted.
            </param>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.IndexOf(Spring.Aop.IAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IAdvisor"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <remarks>
            <p>
            The return value of this method can be used to index into
            the <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            list.
            </p>
            </remarks>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an advisor for this
            proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.IndexOf(Spring.Aop.IIntroductionAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> in the introductions
            for this proxy.
            </summary>
            <remarks>
            <p>
            The return value of this method can be used to index into
            the <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            list.
            </p>
            </remarks>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an introduction advisor
            for this proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Removes the supplied <paramref name="advisor"/> the list of advisors
            for this proxy.
            </summary>
            <param name="advisor">The advisor to remove.</param>
            <returns>
            <see langword="true"/> if advisor was found in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/> for this
            proxy and was successfully removed; <see langword="false"/> if not
            or if the supplied <paramref name="advisor"/> is <cref lang="null"/>.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveAdvisor(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IAdvisor"/> at the supplied
            <paramref name="index"/> in the
            <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/> list
            from the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/> for this proxy.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IAdvisor"/> to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IAdvisor"/> at the supplied <paramref name="index"/>
            cannot be removed; or if the supplied <paramref name="index"/> is out of
            range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Removes the supplied <paramref name="advice"/> from the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:AopAlliance.Aop.IAdvice"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Removes the supplied <paramref name="introduction"/> from the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>.
            </summary>
            <param name="introduction">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="introduction"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.RemoveIntroduction(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/> for this proxy.
            </summary>
            <param name="index">The index of the advisor to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> cannot be removed; or if the supplied
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.ReplaceIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Replaces the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> that
            exists at the supplied <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            with the supplied <paramref name="introduction"/>.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            in the list of
            <see cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
            that is to be replaced.
            </param>
            <param name="introduction">
            The new (replacement) <see cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.ReplaceAdvisor(Spring.Aop.IAdvisor,Spring.Aop.IAdvisor)">
            <summary> 
            Replaces the <paramref name="oldAdvisor"/> with the
            <paramref name="newAdvisor"/>.
            </summary>
            <param name="oldAdvisor">
            The original (old) advisor to be replaced.
            </param>
            <param name="newAdvisor">
            The new advisor to replace the <paramref name="oldAdvisor"/> with.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="oldAdvisor"/> was
            replaced; if the <paramref name="oldAdvisor"/> was not found in the
            advisors collection, this method returns <see langword="false"/>
            and (effectively) does nothing.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="oldAdvisor"/> cannot be replaced.
            </exception>
            <seealso cref="P:Spring.Aop.Framework.ProxyConfig.IsFrozen"/>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvised.ToProxyConfigString">
            <summary>
            As <see cref="M:System.Object.ToString"/> will normally be passed
            straight through to the advised target, this method returns the
            <see cref="M:System.Object.ToString"/> equivalent for the AOP
            proxy itself.
            </summary>
            <returns>
            A <see cref="T:System.String"/> description of the proxy configuration.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.ExposeProxy">
            <summary>
            Should proxies obtained from this configuration expose
            the AOP proxy to the
            <see cref="T:Spring.Aop.Framework.AopContext"/> class?
            </summary>
            <remarks>
            <p>
            This is useful if an advised object needs to call another advised
            method on itself. (If it uses the <c>this</c> reference (<c>Me</c>
            in Visual Basic.NET), the invocation will <b>not</b> be advised).
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.AdvisorChainFactory">
            <summary>
            Gets the
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.ProxyTargetType">
            <summary>
            Is the target <see cref="T:System.Type"/> to be proxied in addition
            to any interfaces declared on the proxied <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.ProxyTargetAttributes">
            <summary>
            Is target type attributes, method attributes, method's return type attributes 
            and method's parameter attributes to be proxied in addition
            to any interfaces declared on the proxied <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.Advisors">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <remarks>
            <p>
            Will never return <cref lang="null"/>, but may return an
            empty array (in the case where no
            <see cref="T:Spring.Aop.IAdvisor"/> instances have been applied to
            this proxy).
            </p>
            </remarks>
            <value>
            The collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.Introductions">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <remarks>
            <p>
            Will never return <cref lang="null"/>, but may return an
            empty array (in the case where no
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> instances have been
            applied to this proxy).
            </p>
            </remarks>
            <value>
            The collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.Interfaces">
            <summary>
            Returns the collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </summary>
            <value>
            The collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.InterfaceMap">
            <summary>
            Returns the mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </summary>
            <value>
            The mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.IsFrozen">
            <summary>
            Is this configuration frozen?
            </summary>
            <remarks>
            <p>
            When a config is frozen, no advice changes can be made. This is
            useful for optimization, and useful when we don't want callers
            to be able to manipulate configuration after casting to
            <see cref="T:Spring.Aop.Framework.IAdvised"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.TargetSource">
            <summary>
            Returns the <see cref="T:Spring.Aop.ITargetSource"/> used by this
            <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.ITargetSource"/> used by this
            <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.IAdvised.IsSerializable">
            <summary>
            Returns a boolean specifying if this <see cref="T:Spring.Aop.Framework.IAdvised"/>
            instance can be serialized.
            </summary>
            <value>
            <c>true</c> if this instance can be serialized, <c>false</c> otherwise.
            </value>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.UseDynamicReflection">
            <summary>
            Should we use dynamic reflection for method invocation ?
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.EmptyList">
            <summary>
            Optimization fields
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.m_advised">
            <summary>
            IAdvised delegate
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.m_introductions">
            <summary>
            Array of introduction delegates
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.m_targetSource">
            <summary>
            Target source 
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.m_targetType">
            <summary>
            Type of target object.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.#cctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.#ctor(Spring.Aop.Framework.IAdvised)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> class.
            </summary>
            <param name="advised">The proxy configuration.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.#ctor(Spring.Aop.Framework.IAdvised,Spring.Aop.Framework.IAopProxy)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> class.
            </summary>
            <param name="advised">The proxy configuration.</param>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this instance.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.Initialize(Spring.Aop.Framework.IAdvised,Spring.Aop.Framework.IAopProxy)">
            <summary>
            Initialization method.
            </summary>
            <param name="advised">The proxy configuration.</param>
            <param name="proxy">
            The current <see cref="T:Spring.Aop.Framework.IAopProxy"/> implementation.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.Invoke(System.Object,System.Object,System.Type,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object[],System.Collections.IList)">
            <summary>
            Invokes intercepted methods using reflection
            </summary>
            <param name="proxy">proxy object</param>
            <param name="target">target object to invoke method on</param>
            <param name="targetType">target type</param>
            <param name="targetMethod">taget method to invoke</param>
            <param name="proxyMethod">The method to invoke on proxy.</param>
            <param name="args">method arguments</param>
            <param name="interceptors">interceptor chain</param>
            <returns>value returned by invocation chain</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.GetInterceptors(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Returns a list of method interceptors
            </summary>
            <param name="targetType">target type</param>
            <param name="method">target method</param>
            <returns>list of inteceptors for the specified method</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.AddAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the end (or tail)
            of the advice (interceptor) chain.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the supplied
            <paramref name="position"/> in the advice (interceptor) chain.
            </summary>
            <param name="position">
            The zero (0) indexed position (from the head) at which the
            supplied <paramref name="advice"/> is to be inserted into the
            advice (interceptor) chain.
            </param>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="P:Spring.Aop.Framework.DynamicProxy.AdvisedProxy.TargetType">
            <summary>
            Gets the target type behind the implementing object.
            Ttypically a proxy configuration or an actual proxy.
            </summary>
            <value>The type of the target or null if not known.</value>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.BaseAopProxyMethodBuilder">
            <summary>
            <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation 
            that delegates method calls to the base method.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseAopProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="aopProxyGenerator">
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="targetMethods">
            The dictionary to cache the list of target 
            <see cref="T:System.Reflection.MethodInfo"/>s.
            </param>
            <param name="onProxyTargetMethods">
            The dictionary to cache the list of target  
            <see cref="T:System.Reflection.MethodInfo"/>s defined on the proxy.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseAopProxyMethodBuilder.GenerateOnProxyTargetMethodCacheField(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Create static field that will cache target method when defined on the proxy.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The target method.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseAopProxyMethodBuilder.CallDirectProxiedMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Calls target method directly.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy">
            <summary>
            Base class that each dynamic composition proxy has to extend.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Aop.Framework.IAopProxy">
            <summary>
            The central interface for Spring.NET based AOP proxies. 
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.IAopProxy.GetProxy">
            <summary>
            Creates a new proxy object.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.#ctor(Spring.Aop.Framework.IAdvised)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy"/> class.
            </summary>
            <param name="advised">The proxy configuration.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.Spring#Aop#Framework#IAopProxy#GetProxy">
            <summary>
            Returns this proxy instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.Equals(System.Object)">
            <summary>
            Delegate to target object handling of equals method.
            </summary>
            <param name="obj">The object to compare with the current target object</param>
            <returns>true if the specified Object is equal to the current target object; otherwise, false</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.GetHashCode">
            <summary>
            Delgate to the target object generation of the hash code.
            </summary>
            <returns>A hash code for the target object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.BaseCompositionAopProxy.ToString">
            <summary>
            Returns a String the represents the target object.
            </summary>
            <returns>A String that represents the target object</returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory">
            <summary>
            Implementation of the <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/> 
            interface that caches the AOP proxy <see cref="T:System.Type"/> instance.
            </summary>
            <remarks>
            <p>
            Caches against a key based on :
            - the base type
            - the target type
            - the interfaces to proxy
            </p>
            </remarks>
            <author>Bruno Baia</author>
            <author>Erich Eichinger</author>
            <seealso cref="T:Spring.Aop.Framework.DynamicProxy.DefaultAopProxyFactory"/>
            <seealso cref="T:Spring.Aop.Framework.IAopProxyFactory"/>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.DefaultAopProxyFactory">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Aop.Framework.IAopProxyFactory"/> interface,
            either creating a decorator-based dynamic proxy or 
            a composition-based dynamic proxy.
            </summary>
            <remarks>
            <p>
            Creates a decorator-base proxy if one the following is true :
            - the "ProxyTargetType" property is set
            - no interfaces have been specified
            </p>
            <p>
            In general, specify "ProxyTargetType" to enforce a decorator-based proxy,
            or specify one or more interfaces to use a composition-based proxy.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Bruno Baia (.NET)</author>
            <author>Erich Eichinger (.NET)</author>
            <seealso cref="T:Spring.Aop.Framework.IAopProxyFactory"/>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DefaultAopProxyFactory.#cctor">
            <summary>
            Force transient assemblies to be resolvable by <see cref="M:System.Reflection.Assembly.Load(System.String)"/>.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DefaultAopProxyFactory.DoCreateAopProxyInstance(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Creates an actual proxy instance based on the supplied <paramref name="advisedSupport"/>
            </summary>
            <param name="advisedSupport"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DefaultAopProxyFactory.BuildProxyType(Spring.Proxy.IProxyTypeBuilder)">
            <summary>
            Generates the proxy type.
            </summary>
            <param name="typeBuilder">
            The <see cref="T:Spring.Proxy.IProxyTypeBuilder"/> to use
            </param>
            <returns>The generated proxy class.</returns>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory.logger">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory.ClearCache">
            <summary>
            Clears the type cache
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory.BuildProxyType(Spring.Proxy.IProxyTypeBuilder)">
            <summary>
            Generates the proxy type and caches the <see cref="T:System.Type"/>
            instance against the base type and the interfaces to proxy.
            </summary>
            <param name="typeBuilder">
            The <see cref="T:Spring.Proxy.IProxyTypeBuilder"/> to use
            </param>
            <returns>The generated or cached proxy class.</returns>
        </member>
        <member name="P:Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory.CountCachedTypes">
            <summary>
            Returns the number of proxy types in the cache
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory.ProxyTypeCacheKey">
            <summary>
            Uniquely identifies a proxytype in the cache
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder">
            <summary>
            Builds an AOP proxy type using composition.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder.#ctor(Spring.Aop.Framework.IAdvised)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder"/> class.
            </summary>
            <param name="advised">The proxy configuration.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates the proxy type.
            </summary>
            <returns>The generated proxy type.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder.PushAdvisedProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes  
            the current <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> 
            instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder.ImplementSerializationConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements serialization constructor.
            </summary>
            <param name="typeBuilder">Type builder to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements constructors for the proxy class.
            </summary>
            <remarks>
            <p>
            This implementation calls the base constructor.
            </p>
            </remarks>
            <param name="typeBuilder">
            The <see cref="T:System.Type"/> builder to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder.IsCompositionProxy(System.Type)">
            <summary>
            Determines if the specified <paramref name="type"/> 
            is one of those generated by this builder.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <see langword="true"/> if the type is a composition-based proxy;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder">
            <summary>
            Builds an AOP proxy type using the decorator pattern.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.advisedProxyField">
            <summary>
            AdvisedProxy instance calls should be delegated to.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.#ctor(Spring.Aop.Framework.IAdvised)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder"/> class.
            </summary>
            <param name="advised">The proxy configuration.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates the proxy type.
            </summary>
            <returns>The generated proxy class.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.PushAdvisedProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes  
            the current <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> 
            instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.DeclareAdvisedProxyInstanceField(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Declares field that holds the <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/>
            instance used by the proxy.
            </summary>
            <param name="builder">
            The <see cref="T:System.Type"/> builder to use for code generation.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.ImplementGetObjectDataMethod(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements serialization method.
            </summary>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.ImplementSerializationConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements serialization constructor.
            </summary>
            <param name="typeBuilder">Type builder to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements constructors for the proxy class.
            </summary>
            <remarks>
            <p>
            This implementation creates a new instance 
            of the <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> class.
            </p>
            </remarks>
            <param name="typeBuilder">
            The <see cref="T:System.Type"/> builder to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.ImplementIAopProxy(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements <see cref="T:Spring.Aop.Framework.IAopProxy"/> interface.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.DecoratorAopProxyTypeBuilder.IsDecoratorProxy(System.Type)">
            <summary>
            Determines if the specified <paramref name="type"/> 
            is one of those generated by this builder.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <see langword="true"/> if the type is a decorator-based proxy;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.IAdvisedProxyMethodBuilder">
            <summary>
            <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation that delegates 
            method calls to an <see cref="T:Spring.Aop.Framework.IAdvised"/> instance.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.IAdvisedProxyMethodBuilder._aopProxyGenerator">
            <summary>
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IAdvisedProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="aopProxyGenerator">
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IAdvisedProxyMethodBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder">
            <summary>
            Builds an AOP proxy type using inheritance.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.advisedProxyField">
            <summary>
            AdvisedProxy instance calls should be delegated to.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.#ctor(Spring.Aop.Framework.IAdvised)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder"/> class.
            </summary>
            <param name="advised">The proxy configuration.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates the proxy type.
            </summary>
            <returns>The generated proxy class.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.PushAdvisedProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes  
            the current <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/> 
            instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.DeclareAdvisedProxyInstanceField(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Declares field that holds the <see cref="T:Spring.Aop.Framework.DynamicProxy.AdvisedProxy"/>
            instance used by the proxy.
            </summary>
            <param name="builder">
            The <see cref="T:System.Type"/> builder to use for code generation.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.ImplementGetObjectDataMethod(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements serialization method.
            </summary>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.ImplementSerializationConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements serialization constructor.
            </summary>
            <param name="typeBuilder">Type builder to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.DefineConstructorParameters(System.Reflection.ConstructorInfo)">
            <summary>
            Defines the types of the parameters for the specified constructor.
            </summary>
            <param name="constructor">The constructor to use.</param>
            <returns>The types for constructor's parameters.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.GenerateConstructor(System.Reflection.Emit.ConstructorBuilder,System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Generates the proxy constructor.
            </summary>
            <remarks>
            <p>
            This implementation creates instance of the AdvisedProxy object.
            </p>
            </remarks>
            <param name="builder">The constructor builder to use.</param>
            <param name="il">The IL generator to use.</param>
            <param name="constructor">The constructor to delegate the creation to.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.ImplementIAopProxy(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements <see cref="T:Spring.Aop.Framework.IAopProxy"/> interface.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.IsInheritanceProxy(System.Type)">
            <summary>
            Determines if the specified <paramref name="type"/> 
            is one of those generated by this builder.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <see langword="true"/> if the type is a inheritance-based proxy;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTypeBuilder.ProxyDeclaredMembersOnly">
            <summary>
            Gets or sets a value indicating whether inherited members should be proxied.
            </summary>
            <value>
            <see langword="true"/> if inherited members should be proxied; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder">
            <summary>
            <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation 
            that delegates method calls to introduction object.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.index">
            <summary>
            The index of the introduction to delegate call to.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator,System.Collections.IDictionary,System.Int32)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="aopProxyGenerator">
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="targetMethods">
            
            </param>
            <param name="index">index of the introduction to delegate call to</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.PushTargetType(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the introduction type on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the introduction instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.IntroductionProxyMethodBuilder.CallDirectProxiedMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Calls proxied method directly.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicProxy.TargetAopProxyMethodBuilder">
            <summary>
            <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation 
            that delegates method calls to target object.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicProxy.TargetAopProxyMethodBuilder.target">
            <summary>
            The local variable to store the target instance.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetAopProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="aopProxyGenerator">
            The <see cref="T:Spring.Aop.Framework.DynamicProxy.IAopProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="explicitImplementation">
            <see langword="true"/> if the interface is to be
            implemented explicitly; otherwise <see langword="false"/>.
            </param>
            <param name="targetMethods">
            The dictionary to cache the list of target 
            <see cref="T:System.Reflection.MethodInfo"/>s.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetAopProxyMethodBuilder.DeclareLocals(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Creates local variable declarations.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetAopProxyMethodBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetAopProxyMethodBuilder.GenerateMethodLogic(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Generates method logic.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicProxy.TargetAopProxyMethodBuilder.CallDirectProxiedMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Calls proxied method directly.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.AbstractMethodInvocation">
            <summary>
            Convenience base class for <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>
            implementations.
            </summary>
            <remarks>
            <p>
            Subclasses can override the
            <see cref="M:Spring.Aop.Framework.AbstractMethodInvocation.InvokeJoinpoint"/>
            method to change this behavior, so this is a useful/ base class for
            <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> implementations.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:AopAlliance.Intercept.IMethodInvocation">
            <summary>
            Description of an invocation to a method, given to an interceptor
            upon method-call.
            </summary>
            <remarks>
            <p>
            A method invocation is a joinpoint and can be intercepted by a method
            interceptor.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
        </member>
        <member name="T:AopAlliance.Intercept.IInvocation">
            <summary>
            Represents an invocation in the program.
            </summary>
            <remarks>
            <p>
            An invocation is a joinpoint and can be intercepted by an interceptor.
            Typical examples would be a constructor invocation and a method call.
            </p>
            </remarks>
        </member>
        <member name="T:AopAlliance.Intercept.IJoinpoint">
            <summary>
            Represents a generic runtime joinpoint (in the AOP terminology).
            </summary>
            <remarks>
            <p>
            A runtime joinpoint is an <i>event</i> that occurs on a static
            joinpoint (i.e. a location in a program). For instance, an
            invocation is the runtime joinpoint on a method (static joinpoint).
            The static part of a given joinpoint can be generically retrieved
            using the <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/>
            property.
            </p>
            <p>
            In the context of an interception framework, a runtime joinpoint
            is then the reification of an access to an accessible object (a
            method, a constructor, a field), i.e. the static part of the
            joinpoint. It is passed to the interceptors that are installed on
            the static joinpoint.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IInterceptor"/>
        </member>
        <member name="M:AopAlliance.Intercept.IJoinpoint.Proceed">
            <summary>
            Proceeds to the next interceptor in the chain.
            </summary>
            <remarks>
            <p>
            The implementation and semantics of this method depend on the
            actual joinpoint type. Consult the derived interfaces of this
            interface for specifics.
            </p>
            </remarks>
            <returns>
            Consult the derived interfaces of this interface for specifics.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors at the joinpoint throws an exception.
            </exception>
        </member>
        <member name="P:AopAlliance.Intercept.IJoinpoint.StaticPart">
            <summary>
            Gets the static part of this joinpoint.
            </summary>
            <remarks>
            <p>
            The static part is an accessible object on which a chain of
            interceptors are installed.
            </p>
            </remarks>
            <value>
            The static part of this joinpoint.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IJoinpoint.This">
            <summary>
            Gets the object that holds the current joinpoint's static part.
            </summary>
            <remarks>
            <p>
            For instance, the target object for a method invocation.
            </p>
            </remarks>
            <value>
            The object that holds the current joinpoint's static part.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IInvocation.Arguments">
            <summary>
            Gets the arguments to an invocation.
            </summary>
            <remarks>
            <p>
            It is of course possible to change element values within this array
            to change the arguments to an intercepted invocation.
            </p>
            </remarks>
            <value>
            The arguments to an invocation.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IMethodInvocation.Method">
            <summary>
            Gets the method invocation that is to be invoked.
            </summary>
            <remarks>
            <p>
            This property is a friendly implementation of the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property.
            It should be used in preference to the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property
            because it provides immediate access to the underlying method
            without the need to resort to a cast.
            </p>
            </remarks>
            <value>
            The method invocation that is to be invoked.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IMethodInvocation.Proxy">
            <summary>
            Gets the proxy object for the invocation.
            </summary>
            <value>
            The proxy object for this method invocation.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IMethodInvocation.Target">
            <summary>
            Gets the target object for the invocation.
            </summary>
            <value>
            The target object for this method invocation.
            </value>
        </member>
        <member name="P:AopAlliance.Intercept.IMethodInvocation.TargetType">
            <summary>
            Gets the type of the target object.
            </summary>
            <value>
            The type of the target object.
            </value>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.arguments">
            <summary>
            The arguments (if any = may be <see lang="null"/>) to the method
            that is to be invoked.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.target">
            <summary>
            The target object that the method is to be invoked on.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.proxy">
            <summary>
            The AOP proxy for the target object.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.method">
            <summary>
            The method invocation that is to be invoked.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.interceptors">
            <summary>
            The list of <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> and
            <cref see="Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            that need dynamic checks.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.targetType">
            <summary>
            The declaring type of the method that is to be invoked.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AbstractMethodInvocation.currentInterceptorIndex">
            <summary>
            The index from 0 of the current interceptor we're invoking.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.#ctor(System.Object,System.Object,System.Reflection.MethodInfo,System.Object[],System.Type,System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AbstractMethodInvocation"/> class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such exposes no publicly visible
            constructors.
            </p>
            <p>
            <note type="implementnotes">
            The <paramref name="interceptors"/>	list can also contain any
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>s
            that need evaluation at runtime.
            <see cref="T:Spring.Aop.IMethodMatcher"/>s included in an
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            must already have been found to have matched as far as was possible
            <b>statically</b>. Passing an array might be about 10% faster, but
            would complicate the code, and it would work only for static
            pointcuts.
            </note>
            </p>
            </remarks>
            <param name="proxy">The AOP proxy.</param>
            <param name="target">The target object.</param>
            <param name="method">the target method.</param>
            <param name="arguments">The target method's arguments.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.</param>
            <param name="interceptors">
            The list of interceptors that are to be applied. May be
            <cref lang="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="target"/> is <see lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.Proceed">
            <summary>
            Proceeds to the next interceptor in the chain.
            </summary>
            <returns>
            The return value of the method invocation.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors at the joinpoint throws an exception.
            </exception>
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.PrepareMethodInvocationForProceed(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Retrieves a new <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> instance 
            for the next Proceed method call.
            </summary>
            <param name="invocation">
            The current <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> instance.
            </param>
            <returns>
            The new <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> instance to use.
            </returns>
            <see cref="M:Spring.Aop.Framework.ReflectiveMethodInvocation.PrepareMethodInvocationForProceed(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.AssertJoinpoint">
            <summary>
            Performs sanity checks, whether the actual joinpoint may be invoked
            </summary>
            <remarks>
            By default checks that the underlying target is not null and the called method is implemented
            by the target's type.
            </remarks>
            <exception cref="T:System.ArgumentNullException">if <see cref="F:Spring.Aop.Framework.AbstractMethodInvocation.target"/> is <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">if the <see cref="F:Spring.Aop.Framework.AbstractMethodInvocation.target"/> 's type does not implement <see cref="F:Spring.Aop.Framework.AbstractMethodInvocation.method"/>.</exception>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.InvokeJoinpoint">
            <summary>
            Invokes the joinpoint.
            </summary>
            <remarks>
            <p>
            Subclasses can override this to use custom invocation.
            </p>
            </remarks>
            <returns>
            The return value of the invocation of the joinpoint.
            </returns>
            <exception cref="T:System.Exception">
            If invoking the joinpoint resulted in an exception.
            </exception>
            <see cref="M:Spring.Aop.Framework.ReflectiveMethodInvocation.InvokeJoinpoint"/>
        </member>
        <member name="M:Spring.Aop.Framework.AbstractMethodInvocation.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            invocation.
            </summary>
            <remarks>
            <p>
            <note type="implementnotes">
            Does <b>not</b> invoke <see cref="M:System.Object.ToString"/> on the 
            <see cref="P:Spring.Aop.Framework.AbstractMethodInvocation.This"/> target
            object, as that too may be proxied. 
            </note>
            </p>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents the current invocation.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Method">
            <summary>
            Gets the method invocation that is to be invoked.
            </summary>
            <remarks>
            <p>
            May or may not correspond with a method invoked on an underlying
            implementation of that interface.
            </p>
            </remarks>
            <see cref="P:AopAlliance.Intercept.IMethodInvocation.Method"/>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.StaticPart">
            <summary>
            Gets the static part of this joinpoint.
            </summary>
            <value>
            The proxied member's information.
            </value>
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Proxy">
            <summary>
            Gets the proxy that this interception was made through.
            </summary>
            <value>
            The proxy that this interception was made through.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Target">
            <summary>
            Gets the target object for the invocation.
            </summary>
            <value>
            The target object for this method invocation.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.TargetType">
            <summary>
            Gets the type of the target object.
            </summary>
            <value>
            The type of the target object.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Arguments">
            <summary>
            Gets and sets the arguments (if any - may be <cref lang="null"/>)
            to the method that is to be invoked.
            </summary>
            <value>
            The arguments (if any - may be <cref lang="null"/>) to the
            method that is to be invoked.
            </value>
            <see cref="P:AopAlliance.Intercept.IInvocation.Arguments"/>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.Interceptors">
            <summary>
            The list of method interceptors.
            </summary>
            <remarks>
            <p>
            May be <see lang="null"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.This">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AbstractMethodInvocation.CurrentInterceptorIndex">
            <summary>
            The index from 0 of the current interceptor we're invoking.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AdvisedSupport">
            <summary>
            Superclass for AOP proxy configuration managers.
            </summary>
            <remarks>
            <p>
            Instances of this class are not themselves AOP proxies, but
            subclasses of this class are normally factories from which AOP proxy
            instances are obtained directly.
            </p>
            <p>
            This class frees subclasses of the housekeeping of
            <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.IAdvisor"/> instances, but doesn't actually
            implement proxy creation methods, the functionality for which
            is provided by subclasses.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.Framework.IAopProxy"/>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport._advisors">
            <summary>The list of advice.</summary>
            <remarks>
            <p>
            If an <see cref="T:AopAlliance.Intercept.IInterceptor"/> is added, it
            will be wrapped in an advice before being added to this list. 
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport._advisorsArray">
            <summary> 
            Array updated on changes to the advisors list, which is easier to
            manipulate internally
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport._introductions">
            <summary> 
            List of introductions. 
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.interfaceMap">
            <summary>
            Interface map specifying which object should interface methods be
            delegated to.
            </summary>
            <remarks>
            <p>
            If entry value is <cref lang="null"/> methods should be delegated
            to the target object.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.m_targetSource">
            <summary>
            The <see cref="T:Spring.Aop.ITargetSource"/> for this instance.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.isActive">
            <summary>
            Set to <see langword="true"/> when the first AOP proxy has been
            created, meaning that we must track advice changes via the
            OnAdviceChange() callback.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.listeners">
            <summary>
            The list of <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> event listeners.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.advisorChainFactory">
            <summary>
            The advisor chain factory.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.AdvisedSupport.autoDetectInterfaces">
            <summary>
            If no explicit interfaces are specified, interfaces will be automatically determined 
            from the target type
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> class using the
            default advisor chain factory.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.#ctor(System.Type[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> class.
            </summary>
            <param name="interfaces">The interfaces that are to be proxied.</param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this 
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class that proxys all of the interfaces exposed by the supplied
            <paramref name="target"/>.
            </summary>
            <param name="target">The object to proxy.</param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the <paramref name="target"/> is <cref lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.#ctor(Spring.Aop.ITargetSource)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class that proxys all of the interfaces exposed by the supplied
            <paramref name="targetSource"/>'s target.
            </summary>
            <param name="targetSource">The <see cref="T:Spring.Aop.ITargetSource"/> providing access to the object to proxy.</param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the <paramref name="targetSource"/> is <cref lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.SetInterfacesInternal(System.Collections.Generic.IList{System.Type})">
            <summary>
            Set interfaces to be proxied, bypassing locking and <see cref="P:Spring.Aop.Framework.ProxyConfig.IsFrozen"/>
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IsInterfaceProxied(System.Type)">
            <summary>
            Is the supplied <paramref name="intf"/> (interface)
            <see cref="T:System.Type"/> proxied?
            </summary>
            <param name="intf">
            The interface <see cref="T:System.Type"/> to test.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="intf"/>
            (interface) <see cref="T:System.Type"/> is proxied;
            <see langword="false"/> if not or the supplied
            <paramref name="intf"/> is <cref lang="null"/>.
            </returns>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.IsInterfaceProxied(System.Type)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the end (or tail)
            of the advice (interceptor) chain.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvice(System.Int32,AopAlliance.Aop.IAdvice)">
            <summary>
            Adds the supplied <paramref name="advice"/> to the supplied
            <paramref name="position"/> in the advice (interceptor) chain.
            </summary>
            <param name="position">
            The zero (0) indexed position (from the head) at which the
            supplied <paramref name="advice"/> is to be inserted into the
            advice (interceptor) chain.
            </param>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to be added.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="advice"/> is <cref lang="null"/>;
            or is not an <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            reference; or if the supplied <paramref name="advice"/> is a
            <see cref="T:Spring.Aop.IIntroductionInterceptor"/>.
            </exception>
            <seealso cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            <seealso cref="M:Spring.Aop.Framework.IAdvised.AddAdvice(AopAlliance.Aop.IAdvice)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOf(Spring.Aop.IAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IAdvisor"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an advisor for this
            proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOf(Spring.Aop.IIntroductionAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> in the introductions
            for this proxy.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an introduction advisor
            for this proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Removes the supplied <paramref name="advisor"/> the list of advisors
            for this proxy.
            </summary>
            <param name="advisor">The advisor to remove.</param>
            <returns>
            <see langword="true"/> if advisor was found in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> for this
            proxy and was successfully removed; <see langword="false"/> if not
            or if the supplied <paramref name="advisor"/> is <cref lang="null"/>.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveAdvisor(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IAdvisor"/> at the supplied
            <paramref name="index"/> in the
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> list
            from the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> for this proxy.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IAdvisor"/> to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IAdvisor"/> at the supplied <paramref name="index"/>
            cannot be removed; or if the supplied <paramref name="index"/> is out of
            range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveAdvice(AopAlliance.Aop.IAdvice)">
            <summary>
            Removes the supplied <paramref name="advice"/> from the list
            of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:AopAlliance.Aop.IAdvice"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Removes the supplied <paramref name="introduction"/> from the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>.
            </summary>
            <param name="introduction">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="introduction"/> was
            found in the list of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            and successfully removed.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> cannot be removed.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveIntroduction(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/> for this proxy.
            </summary>
            <param name="index">The index of the advisor to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> at the supplied
            <paramref name="index"/> cannot be removed; or if the supplied
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvisor(System.Int32,Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>
            list at which the supplied <paramref name="advisor"/>
            is to be inserted. If -1, appends to the end of the list.
            </param>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvisor(Spring.Aop.IAdvisor)">
            <summary>
            Adds the supplied <paramref name="advisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddAdvisors(Spring.Aop.IAdvisors)">
            <summary>
            Adds the advisors from the supplied <paramref name="advisors"/> 
            to the list of <see cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>.
            </summary>
            <param name="advisors">
            The <see cref="T:Spring.Aop.IAdvisors"/> to add advisors from.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="advisors"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>.
            </summary>
            <param name="index">
            The index in the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            list at which the supplied <paramref name="introductionAdvisor"/>
            is to be inserted.
            </param>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddIntroduction(Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Adds the supplied <paramref name="introductionAdvisor"/> to the list
            of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>.
            </summary>
            <param name="introductionAdvisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to add.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="introductionAdvisor"/> cannot be added.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ReplaceIntroduction(System.Int32,Spring.Aop.IIntroductionAdvisor)">
            <summary>
            Replaces the <see cref="T:Spring.Aop.IIntroductionAdvisor"/> that
            exists at the supplied <paramref name="index"/> in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            with the supplied <paramref name="introduction"/>.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            in the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>
            that is to be replaced.
            </param>
            <param name="introduction">
            The new (replacement) <see cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ReplaceAdvisor(Spring.Aop.IAdvisor,Spring.Aop.IAdvisor)">
            <summary> 
            Replaces the <paramref name="oldAdvisor"/> with the
            <paramref name="newAdvisor"/>.
            </summary>
            <param name="oldAdvisor">
            The original (old) advisor to be replaced.
            </param>
            <param name="newAdvisor">
            The new advisor to replace the <paramref name="oldAdvisor"/> with.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="oldAdvisor"/> was
            replaced; if the <paramref name="oldAdvisor"/> was not found in the
            advisors collection (or the <paramref name="newAdvisor"/> is
            <see lang="null"/>, this method returns <see langword="false"/>
            and (effectively) does nothing.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <paramref name="oldAdvisor"/> cannot be replaced.
            </exception>
            <seealso cref="P:Spring.Aop.Framework.ProxyConfig.IsFrozen"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ToProxyConfigString">
            <summary>
            As <see cref="M:System.Object.ToString"/> will normally be passed straight through
            to the advised target, this method returns the <see cref="M:System.Object.ToString"/>
            equivalent for the AOP proxy itself.
            </summary>
            <remarks>To override this format, override <see cref="M:Spring.Aop.Framework.AdvisedSupport.ToProxyConfigStringInternal"/></remarks>
            <returns>
            A <see cref="T:System.String"/> description of the proxy configuration.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ToProxyConfigStringInternal">
            <summary>
            Returns textual information about this configuration object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddListener(Spring.Aop.Framework.IAdvisedSupportListener)">
            <summary>
            Registers the supplied <paramref name="listener"/> as a listener for
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> notifications.
            </summary>
            <param name="listener">
            The <see cref="T:Spring.Aop.Framework.IAdvisedSupportListener"/> to
            register.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveListener(Spring.Aop.Framework.IAdvisedSupportListener)">
            <summary>
            Removes the supplied <paramref name="listener"/>.
            </summary>
            <param name="listener">
            The <see cref="T:Spring.Aop.Framework.IAdvisedSupportListener"/> to
            be removed.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddInterface(System.Type)">
            <summary>
            Adds a new interface to the list of interfaces that are proxied by this proxy.
            </summary>
            <param name="intf">
            The interface to be proxied by this proxy.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen
            (<see cref="P:Spring.Aop.Framework.ProxyConfig.IsFrozen"/>);
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="intf"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AddInterfaceInternal(System.Type)">
            <summary>
            Adds a new interface to the list of interfaces that are proxied by this proxy.
            </summary>
            <param name="intf">
            The interface to be proxied by this proxy.
            </param>
            <remarks>
            Access is not synchronized.
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveInterface(System.Type)">
            <summary>
            Removes the supplied (proxied) <paramref name="intf"/>.
            </summary>
            <remarks>
            <p>
            Does nothing if the supplied (proxied) <paramref name="intf"/>
            isn't proxied.
            </p>
            </remarks>
            <param name="intf">The interface to remove.</param>
            <returns>
            <see langword="true"/> if the interface was removed.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOf(AopAlliance.Aop.IAdvice)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:AopAlliance.Aop.IAdvice"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <remarks>
            <p>
            The return value of this method can be used to index into
            the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>
            list.
            </p>
            </remarks>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this interceptor, or -1 if the
            supplied <paramref name="advice"/> is not an advice for this
            proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOfInternal(AopAlliance.Aop.IAdvice)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:AopAlliance.Aop.IAdvice"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <remarks>
            <p>Acces is not synchronized</p>
            <p>
            The return value of this method can be used to index into
            the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/>
            list.
            </p>
            </remarks>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this interceptor, or -1 if the
            supplied <paramref name="advice"/> is not an advice for this
            proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOfInternal(Spring.Aop.IAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IAdvisor"/> in the interceptor
            (advice) chain for this proxy.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an advisor for this
            proxy.
            </returns>
            <remarks>
            Access is not synchronized.
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.IndexOfInternal(Spring.Aop.IIntroductionAdvisor)">
            <summary> 
            Return the index (0 based) of the supplied
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> in the introductions
            for this proxy.
            </summary>
            <param name="advisor">
            The <see cref="T:Spring.Aop.IIntroductionAdvisor"/> to search for.
            </param>
            <returns>
            The zero (0) based index of this advisor, or -1 if the
            supplied <paramref name="advisor"/> is not an introduction advisor
            for this proxy.
            </returns>
            <remarks>
            Access is not synchronized
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.RemoveAdvisorInternal(System.Int32)">
            <summary>
            Removes the <see cref="T:Spring.Aop.IAdvisor"/> at the supplied
            <paramref name="index"/> in the
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> list
            from the list of
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Advisors"/> for this proxy.
            </summary>
            <param name="index">
            The index of the <see cref="T:Spring.Aop.IAdvisor"/> to remove.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If this proxy configuration is frozen and the
            <see cref="T:Spring.Aop.IAdvisor"/> at the supplied <paramref name="index"/>
            cannot be removed; or if the supplied <paramref name="index"/> is out of
            range.
            </exception>
            <remarks>
            Does not synchronize access.
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AdviceIncluded(AopAlliance.Aop.IAdvice)">
            <summary>
            Is the supplied <paramref name="advice"/> included in any
            advisor?
            </summary>
            <param name="advice">
            The <see cref="T:AopAlliance.Aop.IAdvice"/> to check for the
            inclusion of.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="advice"/>
            could be run in an invocation (this does not imply that said
            <paramref name="advice"/> will be run).
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CountAdviceOfType(System.Type)">
            <summary>
            Returns a count of all of the <see cref="T:AopAlliance.Aop.IAdvice"/>
            type-compatible with the supplied <see cref="T:System.Type"/>.
            </summary>
            <param name="interceptorType">
            The <see cref="T:System.Type"/> of the
            <see cref="T:AopAlliance.Aop.IAdvice"/> to check.
            </param>
            <returns>
            A count of all of the <see cref="T:AopAlliance.Aop.IAdvice"/>
            type-compatible with the supplied <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.DieIfFrozen(System.String)">
            <summary>
            Throws an <see cref="T:Spring.Aop.Framework.AopConfigException"/> if
            this instances proxy configuration data is frozen.
            </summary>
            <param name="message">
            The message that will be passed through to the constructor of any
            thrown <see cref="T:Spring.Aop.Framework.AopConfigException"/>.
            </param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the configuration for this proxy is frozen.
            </exception>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.IsFrozen"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.UpdateAdvisorsArray">
            <summary>
            Bring the advisors array up to date with the list.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.InterfacesChanged">
            <summary>
            Callback method that is invoked when the list of proxied interfaces
            has changed.
            </summary>
            <remarks>
            <p>
            An example of such a change would be when a new introduction is
            added. Resetting
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.ProxyType"/> to
            <cref lang="null"/> will cause a new proxy <see cref="T:System.Type"/>
            to be generated on the next call to get a proxy.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AdviceChanged">
            <summary>
            Callback method that is invoked when the interceptor list has changed.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CreateAopProxy">
            <summary> 
            Creates an AOP proxy using this instance's configuration data.
            </summary>
            <remarks>
            <p>
            Subclasses must not create a proxy by any other means (at least
            without having a well thought out and cogent reason for doing so).
            This is because the implementation of this method performs some
            required housekeeping logic prior to creating an AOP proxy.
            </p>
            </remarks>
            <seealso cref="M:Spring.Aop.Framework.IAopProxyFactory.CreateAopProxy(Spring.Aop.Framework.AdvisedSupport)"/>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CountNonIntroductionInterfaces">
            <summary>
            Calculates the number of <see cref="P:Spring.Aop.Framework.AdvisedSupport.Interfaces"/> not delegating to one of the <see cref="P:Spring.Aop.Framework.AdvisedSupport.Introductions"/>.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CopyConfigurationFrom(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Copies the configuration from the supplied other
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> into this instance.
            </summary>
            <remarks>
            <p>
            Useful when this instance has been created using the no-argument
            constructor, and needs to get all of its confiuration data from
            another <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> (most
            usually to have an independant copy of said configuration data).
            </p>
            </remarks>
            <param name="other">
            The <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> instance
            containing the configiration data that is to be copied into this
            instance.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.CopyConfigurationFrom(Spring.Aop.Framework.AdvisedSupport,Spring.Aop.ITargetSource,System.Collections.Generic.IList{Spring.Aop.IAdvisor},System.Collections.Generic.IList{Spring.Aop.IIntroductionAdvisor})">
            <summary>
            Copies the configuration from the supplied other
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> into this instance.
            </summary>
            <remarks>
            <p>
            Useful when this instance has been created using the no-argument
            constructor, and needs to get all of its confiuration data from
            another <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> (most
            usually to have an independant copy of said configuration data).
            </p>
            </remarks>
            <param name="other">
            The <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> instance
            containing the configiration data that is to be copied into this
            instance.
            </param>
            <param name="targetSource">the new target source</param>
            <param name="advisors">the advisors for the chain</param>
            <param name="introductions">the introductions for the chain</param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.Framework.ProxyConfig"/> configuration.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.InterfacesToString(System.Text.StringBuilder)">
            <summary>
            Helper method that adds the names of all of the proxied interfaces
            to the buffer of the supplied <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="buffer">
            The <see cref="T:System.Text.StringBuilder"/> to append the proxied interface
            names to.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.AdvisorsToString(System.Text.StringBuilder)">
            <summary>
            Helper method that adds advisor's <see cref="M:System.Object.ToString"/>
            to the buffer of the supplied <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="buffer">
            The <see cref="T:System.Text.StringBuilder"/> to append the advisor details to.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisedSupport.GetInterfaces(System.Object)">
            <summary>
            Gets all of the interfaces implemented by the
            <see cref="T:System.Type"/> of the supplied
            <paramref name="target"/>.
            </summary>
            <param name="target">
            The object to get the interfaces of.
            </param>
            <returns>
            All of the interfaces implemented by the
            <see cref="T:System.Type"/> of the supplied
            <paramref name="target"/>.
            </returns>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.AdvisorChainFactory">
            <summary>
            Gets and sets the
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/>
            implementation that will be used to get the interceptor
            chains for the advised
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.Target"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.TargetSource">
            <summary>
            Returns the current <see cref="T:Spring.Aop.ITargetSource"/> used
            by this <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </summary>
            <value>
            The <see cref="T:Spring.Aop.ITargetSource"/> used by this
            <see cref="T:Spring.Aop.Framework.IAdvised"/> object.
            </value>
            <see cref="P:Spring.Aop.Framework.IAdvised.TargetSource"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.IsSerializable">
            <summary>
            Returns a boolean specifying if this <see cref="T:Spring.Aop.Framework.IAdvised"/>
            instance can be serialized.
            </summary>
            <value>
            <c>true</c> if this instance can be serialized, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Interfaces">
            <summary>
            Returns the collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </summary>
            <value>
            The collection of interface <see cref="T:System.Type"/>s
            to be (or that are being) proxied by this proxy.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.Interfaces"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.InterfaceMap">
            <summary>
            Returns the mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </summary>
            <value>
            The mapping of the proxied interface
            <see cref="T:System.Type"/>s to their delegates.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.InterfaceMap"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Advisors">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <value>
            The collection of <see cref="T:Spring.Aop.IAdvisor"/>
            instances that have been applied to this proxy.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.Advisors"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Introductions">
            <summary>
            Returns the collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </summary>
            <remarks>
            <p>
            Will never return <cref lang="null"/>, but may return an
            empty array (in the case where no
            <see cref="T:Spring.Aop.IIntroductionAdvisor"/> instances have been
            applied to this proxy).
            </p>
            </remarks>
            <value>
            The collection of <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            instances that have been applied to this proxy.
            </value>
            <seealso cref="P:Spring.Aop.Framework.IAdvised.Introductions"/>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.TargetType">
            <summary>
            Gets the target type behind the implementing object.
            Ttypically a proxy configuration or an actual proxy.
            </summary>
            <value>The type of the target or null if not known.</value>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.AutoDetectInterfaces">
            <summary>
            If no explicit interfaces are specified, interfaces will be automatically determined 
            from the target type on proxy creation. Defaults to true
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.Target">
            <summary>
            Sets the target object that is to be advised.
            </summary>
            <remarks>
            <p>
            This is a convenience write-only property that allows client code
            to set the target object... the target object will be implicitly
            wrapped within a new
            <see cref="T:Spring.Aop.Target.SingletonTargetSource"/> instance.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.IsActive">
            <summary>
            Called by subclasses to get a value indicating whether any AOP proxies have been created yet.
            </summary>
            <value><c>true</c> if this AOp proxies have been created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.ProxyType">
            <summary>
            Specifies the <see cref="T:System.Type"/> of proxies that are to be
            created for this instance of proxy config.
            </summary>
            <remarks>
            <p>
            If this property value is <cref lang="null"/> it simply means that
            no proxies have been created yet. Only when the first proxy is
            created will this property value be set by the AOP framework.
            </p>
            <p>
            Users will be able to add interceptors dynamically without proxy
            regeneration, but if they add introductions the proxy
            <see cref="T:System.Type"/> will have to be regenerated.
            </p>
            </remarks>
            <value>
            The <see cref="T:System.Type"/> of proxies that are to be
            created for this instance of proxy config; <cref lang="null"/> if
            no proxies have been created yet.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.AdvisedSupport.ProxyConstructor">
            <summary>
            Caches proxy constructor for performance reasons.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.AdvisorChainFactoryUtils">
            <summary>
            Utility methods for use by
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/> implementations.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisorChainFactoryUtils.CalculateInterceptors(Spring.Aop.Framework.IAdvised,System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the list of
            <see langword="static"/> interceptors and dynamic interception
            advice that may apply to the supplied <paramref name="method"/>
            invocation.
            </summary>
            <param name="config">The proxy configuration.</param>
            <param name="proxy">The object proxy.</param>
            <param name="method">
            The method to evaluate interceptors for.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <returns>
            A <see cref="T:System.Collections.IList"/> of
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> (if there's
            a dynamic method matcher that needs evaluation at runtime).
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AdvisorChainFactoryUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AdvisorChainFactoryUtils"/>
            class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Framework.AopConfigException">
            <summary>
            Thrown in response to the misconfiguration of an AOP proxy.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class with
            the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class with
            the specified message and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AopConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopConfigException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.AopContext">
            <summary>
            This class contains various <see langword="static"/> methods used to
            obtain information about the current AOP invocation.
            </summary>
            <remarks>
            <p>
            The <see langword="static"/>
            <see cref="P:Spring.Aop.Framework.AopContext.CurrentProxy"/> property is
            usable if the AOP framework is configured to expose the current proxy
            (not the default)... it returns the AOP proxy in use. Target objects or
            advice can use this to make advised calls. They can also use it to find
            advice configuration.
            </p>
            <p>
            To expose the current proxy, set the <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> 
            property on the controlling proxy to <see langword="true"/>.
            The default value for the <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> property
            is <see langword="false"/>, for performance reasons.
            </p>
            <note>
            The AOP framework does not expose proxies by default, as there is a
            performance cost in doing so.
            </note>
            <p>
            The functionality in this class might be used by a target object that
            needed access to resources on the invocation. However, this approach
            should not be used when there is a reasonable alternative, as it makes
            application code dependent on usage under AOP and the Spring.NET AOP
            framework.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.AopContext.PushProxy(System.Object)">
            <summary>
            Sets the current proxy by pushing it to the proxy stack. 
            </summary>
            <remarks>
            <p>
            This method is for internal use only, and should never be called by
            client code.
            </p>
            </remarks>
            <param name="proxy">
            The proxy to put on top of the proxy stack.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.AopContext.PopProxy">
            <summary>
            Removes the current proxy from the proxy stack, making the previous
            proxy (if any) the current proxy.
            </summary>
            <remarks>
            <p>
            This method is for internal use only, and should never be called by
            client code.
            </p>
            </remarks>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the proxy stack is empty.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.AopContext.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopContext"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AopContext.ProxyStack">
            <summary>
            The AOP proxy stack associated with this thread.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.AopContext.IsActive">
            <summary>
            Indicates if the current call is executed under control of an AOP proxy.
            </summary>
            <remarks>
            <p>
            Will be <cref lang="null"/> unless the
            <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> property
            on the controlling proxy has been set to <see langword="true"/>.
            </p>
            <p>
            The default value for the 
            <see cref="P:Spring.Aop.Framework.ProxyConfig.ExposeProxy"/> property
            is <see langword="false"/>, for performance reasons.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Framework.AopContext.CurrentProxy">
            <summary>
            Gets the current AOP proxy.
            </summary>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the proxy stack is empty.
            </exception>
        </member>
        <member name="T:Spring.Aop.Framework.AopUtils">
            <summary>
            Utility methods used by the AOP framework.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsAopProxyType(System.Type)">
            <summary>
            Is the supplied <paramref name="objectType"/> an AOP proxy?
            </summary>
            <remarks>
            Return whether the given type is either a composition-based or a decorator-based proxy type.
            </remarks>
            <param name="objectType">The type to be checked.</param>
            <returns><see langword="true"/> if the supplied <paramref name="objectType"/> is an AOP proxy type.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsAopProxy(System.Object)">
            <summary>
            Is the supplied <paramref name="instance"/> an AOP proxy?
            </summary>
            <remarks>
            Return whether the given object is either 
            a composition-based proxy or a decorator-based proxy.
            </remarks>
            <param name="instance">The instance to be checked.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="instance"/> is
            an AOP proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsCompositionAopProxy(System.Object)">
            <summary>
            Is the supplied <paramref name="instance"/> a composition-based AOP proxy?
            </summary>
            <param name="instance">The instance to be checked.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="instance"/> is
            an composition-based AOP proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsCompositionAopProxyType(System.Type)">
            <summary>
            Is the supplied <paramref name="objectType"/> a composition based AOP proxy type?
            </summary>
            <remarks>
            Return whether the given type is a composition-based proxy type.
            </remarks>
            <param name="objectType">The type to be checked.</param>
            <returns><see langword="true"/> if the supplied <paramref name="objectType"/> is a composition based AOP proxy type.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsDecoratorAopProxy(System.Object)">
            <summary>
            Is the supplied <paramref name="instance"/> a decorator-based AOP proxy?
            </summary>
            <param name="instance">The instance to be checked.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="instance"/> is
            an decorator-based AOP proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsDecoratorAopProxyType(System.Type)">
            <summary>
            Is the supplied <paramref name="objectType"/> a composition based AOP proxy type?
            </summary>
            <remarks>
            Return whether the given type is a composition-based proxy type.
            </remarks>
            <param name="objectType">The type to be checked.</param>
            <returns><see langword="true"/> if the supplied <paramref name="objectType"/> is a composition based AOP proxy type.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsInheritanceAopProxy(System.Object)">
            <summary>
            Is the supplied <paramref name="instance"/> an inheritance based AOP proxy?
            </summary>
            <param name="instance">The instance to be checked.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="instance"/> is
            an inheritacne based AOP proxy.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.IsInheritanceAopProxyType(System.Type)">
            <summary>
            Is the supplied <paramref name="objectType"/> an inheritance based AOP proxy type?
            </summary>
            <param name="objectType">The type to be checked.</param>
            <returns><see langword="true"/> if the supplied <paramref name="objectType"/> is an inheritance based AOP proxy type.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.GetAllInterfaces(System.Object)">
            <summary>
            Gets all of the interfaces that the <see cref="T:System.Type"/> of the
            supplied <paramref name="instance"/> implements.
            </summary>
            <remarks>
            <p>
            This includes interfaces implemented by any superclasses.
            </p>
            </remarks>
            <param name="instance">
            The object to analyse for interfaces.
            </param>
            <returns>
            All of the interfaces that the <see cref="T:System.Type"/> of the
            supplied <paramref name="instance"/> implements; or an empty
            array if the supplied <paramref name="instance"/> is
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.GetAllInterfacesFromType(System.Type)">
            <summary>
            Gets all of the interfaces that the 
            supplied <see cref="T:System.Type"/> implements.
            </summary>
            <remarks>
            This includes interfaces implemented by any superclasses.
            </remarks>
            <param name="type">
            The type to analyse for interfaces.
            </param>
            <returns>
            All of the interfaces that the supplied <see cref="T:System.Type"/> implements.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.CanApply(Spring.Aop.IPointcut,System.Type,System.Type[])">
            <summary> 
            Can the supplied <paramref name="pointcut"/> apply at all on the
            supplied <paramref name="targetType"/>?
            </summary>
            <remarks>
            <p>
            This is an important test as it can be used to optimize out a
            pointcut for a class.
            </p>
            <p>
            Invoking this method with a <paramref name="targetType"/> that is
            an interface type will always yield a <see langword="false"/>
            return value.
            </p>
            </remarks>
            <param name="pointcut">The pointcut being tested.</param>
            <param name="targetType">The class being tested.</param>
            <param name="proxyInterfaces">
            The interfaces being proxied. If <see langword="null"/>, all
            methods on a class may be proxied.
            </param>
            <returns>
            <see langword="true"/> if the pointcut can apply on any method.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.CanApply(Spring.Aop.IPointcut,System.Type,System.Type[],System.Boolean)">
            <summary> 
            Can the supplied <paramref name="pointcut"/> apply at all on the
            supplied <paramref name="targetType"/>?
            </summary>
            <remarks>
            <p>
            This is an important test as it can be used to optimize out a
            pointcut for a class.
            </p>
            <p>
            Invoking this method with a <paramref name="targetType"/> that is
            an interface type will always yield a <see langword="false"/>
            return value.
            </p>
            </remarks>
            <param name="pointcut">The pointcut being tested.</param>
            <param name="targetType">The class being tested.</param>
            <param name="proxyInterfaces">
            The interfaces being proxied. If <see langword="null"/>, all
            methods on a class may be proxied.
            </param>
            <param name="hasIntroductions">whether or not the advisor chain for the target object includes any introductions.</param>
            <returns>
            <see langword="true"/> if the pointcut can apply on any method.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.CanApply(Spring.Aop.IAdvisor,System.Type,System.Type[])">
            <summary> 
            Can the supplied <paramref name="advisor"/> apply at all on the
            supplied <paramref name="targetType"/>?
            </summary>
            <remarks>
            <p>
            This is an important test as it can be used to optimize out an
            advisor for a class.
            </p>
            </remarks>
            <param name="advisor">The advisor to check.</param>
            <param name="targetType">The class being tested.</param>
            <param name="proxyInterfaces">
            The interfaces being proxied. If <see langword="null"/>, all
            methods on a class may be proxied.
            </param>
            <returns>
            <see langword="true"/> if the advisor can apply on any method.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.CanApply(Spring.Aop.IAdvisor,System.Type,System.Type[],System.Boolean)">
            <summary> 
            Can the supplied <paramref name="advisor"/> apply at all on the
            supplied <paramref name="targetType"/>?
            </summary>
            <remarks>
            <p>
            This is an important test as it can be used to optimize out an
            advisor for a class.
            </p>
            </remarks>
            <param name="advisor">The advisor to check.</param>
            <param name="targetType">The class being tested.</param>
            <param name="proxyInterfaces">
            The interfaces being proxied. If <see langword="null"/>, all
            methods on a class may be proxied.
            </param>
            <param name="hasIntroductions">whether or not the advisor chain for the target object includes any introductions.</param>
            <returns>
            <see langword="true"/> if the advisor can apply on any method.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.AopUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.AopUtils.GetTargetType(System.Object)">
            <summary>
            Gets the type of the target.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns></returns>
        </member>
        <member name="T:Spring.Aop.Framework.DynamicMethodInvocation">
            <summary>
            Invokes a target method using dynamic reflection.
            </summary>
            <seealso cref="T:Spring.Reflection.Dynamic.DynamicMethod"/>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Aop.Framework.DynamicMethodInvocation.proxyMethod">
            <summary>
            The method invocation that is to be invoked on the proxy.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicMethodInvocation.#ctor(System.Object,System.Object,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object[],System.Type,System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.DynamicMethodInvocation"/> class.
            </summary>
            <param name="proxy">The AOP proxy.</param>
            <param name="target">The target object.</param>
            <param name="method">The target method proxied.</param>
            <param name="proxyMethod">The method to invoke on proxy.</param>
            <param name="arguments">The target method's arguments.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.</param>
            <param name="interceptors">
            The list of interceptors that are to be applied. May be
            <cref lang="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If any of the <paramref name="target"/> or <paramref name="method"/>
            parameters is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicMethodInvocation.InvokeJoinpoint">
            <summary>
            Invokes the joinpoint using dynamic reflection.
            </summary>
            <remarks>
            <p>
            Subclasses can override this to use custom invocation.
            </p>
            </remarks>
            <returns>
            The return value of the invocation of the joinpoint.
            </returns>
            <exception cref="T:System.Exception">
            If invoking the joinpoint resulted in an exception.
            </exception>
            <see cref="M:Spring.Aop.Framework.AbstractMethodInvocation.InvokeJoinpoint"/>
        </member>
        <member name="M:Spring.Aop.Framework.DynamicMethodInvocation.PrepareMethodInvocationForProceed(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Creates a new <see cref="T:Spring.Aop.Framework.DynamicMethodInvocation"/> instance 
            from the specified <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> and  
            increments the interceptor index.
            </summary>
            <param name="invocation">
            The current <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> instance.
            </param>
            <returns>
            The new <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> instance to use.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.DynamicMethodInvocation.ProxyMethod">
            <summary>
            The method invocation that is to be invoked on the proxy.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory">
            <summary> 
            <see cref="T:Spring.Aop.Framework.IAdvisorChainFactory"/> implementation
            that caches advisor chains on a per-advised-method basis.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Framework.IAdvisorChainFactory">
            <summary>
            Factory interface for advisor chains.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Framework.IAdvisedSupportListener">
            <summary>
            Callback interface for
            <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> listeners.
            </summary>
            <remarks>
            <p>
            Allows <see cref="T:Spring.Aop.Framework.IAdvisedSupportListener"/>
            implementations to be notified of notable lifecycle events relating
            to the creation of a proxy, and changes to the configuration data of a
            proxy.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisedSupportListener.Activated(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when the first proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisedSupportListener.AdviceChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when advice is changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisedSupportListener.InterfacesChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when interfaces are changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.IAdvisorChainFactory.GetInterceptors(Spring.Aop.Framework.IAdvised,System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </summary>
            <param name="advised">The proxy configuration object.</param>
            <param name="proxy">The object proxy.</param>
            <param name="method">
            The method for which the interceptors are to be evaluated.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <returns> 
            The list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.#ctor">
            <summary>
            Default c'tor
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.GetInterceptors(Spring.Aop.Framework.IAdvised,System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </summary>
            <param name="advised">The proxy configuration object.</param>
            <param name="proxy">The object proxy.</param>
            <param name="method">
            The method for which the interceptors are to be evaluated.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <returns> 
            The list of <see cref="T:AopAlliance.Intercept.IInterceptor"/> and
            <see cref="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher"/>
            instances for the supplied <paramref name="proxy"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.Activated(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when the first proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.AdviceChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when advice is changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="M:Spring.Aop.Framework.HashtableCachingAdvisorChainFactory.InterfacesChanged(Spring.Aop.Framework.AdvisedSupport)">
            <summary>
            Invoked when interfaces are changed after a proxy is created.
            </summary>
            <param name="source">
            The relevant <see cref="T:Spring.Aop.Framework.AdvisedSupport"/> source.
            </param>
        </member>
        <member name="T:Spring.Aop.Framework.InterceptorAndDynamicMethodMatcher">
            <summary> Internal framework class.
            This class is required because if we put an interceptor that implements IInterceptionAdvice
            in the interceptor list passed to MethodInvocation, it may be mistaken for an
            advice that requires dynamic method matching.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="T:Spring.Aop.Framework.ITargetAware">
            <summary>
            Provides access to the target object of an AOP proxy.
            </summary>
            <remarks>
            <p>
            To be implemented by introduction aspects in order to obtain access to
            the target object.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="P:Spring.Aop.Framework.ITargetAware.TargetProxy">
            <summary>
            Sets the <see cref="T:Spring.Aop.Framework.IAopProxy"/> target object.
            </summary>
        </member>
        <member name="T:Spring.Aop.Framework.ProxyFactory">
            <summary>
            Factory for AOP proxies for programmatic use, rather than via a
            Spring.NET IoC container.
            </summary>
            <remarks>
            <p>
            This class provides a simple way of obtaining and configuring AOP
            proxies in code.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class that proxys all of the interfaces exposed by the supplied
            <paramref name="target"/>.
            </summary>
            <param name="target">The object to proxy.</param>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the <paramref name="target"/> is <cref lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor(System.Type[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/>
            class that has no target object, only interfaces.
            </summary>
            <remarks>
            <p>
            Interceptors must be added if this factory is to do anything useful.
            </p>
            </remarks>
            <param name="interfaces">The interfaces to implement.</param>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor(System.Type,AopAlliance.Intercept.IInterceptor)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/> class for the 
            given interface and interceptor.
            </summary>
            <remarks>Convenience method for creating a proxy for a single interceptor
            , assuming that the interceptor handles all calls itself rather than delegating
            to a target, like in the case of remoting proxies.</remarks>
            <param name="proxyInterface">The interface that the proxy should implement.</param>
            <param name="interceptor">The interceptor that the proxy should invoke.</param>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.#ctor(System.Type,Spring.Aop.ITargetSource)">
            <summary>
            Create a new instance of the <see cref="T:Spring.Aop.Framework.ProxyFactory"/> class for the specified
            <see cref="T:Spring.Aop.ITargetSource"/> making the proxy implement the specified interface.
            </summary>
            <remarks></remarks>
            <param name="proxyInterface">The interface that the proxy should implement.</param>
            <param name="targetSource">The target source that the proxy should invoek.</param>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.GetProxy">
            <summary>
            Creates a new proxy according to the settings in this factory.
            </summary>
            <remarks>
            <p>
            Can be called repeatedly; the effect of repeated invocations will
            (of course) vary if interfaces have been added or removed.
            </p>
            </remarks>
            <returns>An AOP proxy for target object.</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactory.GetProxy(System.Type,AopAlliance.Intercept.IInterceptor)">
            <summary>
            Creates a new proxy for the supplied <paramref name="proxyInterface"/>
            and <paramref name="interceptor"/>.
            </summary>
            <remarks>
            <p>
            This is a convenience method for creating a proxy for a single
            interceptor.
            </p>
            </remarks>
            <param name="proxyInterface">
            The interface that the proxy must implement.
            </param>
            <param name="interceptor">
            The interceptor that the proxy must invoke.
            </param>
            <returns>
            A new AOP proxy for the supplied <paramref name="proxyInterface"/>
            and <paramref name="interceptor"/>.
            </returns>
        </member>
        <member name="T:Spring.Aop.Framework.ProxyFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation to
            source AOP proxies from a Spring.NET IoC container (an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>).
            </summary>
            <remarks>
            <p>
            <see cref="T:AopAlliance.Intercept.IInterceptor"/>s and
            <see cref="T:Spring.Aop.IAdvisor"/>s are identified by a list of object
            names in the current container.</p>
            <p>
            Global interceptors and advisors can be added at the factory level
            (that is, outside the context of a
            <see cref="T:Spring.Aop.Framework.ProxyFactoryObject"/> definition). The
            specified interceptors and advisors are expanded in an interceptor list
            (see
            <see cref="P:Spring.Aop.Framework.ProxyFactoryObject.InterceptorNames"/>)
            where an <c>'xxx*'</c> wildcard-style entry is included in the list,
            matching the given prefix with the object names. For example,
            <c>'global*'</c> would match both <c>'globalObject1'</c> and
            <c>'globalObjectBar'</c>, and <c>'*'</c> would match all defined
            interceptors. The matching interceptors get applied according to their
            returned order value, if they implement the
            <see cref="T:Spring.Core.IOrdered"/> interface. An interceptor name list
            may not conclude with a global <c>'xxx*'</c> pattern, as global
            interceptors cannot invoke targets.
            </p>
            <p>
            It is possible to cast a proxy obtained from this factory to an
            <see cref="T:Spring.Aop.Framework.IAdvised"/> reference, or to obtain the
            <see cref="T:Spring.Aop.Framework.ProxyFactoryObject"/> reference and
            programmatically manipulate it. This won't work for existing prototype
            references, which are independent... however, it will work for prototypes
            subsequently obtained from the factory. Changes to interception will
            work immediately on singletons (including existing references).
            However, to change interfaces or the target it is necessary to obtain a
            new instance from the surrounding container. This means that singleton
            instances obtained from the factory do not have the same object
            identity... however, they do have the same interceptors and target, and
            changing any reference will change all objects.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Federico Spinazzi (.NET)</author>
            <author>Choy Rim (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="P:Spring.Aop.Framework.ProxyFactoryObject.InterceptorNames"/>
            <seealso cref="P:Spring.Aop.Framework.ProxyFactoryObject.ProxyInterfaces"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
            <seealso cref="T:Spring.Aop.IAdvisor"/>
            <seealso cref="T:Spring.Aop.Target.SingletonTargetSource"/>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.logger">
            <summary>
            The <see cref="T:Common.Logging.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.singleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.GlobalInterceptorSuffix">
            <summary>
            This suffix in a value in an interceptor list indicates to expand globals.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.singletonInstance">
            <summary>
            The cached instance if this proxy factory object is a singleton.
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.objectFactory">
            <summary>
            The owning object factory (which cannot be changed after this object is initialized).
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.advisorAdapterRegistry">
            <summary>
            The advisor adapter registry for wrapping pure advices and pointcuts according to needs
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.interceptorNames">
            <summary>
            Names of interceptors and pointcut objects in the factory.
            </summary>
            <remarks>
            <p>
            Default is for globals expansion only.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.introductionNames">
            <summary>
            Names of introductions and pointcut objects in the factory.
            </summary>
            <remarks>
            <p>
            Default is for globals expansion only.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.targetName">
            <summary>
            The name of the target object(in the enclosing
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>).
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.initialized">
            <summary>
            Indicates if the advisor chain has already been initialized
            </summary>
        </member>
        <member name="F:Spring.Aop.Framework.ProxyFactoryObject.freezeProxy">
            <summary>
            Indicate whether this config shall be frozen upon creation 
            of the first proxy instance
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.#ctor">
            <summary>
            Creates a new instance of ProxyFactoryObject
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.GetObject">
            <summary> 
            Creates an instance of the AOP proxy to be returned by this factory
            </summary>
            <remarks>
            <p>
            Invoked when clients obtain objects from this factory object. The
            (proxy) instance will be cached for a singleton, and created on each
            call to <see cref="M:Spring.Aop.Framework.ProxyFactoryObject.GetObject"/>
            for a prototype.
            </p>
            </remarks>
            <returns>
            A fresh AOP proxy reflecting the current state of this factory.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.Initialize">
            <summary>
            Initialize this proxy factory - usually called after all properties are set
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.InitializeAdvisorChain">
            <summary>Create the advisor (interceptor) chain.</summary>
            <remarks>
            The advisors that are sourced from an ObjectFactory will be refreshed each time
            a new prototype instance is added. Interceptors added programmatically through 
            the factory API are unaffected by such changes.
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AddGlobalAdvisor(Spring.Objects.Factory.IListableObjectFactory,System.String)">
            <summary> Add all global interceptors and pointcuts.</summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.InitializeIntroductionChain">
            <summary>
            Configures introductions for this proxy.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AddGlobalIntroduction(Spring.Objects.Factory.IListableObjectFactory,System.String)">
            <summary> Add all global introductions.</summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.AddIntroductionOnChainCreation(System.Object,System.String)">
            <summary>Add the introduction to the introduction list.</summary>
            <remarks>
            If specified parameter is IIntroducionAdvisor it is added directly, otherwise it is wrapped
            with DefaultIntroductionAdvisor first.
            </remarks>
            <param name="introduction">introducion to add</param>
            <param name="name">object name from which we obtained this object in our owning object factory</param>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.FreshTargetSource">
            <summary>
            Refreshes target object for prototype instances.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.FreshAdvisorChain">
            <summary> Refresh named objects from the interceptor chain.
            We need to do this every time a new prototype instance is returned,
            to return distinct instances of prototype interfaces and pointcuts.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.FreshIntroductionChain">
            <summary> Refresh named objects from the interceptor chain.
            We need to do this every time a new prototype instance is returned,
            to return distinct instances of prototype interfaces and pointcuts.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.NamedObjectToTargetSource(System.Object)">
            <summary>Wraps target with SingletonTargetSource if necessary</summary>
            <param name="target">target or target source object</param>
            <returns>target source passed or target wrapped with SingletonTargetSource</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.NamedObjectToAdvisor(System.Object)">
            <summary>Wraps introduction with IIntroductionAdvisor if necessary</summary>
            <summary>Wraps pointcut or interceptor with appropriate advisor</summary>
            <param name="next">pointcut or interceptor that needs to be wrapped with advisor</param>
            <returns>Advisor</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.NamedObjectToIntroduction(System.Object)">
            <param name="introduction">object to wrap</param>
            <returns>Introduction advisor</returns>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.InterfacesChanged">
            <summary>
            Callback method that is invoked when the list of proxied interfaces
            has changed.
            </summary>
            <remarks>
            <p>
            An example of such a change would be when a new introduction is
            added. Resetting
            <see cref="P:Spring.Aop.Framework.AdvisedSupport.ProxyType"/> to
            <cref lang="null"/> will cause a new proxy <see cref="T:System.Type"/>
            to be generated on the next call to get a proxy.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.ToProxyConfigStringInternal">
            <summary>
            Returns textual information about this configuration object
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ProxyFactoryObject.CheckInterceptorNames">
            <summary>
            Check the interceptorNames list whether it contains a target name as final element.
            If found, remove the final name from the list and set it as targetName.
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.FreezeProxy">
            <summary>
            Indicate whether this config shall be frozen upon creation 
            of the first proxy instance
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.IsFrozen">
            <summary>
            If set true, any attempt to modify this proxy configuration will raise an exception
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.AdvisorAdapterRegistry">
            <summary>
            Specify the AdvisorAdapterRegistry to use. Default is the <see cref="P:Spring.Aop.Framework.Adapter.GlobalAdvisorAdapterRegistry.Instance"/>
            </summary>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.ProxyInterfaces">
            <summary>
            Sets the names of the interfaces that are to be implemented by the proxy.
            </summary>
            <value>
            The names of the interfaces that are to be implemented by the proxy.
            </value>
            <exception cref="T:Spring.Aop.Framework.AopConfigException">
            If the supplied value (or any of its elements) is <see langword="null"/>;
            or if any of the element values is not the (assembly qualified) name of
            an interface type.
            </exception>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.TargetName">
            <summary>
            Sets the name of the target object being proxied.
            </summary>
            <remarks>
            <p>
            Only works when the
            <see cref="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectFactory"/>
            property is set; it is a logic error on the part of the programmer
            if this value is set and the accompanying
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> is not also set.
            </p>
            </remarks>
            <value>
            The name of the target object being proxied.
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.InterceptorNames">
            <summary> 
            Sets the list of <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> and
            <see cref="T:Spring.Aop.IAdvisor"/> object names.
            </summary>
            <remarks>
            <p>
            This property must always be set (configured) when using a
            <see cref="T:Spring.Aop.Framework.ProxyFactoryObject"/> in an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> context.
            </p>
            </remarks>
            <value>
            The list of <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> and
            <see cref="T:Spring.Aop.IAdvisor"/> object names.
            </value>
            <seealso cref="T:AopAlliance.Intercept.IInterceptor"/>
            <seealso cref="T:Spring.Aop.IAdvisor"/>
            <seealso cref="T:Spring.Objects.Factory.IObjectFactory"/>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.IntroductionNames">
            <summary> 
            Sets the list of introduction object names. 
            </summary>
            <remarks>
            <p>
            Only works when the
            <see cref="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectFactory"/>
            property is set; it is a logic error on the part of the programmer
            if this value is set and the accompanying
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> is not supplied.
            </p>
            </remarks>
            <value>
            The list of introduction object names. .
            </value>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.IObjectFactory"/>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of the proxy. 
            </summary>
            <remarks>
            Will check the singleton instance if already created, 
            else fall back to the proxy interface (if a single one),
            the target bean type, or the TargetSource's target class.
            </remarks>
            Return the <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see langword="null"/> if not known in advance.
        </member>
        <member name="P:Spring.Aop.Framework.ProxyFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="T:Spring.Aop.IIntroductionAdvisor">
            <summary>
            Superinterface for advisors that perform one or more AOP
            <b>introductions</b>.
            </summary>
            <remarks>
            <p>
            This interface cannot be implemented directly; subinterfaces must
            provide the advice type implementing the introduction.
            </p>
            <p>
            Introduction is the implementation of additional interfaces (not
            implemented by a target) via AOP advice.
            </p>
            </remarks>
            <seealso cref="T:Spring.Aop.IIntroductionInterceptor"/>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:Spring.Aop.IAdvisor">
            <summary>
            Base interface holding AOP advice and a filter determining the
            applicability of the advice (such as a pointcut).
            </summary>
            <remarks>
            <note>
            This interface is not for use by Spring.NET users, but exists rather to
            allow for commonality in the support for different types of advice
            within the framework.
            </note>
            <p>
            Spring.NET AOP is centered on <b>around advice</b> delivered via method
            <b>interception</b>, compliant with the AOP Alliance interception API. 
            The <see cref="T:Spring.Aop.IAdvisor"/> interface allows support for
            different types of advice, such as <b>before</b> and <b>after</b>
            advice, which need not be implemented using interception.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
        </member>
        <member name="P:Spring.Aop.IAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            An advisor that was creating a mixin would be a per instance
            operation and would thus return <see langword="true"/>. If the
            advisor is not per instance, it is shared with all instances of the
            advised class obtained from the same Spring.NET IoC container.
            </p>
            <p>
            Use <c>singleton</c> and <c>prototype</c> object definitions or
            appropriate programmatic proxy creation to ensure that
            <see cref="T:Spring.Aop.IAdvisor"/>s have the correct lifecycle model. 
            </p>
            <note>
            This method is not currently used by the framework.
            </note>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
        </member>
        <member name="P:Spring.Aop.IAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <remarks>
            <p>
            An advice may be an interceptor, a throws advice, before advice,
            introduction etc.
            </p>
            </remarks>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
        </member>
        <member name="M:Spring.Aop.IIntroductionAdvisor.ValidateInterfaces">
            <summary>
            Can the advised interfaces be implemented by the introduction
            advice?
            </summary>
            <remarks>
            <p>
            Invoked <b>before</b> adding an
            <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the advised interfaces cannot be implemented by the introduction
            advice.
            </exception>
            <seealso cref="P:Spring.Aop.IIntroductionAdvisor.Interfaces"/>
        </member>
        <member name="P:Spring.Aop.IIntroductionAdvisor.TypeFilter">
            <summary>
            Returns the filter determining which target classes this
            introduction should apply to. 
            </summary>
            <remarks>
            <p>
            This is the <see cref="T:System.Type"/> part of a pointcut.
            Be advised that method matching doesn't make sense in the context
            of introductions.
            </p>
            </remarks>
            <value>
            The filter determining which target classes this introduction
            should apply to. 
            </value>
        </member>
        <member name="P:Spring.Aop.IIntroductionAdvisor.Interfaces">
            <summary>
            Gets the interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </summary>
            <value>
            The interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.Framework.ReflectiveMethodInvocation">
            <summary>
            Invokes a target method using standard reflection.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:Spring.Aop.Framework.ReflectiveMethodInvocation.proxyMethod">
            <summary>
            The method invocation that is to be invoked on the proxy.
            </summary>
        </member>
        <member name="M:Spring.Aop.Framework.ReflectiveMethodInvocation.#ctor(System.Object,System.Object,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object[],System.Type,System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Framework.ReflectiveMethodInvocation"/> class.
            </summary>
            <param name="proxy">The AOP proxy.</param>
            <param name="target">The target object.</param>
            <param name="method">The target method proxied.</param>
            <param name="proxyMethod">The method to invoke on proxy.</param>
            <param name="arguments">The target method's arguments.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.</param>
            <param name="interceptors">
            The list of interceptors that are to be applied. May be
            <cref lang="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If any of the <paramref name="target"/> or <paramref name="method"/>
            parameters is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Framework.ReflectiveMethodInvocation.InvokeJoinpoint">
            <summary>
            Invokes the joinpoint using standard reflection.
            </summary>
            <remarks>
            <p>
            Subclasses can override this to use custom invocation.
            </p>
            </remarks>
            <returns>
            The return value of the invocation of the joinpoint.
            </returns>
            <exception cref="T:System.Exception">
            If invoking the joinpoint resulted in an exception.
            </exception>
            <see cref="M:Spring.Aop.Framework.AbstractMethodInvocation.InvokeJoinpoint"/>
        </member>
        <member name="M:Spring.Aop.Framework.ReflectiveMethodInvocation.PrepareMethodInvocationForProceed(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Creates a new <see cref="T:Spring.Aop.Framework.ReflectiveMethodInvocation"/> instance 
            from the specified <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> and  
            increments the interceptor index.
            </summary>
            <param name="invocation">
            The current <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> instance.
            </param>
            <returns>
            The new <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> instance to use.
            </returns>
        </member>
        <member name="P:Spring.Aop.Framework.ReflectiveMethodInvocation.ProxyMethod">
            <summary>
            The method invocation that is to be invoked on the proxy.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.AbstractGenericPointcutAdvisor">
            <summary>
            Abstract PointcutAdvisor that allows for any Advice to be configured.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Support.AbstractPointcutAdvisor">
            <summary>
            Abstract base class for <see cref="T:Spring.Aop.IPointcutAdvisor"/> implementations.  
            </summary>
            <remarks>
            Can be subclassed for returning a specific pointcut/advice or a freely configurable pointcut/advice.
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Aop.IPointcutAdvisor">
            <summary>
            Superinterface for all <see cref="T:Spring.Aop.IAdvisor"/>s that are
            driven by a pointcut.
            </summary>
            <remarks>
            <p>
            This covers nearly all advisors except introduction advisors, for which
            method-level matching does not apply.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/>
        </member>
        <member name="P:Spring.Aop.IPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AbstractPointcutAdvisor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.  
            </summary>
            <param name="o">The advisor to compare with.</param>
            <returns>
            <see langword="true"/> if this instance is equal to the
            specified <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AbstractPointcutAdvisor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AbstractPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AbstractPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <remarks>
            <p>
            An advice may be an interceptor, a throws advice, before advice,
            introduction etc.
            </p>
            </remarks>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AbstractPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            Not supported for dynamic advisors.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">Always.</exception>
            <see cref="P:Spring.Aop.IAdvisor.IsPerInstance"/>
        </member>
        <member name="P:Spring.Aop.Support.AbstractPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AbstractGenericPointcutAdvisor.Equals(System.Object)">
            <summary>
             2 <see cref="T:Spring.Aop.Support.AbstractGenericPointcutAdvisor"/>s are considered equals, if 
             a) their pointcuts are equal
             b) their advices are equal
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AbstractGenericPointcutAdvisor.GetHashCode">
            <summary>
            Calculates a unique hashcode based on advice + pointcut
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AbstractGenericPointcutAdvisor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this advisor.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AbstractGenericPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this advisor.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="T:Spring.Aop.Support.AbstractObjectFactoryPointcutAdvisor">
            <summary>
            Abstract ObjectFactory-based IPointcutAdvisor that allows for any Advice to be
            configured as reference to an Advice object in an ObjectFactory.
            </summary>
            <remarks>
            specifying the name of an advice object instead of the advice object itself
            (if running within an ObjectFactory/ApplicationContext increses loose coupling
            at initialization time, in order not to initialize the advice object until the
            pointcut actually matches.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aop.Support.AbstractObjectFactoryPointcutAdvisor.ToString">
            <summary>
            Describe this Advisor, showing name of advice object.
            </summary>
            <returns>
            Type name and advice object name.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AbstractObjectFactoryPointcutAdvisor.AdviceObjectName">
            <summary>
            Gets or sets the name of the advice object that this advisor should refer to.
            </summary>
            <remarks>An instance of the specified object will be obtained on first access of
            this advisor's advice.  This advisor will only ever obtain at most one
            single instance of the advice object, caching the instance for the lifetime of
            the advisor.</remarks>
            <value>The name of the advice object.</value>
        </member>
        <member name="P:Spring.Aop.Support.AbstractObjectFactoryPointcutAdvisor.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.AbstractObjectFactoryPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <remarks>
            <p>
            An advice may be an interceptor, a throws advice, before advice,
            introduction etc.
            </p>
            </remarks>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
        </member>
        <member name="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut">
            <summary>
            Abstract base regular expression pointcut object.
            </summary>
            <remarks>
            <p>
            The regular expressions must be a match. For example, the
            <code>.*Get.*</code> pattern will match <c>Com.Mycom.Foo.GetBar()</c>, and
            <code>Get.*</code> will not.
            </p>
            <p>
            This base class is serializable. Subclasses should decorate all
            fields with the <see cref="T:System.NonSerializedAttribute"/> - the
            <see cref="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.InitPatternRepresentation(System.Object[])"/>
            method in this class will be invoked again on the client side on deserialization.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Support.StaticMethodMatcherPointcut">
            <summary> 
            Convenient superclass when one wants to force subclasses to
            implement the <see cref="T:Spring.Aop.IMethodMatcher"/> interface
            but subclasses will still want to be pointcuts.
            </summary>
            <remarks>
            <p>
            The <see cref="P:Spring.Aop.Support.StaticMethodMatcherPointcut.TypeFilter"/>
            property can be overriden to customize <see cref="T:System.Type"/> filter
            behavior as well.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Support.StaticMethodMatcher">
            <summary> 
            Convenient abstract superclass for static method matchers that don't care
            about arguments at runtime. 
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:Spring.Aop.IMethodMatcher">
            <summary>
            That part of an <see cref="T:Spring.Aop.IPointcut"/> that checks whether a
            target method is eligible for advice.
            </summary>
            <remarks>
            <p>
            An <see cref="T:Spring.Aop.IMethodMatcher"/> may be evaluated
            <b>statically</b> or at runtime (<b>dynamically</b>). Static
            matching involves only the method signature and (possibly) any
            <see cref="T:System.Attribute"/>s that have been applied to a method.
            Dynamic matching additionally takes into account the actual argument
            values passed to a method invocation.
            </p>
            <p>
            If the value of the <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/>
            property of an implementation instance returns <see langword="false"/>,
            evaluation can be performed statically, and the result will be the same
            for all invocations of this method, whatever their arguments. This
            means that if the value of the
            <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> is
            <see langword="false"/>, the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will never be invoked for the lifetime of the
            <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </p>
            <p>
            If an implementation returns <see langword="true"/> in its two argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
            method, and the value of it's
            <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> property is
            <see langword="true"/>, the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will be invoked <i>immediately before each and every potential
            execution of the related advice</i>, to decide whether the advice
            should run. All previous advice, such as earlier interceptors in an
            interceptor chain, will have run, so any state changes they have
            produced in parameters or thread local storage, will be available at
            the time of evaluation.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.TrueMethodMatcher"/>
        </member>
        <member name="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            This is a static check. If this method invocation returns
            <see langword="false"/>,or if the
            <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> property is
            <see langword="false"/>, then no runtime check will be made.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            In order for this method to have even been invoked, the supplied
            <paramref name="method"/> must have matched
            statically. This method is invoked only if the two argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
            method returns <see langword="true"/> for the supplied
            <paramref name="method"/> and <paramref name="targetType"/>, and
            if the <see cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/> property
            is <see langword="true"/>.
            </p>
            <p>
            Invoked immediately <b>before</b> any potential running of the
            advice, and <b>after</b> any advice earlier in the advice chain has
            run.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
        </member>
        <member name="P:Spring.Aop.IMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <remarks>
            <p>
            If <see langword="true"/>, the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will be invoked if the two argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
            method returns <see langword="true"/>.
            </p>
            <p>
            Note that this property can be checked when an AOP proxy is created,
            and implementations need not check the value of this property again
            before each method invocation.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Aop.IMethodMatcher"/> is dynamic.
            </value>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            Always throws a <see cref="T:System.NotSupportedException"/>. This
            method should never be called on a static matcher.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns>
            Always throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Always.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            Must be implemented by a derived class in order to specify matching
            rules.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcher.OnDeserialization(System.Object)">
            <summary>
            Override in case you need to initialized non-serialized fields on deserialization.
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <remarks>
            <p>
            Always returns <see langword="false"/>.
            </p>
            </remarks>
            <value>
            Always returns <see langword="false"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.IPointcut">
            <summary>
            Spring.NET's core pointcut abstraction.
            </summary>
            <remarks>
            <p>
            A pointcut is composed of <see cref="T:Spring.Aop.ITypeFilter"/>s and
            <see cref="T:Spring.Aop.IMethodMatcher"/>s. Both these basic terms and an
            <see cref="T:Spring.Aop.IPointcut"/> itself can be combined to build up
            sophisticated combinations.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="P:Spring.Aop.IPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.IPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcherPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.ITypeFilter">
            <summary>
            A filter that restricts the matching of a pointcut or introduction to
            a given set of target types.
            </summary>
            <remarks>
            <p>
            Can be used as part of a pointcut, or for the entire targeting of an
            introduction.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IPointcut"/>
            <seealso cref="F:Spring.Aop.TrueTypeFilter.True"/>
        </member>
        <member name="M:Spring.Aop.ITypeFilter.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
            <exception cref="T:AopAlliance.Aop.AspectException">
            If an error was encountered during the deserialization process.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.OnDeserialization(System.Object)">
            <summary>
            Overridden to ensure proper initialization
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.InitPatternRepresentation(System.Object[])">
            <summary>
            Subclasses must implement this to initialize regular expression pointcuts.
            </summary>
            <remarks>
            <p>
            Can be invoked multiple times.
            </p>
            <p>
            This method will be invoked from the <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Patterns"/> property,
            and also on deserialization.
            </p>
            </remarks>
            <param name="patterns">
            The patterns to initialize.
            </param>
            <exception cref="T:System.ArgumentException">
            In the case of an invalid pattern.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Matches(System.String,System.Int32)">
            <summary>
            Does the pattern at the supplied <paramref name="patternIndex"/>
            match this <paramref name="pattern"/>?
            </summary>
            <param name="pattern">The pattern to match</param>
            <param name="patternIndex">The index of pattern.</param>
            <returns>
            <see langword="true"/> if there is a match.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            Try to match the regular expression against the fully qualified name
            of the method's declaring <see cref="T:System.Type"/>, plus the name of
            the supplied <paramref name="method"/>.
            </p>
            <p>
            Note that the declaring <see cref="T:System.Type"/> is that
            <see cref="T:System.Type"/> that originally declared
            the method, not necessarily the <see cref="T:System.Type"/> that is
            currently exposing it. For example, <see cref="M:System.Object.Equals(System.Object)"/>
            matches any subclass of <see cref="T:System.Object"/>'s
            <see cref="M:System.Object.Equals(System.Object)"/> method.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            In this instance, simply returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Pattern">
            <summary>
            Convenience property for setting a single pattern.
            </summary>
            <remarks>
            Use this property or Patterns, not both.
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Patterns">
            <summary>
            The regular expressions defining methods to match.
            </summary>
            <remarks>
            Matching will be the union of all these; if any match,
            the pointcut matches.
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.AttributeMatchingPointcut">
            <summary>
            Pointcut that looks for a specific attribute being present on a class or
            method.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchingPointcut.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aop.Support.AttributeMatchingPointcut"/> class for the
            given attribute type.
            </summary>
            <param name="attributeType">Type of the attribute to look for at the class level.</param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchingPointcut.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aop.Support.AttributeMatchingPointcut"/> class for the
            given attribute type
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <param name="checkInherited">if set to <c>true</c> [check inherited].</param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchingPointcut.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aop.Support.AttributeMatchingPointcut"/> class for the given
            attribute type
            </summary>
            <param name="classAttributeType">The attribute type to look for at the class level.</param>
            <param name="methodAttributeType">The attribute type to look for at the method attribute.</param>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchingPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>The current <see cref="T:Spring.Aop.ITypeFilter"/>.</value>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchingPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>The current <see cref="T:Spring.Aop.IMethodMatcher"/>.</value>
        </member>
        <member name="T:Spring.Aop.Support.AttributeMatchMethodPointcut">
            <summary> 
            <see cref="T:Spring.Aop.IPointcut"/> implementation that matches methods
            that have been decorated with a specified <see cref="T:System.Attribute"/>.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Ronald Wildenberg</author>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcut"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcut"/> class.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Attribute"/> to match.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.#ctor(System.Type,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcut"/>
            class.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Attribute"/> to match.
            </param>
            <param name="inherit">
            Flag that controls whether or not the inheritance tree of the
            method to be included in the search for the <see cref="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute"/>?
            </param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcut"/>
            class.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Attribute"/> to match.
            </param>
            <param name="inherit">
            Flag that controls whether or not the inheritance tree of the
            method to be included in the search for the <see cref="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute"/>?
            </param>
            <param name="checkInterfaces">
            Flag that controls whether or not interfaces attributes of the
            method to be included in the search for the <see cref="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute"/>?
            </param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute">
            <summary>
            The <see cref="T:System.Attribute"/> to match.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the supplied value is not a <see cref="T:System.Type"/> that
            derives from the <see cref="T:System.Attribute"/> class.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Inherit">
            <summary>
            Is the inheritance tree of the method to be included in the search for the
            <see cref="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute"/>?
            </summary>
            <remarks>
            <p>
            The default is <see langword="true"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcut.CheckInterfaces">
            <summary>
            Is the interfaces attributes of the method to be included in the search for theg 
            <see cref="P:Spring.Aop.Support.AttributeMatchMethodPointcut.Attribute"/>?
            </summary>
            <remarks>
            <p>
            The default is <see langword="false"/>.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor">
            <summary> 
            Convenient class for attribute-match method pointcuts that hold an Interceptor,
            making them an Advisor.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor"/> class
            for the supplied <paramref name="advice"/>.
            </summary>
            <param name="advice">the advice to apply if the pointcut matches</param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.#ctor(System.Type,System.Boolean,AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor"/> class
            for the supplied <paramref name="advice"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Attribute"/> to match.
            </param>
            <param name="inherit">
            Flag that controls whether or not the inheritance tree of the
            method to be included in the search for the <see cref="T:System.Attribute"/>?
            </param>
            <param name="advice">the advice to apply if the pointcut matches</param>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">
            Always; this property is not yet supported.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this advisor.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.AttributeMatchMethodPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.AttributeMethodMatcher">
            <summary>
            MethodMatcher that looks for a specific attribute being present on the
            method (checking both the method on the onviked interface, if any and the corresponding
            method on the target class
            </summary>
            <author>Juergen hoeller</author>
            <author>Mark Pollack</author>
            <seealso cref="T:Spring.Aop.Support.AttributeMatchingPointcut"/>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMethodMatcher.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aop.Support.AttributeMethodMatcher"/> class for the 
            given atribute type.
            </summary>
            <param name="attributeType">Type of the attribute to look for.</param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <param name="method">The candidate method.</param>
            <param name="targetType">The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).</param>
            <returns>
            	<see langword="true"/> if this this method matches statically.
            </returns>
            <remarks>
            	<p>
            Must be implemented by a derived class in order to specify matching
            rules.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.AttributeTypeFilter">
            <summary>
            ITypeFilter that looks for a specific attribute being present on a class
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack  (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.AttributeTypeFilter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aop.Support.AttributeTypeFilter"/> class for the
            given attribute type. 
            </summary>
            <param name="attributeType">Type of the attribute to look for.</param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeTypeFilter.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aop.Support.AttributeTypeFilter"/> class for the
            given attribute type.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <param name="checkInherited">if set to <c>true</c> [check inherited].</param>
        </member>
        <member name="M:Spring.Aop.Support.AttributeTypeFilter.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied <see cref="T:System.Type"/>?
            </summary>
            <param name="type">The candidate <see cref="T:System.Type"/>.</param>
            <returns>
            	<see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.AttributeTypeFilter.AttributeType">
            <summary>
            The attribute <see cref="T:System.Type"/> for this filter.
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.AttributeTypeFilter.CheckInherited">
            <summary>
            Indicates, whether this filter considers base types for filtering.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.ComposablePointcut">
            <summary>
            Convenient class for building up pointcuts.
            </summary>
            <remarks>
            <p>
            All methods return a <see cref="T:Spring.Aop.Support.ComposablePointcut"/>
            instance, which facilitates the following concise usage pattern...
            </p>
            <code language="C#">
            IPointcut pointcut = new ComposablePointcut()
            		.Union(typeFilter)
            			.Intersection(methodMatcher)
            				.Intersection(pointcut);
            </code>
            <p>
            There is no <c>Union()</c> method on this class. Use the
            <see cref="M:Spring.Aop.Support.Pointcuts.Union(Spring.Aop.IPointcut,Spring.Aop.IPointcut)"/> method for such functionality.
            </p>
            </remarks> 
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Aop.Support.ComposablePointcut"/> class
            that matches all the methods on all <see cref="T:System.Type"/>s.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.#ctor(Spring.Aop.ITypeFilter,Spring.Aop.IMethodMatcher)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Aop.Support.ComposablePointcut"/> class
            that uses the supplied <paramref name="typeFilter"/> and
            <paramref name="methodMatcher"/>.
            </summary>
            <param name="typeFilter">
            The type filter to use.
            </param>
            <param name="methodMatcher">
            The method matcher to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Union(Spring.Aop.ITypeFilter)">
            <summary>
            Changes the current type filter to be the union of the existing filter and the
            supplied <paramref name="filter"/>.
            </summary>
            <param name="filter">The filter to union with.</param>
            <returns>
            The union of the existing filter and the supplied <paramref name="filter"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Intersection(Spring.Aop.ITypeFilter)">
            <summary>
            Changes the current type filter to be the intersection of the existing filter
            and the supplied <paramref name="filter"/>.
            </summary>
            <param name="filter">The filter to diff against.</param>
            <returns>
            The intersection of the existing filter and the supplied <paramref name="filter"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Union(Spring.Aop.IMethodMatcher)">
            <summary>
            Changes the current method matcher to be the union of the existing matcher and the
            supplied <paramref name="matcher"/>.
            </summary>
            <param name="matcher">The matcher to union with.</param>
            <returns>
            The union of the existing matcher and the supplied <paramref name="matcher"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Intersection(Spring.Aop.IMethodMatcher)">
            <summary>
            Changes the current method matcher to be the intersection of the existing matcher
            and the supplied <paramref name="matcher"/>.
            </summary>
            <param name="matcher">The matcher to diff against.</param>
            <returns>
            The intersection of the existing matcher and the supplied <paramref name="matcher"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ComposablePointcut.Intersection(Spring.Aop.IPointcut)">
            <summary>
            Changes current pointcut to intersection of the current and supplied pointcut
            </summary>
            <param name="other">pointcut to diff against</param>
            <returns>updated pointcut</returns>
        </member>
        <member name="P:Spring.Aop.Support.ComposablePointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ComposablePointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.Support.ControlFlowPointcut">
            <summary>
            Pointcut and method matcher for use in simple <b>cflow</b>-style
            pointcuts.
            </summary>
            <remarks>
            <p>
            Evaluating such pointcuts is slower than evaluating normal pointcuts,
            but can nevertheless be useful in some cases. Of course, your mileage
            may vary as to what 'slower' actually means.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.ControlFlowPointcut"/>
            class.
            </summary>
            <param name="type">
            The class under which <b>all</b> control flows are to be matched.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.#ctor(System.Type,System.String)">
            <summary>
            Construct a new pointcut that matches all calls below the
            given method in the given class.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="methodName"/> is
            <see langword="null"/>, <b>all</b> control flows below the given
            class will be successfully matched.
            </p>
            </remarks>
            <param name="type">
            The class under which <b>all</b> control flows are to be matched.
            </param>
            <param name="methodName">
            The method name under which <b>all</b> control flows are to be matched.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            Subclasses are encouraged to override this method for greater
            filtering (and performance).
            </p>
            <p>
            This, the default, implementation always matches (returns
            <see langword="true"/>).
            </p>
            </remarks>
            <param name="type">The candidate target class.</param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            Perform static checking. If this returns false, or if the isRuntime() method
            returns false, no runtime check will be made.
            </summary>
            <remarks>
            <p>
            Subclasses are encouraged to override this method if it is possible
            to filter out some candidate classes.
            </p>
            <p>
            This, the default, implementation always matches (returns
            <see langword="true"/>). This means that the three argument
            <see cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
            method will always be invoked.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target class (may be <see langword="null"/>, in which case the
            candidate class must be taken to be the <paramref name="method"/>'s
            declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="M:Spring.Aop.Support.ControlFlowPointcut.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            Subclasses are encouraged to override this method if it is possible
            to filter out some candidate classes.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">The target class.</param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.EvaluationCount">
            <summary>
            Gets the number of times this pointcut has been <i>evaluated</i>.
            </summary>
            <remarks>
            <p>
            Useful as a debugging aid.
            </p>
            <p>
            Note that this value is distinct from the number of times that this
            pointcut sucessfully matches a target method, in that a
            <see cref="T:Spring.Aop.Support.ControlFlowPointcut"/> may be evaluated many times but
            never actually match even once.
            </p>
            </remarks>
            <value>
            The number of times this pointcut has been <i>evaluated</i>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.ControlFlowPointcut.IsRuntime">
            <summary>
            Is this a runtime pointcut?
            </summary>
            <remarks>
            <p>
            This implementation is a runtime pointcut, and so always returns
            <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this is a runtime pointcut.
            </value>
            <seealso cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/>
        </member>
        <member name="T:Spring.Aop.Support.DefaultIntroductionAdvisor">
            <summary>
            Simple <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/> implementation that
            by default applies to any class.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultIntroductionAdvisor"/> class using
            the supplied <paramref name="introduction"/>
            </summary>
            <remarks>
            <p>
            This constructor adds all interfaces implemented by the supplied
            <paramref name="introduction"/> (except the
            <see cref="T:AopAlliance.Aop.IAdvice"/> interface) to the list of
            interfaces to introduce.
            </p>
            </remarks>
            <param name="introduction">The introduction to use.</param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.#ctor(AopAlliance.Aop.IAdvice,System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultIntroductionAdvisor"/> class using
            the supplied <paramref name="introduction"/>
            </summary>
            <param name="introduction">The introduction to use.</param>
            <param name="intf">
            The interface to introduce.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.#ctor(AopAlliance.Aop.IAdvice,System.Type[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultIntroductionAdvisor"/> class using
            the supplied <paramref name="introduction"/>
            </summary>
            <param name="introduction">The introduction to use.</param>
            <param name="interfaces">
            The interfaces to introduce.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="introduction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.AddInterface(System.Type)">
            <summary>
            Adds the supplied <paramref name="intf"/> to the list of
            introduced interfaces.
            </summary>
            <param name="intf">The interface to add.</param>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Interfaces"/> are not interface <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            This, the default, implementation always returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.ValidateInterfaces">
            <summary>
            Can the advised interfaces be implemented by the introduction
            advice?
            </summary>
            <remarks>
            <p>
            Invoked <b>before</b> adding an
            <seealso cref="T:Spring.Aop.IIntroductionAdvisor"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the advised interfaces cannot be implemented by the introduction
            advice.
            </exception>
            <seealso cref="P:Spring.Aop.IIntroductionAdvisor.Interfaces"/>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Interfaces"/> are not interface <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.Equals(Spring.Aop.Support.DefaultIntroductionAdvisor)">
            <summary>
            2 IntroductionAdvisors are considered equal if
            a) they are of the same type
            b) their introduction advices are equal
            c) they introduce the same interfaces
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.Equals(System.Object)">
            <summary>
            2 IntroductionAdvisors are considered equal if
            a) they are of the same type
            b) their introduction advices are equal
            c) they introduce the same interfaces
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.DefaultIntroductionAdvisor.GetHashCode">
            <summary>
            2 IntroductionAdvisors are considered equal if
            a) they are of the same type
            b) their introduction advices are equal
            c) they introduce the same interfaces
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.TypeFilter">
            <summary>
            Returns the filter determining which target classes this
            introduction should apply to. 
            </summary>
            <value>
            The filter determining which target classes this introduction
            should apply to. 
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Interfaces">
            <summary>
            Gets the interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </summary>
            <value>
            The interfaces introduced by this
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            Default for an introduction is per-instance interception.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DefaultIntroductionAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
        </member>
        <member name="T:Spring.Aop.Support.DefaultObjectFactoryPointcutAdvisor">
            <summary>
            Concrete ObjectFactory-based IPointcutAdvisor thta allows for any Advice to be
            configured as reference to an Advice object in the ObjectFatory, as well as 
            the Pointcut to be configured through an object property.
            </summary>
            <remarks>
            Specifying the name of an advice object instead of the advice object itself
            (if running within a ObjectFactory/ApplicationContext) increases loose coupling
            at initialization time, in order to not intialize the advice object until the pointcut
            actually matches.
            </remarks>
            <author>Juerge Hoeller</author>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aop.Support.DefaultObjectFactoryPointcutAdvisor.ToString">
            <summary>
            Describe this Advisor, showing pointcut and name of advice object.
            </summary>
            <returns>Type name , pointcut, and advice object name.</returns>
        </member>
        <member name="P:Spring.Aop.Support.DefaultObjectFactoryPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.DefaultPointcutAdvisor">
            <summary>
            Convenient pointcut-driven advisor implementation.
            </summary>
            <remarks>
            <p>
            This is the most commonly used <see cref="T:Spring.Aop.IAdvisor"/> implementation.
            It can be used with any pointcut and advice type, except for introductions.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/>,
            </summary>
            <param name="advice">
            The advice to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.#ctor(Spring.Aop.IPointcut,AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/> and
            <paramref name="pointcut"/>.
            </summary>
            <param name="advice">
            The advice to use.
            </param>
            <param name="pointcut">
            The pointcut to use.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.Equals(System.Object)">
            <summary>
             2 <see cref="T:Spring.Aop.Support.DefaultPointcutAdvisor"/>s are considered equal, if 
             a) their pointcuts are equal
             b) their advices are equal
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.GetHashCode">
            <summary>
            Calculates a unique hashcode based on advice + pointcut
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.DefaultPointcutAdvisor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this advisor.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.DefaultPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.DynamicMethodMatcher">
            <summary>
            Convenient abstract superclass for dynamic method matchers that do
            care about arguments at runtime.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcher.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DynamicMethodMatcher"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            Derived classes can override this method to add preconditions for
            dynamic matching.
            </p>
            <p>
            This implementation always returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            Must be overriden by derived classes to provide criteria for dynamic matching.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <value>
            Always returns <see langword="true"/>, to specify that this is a
            dynamic matcher.
            </value>
        </member>
        <member name="T:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor">
            <summary>
            Convenient superclass for <see cref="T:Spring.Aop.IAdvisor"/>s
            that are also dynamic pointcuts.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/>.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
            <param name="advice">
            The advice portion of this advisor.
            </param>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <remarks>
            <p>
            Not supported for dynamic advisors.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">Always.</exception>
            <see cref="P:Spring.Aop.IAdvisor.IsPerInstance"/>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <remarks>
            <p>
            This implementation always returns a filter that evaluates to <see langword="true"/>
            for any <see cref="T:System.Type"/>.
            </p>
            </remarks>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <remarks>
            <p>
            This implementation always returns itself (this object).
            </p>
            </remarks>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.DynamicMethodMatcherPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
            <remarks>
            <p>
            This implementation always returns itself (this object).
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.MethodMatchers">
            <summary>
            Various utility methods relating to the composition of
            <see cref="T:Spring.Aop.IMethodMatcher"/>s.
            </summary>
            <remarks>
            <p>
            A method matcher may be evaluated statically (based on method and target
            class) or need further evaluation dynamically (based on arguments at
            the time of method invocation).
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.MethodMatchers.Union(Spring.Aop.IMethodMatcher,Spring.Aop.IMethodMatcher)">
            <summary>
            Creates a new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            union of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s.
            </summary>
            <remarks>
            <p>
            The newly created matcher will match all the methods that either of the two 
            supplied matchers would match.
            </p>
            </remarks>
            <param name="firstMatcher">The first method matcher.</param>
            <param name="secondMatcher">The second method matcher.</param>
            <returns>
            A new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            union of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.MethodMatchers.Intersection(Spring.Aop.IMethodMatcher,Spring.Aop.IMethodMatcher)">
            <summary>
            Creates a new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            intersection of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s.
            </summary>
            <remarks>
            <p>
            The newly created matcher will match only those methods that both
            of the supplied matchers would match.
            </p>
            </remarks>
            <param name="firstMatcher">The first method matcher.</param>
            <param name="secondMatcher">The second method matcher.</param>
            <returns>
            A new <see cref="T:Spring.Aop.IMethodMatcher"/> that is the
            intersection of the two supplied <see cref="T:Spring.Aop.IMethodMatcher"/>s
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.MethodMatchers.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.MethodMatchers"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.NameMatchMethodPointcut">
            <summary> 
            Pointcut object for simple method name matches, useful as an alternative to pure
            regular expression based patterns.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the <see cref="P:System.Reflection.MemberInfo.Name"/> of the supplied
            <paramref name="method"/> matches any of the mapped names?
            </summary>
            <param name="method">
            The <see cref="T:System.Reflection.MethodBase"/> to check.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target class.
            </param>
            <returns>
            <see langword="true"/> if the name of the supplied
            <paramref name="method"/> matches one of the mapped names.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcut.IsMatch(System.String,System.String)">
            <summary>
            Does the supplied <paramref name="methodName"/> match the supplied <paramref name="mappedName"/>?
            </summary>
            <remarks>
            <p>
            The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,
            as well as direct equality. Can be overridden in subclasses.
            </p>
            </remarks>
            <param name="methodName">
            The method name of the class.
            </param>
            <param name="mappedName">
            The name in the descriptor.
            </param>
            <returns>
            <b>True</b> if the names match.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcut.MappedName">
            <summary>
            Convenience property when we have only a single method name
            to match.
            </summary>
            <remarks>
            <note type="caution">
            Use either this property or the
            <see cref="P:Spring.Aop.Support.NameMatchMethodPointcut.MappedNames"/> property,
            not both.
            </note>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcut.MappedNames">
            <summary>
            Set the method names defining methods to match.
            </summary>
            <remarks>
            <p>
            Matching will be the union of all these; if any match, the pointcut matches.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.NameMatchMethodPointcutAdvisor">
            <summary> 
            Convenient class for name-match method pointcuts that hold an Interceptor,
            making them an Advisor.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.NameMatchMethodPointcutAdvisor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.NameMatchMethodPointcutAdvisor"/> class
            for the supplied <paramref name="advice"/>.
            </summary>
            <param name="advice"></param>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <remarks>Default is </remarks>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.MappedName">
            <summary>
            Convenience property when we have only a single method name
            to match.
            </summary>
            <remarks>
            <note type="caution">
            Use either this property or the
            <see cref="P:Spring.Aop.Support.NameMatchMethodPointcut.MappedNames"/> property,
            not both.
            </note>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.MappedNames">
            <summary>
            Set the method names defining methods to match.
            </summary>
            <remarks>
            <p>
            Matching will be the union of all these; if any match, the pointcut matches.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Support.NameMatchMethodPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.Pointcuts">
            <summary> 
            Various <see cref="T:Spring.Aop.IPointcut"/> related utility methods.
            </summary>
            <remarks>
            <p>
            These methods are particularly useful for composing pointcuts
            using the union and intersection methods.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.Union(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Creates a union of the two supplied pointcuts.
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
            <returns>
            The union of the two supplied pointcuts.
            </returns>
            <seealso cref="T:Spring.Aop.Support.UnionPointcut"/>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.Intersection(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Creates an <see cref="T:Spring.Aop.IPointcut"/> that is the
            intersection of the two supplied pointcuts.
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
            <returns>
            An <see cref="T:Spring.Aop.IPointcut"/> that is the
            intersection of the two supplied pointcuts.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.Matches(Spring.Aop.IPointcut,System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Performs the least expensive check for a match.
            </summary>
            <param name="pointcut">
            The <see cref="T:Spring.Aop.IPointcut"/> to be evaluated.
            </param>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>.
            </param>
            <param name="args">The arguments to the method</param>
            <returns><see langword="true"/> if there is a runtime match.</returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.AreEqual(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Are the supplied <see cref="T:Spring.Aop.IPointcut"/>s equal?
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
            <returns>
            <see langword="true"/> if the supplied <see cref="T:Spring.Aop.IPointcut"/>s
            are equal.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.Pointcuts.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.Pointcuts"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor">
            <summary>
            Convenient class for regular expression method pointcuts that hold an
            <see cref="T:AopAlliance.Aop.IAdvice"/>, making them an
            <see cref="T:Spring.Aop.IAdvisor"/>.
            </summary>
            <remarks>
            <p>
            Configure this class using the <see cref="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Pattern"/> and
            <see cref="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Patterns"/> pass-through properties. These are analogous
            to the <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Pattern"/> and
            <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Pattern"/>s properties of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/> class.
            </p>
            <p>
            Can delegate to any type of regular expression pointcut. Currently only
            pointcuts based on the regular expression classes from the .NET Base
            Class Library are supported. The
            <see cref="P:Spring.Aop.Support.DefaultPointcutAdvisor.Pointcut"/>
            property must be a subclass of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/> class.
            </p>
            <p>
            This should not normally be set directly.
            </p>
            </remarks>
            <author>Dmitriy Kopylenko</author>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/>
        </member>
        <member name="M:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor"/>
            class for the supplied <paramref name="advice"/>.
            </summary><param name="advice">
            The target advice.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.InitPointcut">
            <summary>
            Initialises the pointcut.
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Pattern">
            <summary>
            A single pattern to be used during method evaluation.
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Patterns">
            <summary>
            Multiple patterns to be used during method evaluation.
            </summary>
        </member>
        <member name="P:Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.RootTypeFilter">
            <summary>
            Simple <see cref="T:Spring.Aop.ITypeFilter"/> implementation that matches
            all classes classes (and any derived subclasses) of a give root
            <see cref="T:System.Type"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.RootTypeFilter.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.RootTypeFilter"/> for the supplied
            <paramref name="rootType"/>.
            </summary>
            <param name="rootType">The root <see cref="T:System.Type"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="rootType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.RootTypeFilter.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <remarks>
            <p>
            Returns <see langword="true"/> if the supplied <paramref name="type"/>
            can be assigned to the root <see cref="T:System.Type"/>.
            </p>
            </remarks>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
        </member>
        <member name="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut">
            <summary>
            Regular expression based pointcut object.
            </summary>
            <remarks>
            <p>
            Uses the regular expression classes from the .NET Base Class Library.
            </p>
            <p>
            The regular expressions must be a match. For example, the
            <code>.*Get*</code> pattern will match <c>Com.Mycom.Foo.GetBar()</c>, and
            <code>Get.*</code> will not.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.#ctor(System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/> class,
            using the supplied pattern or <paramref name="patterns"/>.
            </summary>
            <param name="patterns">
            The intial pattern value(s) to be matched against.
            </param>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.SdkRegularExpressionMethodPointcut"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
            <exception cref="T:AopAlliance.Aop.AspectException">
            If an error was encountered during the deserialization process.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.InitPatternRepresentation(System.Object[])">
            <summary>
            Initializes the regular expression pointcuts.
            </summary>
            <remarks>
            <p>
            Can be invoked multiple times.
            </p>
            <p>
            This method will be invoked from the
            <see cref="P:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut.Patterns"/> property,
            and also on deserialization.
            </p>
            </remarks>
            <param name="patterns">
            The patterns to initialize.
            </param>
            <exception cref="T:System.ArgumentException">
            In the case of an invalid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="patterns"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.Matches(System.String,System.Int32)">
            <summary>
            Does the pattern at the supplied <paramref name="patternIndex"/>
            match this <paramref name="pattern"/>?
            </summary>
            <param name="pattern">The pattern to match</param>
            <param name="patternIndex">The index of pattern.</param>
            <returns>
            <see langword="true"/> if there is a match.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.SdkRegularExpressionMethodPointcut.DefaultOptions">
            <summary>
            Gets or sets default options that should be used by
            regular expressions that don't have options explicitly set.
            </summary>
            <value>
            Default options that should be used by regular expressions 
            that don't have options explicitly set.
            </value>
        </member>
        <member name="T:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor">
            <summary>
            Convenient superclass for <see cref="T:Spring.Aop.IAdvisor"/>s that
            are also static pointcuts.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.#ctor(AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.AbstractRegularExpressionMethodPointcut"/>
            class for the supplied <paramref name="advice"/>
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
            <param name="advice">
            The advice to use.
            </param>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.IsPerInstance">
            <summary>
            Is this advice associated with a particular instance?
            </summary>
            <value>
            <see langword="true"/> if this advice is associated with a
            particular instance.
            </value>
            <exception cref="T:System.NotSupportedException">
            Always; this property is not yet supported.
            </exception>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.Order">
            <summary>
            Returns this <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </summary>
            <returns>
            This <see cref="T:Spring.Aop.IAdvisor"/>s order in the
            interception chain.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.Advice">
            <summary>
            Return the advice part of this advisor.
            </summary>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
            <see cref="P:Spring.Aop.IAdvisor.Advice"/>
        </member>
        <member name="P:Spring.Aop.Support.StaticMethodMatcherPointcutAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.TypeFilters">
            <summary>
            Defines miscellaneous <see cref="T:System.Type"/> filter operations.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="M:Spring.Aop.Support.TypeFilters.Union(Spring.Aop.ITypeFilter,Spring.Aop.ITypeFilter)">
            <summary>
            Creates a union of two <see cref="T:System.Type"/> filters.
            </summary>
            <remarks>
            <p>
            The filter arising from the union will match all of the
            <see cref="T:System.Type"/> that either of the two supplied filters
            would match.
            </p>
            </remarks>
            <param name="first">
            The first <see cref="T:System.Type"/> filter.
            </param>
            <param name="second">
            The second <see cref="T:System.Type"/> filter.
            </param>
            <returns>
            The union of the supplied <see cref="T:System.Type"/> filters.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.TypeFilters.Intersection(Spring.Aop.ITypeFilter,Spring.Aop.ITypeFilter)">
            <summary>
            Creates the intersection of two <see cref="T:System.Type"/> filters.
            </summary>
            <remarks>
            <p>
            The filter arising from the intersection will match all of the
            <see cref="T:System.Type"/> that both of the two supplied filters
            would match.
            </p>
            </remarks>
            <param name="first">
            The first <see cref="T:System.Type"/> filter.
            </param>
            <param name="second">
            The second <see cref="T:System.Type"/> filter.
            </param>
            <returns>
            The intersection of the supplied <see cref="T:System.Type"/> filters.
            </returns>
        </member>
        <member name="M:Spring.Aop.Support.TypeFilters.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.TypeFilters"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Aop.Support.TypeFilters.UnionTypeFilter">
            <summary>
            Union class filter implementation.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.TypeFilters.IntersectionTypeFilter">
            <summary>
            Intersection <see cref="T:Spring.Aop.ITypeFilter"/> implementation.
            </summary>
        </member>
        <member name="T:Spring.Aop.Support.TypeNameTypeFilter">
            <summary>
            Simple <see cref="T:Spring.Aop.ITypeFilter"/> implementation that matches
            a given <see cref="T:System.Type"/>'s <see cref="P:System.Type.FullName"/> against <see cref="P:Spring.Aop.Support.TypeNameTypeFilter.TypeNamePatterns"/>.
            For a list of supported pattern syntax see <see cref="M:Spring.Util.PatternMatchUtils.SimpleMatch(System.String[],System.String)"/>.
            </summary>
            <author>Erich Eichinger</author>
            <seealso cref="M:Spring.Util.PatternMatchUtils.SimpleMatch(System.String[],System.String)"/>
        </member>
        <member name="M:Spring.Aop.Support.TypeNameTypeFilter.#ctor(System.String[])">
            <summary>
            Creates a new instance of <see cref="T:Spring.Aop.Support.TypeNameTypeFilter"/> using a list of given <paramref name="patterns"/>.
            </summary>
            <param name="patterns">the list patterns to match typenames against. Must not be <c>null</c>.</param>
             <seealso cref="M:Spring.Util.PatternMatchUtils.SimpleMatch(System.String[],System.String)"/>
        </member>
        <member name="M:Spring.Aop.Support.TypeNameTypeFilter.Matches(System.Type)">
            <summary>
            Does the supplied type's <see cref="P:System.Type.FullName"/> match any of the <see cref="P:Spring.Aop.Support.TypeNameTypeFilter.TypeNamePatterns"/>?
            </summary>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="type"/> matches any of the <see cref="P:Spring.Aop.Support.TypeNameTypeFilter.TypeNamePatterns"/>.
            </returns>
        </member>
        <member name="P:Spring.Aop.Support.TypeNameTypeFilter.TypeNamePatterns">
            <summary>
             Returns the list of type name patterns for this filter.
            </summary>
             <seealso cref="M:Spring.Util.PatternMatchUtils.SimpleMatch(System.String[],System.String)"/>
        </member>
        <member name="T:Spring.Aop.Support.UnionPointcut">
            <summary> 
            A <see cref="T:Spring.Aop.IPointcut"/> union.
            </summary>
            <remarks>
            <p>
            Such pointcut unions are tricky, because one cannot simply <c>OR</c>
            the respective <see cref="T:Spring.Aop.IMethodMatcher"/>s: one has to
            ascertain that each <see cref="T:Spring.Aop.IMethodMatcher"/>'s
            <see cref="P:Spring.Aop.IPointcut.TypeFilter"/> is also satisfied.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Support.UnionPointcut.#ctor(Spring.Aop.IPointcut,Spring.Aop.IPointcut)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Support.UnionPointcut"/> class.
            </summary>
            <param name="firstPointcut">The first pointcut.</param>
            <param name="secondPointcut">The second pointcut.</param>
        </member>
        <member name="P:Spring.Aop.Support.UnionPointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.Support.UnionPointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.Support.UnionPointcut.PointcutUnionMethodMatcher">
            <summary>
            Internal method matcher class for union pointcut.
            </summary>
        </member>
        <member name="T:Spring.Aop.Target.AbstractPoolingTargetSource">
            <summary>
            Abstract superclass for pooling <see cref="T:Spring.Aop.ITargetSource"/>s.
            </summary>
            <remarks>
            <p>
            Maintains a pool of target instances, acquiring and releasing a target
            object from the pool for each method invocation. 
            </p>
            <p>
            This class is independent of pooling technology.
            </p>
            <p>
            Subclasses must implement the
            <see cref="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.AbstractPoolingTargetSource.ReleaseTarget(System.Object)"/>
            methods to work with their chosen pool. The
            <see cref="M:Spring.Aop.Target.AbstractPrototypeTargetSource.NewPrototypeInstance"/>
            method inherited from the
            <see cref="T:Spring.Aop.Target.AbstractPrototypeTargetSource"/> base class
            can be used to create objects to put in the pool. Subclasses must also
            implement some of the monitoring methods from the
            <see cref="T:Spring.Aop.Target.PoolingConfig"/> interface. This class
            provides the
            <see cref="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetPoolingConfigMixin"/>
            method to return an <see cref="T:Spring.Aop.IIntroductionAdvisor"/>
            making these statistics available on proxied objects.
            </p>
            <p>
            This class implements the <see cref="T:System.IDisposable"/> interface in
            order to force subclasses to implement the
            <see cref="M:System.IDisposable.Dispose"/> method to cleanup and close
            down their pool.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
        </member>
        <member name="T:Spring.Aop.Target.AbstractPrototypeTargetSource">
            <summary>
            Base class for dynamic <see cref="T:Spring.Aop.ITargetSource"/>
            implementations that can create new prototype object instances to
            support a pooling or new-instance-per-invocation strategy.
            </summary>
            <remarks>
            <p>
            All such <see cref="T:Spring.Aop.ITargetSource"/>s must run in an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, as they need to
            call the <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            method to create a new prototype instance.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.AbstractPrototypeTargetSource"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.NewPrototypeInstance">
            <summary>
            Subclasses should use this method to create a new prototype instance.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            interfaces).
            </summary>
            <remarks>
            <p>
            Ensures that the <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName"/> property has been
            set to a valid value (i.e. is not <see langword="null"/> or a string
            that consists solely of whitespace).
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.ToString">
            <summary>
            Returns a textual representation of this target source instance.
            This implementation returns <see cref="M:Spring.Aop.Target.AbstractPrototypeTargetSource.GetDescription"/>
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPrototypeTargetSource.GetDescription">
            <summary>
            Returns a textual representation of this target source instance
            </summary>
        </member>
        <member name="F:Spring.Aop.Target.AbstractPrototypeTargetSource.logger">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName">
            <summary>
            The name of the target object to be created on each invocation.
            </summary>
            <remarks>
            <p>
            This object should be a prototype, or the same instance will always
            be obtained from the owning <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.ObjectFactory"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPrototypeTargetSource.ObjectFactory">
            <summary>
            The target factory that will be used to perform the lookup
            of the object referred to by the <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName"/>
            property.
            </summary>
            <remarks>
            <p>
            Needed so that prototype instances can be created as necessary.
            </p>
            </remarks>
            <value>
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (will never be <see langword="null"/>).
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="T:Spring.Aop.Target.PoolingConfig">
            <summary>
            Configuration interface for a pooling invoker.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="P:Spring.Aop.Target.PoolingConfig.Active">
            <summary>
            The number of active object instances in a pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.PoolingConfig.Free">
            <summary>
            The number of free object instances in a pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.PoolingConfig.MaxSize">
            <summary>
            The maximum number of object instances in a pool.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.AbstractPoolingTargetSource"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetTarget">
            <summary>
            Returns the target object (acquired from the pool).
            </summary>
            <returns>The target object (acquired from the pool).</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.GetPoolingConfigMixin">
            <summary>
            Gets the <see cref="T:Spring.Aop.Target.PoolingConfig"/> mixin.
            </summary>
            <returns>
            An <see cref="T:Spring.Aop.IIntroductionAdvisor"/> exposing statistics
            about the pool maintained by this object.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.CreatePool(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Create the pool.
            </summary>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, in
            case one needs collaborators from it (normally one's own properties
            are sufficient).
            </param>
            <exception cref="T:System.Exception">
            In the case of errors encountered during the creation of the pool.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object (returns it to the pool).
            </summary>
            <param name="target">
            The target object to release (return to the pool).
            </param>
            <exception cref="T:System.Exception">
            In the case that the <paramref name="target"/> could not be released.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.AbstractPoolingTargetSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <remarks>
            <p>
            Disposes of the pool. 
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.MaxSize">
            <summary>
            The maximum number of object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.Active">
            <summary>
            The number of active object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.Free">
            <summary>
            The number of free object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.AbstractPoolingTargetSource.ObjectFactory">
            <summary>
            The target factory that will be used to perform the lookup
            of the object referred to by the
            <see cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.TargetObjectName"/>
            property.
            </summary>
            <value>
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (will never be <see langword="null"/>).
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="P:Spring.Aop.Target.AbstractPrototypeTargetSource.ObjectFactory"/>
        </member>
        <member name="T:Spring.Aop.Target.EmptyTargetSource">
            <summary>
            The <see cref="T:Spring.Aop.ITargetSource"/> to be used
            when there is no target object, and behavior is supplied by the
            advisors.
            </summary>
            <remarks>
            <p>
            This class is exposed as a singleton.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="F:Spring.Aop.Target.EmptyTargetSource.Empty">
            <summary>
            The <see cref="T:Spring.Aop.ITargetSource"/> to be used
            when there is no target object, and behavior is supplied by the
            advisors.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.EmptyTargetSource"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <note type="implementnotes">
            This is a no-op operation in this implementation.
            </note>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITargetSource"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITargetSource"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.EmptyTargetSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Aop.Target.EmptyTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.EmptyTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <remarks>
            <p>
            The <see cref="F:Spring.Aop.Target.EmptyTargetSource.Empty"/>
            instance is static, and this always returns <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.HotSwappableTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that caches a
            local target object, but allows the target to be swapped while the
            application is running
            </summary>
            <remarks>
            <p>
            If configuring an object of this class in a Spring IoC container,
            use constructor injection to supply the intial target.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.HotSwappableTargetSource"/> with the initial target.
            </summary>
            <param name="initialTarget">
            The initial target. May be <see langword="null"/>.
            </param>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <p>
            No-op implementation.
            </p>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.Swap(System.Object)">
            <summary>
            Swap the target, returning the old target.
            </summary>
            <param name="newTarget">The new target.</param>
            <returns>The old target.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the new target is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.  
            </summary>
            <remarks>
            <p>
            Two invoker interceptors are equal if they have the same target or
            if the targets are equal.
            </p>
            </remarks>
            <param name="other">The target source to compare with.</param>
            <returns>
            <see langword="true"/> if this instance is equal to the
            specified <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.HotSwappableTargetSource.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Aop.Target.HotSwappableTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
            <remarks>
            <p>
            Can return <see langword="null"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Aop.Target.HotSwappableTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> if the target source is static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.IThreadLocalTargetSourceStats">
            <summary>
            Statistics for a thread local <see cref="T:Spring.Aop.ITargetSource"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
        </member>
        <member name="P:Spring.Aop.Target.IThreadLocalTargetSourceStats.Invocations">
            <summary>
            Gets the number of invocations of the
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </summary>
            <value>
            The number of invocations of the
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.IThreadLocalTargetSourceStats.Hits">
            <summary>
            Gets the number of hits that were satisfied by a thread bound object.
            </summary>
            <value>
            The number of hits that were satisfied by a thread bound object.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.IThreadLocalTargetSourceStats.Objects">
            <summary>
            Gets the number of thread bound objects created.
            </summary>
            <value>The number of thread bound objects created.</value>
        </member>
        <member name="T:Spring.Aop.Target.PrototypeTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that creates a
            new instance of the target object for each request.
            </summary>
            <remarks>
            <p>
            Can only be used in an object factory.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Spinazzi Federico (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Target.PrototypeTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.PrototypeTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <p>
            No-op implementation.
            </p>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="P:Spring.Aop.Target.PrototypeTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="false"/> because this target source is never static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.SimplePoolTargetSource">
            <summary>
            Pooling target source implementation based on the
            <see cref="T:Spring.Pool.Support.SimplePool"/>
            </summary>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi</author>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.GetTarget">
            <summary>
            Returns the target object (acquired from the pool).
            </summary>
            <returns>
            The target object (acquired from the pool).
            </returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.CreatePool(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates the pool.
            </summary>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, in
            case one needs collaborators from it (normally one's own properties
            are sufficient).
            </param>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.CreateObjectPool">
            <summary>
            Creates a new instance of an appropriate
            <see cref="T:Spring.Pool.IObjectPool"/> implementation.
            </summary>
            <remarks>
            <p>
            Subclasses can, of course, override this method if they want to
            return a different <see cref="T:Spring.Pool.IObjectPool"/> implementation.
            </p>
            </remarks>
            <returns>
            An empty <see cref="T:Spring.Pool.IObjectPool"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object (returns it to the pool).
            </summary>
            <param name="target">The target object to release (return to the pool).</param>
            <exception cref="T:System.Exception">
            In the case that the <paramref name="target"/> could not be released.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <remarks>
            <p>
            Disposes of the pool.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.MakeObject">
            <summary>
            Creates an instance that can be returned by the pool.
            </summary>
            <returns>
            An instance that can be returned by the pool.
            </returns>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.MakeObject"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.DestroyObject(System.Object)">
            <summary>
            Destroys an instance no longer needed by the pool.
            </summary>
            <param name="obj">The instance to be destroyed.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.DestroyObject(System.Object)"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.ValidateObject(System.Object)">
            <summary>
            Ensures that the instance is safe to be returned by the pool.
            Returns false if this object should be destroyed.
            </summary>
            <param name="obj">The instance to validate.</param>
            <returns>
            <see langword="false"/> if this object is not valid and
            should be dropped from the pool, otherwise <see langword="true"/>.
            </returns>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.ValidateObject(System.Object)"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.ActivateObject(System.Object)">
            <summary>
            Reinitialize an instance to be returned by the pool.
            </summary>
            <param name="obj">The instance to be activated.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)"/>
        </member>
        <member name="M:Spring.Aop.Target.SimplePoolTargetSource.PassivateObject(System.Object)">
            <summary>
            Passivates the object.
            </summary>
            <param name="obj">The instance returned to the pool.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)"/>
        </member>
        <member name="P:Spring.Aop.Target.SimplePoolTargetSource.Active">
            <summary>
            The number of active object instances in this pool.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.SimplePoolTargetSource.Free">
            <summary>
            The number of free object instances in this pool.
            </summary>
        </member>
        <member name="T:Spring.Aop.Target.SingletonTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that holds a local
            object.
            </summary>
            <remarks>
            <p>
            This is the default implementation of the
            <see cref="T:Spring.Aop.ITargetSource"/> interface used by the AOP
            framework. There should be no need to create objects of this class in
            application code.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.#ctor(System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.SingletonTargetSource"/>
            for the specified target object.
            </summary>
            <param name="target">The target object to expose.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="target"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.#ctor(System.Object,System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.Target.SingletonTargetSource"/>
            for the specified target object.
            </summary>
            <param name="target">The target object to expose.</param>
            <param name="targetType">The type of <paramref name="target"/> to expose.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="target"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.ReleaseTarget(System.Object)">
            <summary>
            Releases the target object.
            </summary>
            <remarks>
            <p>
            No-op implementation.
            </p>
            </remarks>
            <param name="target">The target object to release.</param>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.ToString">
            <summary>
            Returns a stringified representation of this target source.
            </summary>
            <returns>
            A stringified representation of this target source.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.  
            </summary>
            <param name="other">The target source to compare with.</param>
            <returns>
            <see langword="true"/> if this instance is equal to the
            specified <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.Target.SingletonTargetSource.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Aop.Target.SingletonTargetSource.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Aop.Target.SingletonTargetSource.IsStatic">
            <summary>
            Is the target source static?
            </summary>
            <value>
            <see langword="true"/> because this target source is always static.
            </value>
        </member>
        <member name="T:Spring.Aop.Target.ThreadLocalTargetSource">
            <summary>
            <see cref="T:Spring.Aop.ITargetSource"/> implementation that uses a
            threading model in which every thread has its own copy of the target.
            </summary>
            <remarks>
            <p>
            Alternative to an object pool.
            </p>
            <p>
            Application code is written as to a normal pool; callers can't assume
            they will be dealing with the same instance in invocations in different
            threads. However, state can be relied on during the operations of a
            single thread: for example, if one caller makes repeated calls on the
            AOP proxy.
            </p>
            <p>
            This class act both as an introduction and as an interceptor, so it 
            should be added twice, once as an introduction and once as an
            interceptor.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Federico Spinazzi (.NET)</author>
        </member>
        <member name="F:Spring.Aop.Target.ThreadLocalTargetSource._targetInThread">
            <summary>
            ThreadLocal holding the target associated with the current thread.
            </summary>
            <remarks>
            <p>
            Unlike most thread local storage which is static, this variable is
            meant to be per thread per instance of this class.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Aop.Target.ThreadLocalTargetSource._targetSet">
            <summary>
            The set of managed targets, enabling us to keep track of the
            targets we've created.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget">
            <summary>
            Returns the target object.
            </summary>
            <remarks>
            <p>
            Tries to locate the target from thread local storage. If no target
            is found, a target will be obtained and bound to the thread.
            </p>
            </remarks>
            <returns>The target object.</returns>
            <exception cref="T:System.Exception">
            If unable to obtain the target object.
            </exception>
            <seealso cref="M:Spring.Aop.Target.AbstractPrototypeTargetSource.NewPrototypeInstance"/>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.GetStatsMixin">
            <summary>
            Return an introduction advisor mixin that allows the AOP proxy to be
            cast to an <see cref="T:Spring.Aop.Target.IThreadLocalTargetSourceStats"/> reference.
            </summary>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.Dispose">
            <summary>
            Cleans up this instance's thread storage, and disposes of any
            <see cref="T:System.IDisposable"/> targets as necessary.
            </summary>
            <seealso cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Increments Invocations and Hits statistics
            </summary>
            <param name="invocation">The method invocation joinpoint</param>
            <returns>The result of the call to IJoinpoint.Proceed(), might be intercepted by the interceptor.</returns>
            <exception cref="T:System.Exception">if the interceptors or the target-object throws an exception.</exception>
        </member>
        <member name="P:Spring.Aop.Target.ThreadLocalTargetSource.Invocations">
            <summary>
            Gets the number of invocations of the <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </summary>
            <value>
            The number of invocations of the <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.GetTarget"/> and
            <see cref="M:Spring.Aop.Target.ThreadLocalTargetSource.Invoke(AopAlliance.Intercept.IMethodInvocation)"/> methods.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.ThreadLocalTargetSource.Hits">
            <summary>
            Gets the number of hits that were satisfied by a thread bound object.
            </summary>
            <value>
            The number of hits that were satisfied by a thread bound object.
            </value>
        </member>
        <member name="P:Spring.Aop.Target.ThreadLocalTargetSource.Objects">
            <summary>
            Gets the number of thread bound objects created.
            </summary>
            <value>The number of thread bound objects created.</value>
        </member>
        <member name="T:Spring.Aop.IAdvisors">
            <summary>
            AOP Aspect abstraction, holding a list of <see cref="T:Spring.Aop.IAdvisor"/>s
            </summary>
            <seealso cref="T:Spring.Aop.IAdvisor"/>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="P:Spring.Aop.IAdvisors.Advisors">
            <summary>
            Gets or sets a list of advisors.
            </summary>
            <value>
            A list of advisors.
            </value>
        </member>
        <member name="T:Spring.Aop.IAfterReturningAdvice">
            <summary>
            Advice that executes after a method returns <b>successfully</b>.
            </summary>
            <remarks>
            <p>
            <i>After</i> returning advice is invoked only on a normal method
            return, but <b>not</b> if an exception is thrown. Such advice can see
            the return value of the advised method invocation, but cannot change it.
            </p>
            <p>
            Possible uses for this type of advice would include performing access
            control checks on the return value of an advised method invocation, the
            ubiquitous logging of method invocation return values (useful during
            development), etc.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
        </member>
        <member name="M:Spring.Aop.IAfterReturningAdvice.AfterReturning(System.Object,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            Executes after <paramref name="target"/> <paramref name="method"/>
            returns <b>successfully</b>.
            </summary>
            <remarks>
            <p>
            Note that the supplied <paramref name="returnValue"/> <b>cannot</b>
            be changed by this type of advice... use the around advice type
            (<see cref="T:AopAlliance.Intercept.IMethodInterceptor"/>) if you
            need to change the return value of an advised method invocation.
            The data encapsulated by the supplied <paramref name="returnValue"/>
            can of course be modified though.
            </p>
            </remarks>
            <param name="returnValue">
            The value returned by the <paramref name="target"/>.
            </param>
            <param name="method">The intecepted method.</param>
            <param name="args">The intercepted method's arguments.</param>
            <param name="target">The target object.</param>
            <seealso cref="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="T:Spring.Aop.IBeforeAdvice">
            <summary>
            Superinterface for all before advice.
            </summary>
            <remarks>
            <p>
            <i>Before</i> advice is advice that executes before a joinpoint, but
            which does not have the ability to prevent execution flow proceeding to
            the joinpoint (unless it throws an <see cref="T:System.Exception"/>).
            </p>
            <p>
            Spring.NET only supports <i>method</i> before advice. Although this
            is unlikely to change, this API is designed to allow <i>field</i>
            before advice in future if desired.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
        </member>
        <member name="T:Spring.Aop.IIntroductionInterceptor">
            <summary> 
            Subinterface of the AOP Alliance
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> interface that
            allows additional interfaces to be implemented by the interceptor, and
            available via a proxy using that interceptor.
            </summary>
            <remarks>
            <p>
            This is a fundamental AOP concept called <b>introduction</b>.
            </p>
            <p>
            Introductions are often <b>mixins</b>, enabling the building of composite
            objects that can achieve many of the goals of multiple inheritance.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Aop.IIntroductionInterceptor.ImplementsInterface(System.Type)">
            <summary>
            Does this <see cref="T:Spring.Aop.IIntroductionInterceptor"/>
            implement the given interface?
            </summary>
            <param name="intf">The interface to check.</param>
            <returns>
            <see langword="true"/> if this
            <see cref="T:Spring.Aop.IIntroductionInterceptor"/>
            implements the given interface.
            </returns>
        </member>
        <member name="T:Spring.Aop.IMethodBeforeAdvice">
            <summary>
            Advice executed before a method is invoked.
            </summary>
            <remarks>
            <p>
            Such advice cannot prevent the method call proceeding, short of
            throwing an <see cref="T:System.Exception"/>.
            </p>
            <p>
            The main advantage of <c>before</c> advice is that there is no
            possibility of inadvertently failing to proceed down the interceptor
            chain, since there is no need (and indeed means) to invoke the next
            interceptor in the call chain.
            </p>
            <p>
            Possible uses for this type of advice would include performing class
            invariant checks prior to the actual method invocation, the ubiquitous
            logging of method invocations (useful during development), etc.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:Spring.Aop.IThrowsAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
        </member>
        <member name="M:Spring.Aop.IMethodBeforeAdvice.Before(System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            The callback before a given method is invoked.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="args">The arguments to the method.</param>
            <param name="target">
            The target of the method invocation. May be <see langword="null"/>.
            </param>
            <exception cref="T:System.Exception">
            Thrown when and if this object wishes to abort the call. Any
            exception so thrown will be propagated to the caller.
            </exception>
        </member>
        <member name="T:Spring.Aop.IThrowsAdvice">
            <summary> 
            Simple marker interface for throws advice.
            </summary>
            <remarks>
            <p>
            There are no methods on this interface, as methods are discovered and
            invoked via reflection. Please do see read the API documentation for the
            <see cref="T:Spring.Aop.Framework.Adapter.ThrowsAdviceInterceptor"/> class;
            said documention describes in detail the signature of the methods that
            implementations of the <see cref="T:Spring.Aop.IThrowsAdvice"/> interface
            must adhere to in the specific case of Spring.NET's implementation of
            throws advice.
            </p>
            <p>
            There are any number of possible uses for this type of advice. Some
            examples would include the ubiquitous logging of any such exceptions,
            monitoring the number and type of exceptions and sending emails to
            a support desk once certain criteria have been met, wrapping generic
            exceptions such as <see cref="T:System.Data.SqlClient.SqlException"/> in
            exceptions that are more meaningful to your business logic, etc.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Aop.IMethodBeforeAdvice"/>
            <seealso cref="T:Spring.Aop.IAfterReturningAdvice"/>
            <seealso cref="T:AopAlliance.Intercept.IMethodInterceptor"/>
        </member>
        <member name="T:Spring.Aop.TrueMethodMatcher">
            <summary>
            Canonical <see cref="T:Spring.Aop.IMethodMatcher"/> that matches
            <b>all</b> methods.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="F:Spring.Aop.TrueMethodMatcher.True">
            <summary>
            Canonical instance that matches <b>all</b> methods.
            </summary>
            <remarks>
            <p>
            It is not dynamic.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.TrueMethodMatcher"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            Perform static checking. If this returns false, or if the isRuntime() method
            returns false, no runtime check will be made.
            </summary>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target class (may be <see langword="null"/>, in which case the
            candidate class must be taken to be the <paramref name="method"/>'s
            declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])">
            <summary>
            Is there a runtime (dynamic) match for the supplied
            <paramref name="method"/>?
            </summary>
            <param name="method">The candidate method.</param>
            <param name="targetType">The target class.</param>
            <param name="args">The arguments to the method</param>
            <returns>
            <see langword="true"/> if there is a runtime match.</returns>
            <seealso cref="M:Spring.Aop.IMethodMatcher.Matches(System.Reflection.MethodInfo,System.Type,System.Object[])"/>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.TrueMethodMatcher.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Aop.TrueMethodMatcher.IsRuntime">
            <summary>
            Is this <see cref="T:Spring.Aop.IMethodMatcher"/> dynamic?
            </summary>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Aop.IMethodMatcher"/> is dynamic.
            </value>
            <seealso cref="P:Spring.Aop.IMethodMatcher.IsRuntime"/>
        </member>
        <member name="T:Spring.Aop.TruePointcut">
            <summary>
            Canonical <see cref="T:Spring.Aop.IPointcut"/> instance that matches
            everything.
            </summary>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="F:Spring.Aop.TruePointcut.True">
            <summary>
            Canonical instance that matches everything.
            </summary>
        </member>
        <member name="M:Spring.Aop.TruePointcut.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.TruePointcut"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TruePointcut.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IPointcut"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.IPointcut"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.TruePointcut.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Aop.TruePointcut.TypeFilter">
            <summary>
            The <see cref="T:Spring.Aop.ITypeFilter"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.ITypeFilter"/>.
            </value>
        </member>
        <member name="P:Spring.Aop.TruePointcut.MethodMatcher">
            <summary>
            The <see cref="T:Spring.Aop.IMethodMatcher"/> for this pointcut.
            </summary>
            <value>
            The current <see cref="T:Spring.Aop.IMethodMatcher"/>.
            </value>
        </member>
        <member name="T:Spring.Aop.TrueTypeFilter">
            <summary>
            Canonical <see cref="T:Spring.Aop.ITypeFilter"/> instances.
            </summary>
            <remarks>
            <p>
            Only one canonical <see cref="T:Spring.Aop.ITypeFilter"/> instance is
            provided out of the box. The <see cref="F:Spring.Aop.TrueTypeFilter.True"/>
            <see cref="T:Spring.Aop.ITypeFilter"/> matches all classes.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="F:Spring.Aop.TrueTypeFilter.True">
            <summary>
            Canonical <see cref="T:Spring.Aop.ITypeFilter"/> instance that
            matches all classes.
            </summary>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Aop.TrueTypeFilter"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.Matches(System.Type)">
            <summary>
            Should the pointcut apply to the supplied
            <see cref="T:System.Type"/>?
            </summary>
            <param name="type">
            The candidate <see cref="T:System.Type"/>.
            </param>
            <returns>
            <see langword="true"/> if the advice should apply to the supplied
            <paramref name="type"/>
            </returns>
            <seealso cref="M:Spring.Aop.ITypeFilter.Matches(System.Type)"/>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITypeFilter"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:Spring.Aop.ITypeFilter"/>.
            </returns>
        </member>
        <member name="M:Spring.Aop.TrueTypeFilter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="T:AopAlliance.Aop.AspectException">
            <summary>
            Superclass for all AOP infrastructure exceptions.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="innerException">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:AopAlliance.Aop.AspectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:AopAlliance.Aop.AspectException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:AopAlliance.Intercept.IConstructorInterceptor">
            <summary>
            Intercepts the construction of a new object.
            </summary>
            <remarks>
            <p>
            Such interceptions are nested "on top" of the target.
            </p>
            </remarks>
        </member>
        <member name="M:AopAlliance.Intercept.IConstructorInterceptor.Construct(AopAlliance.Intercept.IConstructorInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the consruction of a new object.
            </summary>
            <remarks>
            <p>
            Polite implementations would certainly like to invoke
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>. 
            </p>
            </remarks>
            <param name="invocation">
            The constructor invocation that is being intercepted.
            </param>
            <returns>
            The newly created object, which is also the result of the call to
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>, and might be
            replaced by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="T:AopAlliance.Intercept.IConstructorInvocation">
            <summary>
            A description of an invocation to a constuctor, given to an interceptor
            upon constructor-call.
            </summary>
            <remarks>
            <p>
            A constructor invocation is a joinpoint and can be intercepted by a
            constructor interceptor.
            </p>
            </remarks>
            <seealso cref="T:AopAlliance.Intercept.IConstructorInterceptor"/>
        </member>
        <member name="P:AopAlliance.Intercept.IConstructorInvocation.Constructor">
            <summary>
            Gets the constructor invocation that is to be invoked.
            </summary>
            <remarks>
            <p>
            This property is a friendly implementation of the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property.
            It should be used in preference to the
            <see cref="P:AopAlliance.Intercept.IJoinpoint.StaticPart"/> property
            because it provides immediate access to the underlying constructor
            without the need to resort to a cast.
            </p>
            </remarks>
            <value>
            The constructor invocation that is to be invoked.
            </value>
        </member>
        <member name="T:Spring.Aspects.Cache.BaseCacheAdvice">
            <summary>
            Base class for different cache advice implementations that provide
            access to common functionality, such as obtaining a cache instance.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Aspects.Cache.BaseCacheAdvice.logger">
            <summary>
            Shared logger instance
            </summary>
        </member>
        <member name="M:Spring.Aspects.Cache.BaseCacheAdvice.#ctor">
            <summary>
            Create a new default instance.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Cache.BaseCacheAdvice.GetCache(System.String)">
            <summary>
            Returns an <see cref="T:Spring.Caching.ICache"/> instance based on the cache name.
            </summary>
            <param name="name">The name of the cache.</param>
            <returns>
            Cache instance for the specified <paramref name="name"/> if one
            is registered in the application context, or <c>null</c> if it isn't.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no cache instance registered for the specified <paramref name="name"/>.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the cache instance could not be created.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the cache instance registered does not implement the <see cref="T:Spring.Caching.ICache"/> interface.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Cache.BaseCacheAdvice.PrepareVariables(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Prepares variables for expression evaluation by packaging all 
            method arguments into a dictionary, keyed by argument name.
            </summary>
            <param name="method">
            Method to get parameters info from.
            </param>
            <param name="arguments">
            Argument values to package.
            </param>
            <returns>
            A dictionary containing all method arguments, keyed by method name.
            </returns>
        </member>
        <member name="M:Spring.Aspects.Cache.BaseCacheAdvice.EvalCondition(System.String,Spring.Expressions.IExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Evaluates a SpEL expression as a boolean value.
            </summary>
            <param name="condition">
            The expression string that should be evaluated.
            </param>
            <param name="conditionExpression">
            The SpEL expression instance that should be evaluated.
            </param>
            <param name="context">
            The object to evaluate expression against.
            </param>
            <param name="variables">
            The expression variables dictionary.
            </param>
            <returns>
            The evaluated boolean.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the SpEL expression could not be successfuly resolved to a boolean.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Cache.BaseCacheAdvice.GetCustomAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Retrieves custom attribute for the specified attribute type.
            </summary>
            <param name="attributeProvider">
            Method/Parameter to get attribute from.
            </param>
            <param name="attributeType">
            Attribute type.
            </param>
            <returns>
            Attribute instance if one is found, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Aspects.Cache.BaseCacheAdvice.GetCustomAttributes(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Retrieves custom attribute for the specified attribute type.
            </summary>
            <param name="attributeProvider">
            Method/Parameter to get attribute from.
            </param>
            <param name="attributeType">
            Attribute type.
            </param>
            <returns>
            Attribute instance if one is found, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Aspects.Cache.BaseCacheAdvice.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
        </member>
        <member name="T:Spring.Aspects.Cache.CacheAspect">
            <summary>
            Caching aspect implementation.
            </summary>
            <remarks>
            This class encapsulates all the advisors that need to be configured to support
            Spring's full caching functionality.
            </remarks>
            <see cref="T:Spring.Aspects.Cache.CacheResultAdvisor"/>
            <see cref="T:Spring.Aspects.Cache.CacheParameterAdvisor"/>
            <see cref="T:Spring.Aspects.Cache.InvalidateCacheAdvisor"/>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheAspect.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Spring.Aspects.Cache.CacheAspect.Advisors">
            <summary>
            Gets or sets a list of advisors for this aspect.
            </summary>
            <value>
            A list of advisors for this aspect.
            </value>
        </member>
        <member name="P:Spring.Aspects.Cache.CacheAspect.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <remarks>
            <p>
            Normally this call will be used to initialize the object.
            </p>
            <p>
            Invoked after population of normal object properties but before an
            init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/>
            property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="T:Spring.Aspects.Cache.CacheParameterAdvice">
            <summary>
            Implementation of a parameter caching advice.
            </summary>
            <remarks>
            <p>
            This advice can be used to cache the parameter of the method. 
            </p>
            <p>
            Information that determines where, how and for how long the return value 
            will be cached are retrieved from the <see cref="T:Spring.Caching.CacheParameterAttribute"/>s 
            that are defined on the pointcut.
            </p>
            <p>
            Parameter values are cached *after* the target method is invoked in order to
            capture any parameter state changes it might make (for example, it is common
            to set an object identifier within the save method for the persistent entity).
            </p>
            </remarks>
            <seealso cref="T:Spring.Caching.CacheParameterAttribute"/>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheParameterAdvice.AfterReturning(System.Object,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            Executes after target <paramref name="method"/>
            returns <b>successfully</b>.
            </summary>
            <remarks>
            <p>
            Note that the supplied <paramref name="returnValue"/> <b>cannot</b>
            be changed by this type of advice... use the around advice type
            (<see cref="T:AopAlliance.Intercept.IMethodInterceptor"/>) if you
            need to change the return value of an advised method invocation.
            The data encapsulated by the supplied <paramref name="returnValue"/>
            can of course be modified though.
            </p>
            </remarks>
            <param name="returnValue">
            The value returned by the <paramref name="target"/>.
            </param>
            <param name="method">The intecepted method.</param>
            <param name="arguments">The intercepted method's arguments.</param>
            <param name="target">The target object.</param>
            <seealso cref="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="T:Spring.Aspects.Cache.CacheParameterAdvisor">
            <summary>
            Convinience advisor implementation that applies <see cref="T:Spring.Aspects.Cache.CacheParameterAdvice"/>
            to all the methods that have <see cref="T:Spring.Caching.CacheParameterAttribute"/> defined on one or
            more of their parameters.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheParameterAdvisor.#ctor">
            <summary>
            Creates new advisor instance.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheParameterAdvisor.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Returns <c>true</c> if any of the parameters of the specified <paramref name="method"/>
            has <see cref="T:Spring.Caching.CacheParameterAttribute"/> applied.
            </summary>
            <param name="method">
            Method to check.
            </param>
            <param name="targetType">
            Type of target object.
            </param>
            <returns>
            <c>true</c> if any of the parameters of the specified <paramref name="method"/>
            has <see cref="T:Spring.Caching.CacheParameterAttribute"/> applied; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Aspects.Cache.CacheParameterAdvisor.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <remarks>
            <p>
            Normally this call will be used to initialize the object.
            </p>
            <p>
            Invoked after population of normal object properties but before an
            init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/>
            property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="T:Spring.Aspects.Cache.CacheResultAdvice">
            <summary>
            Implementation of a result caching advice.
            </summary>
            <remarks>
            <p>
            This advice can be used to cache the return value of the method. 
            </p>
            <p>
            Parameters that determine where, how and for how long the return value 
            will be cached are retrieved from the <see cref="T:Spring.Caching.CacheResultAttribute"/> and/or 
            <see cref="T:Spring.Caching.CacheResultItemsAttribute"/> that are defined on the pointcut.
            </p>
            </remarks>
            <seealso cref="T:Spring.Caching.CacheResultAttribute"/>
            <seealso cref="T:Spring.Caching.CacheResultItemsAttribute"/>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheResultAdvice.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Applies caching around a method invocation.
            </summary>
            <remarks>
            <p>
            This method tries to retrieve an object from the cache, using the supplied
            <paramref name="invocation"/> to generate a cache key. If an object is found
            in the cache, the cached value is returned and the method call does not
            proceed any further down the invocation chain.
            </p>
            <p>
            If object does not exist in the cache, the advised method is called (using
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>)
            and any return value is cached for the next method invocation.
            </p>
            </remarks>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            A cached object or the result of the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> call.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheResultAdvice.GetReturnValue(AopAlliance.Intercept.IMethodInvocation,Spring.Caching.CacheResultAttribute,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
            Obtains return value either from cache or by invoking target method
            and caches it if necessary.
            </summary>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <param name="resultInfo">
            Attribute specifying where and how to cache return value. Can be <c>null</c>,
            in which case no caching of the result as a whole will be performed 
            (if the result is collection, individual items could still be cached separately).
            </param>
            <param name="vars">
            Variables for expression evaluation.
            </param>
            <param name="cacheHit">
            Returns <c>true</c> if the return value was found in cache, <c>false</c> otherwise.
            </param>
            <returns>
            Return value for the specified <paramref name="invocation"/>.
            </returns>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheResultAdvice.CacheResultItems(System.Collections.IEnumerable,Spring.Caching.CacheResultItemsAttribute[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Caches each item from the collection returned by target method.
            </summary>
            <param name="items">
            A collection of items to cache.
            </param>
            <param name="itemInfoArray">
            Attributes specifying where and how to cache each item from the collection.
            </param>
            <param name="vars">
            Variables for expression evaluation.
            </param>
        </member>
        <member name="T:Spring.Aspects.Cache.CacheResultAdvice.NullValueMarkerType">
            <summary>
            Inner class to help cache null values.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheResultAdvice.NullValueMarkerType.Equals(System.Object)">
            <returns>true when other object is of same type.</returns>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheResultAdvice.NullValueMarkerType.GetHashCode">
            <returns>13</returns>
        </member>
        <member name="T:Spring.Aspects.Cache.CacheResultAdvisor">
            <summary>
            Convinience advisor implementation that applies <see cref="T:Spring.Aspects.Cache.CacheResultAdvice"/>
            to all the methods that have <see cref="T:Spring.Caching.CacheResultAttribute"/> defined.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheResultAdvisor.#ctor">
            <summary>
            Creates new advisor instance.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Cache.CacheResultAdvisor.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Returns <c>true</c> if either <see cref="T:Spring.Caching.CacheResultAttribute"/> or 
            <see cref="T:Spring.Caching.CacheResultItemsAttribute"/> is applied to the 
            <paramref name="method"/>.
            </summary>
            <param name="method">
            Method to check.
            </param>
            <param name="targetType">
            Type of target object.
            </param>
            <returns>
            <c>true</c> if either <see cref="T:Spring.Caching.CacheResultAttribute"/> or 
            <see cref="T:Spring.Caching.CacheResultItemsAttribute"/> is applied to the 
            <paramref name="method"/>; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Aspects.Cache.CacheResultAdvisor.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <remarks>
            <p>
            Normally this call will be used to initialize the object.
            </p>
            <p>
            Invoked after population of normal object properties but before an
            init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/>
            property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="T:Spring.Aspects.Cache.InvalidateCacheAdvice">
            <summary>
            Implementation of a cache invalidation advice.
            </summary>
            <remarks>
            <p>
            This advice can be used to evict items from the cache. 
            </p>
            <p>
            Information that determines which items should be evicted and from which cache
            are retrieved from the <see cref="T:Spring.Caching.InvalidateCacheAttribute"/>s  that are defined 
            on the pointcut.
            </p>
            <p>
            Items are evicted *after* target method is invoked. Return value of the method, 
            as well as method arguments, can be used to determine a list of keys for the items
            that should be evicted (return value will be passed as a context for 
            <see cref="P:Spring.Caching.InvalidateCacheAttribute.Keys"/> expression evaluation, and method
            arguments will be passed as variables, keyed by argument name).
            </p>
            </remarks>
            <seealso cref="T:Spring.Caching.InvalidateCacheAttribute"/>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Cache.InvalidateCacheAdvice.AfterReturning(System.Object,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            Executes after <paramref name="target"/> <paramref name="method"/>
            returns <b>successfully</b>.
            </summary>
            <remarks>
            <p>
            Note that the supplied <paramref name="returnValue"/> <b>cannot</b>
            be changed by this type of advice... use the around advice type
            (<see cref="T:AopAlliance.Intercept.IMethodInterceptor"/>) if you
            need to change the return value of an advised method invocation.
            The data encapsulated by the supplied <paramref name="returnValue"/>
            can of course be modified though.
            </p>
            </remarks>
            <param name="returnValue">
            The value returned by the <paramref name="target"/>.
            </param>
            <param name="method">The intecepted method.</param>
            <param name="arguments">The intercepted method's arguments.</param>
            <param name="target">The target object.</param>
            <seealso cref="M:AopAlliance.Intercept.IMethodInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)"/>
        </member>
        <member name="T:Spring.Aspects.Cache.InvalidateCacheAdvisor">
            <summary>
            Convinience advisor implementation that applies <see cref="T:Spring.Aspects.Cache.InvalidateCacheAdvice"/>
            to all the methods that have <see cref="T:Spring.Caching.InvalidateCacheAttribute"/> defined.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Cache.InvalidateCacheAdvisor.#ctor">
            <summary>
            Creates new advisor instance.
            </summary>
        </member>
        <member name="P:Spring.Aspects.Cache.InvalidateCacheAdvisor.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <remarks>
            <p>
            Normally this call will be used to initialize the object.
            </p>
            <p>
            Invoked after population of normal object properties but before an
            init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/>
            property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="T:Spring.Aspects.Exceptions.ExceptionHandlerAdvice">
            <summary>
            Exception advice to perform exception translation, conversion of exceptions to default return values, and
            exception swallowing.  Configuration is via a DSL like string for ease of use in common cases as well as
            allowing for custom translation logic by leveraging the Spring expression language.
            </summary>
            <remarks>
            <para>
            The exception handler collection can be filled with either instances of objects that implement the interface
            <see cref="T:Spring.Aspects.IExceptionHandler"/> or a string that follows a simple syntax for most common exception management
            needs.  The source exceptions to perform processing on are listed immediately after the keyword 'on' and can
            be comma delmited.  Following that is the action to perform, either log, translate, wrap, replace, return, or
            swallow.  Following the action is a Spring expression language (SpEL) fragment that is used to either create the
            translated/wrapped/replaced exception or specify an alternative return value.  The variables available to be
            used in the expression language fragment are, #method, #args, #target, and #e which are 1) the method that
            threw the exception, the arguments to the method, the target object itself, and the exception that was thrown.
            Using SpEL gives you great flexibility in creating a translation of an exception that has access to the calling context.
            </para>
            <para>Common translation cases, wrap and rethrow, are supported with a shorter syntax where you can specify only
            the exception text for the new translated exception.  If you ommit the exception text a default value will be
            used.</para>
            <para>The exceptionsHandlers are compared to the thrown exception in the order they are listed.  logging
            an exception will continue the evaluation process, in all other cases exceution stops at that point and the
            appropriate exceptions handler is executed.</para>
            <code escaped="true">
            <property name="exceptionHandlers">
              <list>
                <value>on FooException1 log 'My Message, Method Name ' + #method.Name</value>
                <value>on FooException1 translate new BarException('My Message, Method Called = ' + #method.Name", #e)</value>
                <value>on FooException2,Foo3Exception wrap BarException 'My Bar Message'</value>
                <value>on FooException4 replace BarException 'My Bar Message'</value>
                <value>on FooException5 return 32</value>
                <value>on FooException6 swallow</value>
                <ref object="exceptionExpression"/>
              </list>
            </property>
            </code>
            
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Aspects.AbstractExceptionHandlerAdvice">
             <summary>
             This is 
             </summary>
             <remarks>
            
             </remarks>
             <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandlerAdvice.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the call to the supplied <paramref name="invocation"/>.
            </summary>
            <remarks>
            <p>
            Polite implementations would certainly like to invoke
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>. 
            </p>
            </remarks>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandlerAdvice.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform the kind of
            initialization only possible when all of it's dependencies have
            been injected (set), and to throw an appropriate exception in the
            event of misconfiguration.
            </p>
            <p>
            Please do consult the class level documentation for the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface for a
            description of exactly <i>when</i> this method is invoked. In
            particular, it is worth noting that the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            callbacks will have been invoked <i>prior</i> to this method being
            called.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandlerAdvice.ParseAdviceExpression(System.String)">
            <summary>
            Parses the advice expression.
            </summary>
            <param name="adviceExpression">The advice expression.</param>
            <returns>An instance of ParsedAdviceExpression</returns>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandlerAdvice.GetMatch(System.String,System.String)">
            <summary>
            Gets the match using exception constraint expression.
            </summary>
            <param name="adviceExpressionString">The advice expression string.</param>
            <param name="regexString">The regex string.</param>
            <returns>The Match object resulting from the regular expression match.</returns>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandlerAdvice.OnDeserialization(System.Object)">
            <summary>
            Override in case you need to initialized non-serialized fields on deserialization.
            </summary>
        </member>
        <member name="P:Spring.Aspects.AbstractExceptionHandlerAdvice.OnExceptionNameRegex">
            <summary>
            Gets or sets the Regex string used to parse advice expressions starting with 'on exception name' and subclass specific actions.
            </summary>
            <value>The regex string to parse advice expressions starting with 'on exception name' and subclass specific actions.</value>
        </member>
        <member name="P:Spring.Aspects.AbstractExceptionHandlerAdvice.OnExceptionRegex">
            <summary>
            Gets or sets the Regex string used to parse advice expressions starting with 'on exception (constraint)' and subclass specific actions.
            </summary>
            <value>The regex string to parse advice expressions starting with 'on exception (constraint)' and subclass specific actions.</value>
        </member>
        <member name="F:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.log">
            <summary>
            Log instance available to subclasses
            </summary>
        </member>
        <member name="F:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.exceptionHandlerTable">
            <summary>
            Holds shared handler definition templates
            </summary>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the call to the supplied <paramref name="invocation"/>.
            </summary>
            <remarks>
            <p>
            Polite implementations would certainly like to invoke
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>. 
            </p>
            </remarks>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform the kind of
            initialization only possible when all of it's dependencies have
            been injected (set), and to throw an appropriate exception in the
            event of misconfiguration.
            </p>
            <p>
            Please do consult the class level documentation for the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface for a
            description of exactly <i>when</i> this method is invoked. In
            particular, it is worth noting that the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            callbacks will have been invoked <i>prior</i> to this method being
            called.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.InvokeHandlers(System.Exception,AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Invokes handlers registered for the passed exception and <see cref="T:AopAlliance.Intercept.IMethodInvocation"/>
            </summary>
            <param name="ex">The exception to be handled</param>
            <param name="invocation">The <see cref="T:AopAlliance.Intercept.IMethodInvocation"/> that raised this exception.</param>
            <returns>The output of <see cref="M:Spring.Aspects.IExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})"/> </returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.Parse(System.String)">
            <summary>
            Parses the specified handler string, creating an instance of IExceptionHander.
            </summary>
            <param name="handlerString">The handler string.</param>
            <returns>an instance of an exception handler or null if was not able to correctly parse
            handler string.</returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.CreateExceptionHandler(Spring.Aspects.ParsedAdviceExpression)">
            <summary>
            Creates the exception handler.
            </summary>
            <param name="parsedAdviceExpression">The parsed advice expression.</param>
            <returns>The exception handler instance</returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.CreateExecuteSpelExceptionHandler(Spring.Aspects.ParsedAdviceExpression)">
            <summary>
            Creates the execute spel exception handler.
            </summary>
            <param name="parsedAdviceExpression">The parsed advice expression.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.CreateReturnValueExceptionHandler(Spring.Aspects.ParsedAdviceExpression)">
            <summary>
            Creates the return value exception handler.
            </summary>
            <param name="parsedAdviceExpression">The parsed advice expression.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.CreateSwallowExceptionHander(Spring.Aspects.ParsedAdviceExpression)">
            <summary>
            Creates the swallow exception hander.
            </summary>
            <param name="parsedAdviceExpression">The parsed advice expression.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.CreateTranslationExceptionHandler(System.String[])">
            <summary>
            Creates the translation exception handler.
            </summary>
            <param name="exceptionNames">The exception names.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.CreateLogExceptionHandler(System.String[])">
            <summary>
            Creates the log exception handler.
            </summary>
            <param name="exceptionNames">The exception names.</param>
            <returns>Log exception</returns>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ParseWrappedExceptionExpression(System.String,System.String)">
            <summary>
            Parses the wrapped exception expression.
            </summary>
            <param name="action">The action.</param>
            <param name="handlerString">The handler string.</param>
            <returns></returns>
        </member>
        <member name="P:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.OnExceptionNameRegex">
            <summary>
            Gets or sets the Regex string used to parse advice expressions starting with 'on exception name' and exception handling actions.
            </summary>
            <value>The regex string to parse advice expressions starting with 'on exception name' and exception handling actions.</value>
        </member>
        <member name="P:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.OnExceptionRegex">
            <summary>
            Gets or sets the Regex string used to parse advice expressions starting with 'on exception (constraint)' and exception handling actions.
            </summary>
            <value>The regex string to parse advice expressions starting with 'on exception (constraint)' and exception handling actions.</value>
        </member>
        <member name="P:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ExceptionHandlers">
            <summary>
            Gets or sets the exception handler.
            </summary>
            <value>The exception handler.</value>
        </member>
        <member name="P:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ExceptionHandlerDictionary">
            <summary>
            Gets the exception handler dictionary.  Allows for registration of a specific handler where the key
            is the action type.  This makes configuration of a custom exception handler easier, for example 
            LogExceptionHandler, in that only 'user friendly' properties such as LogName, etc., need to be configured
            and not 'user unfriendly' properties such as ConstraintExpressionText and ActionExpressionText.  
            </summary>
            <value>The exception handler dictionary.</value>
        </member>
        <member name="T:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ExceptionHandlerTable">
            <summary>
            A specialized dictionary for key value pairs of (string, IExceptionHandler)
            </summary>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ExceptionHandlerTable.Add(System.String,Spring.Aspects.IExceptionHandler)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ExceptionHandlerTable.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null. </exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Hashtable"/>. 
            or key is not a string or value is not an IExceptionHandler.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Hashtable"/> is read-only.-or- The <see cref="T:System.Collections.Hashtable"/> has a fixed size. </exception>
        </member>
        <member name="P:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ExceptionHandlerTable.Item(System.String)">
            <summary>
            Gets the <see cref="T:Spring.Aspects.IExceptionHandler"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Aspects.Exceptions.ExceptionHandlerAdvice.ExceptionHandlerTable.Item(System.Object)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Spring.Aspects.Exceptions.ExecuteSpelExceptionHandler">
            <summary>
            Executes an abribtrary Spring Expression Language (SpEL) expression as an action when handling an exception.
            </summary>
        </member>
        <member name="T:Spring.Aspects.AbstractExceptionHandler">
            <summary>
            An abstract base class providing all necessary functionality for typical IExceptionHandler implementations.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Aspects.IExceptionHandler">
            <summary>
            Handles a thrown exception providing calling context.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.IExceptionHandler.CanHandleException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether this instance can handle the exception the specified exception.
            </summary>
            <param name="ex">The exception.</param>
            <param name="callContextDictionary">The call context dictionary.</param>
            <returns>
            	<c>true</c> if this instance can handle the specified exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Aspects.IExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the exception.
            </summary>
            <param name="callContextDictionary">The call context dictionary.</param>
            <returns>
            The return value from handling the exception, if not rethrown or a new exception is thrown.
            </returns>
        </member>
        <member name="P:Spring.Aspects.IExceptionHandler.SourceExceptionNames">
            <summary>
            Gets the source exception names.
            </summary>
            <value>The source exception names.</value>
        </member>
        <member name="P:Spring.Aspects.IExceptionHandler.SourceExceptionTypes">
            <summary>
            Gets the source exception types.
            </summary>
            <value>The source exception types.</value>
        </member>
        <member name="P:Spring.Aspects.IExceptionHandler.ActionExpressionText">
            <summary>
            Gets the translation expression text
            </summary>
            <value>The translation expression text</value>
        </member>
        <member name="P:Spring.Aspects.IExceptionHandler.ConstraintExpressionText">
            <summary>
            Gets or sets the constraint expression text.
            </summary>
            <value>The constraint expression text.</value>
        </member>
        <member name="P:Spring.Aspects.IExceptionHandler.ContinueProcessing">
            <summary>
            Gets a value indicating whether to continue processing.
            </summary>
            <value><c>true</c> if continue processing; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Spring.Aspects.AbstractExceptionHandler.log">
            <summary>
            The logging instance
            </summary>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.AbstractExceptionHandler"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandler.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.AbstractExceptionHandler"/> class.
            </summary>
            <param name="exceptionNames">The exception names.</param>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandler.CanHandleException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Determines whether this instance can handle the exception the specified exception.
            </summary>
            <param name="ex">The exception.</param>
            <param name="callContextDictionary">The call context dictionary.</param>
            <returns>
            	<c>true</c> if this instance can handle the specified exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Aspects.AbstractExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the exception.
            </summary>
            <returns>The return value from handling the exception, if not rethrown or a new exception is thrown.</returns>
        </member>
        <member name="P:Spring.Aspects.AbstractExceptionHandler.SourceExceptionNames">
            <summary>
            Gets the source exception names.
            </summary>
            <value>The source exception names.</value>
        </member>
        <member name="P:Spring.Aspects.AbstractExceptionHandler.SourceExceptionTypes">
            <summary>
            Gets the source exception types.
            </summary>
            <value>The source exception types.</value>
        </member>
        <member name="P:Spring.Aspects.AbstractExceptionHandler.ActionExpressionText">
            <summary>
            Gets the action translation expression text
            </summary>
            <value>The action translation expression.</value>
        </member>
        <member name="P:Spring.Aspects.AbstractExceptionHandler.ConstraintExpressionText">
            <summary>
            Gets or sets the constraint expression text.
            </summary>
            <value>The constraint expression text.</value>
        </member>
        <member name="P:Spring.Aspects.AbstractExceptionHandler.ContinueProcessing">
            <summary>
            Gets a value indicating whether to continue processing.
            </summary>
            <value><c>true</c> if continue processing; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExecuteSpelExceptionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.ExecuteSpelExceptionHandler"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExecuteSpelExceptionHandler.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.ExecuteSpelExceptionHandler"/> class.
            </summary>
            <param name="exceptionNames">The exception names.</param>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ExecuteSpelExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the exception.
            </summary>
            <returns>The return value from handling the exception, if not rethrown or a new exception is thrown.</returns>
        </member>
        <member name="T:Spring.Aspects.Exceptions.LogExceptionHandler">
            <summary>
            Log the exceptions.  Default log nameis "LogExceptionHandler" and log level is Debug 
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.Exceptions.LogExceptionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.LogExceptionHandler"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Exceptions.LogExceptionHandler.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.LogExceptionHandler"/> class.
            </summary>
            <param name="exceptionNames">The exception names.</param>
        </member>
        <member name="M:Spring.Aspects.Exceptions.LogExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the exception.
            </summary>
            <param name="callContextDictionary">the calling context dictionary</param>
            <returns>
            The return value from handling the exception, if not rethrown or a new exception is thrown.
            </returns>
        </member>
        <member name="P:Spring.Aspects.Exceptions.LogExceptionHandler.LogName">
            <summary>
            Gets or sets the name of the log.
            </summary>
            <value>The name of the log.</value>
        </member>
        <member name="P:Spring.Aspects.Exceptions.LogExceptionHandler.LogLevel">
            <summary>
            Gets or sets the log level.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:Spring.Aspects.Exceptions.LogExceptionHandler.LogMessageOnly">
            <summary>
            Gets or sets a value indicating whether to log message only, and not pass in the 
            exception to the logging API
            </summary>
            <value><c>true</c> if log message only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aspects.Exceptions.LogExceptionHandler.ActionExpressionText">
            <summary>
            Gets the action translation expression text.  Overridden to add approprate settings to
            the SpEL expression that does the logging so that it depends on the values of LogLevel and
            LogMessageOnly.  Those properties must be set to the desired values before calling this method.
            
            </summary>
            <value>The action translation expression.</value>
        </member>
        <member name="T:Spring.Aspects.Exceptions.ReturnValueExceptionHandler">
            <summary>
            Evaluates the expression for the return value of the method.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ReturnValueExceptionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.ReturnValueExceptionHandler"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ReturnValueExceptionHandler.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.ReturnValueExceptionHandler"/> class.
            </summary>
            <param name="exceptionNames">The exception names.</param>
        </member>
        <member name="M:Spring.Aspects.Exceptions.ReturnValueExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns the result of evaluating the translation expression.
            </summary>
            <returns>The return value from handling the exception, if not rethrown or a new exception is thrown.</returns>
        </member>
        <member name="T:Spring.Aspects.Exceptions.SwallowExceptionHandler">
            <summary>
            Returns a token to indicate that this exception should be swallowed.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.Exceptions.SwallowExceptionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.SwallowExceptionHandler"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Exceptions.SwallowExceptionHandler.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.SwallowExceptionHandler"/> class.
            </summary>
            <param name="exceptionNames">The exception names.</param>
        </member>
        <member name="M:Spring.Aspects.Exceptions.SwallowExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the exception.
            </summary>
            <returns>The return value from handling the exception, if not rethrown or a new exception is thrown.</returns>
        </member>
        <member name="T:Spring.Aspects.Exceptions.TranslationExceptionHandler">
            <summary>
            Translates from one exception to another based.  My wrap or replace exception depending on the expression.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.Exceptions.TranslationExceptionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.TranslationExceptionHandler"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Exceptions.TranslationExceptionHandler.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Exceptions.TranslationExceptionHandler"/> class.
            </summary>
            <param name="exceptionNames">The exception names.</param>
        </member>
        <member name="M:Spring.Aspects.Exceptions.TranslationExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the exception.
            </summary>
            <returns>The return value from handling the exception, if not rethrown or a new exception is thrown.</returns>
        </member>
        <member name="T:Spring.Aspects.Logging.AbstractLoggingAdvice">
             <summary>
             Abstract base class for logging advice
             </summary>
             <remarks>
            
             </remarks>
             <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Aspects.Logging.AbstractLoggingAdvice.defaultLogger">
            <summary>
            The default <code>ILog</code> instance used to write logging messages.
            </summary>
        </member>
        <member name="F:Spring.Aspects.Logging.AbstractLoggingAdvice.defaultLoggerName">
            <summary>
            The name of the logger instance to use for obtaining from <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>.
            </summary>
        </member>
        <member name="F:Spring.Aspects.Logging.AbstractLoggingAdvice.hideProxyTypeNames">
            <summary>
            Indicates whether or not proxy type names should be hidden when using dynamic loggers.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.#ctor">
            <summary>
            Creates a new advice instance using this advice type's name for logging by default.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.#ctor(Common.Logging.ILog)">
            <summary>
            Creates a new advice instance using the given logger by default.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Adds logging to the method invocation.  
            </summary>
            <remarks>
            The method IsInterceptorEnabled is called
            as an optimization to determine if logging should be applied.  If logging should be 
            applied, the method invocation is passed to the InvokeUnderLog method for handling.
            If not, the method proceeds as normal. 
            </remarks>
            <param name="invocation">
            The method invocation that is being intercepted.
            </param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.IsInterceptorEnabled(AopAlliance.Intercept.IMethodInvocation,Common.Logging.ILog)">
            <summary>
            Determines whether the interceptor is enabled for the specified invocation, that
            is, whether the method InvokeUnderLog is called.
            </summary>
            <remarks>The default behavior is to check whether the given ILog instance
            is enabled by calling IsLogEnabled, whose default behavior is to check if
            the TRACE level of logging is enabled.  Subclasses</remarks>
            <param name="invocation">The invocation.</param>
            <param name="log">The log to write messages to</param>
            <returns>
            	<c>true</c> if [is interceptor enabled] [the specified invocation]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.IsLogEnabled(Common.Logging.ILog)">
            <summary>
            Determines whether the given log is enabled.
            </summary>
            <remarks>
            Default is true when the trace level is enabled.  Subclasses may override this
            to change the level at which logging occurs, or return true to ignore level
            checks.</remarks>
            <param name="log">The log instance to check.</param>
            <returns>
            	<c>true</c> if log is for a given log level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.InvokeUnderLog(AopAlliance.Intercept.IMethodInvocation,Common.Logging.ILog)">
            <summary>
            Subclasses must override this method to perform any tracing around the supplied
            IMethodInvocation.
            </summary>
            <remarks>
            Subclasses are resonsible for ensuring that the IMethodInvocation actually executes
            by calling IMethodInvocation.Proceed().
            <para>
            By default, the passed-in ILog instance will have log level
            "trace" enabled. Subclasses do not have to check for this again, unless
            they overwrite the IsInterceptorEnabled method to modify
            the default behavior.
            </para>
            </remarks>
            <param name="invocation">The method invocation to log</param>
            <param name="log">The log to write messages to</param>
            <returns>The result of the call to IMethodInvocation.Proceed()
            </returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.GetLoggerForInvocation(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Gets the appropriate log instance to use for the given IMethodInvocation.
            </summary>
            <remarks>
            If the UseDynamicLogger property is set to true, the ILog instance will be
            for the target class of the IMethodInvocation, otherwise the log will be the
            default static logger.
            </remarks>
            <param name="invocation">The method invocation being logged.</param>
            <returns>The ILog instance to use.</returns>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.SetDefaultLogger(System.String)">
            <summary>
            Sets the default logger to the given name.
            </summary>
            <param name="name">if <c>null</c>, the default logger is removed.</param>
        </member>
        <member name="M:Spring.Aspects.Logging.AbstractLoggingAdvice.OnDeserialization(System.Object)">
            <summary>
            Override in case you need to initialized non-serialized fields on deserialization.
            </summary>
        </member>
        <member name="P:Spring.Aspects.Logging.AbstractLoggingAdvice.UseDynamicLogger">
            <summary>
            Sets a value indicating whether to use a dynamic logger or static logger
            </summary>
            <remarks>Default is to use a static logger.
            <para>
            Used to determine which ILog instance should be used to write log messages for
            a particular method invocation: a dynamic one for the Type getting called,
            or a static one for the Type of the trace interceptor.
            </para>
            <para>
            Specify either this property or LoggerName, not both.
            </para>
            </remarks>
            <value><c>true</c> if use dynamic logger; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aspects.Logging.AbstractLoggingAdvice.LoggerName">
            <summary>
            Sets the name of the logger to use.
            </summary>
            <remarks>
            The name will be passed to the underlying logging implementation through Common.Logging,
            getting interpreted as the log category according to the loggers configuration.
            <para>
            This can be specified to not log into the category of a Type (whether this
            interceptor's class or the class getting called) but rather to a specific named category.
            </para>
            <para>
            Specify either this property or UseDynamicLogger, but not both.
            </para>
            </remarks>
            <value>The name of the logger.</value>
        </member>
        <member name="P:Spring.Aspects.Logging.AbstractLoggingAdvice.HideProxyTypeNames">
            <summary>
            Sets a value indicating whether hide proxy type names (whenever possible)
            when using dynamic loggers, i.e. property UseDynamicLogger is set to true.
            </summary>
            <value><c>true</c> if [hide proxy type names]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spring.Aspects.Logging.SimpleLoggingAdvice">
             <summary>
             Configurable advice for logging.
             </summary>
             <remarks>
            
             </remarks>
             <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Aspects.Logging.SimpleLoggingAdvice.logUniqueIdentifier">
            <summary>
            Flag to indicate if unique identifier should be in the log message.
            </summary>
        </member>
        <member name="F:Spring.Aspects.Logging.SimpleLoggingAdvice.logExecutionTime">
            <summary>
            Flag to indicate if the execution time should be in the log message.
            </summary>
        </member>
        <member name="F:Spring.Aspects.Logging.SimpleLoggingAdvice.logMethodArguments">
            <summary>
            Flag to indicate if the method arguments should be in the log message.
            </summary>
        </member>
        <member name="F:Spring.Aspects.Logging.SimpleLoggingAdvice.logReturnValue">
            <summary>
            Flag to indicate if the return value should be in the log message.
            </summary>
        </member>
        <member name="F:Spring.Aspects.Logging.SimpleLoggingAdvice.separator">
            <summary>
            The separator string to use for delmiting log message fields.
            </summary>
        </member>
        <member name="F:Spring.Aspects.Logging.SimpleLoggingAdvice.logLevel">
            <summary>
            The log level to use for logging the entry, exit, exception messages.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Logging.SimpleLoggingAdvice"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Logging.SimpleLoggingAdvice"/> class.
            </summary>
            <param name="useDynamicLogger">if set to <c>true</c> to use dynamic logger, if
            <c>false</c> use static logger.</param>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.#ctor(Common.Logging.ILog)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.Logging.SimpleLoggingAdvice"/> class.
            </summary>
            <param name="defaultLogger">the default logger to use</param>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.InvokeUnderLog(AopAlliance.Intercept.IMethodInvocation,Common.Logging.ILog)">
            <summary>
            Subclasses must override this method to perform any tracing around the supplied
            IMethodInvocation.
            </summary>
            <param name="invocation">The method invocation to log</param>
            <param name="log">The log to write messages to</param>
            <returns>
            The result of the call to IMethodInvocation.Proceed()
            </returns>
            <remarks>
            Subclasses are resonsible for ensuring that the IMethodInvocation actually executes
            by calling IMethodInvocation.Proceed().
            <para>
            By default, the passed-in ILog instance will have log level
            "trace" enabled. Subclasses do not have to check for this again, unless
            they overwrite the IsInterceptorEnabled method to modify
            the default behavior.
            </para>
            </remarks>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.IsLogEnabled(Common.Logging.ILog)">
            <summary>
            Determines whether the given log is enabled.
            </summary>
            <param name="log">The log instance to check.</param>
            <returns>
            	<c>true</c> if log is for a given log level; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Default is true when the trace level is enabled.  Subclasses may override this
            to change the level at which logging occurs, or return true to ignore level
            checks.</remarks>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.CreateUniqueIdentifier">
            <summary>
            Creates a unique identifier.
            </summary>
            <remarks>
            Default implementation uses Guid.NewGuid().  Subclasses may override to provide an alternative
            ID generation implementation.
            </remarks>
            <returns>A unique identifier</returns>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.GetEntryMessage(AopAlliance.Intercept.IMethodInvocation,System.String)">
            <summary>
            Gets the entry message to log
            </summary>
            <param name="invocation">The invocation.</param>
            <param name="idString">The id string.</param>
            <returns>The entry log message</returns>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.GetExceptionMessage(AopAlliance.Intercept.IMethodInvocation,System.Exception,System.TimeSpan,System.String)">
            <summary>
            Gets the exception message.
            </summary>
            <param name="invocation">The method invocation.</param>
            <param name="e">The thown exception.</param>
            <param name="executionTimeSpan">The execution time span.</param>
            <param name="idString">The id string.</param>
            <returns>The exception log message.</returns>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.GetExitMessage(AopAlliance.Intercept.IMethodInvocation,System.Object,System.TimeSpan,System.String)">
            <summary>
            Gets the exit log message.
            </summary>
            <param name="invocation">The method invocation.</param>
            <param name="returnValue">The return value.</param>
            <param name="executionTimeSpan">The execution time span.</param>
            <param name="idString">The id string.</param>
            <returns>the exit log message</returns>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.AppendCommonInformation(System.Text.StringBuilder,AopAlliance.Intercept.IMethodInvocation,System.String)">
            <summary>
            Appends common information across entry,exit, exception logging
            </summary>
            <remarks>Add method name and unique identifier if required.</remarks>
            <param name="sb">The string buffer building logging message.</param>
            <param name="invocation">The method invocation.</param>
            <param name="idString">The unique identifier string.</param>
        </member>
        <member name="M:Spring.Aspects.Logging.SimpleLoggingAdvice.GetMethodArgumentAsString(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Gets the method argument as argumen name/value pairs.
            </summary>
            <param name="invocation">The method invocation.</param>
            <returns>string for logging method argument name and values.</returns>
        </member>
        <member name="P:Spring.Aspects.Logging.SimpleLoggingAdvice.LogUniqueIdentifier">
            <summary>
            Gets or sets a value indicating whether to log a unique identifier with the log message.
            </summary>
            <value><c>true</c> if [log unique identifier]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aspects.Logging.SimpleLoggingAdvice.LogExecutionTime">
            <summary>
            Gets or sets a value indicating whether to log execution time.
            </summary>
            <value><c>true</c> if log execution time; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aspects.Logging.SimpleLoggingAdvice.LogMethodArguments">
            <summary>
            Gets or sets a value indicating whether log method arguments.
            </summary>
            <value><c>true</c> if log method arguments]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aspects.Logging.SimpleLoggingAdvice.LogReturnValue">
            <summary>
            Gets or sets a value indicating whether log return value.
            </summary>
            <value><c>true</c> if log return value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Aspects.Logging.SimpleLoggingAdvice.Separator">
            <summary>
            Gets or sets the seperator string to use for delmiting log message fields.
            </summary>
            <value>The seperator.</value>
        </member>
        <member name="P:Spring.Aspects.Logging.SimpleLoggingAdvice.LogLevel">
            <summary>
            Gets or sets the entry log level.
            </summary>
            <value>The entry log level.</value>
        </member>
        <member name="T:Spring.Aspects.Validation.ParameterValidationAdvice">
            <summary>
            This advice is typically applied to service-layer methods in order to validate
            method arguments.
            </summary>
            <remarks>
            <para>Each argument that should be validated has to be marked with one or more
            <see cref="T:Spring.Validation.ValidatedAttribute"/>s.</para>
            <para>If the validation fails, this advice will throw <see cref="T:Spring.Validation.ValidationException"/>,
            thus preventing target method invocation.
            </para>
            </remarks>
            <author>Damjan Tomic</author>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Aspects.Validation.ParameterValidationAdvice.Before(System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            Intercepts method invocation and validates arguments.
            </summary>
            <param name="method">
            Method invocation.
            </param>
            <param name="args">
            Method arguments.
            </param>
            <param name="target">
            Target object.
            </param>
            <exception cref="T:Spring.Validation.ValidationException">
            If one or more method arguments fail validation.
            </exception>
        </member>
        <member name="P:Spring.Aspects.Validation.ParameterValidationAdvice.ApplicationContext">
            <summary>
            Sets the application context to search for validators in.
            </summary>
            <value>
            The application context to search for validators in.
            </value>
        </member>
        <member name="T:Spring.Aspects.Validation.ParameterValidationAdvisor">
            <summary>
            Convinience advisor implementation that applies <see cref="T:Spring.Aspects.Validation.ParameterValidationAdvice"/>
            to all the methods that have <see cref="T:Spring.Validation.ValidatedAttribute"/> defined on one or
            more of their parameters.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Aspects.Validation.ParameterValidationAdvisor.#ctor">
            <summary>
            Creates new advisor instance.
            </summary>
        </member>
        <member name="M:Spring.Aspects.Validation.ParameterValidationAdvisor.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Returns <c>true</c> if any of the parameters of the specified <paramref name="method"/>
            has <see cref="T:Spring.Validation.ValidatedAttribute"/> applied.
            </summary>
            <param name="method">
            Method to check.
            </param>
            <param name="targetType">
            Type of target object.
            </param>
            <returns>
            <c>true</c> if any of the parameters of the specified <paramref name="method"/>
            has <see cref="T:Spring.Validation.ValidatedAttribute"/> applied; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Aspects.Validation.ParameterValidationAdvisor.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <remarks>
            <p>
            Normally this call will be used to initialize the object.
            </p>
            <p>
            Invoked after population of normal object properties but before an
            init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/>
            property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="T:Spring.Aspects.ParsedAdviceExpression">
             <summary>
             This class contains the results of parsing an advice expresion of the form
             on exception name [ExceptionName1,ExceptionName2,...] [action] [action expression]
             or
             on exception [constraint expression] [action] [action expression]
             </summary>
             <remarks>
            
             </remarks>
             <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.ParsedAdviceExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.ParsedAdviceExpression"/> class.
            </summary>
            <param name="adviceExpression">The advice expression.</param>
        </member>
        <member name="P:Spring.Aspects.ParsedAdviceExpression.AdviceExpression">
            <summary>
            Gets or sets the advice expression.
            </summary>
            <value>The advice expression.</value>
        </member>
        <member name="P:Spring.Aspects.ParsedAdviceExpression.ExceptionNames">
            <summary>
            Gets or sets the exception names.
            </summary>
            <value>The exception names.</value>
        </member>
        <member name="P:Spring.Aspects.ParsedAdviceExpression.ConstraintExpression">
            <summary>
            Gets or sets the constraint expression.
            </summary>
            <value>The constraint expression.</value>
        </member>
        <member name="P:Spring.Aspects.ParsedAdviceExpression.ActionExpressionText">
            <summary>
            Gets or sets the action expression text.
            </summary>
            <value>The action expression text.</value>
        </member>
        <member name="P:Spring.Aspects.ParsedAdviceExpression.ActionText">
            <summary>
            Gets or sets the action text.
            </summary>
            <value>The action text.</value>
        </member>
        <member name="P:Spring.Aspects.ParsedAdviceExpression.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Spring.Aspects.ParsedAdviceExpression"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spring.Aspects.RetryAdvice">
             <summary>
             AOP Advice to retry a method invocation on an exception.  The retry semantics are defined by a DSL of the
             form <code>on exception name [ExceptionName1,ExceptionName2,...] retry [number of times] [delay|rate] [delay time|rate expression]</code>.
             For example, <code>on exception name ArithmeticException retry 3x delay 1s</code>
             </summary>
             <remarks>
            
             </remarks>
             <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.RetryAdvice.#ctor">
            <summary>
            Creates a new RetryAdvice instance, using <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/> for delaying retries
            </summary>
        </member>
        <member name="M:Spring.Aspects.RetryAdvice.#ctor(Spring.Aspects.RetryAdvice.SleepHandler)">
            <summary>
            Creates a new RetryAdvice instance, using any arbitrary callback for delaying retries
            </summary>
        </member>
        <member name="M:Spring.Aspects.RetryAdvice.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the call to the supplied <paramref name="invocation"/>.
            </summary>
            <param name="invocation">The method invocation that is being intercepted.</param>
            <returns>
            The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.
            </returns>
            <remarks>
            	<p>
            Polite implementations would certainly like to invoke
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/>.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Aspects.RetryAdvice.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <remarks>
            	<p>
            This method allows the object instance to perform the kind of
            initialization only possible when all of it's dependencies have
            been injected (set), and to throw an appropriate exception in the
            event of misconfiguration.
            </p>
            	<p>
            Please do consult the class level documentation for the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface for a
            description of exactly <i>when</i> this method is invoked. In
            particular, it is worth noting that the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            callbacks will have been invoked <i>prior</i> to this method being
            called.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Aspects.RetryAdvice.Parse(System.String)">
            <summary>
            Parses the specified handler string.
            </summary>
            <param name="retryExpressionString">The handler string.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Aspects.RetryAdvice.GetMatchForActionExpression(System.String,System.String)">
            <summary>
            Gets the match for action expression.
            </summary>
            <param name="actionExpressionString">The action expression string.</param>
            <param name="regexString">The regex string.</param>
            <returns>The Match object resulting from the regular expression match.</returns>
        </member>
        <member name="M:Spring.Aspects.RetryAdvice.OnDeserialization(System.Object)">
            <summary>
            Override in case you need to initialized non-serialized fields on deserialization.
            </summary>
        </member>
        <member name="P:Spring.Aspects.RetryAdvice.RetryExpression">
            <summary>
            Gets or sets the retry expression.
            </summary>
            <value>The retry expression.</value>
        </member>
        <member name="P:Spring.Aspects.RetryAdvice.OnExceptionNameRegex">
            <summary>
            Gets or sets the Regex string used to parse advice expressions starting with 'on exception name' and exception handling actions.
            </summary>
            <value>The regex string to parse advice expressions starting with 'on exception name' and exception handling actions.</value>
        </member>
        <member name="P:Spring.Aspects.RetryAdvice.OnExceptionRegex">
            <summary>
            Gets or sets the Regex string used to parse advice expressions starting with 'on exception (constraint)' and exception handling actions.
            </summary>
            <value>The regex string to parse advice expressions starting with 'on exception (constraint)' and exception handling actions.</value>
        </member>
        <member name="T:Spring.Aspects.RetryAdvice.SleepHandler">
            <summary>
            The type of the callback that is called for delaying retries.
            </summary>
        </member>
        <member name="T:Spring.Aspects.RetryExceptionHandler">
             <summary>
             Sleeps for the appropriate amount of time for an exception.
             </summary>
             <remarks>
            
             </remarks>
             <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Aspects.RetryExceptionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.RetryExceptionHandler"/> class.
            </summary>
        </member>
        <member name="M:Spring.Aspects.RetryExceptionHandler.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Aspects.RetryExceptionHandler"/> class.
            </summary>
            <param name="exceptionNames">The exception names.</param>
        </member>
        <member name="M:Spring.Aspects.RetryExceptionHandler.HandleException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the exception.
            </summary>
            <param name="callContextDictionary"></param>
            <returns>
            The return value from handling the exception, if not rethrown or a new exception is thrown.
            </returns>
        </member>
        <member name="P:Spring.Aspects.RetryExceptionHandler.MaximumRetryCount">
            <summary>
            Gets the maximum retry count.
            </summary>
            <value>The maximum retry count.</value>
        </member>
        <member name="P:Spring.Aspects.RetryExceptionHandler.IsDelayBased">
            <summary>
            Gets a value indicating whether this instance is delay based.
            </summary>
            <value>
            	<c>true</c> if this instance is delay based; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Aspects.RetryExceptionHandler.DelayTimeSpan">
            <summary>
            Gets or sets the delay time span to sleep after an exception is thrown and a rety is
            attempted.
            </summary>
            <value>The delay time span.</value>
        </member>
        <member name="P:Spring.Aspects.RetryExceptionHandler.DelayRateExpression">
            <summary>
            Gets or sets the delay rate expression.
            </summary>
            <value>The delay rate expression.</value>
        </member>
    </members>
</doc>
