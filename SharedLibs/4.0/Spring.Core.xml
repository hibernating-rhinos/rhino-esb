<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Core</name>
    </assembly>
    <members>
        <member name="T:Spring.Caching.AbstractCache">
            <summary>
            An abstract <see cref="T:Spring.Caching.ICache"/> implementation that can
            be used as base class for concrete implementations.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Caching.ICache">
            <summary>
            Defines a contract that all cache implementations have to fulfill.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Caching.ICache.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
            <param name="key">
            Item key.
            </param>
            <returns>
            Item for the specified <paramref name="key"/>, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Caching.ICache.Remove(System.Object)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key">
            Item key.
            </param>
        </member>
        <member name="M:Spring.Caching.ICache.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes collection of items from the cache.
            </summary>
            <param name="keys">
            Collection of keys to remove.
            </param>
        </member>
        <member name="M:Spring.Caching.ICache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Spring.Caching.ICache.Insert(System.Object,System.Object)">
            <summary>
            Inserts an item into the cache.
            </summary>
            <remarks>
            Items inserted using this method have no expiration time
            and default cache priority.
            </remarks>
            <param name="key">
            Item key.
            </param>
            <param name="value">
            Item value.
            </param>
        </member>
        <member name="M:Spring.Caching.ICache.Insert(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Inserts an item into the cache.
            </summary>
            <remarks>
            Items inserted using this method have default cache priority.
            </remarks>
            <param name="key">
            Item key.
            </param>
            <param name="value">
            Item value.
            </param>
            <param name="timeToLive">
            Item's time-to-live.
            </param>
        </member>
        <member name="P:Spring.Caching.ICache.Count">
            <summary>
            Gets the number of items in the cache.
            </summary>
        </member>
        <member name="P:Spring.Caching.ICache.Keys">
            <summary>
            Gets a collection of all cache item keys.
            </summary>
        </member>
        <member name="M:Spring.Caching.AbstractCache.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
            <param name="key">
            Item key.
            </param>
            <returns>
            Item for the specified <paramref name="key"/>, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Caching.AbstractCache.Remove(System.Object)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key">
            Item key.
            </param>
        </member>
        <member name="M:Spring.Caching.AbstractCache.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes collection of items from the cache.
            </summary>
            <param name="keys">
            Collection of keys to remove.
            </param>
        </member>
        <member name="M:Spring.Caching.AbstractCache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Spring.Caching.AbstractCache.Insert(System.Object,System.Object)">
            <summary>
            Inserts an item into the cache.
            </summary>
            <remarks>
            Items inserted using this method use the default
            </remarks>
            <param name="key">
            Item key.
            </param>
            <param name="value">
            Item value.
            </param>
        </member>
        <member name="M:Spring.Caching.AbstractCache.Insert(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Inserts an item into the cache.
            </summary>
            <remarks>
            If <paramref name="timeToLive"/> equals <see cref="F:System.TimeSpan.MinValue"/>, 
            or <see cref="P:Spring.Caching.AbstractCache.EnforceTimeToLive"/> is <value>true</value>, this cache 
            instance's <see cref="P:Spring.Caching.AbstractCache.TimeToLive"/> value will be applied.
            </remarks>
            <param name="key">
            Item key.
            </param>
            <param name="value">
            Item value.
            </param>
            <param name="timeToLive">
            Item's time-to-live (TTL).
            </param>
        </member>
        <member name="M:Spring.Caching.AbstractCache.DoInsert(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Actually does the cache implementation specific insert operation into the cache.
            </summary>
            <remarks>
            Items inserted using this method have default cache priority.
            </remarks>
            <param name="key">
            Item key.
            </param>
            <param name="value">
            Item value.
            </param>
            <param name="timeToLive">
            Item's time-to-live (TTL).
            </param>
        </member>
        <member name="P:Spring.Caching.AbstractCache.TimeToLive">
            <summary>
            Gets/Set the Default time-to-live (TTL) for items inserted into this cache. 
            Used by <see cref="M:Spring.Caching.AbstractCache.Insert(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="P:Spring.Caching.AbstractCache.EnforceTimeToLive">
            <summary>
            Gets/Sets a value, whether the this cache instance's <see cref="P:Spring.Caching.AbstractCache.TimeToLive"/> 
            shall be applied to all items, regardless of their individual TTL 
            when <see cref="M:Spring.Caching.AbstractCache.Insert(System.Object,System.Object,System.TimeSpan)"/> is called.
            </summary>
        </member>
        <member name="P:Spring.Caching.AbstractCache.Count">
            <summary>
            Gets the number of items in the cache.
            </summary>
            <remarks>
            May be overridden by subclasses for cache-specific efficient implementation.
            </remarks>
        </member>
        <member name="P:Spring.Caching.AbstractCache.Keys">
            <summary>
            Gets a collection of all cache item keys.
            </summary>
        </member>
        <member name="T:Spring.Caching.BaseCacheAttribute">
            <summary>
            Abstract base class containing shared properties for all cache attributes.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Caching.BaseCacheAttribute.TimeSpanConverter">
            <summary>
            The <see cref="F:Spring.Caching.BaseCacheAttribute.TimeSpanConverter"/> instance used to parse <see cref="T:System.TimeSpan"/> values.
            </summary>
            <see cref="P:Spring.Caching.BaseCacheAttribute.TimeToLive"/>
            <see cref="P:Spring.Caching.BaseCacheAttribute.TimeToLiveTimeSpan"/>
        </member>
        <member name="M:Spring.Caching.BaseCacheAttribute.#ctor">
            <summary>
            Creates an attribute instance.
            </summary>
        </member>
        <member name="M:Spring.Caching.BaseCacheAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="cacheName">
            The name of the cache to use.
            </param>
            <param name="key">
            An expression string that should be evaluated in order to determine
            the cache key for the item.
            </param>
            <remarks>The cache key cannot evaluate be null or an empty string.</remarks>
        </member>
        <member name="P:Spring.Caching.BaseCacheAttribute.CacheName">
            <summary>
            Gets or sets the name of the cache to use.
            </summary>
            <value>
            The name of the cache to use.
            </value>
        </member>
        <member name="P:Spring.Caching.BaseCacheAttribute.Key">
            <summary>
            Gets or sets a SpEL expression that should be evaluated in order 
            to determine the cache key for the item.
            </summary>
            <value>
            An expression string that should be evaluated in order to determine
            the cache key for the item.
            </value>
        </member>
        <member name="P:Spring.Caching.BaseCacheAttribute.KeyExpression">
            <summary>
            Gets an expression instance that should be evaluated in order 
            to determine the cache key for the item.
            </summary>
            <value>
            An expression instance that should be evaluated in order to determine
            the cache key for the item.
            </value>
        </member>
        <member name="P:Spring.Caching.BaseCacheAttribute.Condition">
            <summary>
            Gets or sets a SpEL expression that should be evaluated in order 
            to determine whether the item should be cached.
            </summary>
            <value>
            An expression string that should be evaluated in order to determine
            whether the item should be cached.
            </value>
        </member>
        <member name="P:Spring.Caching.BaseCacheAttribute.ConditionExpression">
            <summary>
            Gets an expression instance that should be evaluated in order 
            to determine whether the item should be cached.
            </summary>
            <value>
            An expression instance that should be evaluated in order to determine
            whether the item should be cached.
            </value>
        </member>
        <member name="P:Spring.Caching.BaseCacheAttribute.TimeToLive">
            <summary>
            The amount of time an object should remain in the cache.
            </summary>
            <remarks>
            If no TTL is specified, the default TTL defined by the 
            cache's policy will be applied.
            </remarks>
            <value>
            The amount of time object should remain in the cache 
            formatted to be recognizable by <see cref="M:System.TimeSpan.Parse(System.String)"/>.
            </value>
        </member>
        <member name="P:Spring.Caching.BaseCacheAttribute.TimeToLiveTimeSpan">
            <summary>
            The amount of time an object should remain in the cache (in seconds).
            </summary>
            <remarks>
            If no TTL is specified, the default TTL defined by the 
            cache's policy will be applied.
            </remarks>
            <value>
            The amount of time object should remain in the cache (in seconds).
            </value>
        </member>
        <member name="T:Spring.Caching.CacheParameterAttribute">
            <summary>
            This attribute should be used to mark methods whose argument(s) 
            need to be cached.
            </summary>
            <remarks>
            <p>
            This attribute allows application developers to specify that an argument 
            of the method should be cached, but it will not do any caching by itself.
            </p>
            <p>
            In order to actually cache the result, an application developer
            must apply a <c>Spring.Aspects.Cache.CacheParameterAdvice</c> to
            all of the members that have this attribute defined.
            </p>
            <p>
            You can specify this attribute multiple times on the same method in order to
            cache several method parameters.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Caching.CacheParameterAttribute.#ctor">
            <summary>
            Creates an attribute instance.
            </summary>
        </member>
        <member name="M:Spring.Caching.CacheParameterAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="cacheName">
            The name of the cache to use.
            </param>
            <param name="key">
            An expression string that should be evaluated in order to determine
            the cache key for the item.
            </param>
        </member>
        <member name="T:Spring.Caching.CacheResultAttribute">
            <summary>
            This attribute should be used to mark methods whose result 
            needs to be cached.
            </summary>
            <remarks>
            <p>
            This attribute allows application developers to mark that a result 
            of the method invocation should be cached, but it will not do any
            caching by itself.
            </p>
            <p>
            In order to actually cache the result, an application developer
            must apply a <c>Spring.Aspects.Cache.CacheResultAdvice</c> to
            all of the members that have this attribute defined.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Caching.CacheResultAttribute.#ctor">
            <summary>
            Creates an attribute instance.
            </summary>
        </member>
        <member name="M:Spring.Caching.CacheResultAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="cacheName">
            The name of the cache to use.
            </param>
            <param name="key">
            An expression string that should be evaluated in order to determine
            the cache key for the item.
            </param>
        </member>
        <member name="T:Spring.Caching.CacheResultItemsAttribute">
            <summary>
            This attribute should be used with methods that return an <see cref="T:System.Collections.ICollection"/>
            in order to cache each item separately.
            </summary>
            <remarks>
            <p>
            This attribute allows application developers to specify that each item
            from the collection returned by the method should be cached, 
            but it will not do any caching by itself.
            </p>
            <p>
            In order to actually cache the result, an application developer
            must apply a <c>Spring.Aspects.Cache.CacheResultAdvice</c> to
            all of the members that have this attribute defined.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Caching.CacheResultItemsAttribute.#ctor">
            <summary>
            Creates an attribute instance.
            </summary>
        </member>
        <member name="M:Spring.Caching.CacheResultItemsAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="cacheName">
            The name of the cache to use.
            </param>
            <param name="key">
            An expression string that should be evaluated in order to determine
            the cache key for the item.
            </param>
        </member>
        <member name="T:Spring.Caching.InvalidateCacheAttribute">
            <summary>
            This attribute should be used to mark method that should 
            invalidate one or more cache items when invoked.
            </summary>
            <remarks>
            <p>
            This attribute allows application developers to specify that some
            cache items should be evicted from cache when the method is invoked, 
            but it will not do any eviction by itself.
            </p>
            <p>
            In order to actually evict cache items, an application developer
            must apply a <c>Spring.Aspects.Cache.InvalidateCacheAdvice</c> to
            all of the members that have this attribute defined.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Caching.InvalidateCacheAttribute.#ctor">
            <summary>
            Creates an attribute instance.
            </summary>
        </member>
        <member name="M:Spring.Caching.InvalidateCacheAttribute.#ctor(System.String)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="cacheName">
            The name of the cache to use.
            </param>
        </member>
        <member name="P:Spring.Caching.InvalidateCacheAttribute.CacheName">
            <summary>
            Gets or sets the name of the cache to use.
            </summary>
            <value>
            The name of the cache to use.
            </value>
        </member>
        <member name="P:Spring.Caching.InvalidateCacheAttribute.Keys">
            <summary>
            Gets or sets a SpEL expression that should be evaluated in order 
            to determine the keys for the items that should be evicted.
            </summary>
            <value>
            An expression string that should be evaluated in order 
            to determine the keys for the items that should be evicted.
            </value>
        </member>
        <member name="P:Spring.Caching.InvalidateCacheAttribute.KeysExpression">
            <summary>
            Gets an expression instance that should be evaluated in order 
            to determine the keys for the items that should be evicted.
            </summary>
            <value>
            An expression instance that should be evaluated in order 
            to determine the keys for the items that should be evicted.
            </value>
        </member>
        <member name="P:Spring.Caching.InvalidateCacheAttribute.Condition">
            <summary>
            Gets or sets a SpEL expression that should be evaluated in order 
            to determine whether items should be evicted.
            </summary>
            <value>
            An expression string that should be evaluated in order to determine 
            whether items should be evicted.
            </value>
        </member>
        <member name="P:Spring.Caching.InvalidateCacheAttribute.ConditionExpression">
            <summary>
            Gets an expression instance that should be evaluated in order 
            to determine whether items should be evicted.
            </summary>
            <value>
            An expression instance that should be evaluated in order to determine 
            whether items should be evicted.
            </value>
        </member>
        <member name="T:Spring.Caching.NonExpiringCache">
            <summary>
            A simple <see cref="T:Spring.Caching.ICache"/> implementation backed by a dictionary that
            never expires cache items.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Caching.NonExpiringCache.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
            <param name="key">
            Item key.
            </param>
            <returns>
            Item for the specified <paramref name="key"/>, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Caching.NonExpiringCache.Remove(System.Object)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key">
            Item key.
            </param>
        </member>
        <member name="M:Spring.Caching.NonExpiringCache.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes collection of items from the cache.
            </summary>
            <param name="keys">
            Collection of keys to remove.
            </param>
        </member>
        <member name="M:Spring.Caching.NonExpiringCache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Spring.Caching.NonExpiringCache.DoInsert(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Inserts an item into the cache.
            </summary>
            <param name="key">
            Item key.
            </param>
            <param name="value">
            Item value.
            </param>
            <param name="timeToLive">
            Item's time-to-live (TTL) in milliseconds.
            </param>
        </member>
        <member name="P:Spring.Caching.NonExpiringCache.Count">
            <summary>
            Gets the number of items in the cache.
            </summary>
        </member>
        <member name="P:Spring.Caching.NonExpiringCache.Keys">
            <summary>
            Gets a collection of all cache item keys.
            </summary>
        </member>
        <member name="T:Spring.Collections.Generic.DictionarySet`1">
             <summary>
             <p><c>DictionarySet</c> is an abstract class that supports the creation of new <c>Set</c>
             types where the underlying data store is an <c>IDictionary</c> instance.</p> 
              
             <p>You can use any object that implements the <c>IDictionary</c> interface to hold set data.
             You can define your own, or you can use one of the objects provided in the Framework.   
             The type of <c>IDictionary</c> you choose will affect both the performance and the behavior
             of the <c>Set</c> using it. </p>
            
             <p>To make a <c>Set</c> typed based on your own <c>IDictionary</c>, simply derive a
             new class with a constructor that takes no parameters.  Some <c>Set</c> implmentations
             cannot be defined with a default constructor.  If this is the case for your class, 
             you will need to override <c>Clone()</c> as well.</p>
            
             <p>It is also standard practice that at least one of your constructors takes an <c>ICollection</c> or 
             an <c>ISet</c> as an argument.</p>
             </summary>
        </member>
        <member name="T:Spring.Collections.Generic.Set`1">
            <summary><p>A collection that contains no duplicate elements.  This class models the mathematical
            <c>Set</c> abstraction, and is the base class for all other <c>Set</c> implementations.  
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <c>Set</c> methods, and thus is not guaranteed.</p>
             
            <p>None of the <c>Set</c> implementations in this library are guranteed to be thread-safe
            in any way unless wrapped in a <c>SynchronizedSet</c>.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <c>Set</c> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            		<term>Operator</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            		<term><c>|</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            		<term><c>&amp;</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            		<term><c>^</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            		<term><c>-</c></term>
            	</item>
            </list>
            </summary>
        </member>
        <member name="T:Spring.Collections.Generic.ISet`1">
            <summary>
            <p>A collection that contains no duplicate elements.  This interface models the mathematical
            <c>Set</c> abstraction.    
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <c>Set</c> methods, and thus is not guaranteed.</p>
            
            <p>None of the <c>Set</c> implementations in this library are guranteed to be thread-safe
            in any way unless wrapped in a <c>SynchronizedSet</c>.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <c>Set</c> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            	</item>
            </list>
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.Union(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.Intersect(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.Minus(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.ExclusiveOr(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <see langword="true" /> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><see langword="true" /> if the set contains all the elements in the specified collection, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><see langword="true" /> is the object was added, <see langword="false" /> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><see langword="true" /> is the set changed as a result of this operation, <see langword="false" /> if not.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><see langword="true" /> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ISet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><see langword="true" /> if this set changed as a result of this operation.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ISet`1.IsEmpty">
            <summary>
            Returns <see langword="true" /> if this set contains no elements.
            </summary>
        </member>
        <member name="T:Spring.Collections.ISet">
            <summary>
            A collection that contains no duplicate elements.
            </summary>
            <remarks>
            <p>
            This interface models the mathematical
            <see cref="T:Spring.Collections.ISet"/> abstraction. The order of
            elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various
            <see cref="T:Spring.Collections.ISet"/> methods, and thus is not
            guaranteed.
            </p>
            <p>
            <see cref="T:Spring.Collections.ISet"/> overrides the
            <see cref="M:System.Object.Equals(System.Object)"/> method to test for "equivalency":
            whether the two sets contain the same elements. The "==" and "!="
            operators are not overridden by design, since it is often desirable to
            compare object references for equality.
            </p>
            <p>
            Also, the <see cref="M:System.Object.GetHashCode"/> method is not
            implemented on any of the set implementations, since none of them are
            truly immutable. This is by design, and it is the way almost all
            collections in the .NET framework function. So as a general rule, don't
            store collection objects inside <see cref="T:Spring.Collections.ISet"/>
            instances. You would typically want to use a keyed
            <see cref="T:System.Collections.IDictionary"/> instead.
            </p>
            <p>
            None of the <see cref="T:Spring.Collections.ISet"/> implementations in
            this library are guaranteed to be thread-safe in any way unless wrapped
            in a <see cref="T:Spring.Collections.SynchronizedSet"/>.
            </p>
            <p>
            The following table summarizes the binary operators that are supported
            by the <see cref="T:Spring.Collections.ISet"/> class.
            </p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>
            		Element included in result if it exists in either <c>A</c> OR
            		<c>B</c>.
            		</term>
            		<term><c>Union()</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>
            		Element included in result if it exists in both <c>A</c> AND
            		<c>B</c>.
            		</term>
            		<term><c>InterSect()</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>
            		Element included in result if it exists in one, but not both,
            		of <c>A</c> and <c>B</c>.
            		</term>
            		<term><c>ExclusiveOr()</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>
            		Take all the elements in <c>A</c>. Now, if any of them exist in
            		 <c>B</c>, remove them. Note that unlike the other operators,
            		 <c>A - B</c> is not the same as <c>B - A</c>.
            		 </term>
            		<term><c>Minus()</c></term>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:Spring.Collections.ISet.Union(Spring.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present. 
            </summary>
            <remarks>
            <p>
            That is, the element is included if it is in either
            <paramref name="setOne"/> or this set. Neither this set nor the input
            set are modified during the operation. The return value is a
            <b>clone</b> of this set with the extra elements added in.
            </p>
            </remarks>
            <param name="setOne">A collection of elements.</param>
            <returns>
            A new <see cref="T:Spring.Collections.ISet"/> containing the union of
            this <see cref="T:Spring.Collections.ISet"/> with the specified
            collection. Neither of the input objects is modified by the union.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.Intersect(Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.
            </summary>
            <remarks>
            <p>
            That is, the element is included if it exists in both sets. The
            <c>Intersect()</c> operation does not modify the input sets. It
            returns a <b>clone</b> of this set with the appropriate elements
            removed.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <returns>
            The intersection of this set with <paramref name="setOne"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.Minus(Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of this set from the <paramref name="setOne"/>
            set.
            </summary>
            <remarks>
            <p>
            This returns a set of all the elements in set
            <paramref name="setOne"/>, removing the elements that are also in
            this set. The original sets are not modified during this operation.
            The result set is a <b>clone</b> of this
            <see cref="T:Spring.Collections.ISet"/> containing the elements from
            the operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the elements from this set with the elements in
            <paramref name="setOne"/> removed.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.ExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <remarks>
            <p>
            The original sets are not modified during this operation. The
            result set is a <b>clone</b> of this set containing the elements
            from the exclusive-or operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ this</c>.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.ISet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="P:Spring.Collections.ISet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Union(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Union(Spring.Collections.Generic.ISet{`0},Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <c>Clone()</c> of one of the sets (<c>a</c> if it is not <see langword="null" />) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <see langword="null" /> if both sets are <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.op_BitwiseOr(Spring.Collections.Generic.Set{`0},Spring.Collections.Generic.Set{`0})">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <c>Clone()</c> of one of the sets (<c>a</c> if it is not <see langword="null" />) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <see langword="null" /> if both sets are <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Intersect(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Intersect(Spring.Collections.Generic.ISet{`0},Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <c>Clone()</c> of one of the input objects (<c>a</c> if it is not <see langword="null" />) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <see langword="null" /> if both sets are <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.op_BitwiseAnd(Spring.Collections.Generic.Set{`0},Spring.Collections.Generic.Set{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <c>Clone()</c> of one of the input objects (<c>a</c> if it is not <see langword="null" />) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <see langword="null" /> if both sets are <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Minus(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Minus(Spring.Collections.Generic.ISet{`0},Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <see langword="null" /> if <c>a</c> is <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.op_Subtraction(Spring.Collections.Generic.Set{`0},Spring.Collections.Generic.Set{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <see langword="null" /> if <c>a</c> is <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.ExclusiveOr(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.ExclusiveOr(Spring.Collections.Generic.ISet{`0},Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of one of the sets
            (<c>a</c> if it is not <see langword="null" />) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <see langword="null" /> if both sets are <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.op_ExclusiveOr(Spring.Collections.Generic.Set{`0},Spring.Collections.Generic.Set{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of one of the sets
            (<c>a</c> if it is not <see langword="null" />) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <see langword="null" /> if both sets are <see langword="null" />.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><see langword="true" /> is the object was added, <see langword="false" /> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><see langword="true" /> is the set changed as a result of this operation, <see langword="false" /> if not.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Contains(`0)">
            <summary>
            Returns <see langword="true" /> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><see langword="true" /> if this set contains the specified element, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <see langword="true" /> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><see langword="true" /> if the set contains all the elements in the specified collection, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><see langword="true" /> if the set contained the specified element, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><see langword="true" /> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><see langword="true" /> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  This will work for derived <c>Set</c>
            classes if the derived class implements a constructor that takes no arguments.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.NonGenericCopyTo(System.Array,System.Int32)">
            <summary>
            Performs CopyTo when called trhough non-generic ISet (ICollection) interface
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.NonGenericUnion(Spring.Collections.ISet)">
            <summary>
            Performs Union when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.NonGenericMinus(Spring.Collections.ISet)">
            <summary>
            Performs Minus when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.NonGenericIntersect(Spring.Collections.ISet)">
            <summary>
            Performs Intersect when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.Set`1.NonGenericExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs ExclusiveOr when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.Collections.Generic.Set`1.IsEmpty">
            <summary>
            Returns <see langword="true" /> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.Set`1.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.Set`1.IsSynchronized">
            <summary>
            Returns <see langword="true" /> if the <c>Set</c> is synchronized across threads.  Note that
            enumeration is inherently not thread-safe.  Use the <c>SyncRoot</c> to lock the
            object during enumeration.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.Set`1.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make it thread-safe.
            When implementing this, if your object uses a base object, like an <c>IDictionary</c>,
            or anything that has a <c>SyncRoot</c>, return that object instead of "<c>this</c>".
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.Set`1.IsReadOnly">
            <summary>
            Indicates whether the given instance is read-only or not
            </summary>
            <value>
            <see langword="true" /> if the ISet is read-only; otherwise, <see langword="false" />. 
            In the default implementation of Set, this property always returns false. 
            </value>
        </member>
        <member name="F:Spring.Collections.Generic.DictionarySet`1.InternalDictionary">
            <summary>
            Provides the storage for elements in the <c>Set</c>, stored as the key-set
            of the <c>IDictionary</c> object.  Set this object in the constructor
            if you create your own <c>Set</c> class.  
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The <typeparamref name="T"/> to add to the set.</param>
            <returns><see langword="true" /> is the object was added, <see langword="false" /> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><see langword="true" /> is the set changed as a result of this operation, <see langword="false" /> if not.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.Contains(`0)">
            <summary>
            Returns <see langword="true" /> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><see langword="true" /> if this set contains the specified element, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <see langword="true" /> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><see langword="true" /> if the set contains all the elements in the specified collection, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><see langword="true" /> if the set contained the specified element, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><see langword="true" /> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><see langword="true" /> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array of T.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.DictionarySet`1.NonGenericCopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously. Needed for 
            non-generic ISet methods implementation
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="P:Spring.Collections.Generic.DictionarySet`1.Placeholder">
            <summary>
            The placeholder object used as the value for the <c>IDictionary</c> instance.
            </summary>
            <remarks>
            There is a single instance of this object globally, used for all <c>Sets</c>.
            </remarks>
        </member>
        <member name="P:Spring.Collections.Generic.DictionarySet`1.IsEmpty">
            <summary>
            Returns <see langword="true" /> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.DictionarySet`1.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.DictionarySet`1.IsSynchronized">
            <summary>
            None of the objects based on <c>DictionarySet</c> are synchronized.  Use the
            <c>SyncRoot</c> property instead.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.DictionarySet`1.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <c>Set</c> between threads.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.DictionarySet`1.IsReadOnly">
            <summary>
            Indicates wether the <c>Set</c> is read-only or not
            </summary>
        </member>
        <member name="T:Spring.Collections.Generic.HashedSet`1">
            <summary>
            Implements a <c>Set</c> based on a Dictionary (which is equivalent of 
            non-genric <c>HashTable</c>) This will give the best lookup, add, and remove
            performance for very large data-sets, but iteration will occur in no particular order.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.HashedSet`1.#ctor">
            <summary>
            Creates a new set instance based on a Dictinary.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.HashedSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new set instance based on a Dictinary and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:Spring.Collections.Generic.ImmutableSet`1">
            <summary>
            <p>Implements an immutable (read-only) <c>Set</c> wrapper.</p>
            <p>Although this is advertised as immutable, it really isn't.  Anyone with access to the
            <c>basisSet</c> can still change the data-set.  So <c>GetHashCode()</c> is not implemented
            for this <c>Set</c>, as is the case for all <c>Set</c> implementations in this library.
            This design decision was based on the efficiency of not having to <c>Clone()</c> the 
            <c>basisSet</c> every time you wrap a mutable <c>Set</c>.</p>
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.#ctor(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Constructs an immutable (read-only) <c>Set</c> wrapper.
            </summary>
            <param name="basisSet">The <c>Set</c> that is wrapped.</param>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotSupportedException"> is always thrown</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotSupportedException"> is always thrown</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
            <exception cref="T:System.NotSupportedException"> is always thrown</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Contains(`0)">
            <summary>
            Returns <see langword="true" /> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><see langword="true" /> if this set contains the specified element, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <see langword="true" /> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><see langword="true" /> if the set contains all the elements in the specified collection, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotSupportedException"> is always thrown</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotSupportedException"> is always thrown</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotSupportedException"> is always thrown</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array of T. The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <c>Set</c>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <c>Set</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Union(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <c>Clone()</c> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <c>Set</c> containing the union of this <c>Set</c> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Intersect(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <c>Clone()</c> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.Minus(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <c>Clone()</c>
            of this <c>Set</c> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.ExclusiveOr(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <c>Clone()</c> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.NonGenericCopyTo(System.Array,System.Int32)">
            <summary>
            Performs CopyTo when called trhough non-generic ISet (ICollection) interface
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.NonGenericUnion(Spring.Collections.ISet)">
            <summary>
            Performs Union when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.NonGenericMinus(Spring.Collections.ISet)">
            <summary>
            Performs Minus when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.NonGenericIntersect(Spring.Collections.ISet)">
            <summary>
            Performs Intersect when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.ImmutableSet`1.NonGenericExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs ExclusiveOr when called trhough non-generic ISet interface
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.Collections.Generic.ImmutableSet`1.IsEmpty">
            <summary>
            Returns <see langword="true" /> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.ImmutableSet`1.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.ImmutableSet`1.IsSynchronized">
            <summary>
            Returns an object that can be used to synchronize use of the <c>Set</c> across threads.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.ImmutableSet`1.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <c>Set</c> between threads.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.ImmutableSet`1.IsReadOnly">
            <summary>
            Indicates that the given instance is read-only
            </summary>
        </member>
        <member name="T:Spring.Collections.Generic.OrderedSet`1">
            <summary>
            Implements an ordered <c>Set</c> based on a dictionary.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.OrderedSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Collections.Generic.OrderedSet`1"/> class.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.OrderedSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Collections.Generic.OrderedSet`1"/> class.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:Spring.Collections.Generic.ReadOnlyDictionary`2">
            <summary>
            Represents a read only wrapper around a generic IDictionary. The design pattern
            mirrors ReadOnlyCollection, and follows the apparent pattern that write operations
            do not throw an exception, but simply make no change to the underlying collection.
            </summary>
            <remarks>Originally put into the public domain.
            http://www.simple-talk.com/community/forums/thread/2263.aspx
            </remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <author>Original from Public Domain</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Collections.Generic.ReadOnlyDictionary`2.dict">
            <summary>
            Inner storage for ReadOnlyDictionary
            </summary>
        </member>
        <member name="F:Spring.Collections.Generic.ReadOnlyDictionary`2.idict">
            <summary>
            Easy access to non-generic dictionary API
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Collections.Generic.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionaryToWrap">The dictionary to wrap.</param>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Remove does not change a read only Dictionary, will throw an exception.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Clear">
            <summary>
            Clear does not change a read only Dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove does not change a read only Dictionary. Throws an exception
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Add does not change a read only Dictionary.  Throws an exception.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.Remove(System.Object)">
            <summary>
            Remove does not change a read only Dictionary.  Throws an exception.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:Spring.Collections.Generic.ReadOnlyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a read only <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value with the specified key. 
            Set will throw an exception
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.Item(System.Object)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key. Set throws an exception.
            </summary>
            <value></value>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. 
            if try to set value</exception>        
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Spring.Collections.Generic.ReadOnlyDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:Spring.Collections.Generic.SortedSet`1">
            <summary>
            Implements a <c>Set</c> based on a sorted tree.  This gives good performance for operations on very
            large data-sets, though not as good - asymptotically - as a <c>HashedSet</c>.  However, iteration
            occurs in order.  Elements that you put into this type of collection must implement <c>IComparable</c>,
            and they must actually be comparable.  You can't mix <c>string</c> and <c>int</c> values, for example.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.SortedSet`1.#ctor">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use for sorting.</param>
        </member>
        <member name="M:Spring.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new set instance based on a sorted tree and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="M:Spring.Collections.Generic.SortedSet`1.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a sorted tree and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="M:Spring.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new set instance based on a sorted tree and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use for sorting.</param>
        </member>
        <member name="T:Spring.Collections.Generic.SynchronizedSet`1">
            <summary>
            <p>Implements a thread-safe <c>Set</c> wrapper.  The implementation is extremely conservative, 
            serializing critical sections to prevent possible deadlocks, and locking on everything.
            The one exception is for enumeration, which is inherently not thread-safe.  For this, you
            have to <c>lock</c> the <c>SyncRoot</c> object for the duration of the enumeration.</p>
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.#ctor(Spring.Collections.Generic.ISet{`0})">
            <summary>
            Constructs a thread-safe <c>Set</c> wrapper.
            </summary>
            <param name="basisSet">The <c>Set</c> object that this object will wrap.</param>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><see langword="true" /> is the object was added, <see langword="false" /> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><see langword="true" /> is the set changed as a result of this operation, <see langword="false" /> if not.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.Contains(`0)">
            <summary>
            Returns <see langword="true" /> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><see langword="true" /> if this set contains the specified element, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returns <see langword="true" /> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><see langword="true" /> if the set contains all the elements in the specified collection, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><see langword="true" /> if the set contained the specified element, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><see langword="true" /> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><see langword="true" /> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the <c>Set</c> to an array.  The type of array needs
            to be compatible with the objects in the <c>Set</c>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.GetEnumerator">
            <summary>
            Enumeration is, by definition, not thread-safe.  Use a <c>lock</c> on the <c>SyncRoot</c> 
            to synchronize the entire enumeration process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.Clone">
            <summary>
            Returns a clone of the <c>Set</c> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Spring.Collections.Generic.SynchronizedSet`1.NonGenericCopyTo(System.Array,System.Int32)">
            <summary>
            Performs CopyTo when called trhough non-generic ISet (ICollection) interface
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Spring.Collections.Generic.SynchronizedSet`1.IsEmpty">
            <summary>
            Returns <see langword="true" /> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.SynchronizedSet`1.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.SynchronizedSet`1.IsSynchronized">
            <summary>
            Returns <see langword="true" />, indicating that this object is thread-safe.  The exception to this
            is enumeration, which is inherently not thread-safe.  Use the <c>SyncRoot</c> object to
            lock this object for the entire duration of the enumeration.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.SynchronizedSet`1.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <c>Set</c> between threads.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.SynchronizedSet`1.IsReadOnly">
            <summary>
            Indicates whether given instace is read-only or not
            </summary>
        </member>
        <member name="T:Spring.Collections.AbstractQueue">
            <summary> 
            This class provides skeletal implementations of some
            <see cref="T:Spring.Collections.IQueue"/> operations.
            </summary>
            <remarks>
            <p>
            The implementations in this class are appropriate when the base
            implementation does not allow <see lang="null"/> elements. The methods
            <see cref="M:Spring.Collections.AbstractQueue.Add(System.Object)"/>,
            <see cref="M:Spring.Collections.AbstractQueue.Remove"/>, and
            <see cref="M:Spring.Collections.AbstractQueue.Element"/> are based on
            the <see cref="M:Spring.Collections.AbstractQueue.Offer(System.Object)"/>,
            <see cref="M:Spring.Collections.AbstractQueue.Poll"/>, and
            <see cref="M:Spring.Collections.AbstractQueue.Peek"/> methods
            respectively but throw exceptions instead of indicating failure via
            <see lang="false"/> or <see lang="null"/> returns.
            <p/> 
            An <see cref="T:Spring.Collections.IQueue"/> implementation that extends this class must
            minimally define a method
            <see cref="M:Spring.Collections.AbstractQueue.Offer(System.Object)"/> which does
            not permit the insertion of <see lang="null"/> elements, along with methods 
            <see cref="M:Spring.Collections.AbstractQueue.Poll"/>, and
            <see cref="M:Spring.Collections.AbstractQueue.Peek"/>. Typically,
            additional methods will be overridden as well. If these requirements
            cannot be met, consider instead subclassing
            <see cref="T:System.Collections.CollectionBase"/>}.
            </p>
            </remarks>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Collections.IQueue">
            <summary>
            A collection designed for holding elements prior to processing.
            </summary>
            <remarks>
            <p>
            Besides basic <see cref="T:System.Collections.ICollection"/> operations,
            queues provide additional insertion, extraction, and inspection
            operations.
            </p>
            <p>
            Each of these methods exists in two forms: one throws
            an exception if the operation fails, the other returns a special
            value (either <see lang="null"/> or <see lang="false"/>, depending on the
            operation). The latter form of the insert operation is designed
            specifically for use with capacity-restricted <see cref="T:Spring.Collections.IQueue"/>
            implementations; in most implementations, insert operations cannot
            fail.
            </p>
            <p>
            Queues typically, but do not necessarily, order elements in a
            FIFO (first-in-first-out) manner. Among the exceptions are
            priority queues, which order elements according to a supplied
            comparator, or the elements' natural ordering, and LIFO queues (or
            stacks) which order the elements LIFO (last-in-first-out).
            Whatever the ordering used, the head of the queue is that
            element which would be removed by a call to
            <see cref="M:Spring.Collections.IQueue.Remove"/> or
            <see cref="M:Spring.Collections.IQueue.Poll"/>. In a FIFO queue, all new
            elements are inserted at the tail of the queue. Other kinds of queues may
            use different placement rules. Every <see cref="T:Spring.Collections.IQueue"/> implementation
            must specify its ordering properties.
            </p>
            <p>
            The <see cref="M:Spring.Collections.IQueue.Offer(System.Object)"/> method inserts an
            element if possible, otherwise returning <see lang="false"/>. This differs from the 
            <see cref="M:Spring.Collections.IQueue.Add(System.Object)"/> method, which can fail to
            add an element only by throwing an exception. The
            <see cref="M:Spring.Collections.IQueue.Offer(System.Object)"/> method is designed for
            use when failure is a normal, rather than exceptional occurrence, for example,
            in fixed-capacity (or "bounded" queues.
            </p>
            <p>
            The <see cref="M:Spring.Collections.IQueue.Remove"/>
            <see cref="M:Spring.Collections.IQueue.Poll"/> methods remove and
            return the head of the queue. Exactly which element is removed from the
            queue is a function of the queue's ordering policy, which differs from
            implementation to implementation. The
            <see cref="M:Spring.Collections.IQueue.Remove"/> and
            <see cref="M:Spring.Collections.IQueue.Poll"/> methods differ only in their
            behavior when the queue is empty: the
            <see cref="M:Spring.Collections.IQueue.Remove"/> method throws an exception,
            while the <see cref="M:Spring.Collections.IQueue.Poll"/> method returns
            <see lang="null"/>.
            </p>
            <p>
            The <see cref="M:Spring.Collections.IQueue.Element"/> and
            <see cref="M:Spring.Collections.IQueue.Peek"/> methods return, but do
            not remove, the head of the queue.
            </p>
            <p>
            The <see cref="T:Spring.Collections.IQueue"/> interface does not define the blocking queue
            methods, which are common in concurrent programming.
            </p>
            <p>
            <see cref="T:Spring.Collections.IQueue"/> implementations generally do not allow insertion
            of <see lang="null"/> elements, although some implementations, such as
            a linked list, do not prohibit the insertion of <see lang="null"/>.
            Even in the implementations that permit it, <see lang="null"/> should
            not be inserted into a <see cref="T:Spring.Collections.IQueue"/>, as <see lang="null"/> is also
            used as a special return value by the
            <see cref="M:Spring.Collections.IQueue.Poll"/> method to
            indicate that the queue contains no elements.
            </p>
            <p>
            <see cref="T:Spring.Collections.IQueue"/> implementations generally do not define
            element-based versions of methods <see cref="M:System.Object.Equals(System.Object)"/> 
            and <see cref="M:System.Object.GetHashCode"/>, but instead inherit the
            identity based versions from the class object, because element-based equality
            is not always well-defined for queues with the same elements but different
            ordering properties.
            </p>
            <p>
            Based on the back port of JCP JSR-166.
            </p>
            </remarks>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Collections.IQueue.Add(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do so
            immediately without violating capacity restrictions, returning
            <see lang="true"/> upon success and throwing an
            <see cref="T:System.InvalidOperationException"/> if no space is
            currently available.
            </summary>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns> 
            <see lang="true"/> if successful.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="objectToAdd"/> prevents it
            from being added to this queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified element is <see lang="null"/> and this queue does not
            permit <see lang="null"/> elements.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Collections.IQueue.Offer(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions.
            </summary>
            <remarks>
            <p>
            When using a capacity-restricted queue, this method is generally
            preferable to <see cref="M:Spring.Collections.IQueue.Add(System.Object)"/>,
            which can fail to insert an element only by throwing an exception.
            </p>
            </remarks>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns>
            <see lang="true"/> if the element was added to this queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="objectToAdd"/> is
            <see lang="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Collections.IQueue.Remove">
            <summary> 
            Retrieves and removes the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from <see cref="M:Spring.Collections.IQueue.Poll"/>
            only in that it throws an exception if this queue is empty.
            </p>
            </remarks>
            <returns> 
            The head of this queue
            </returns>
            <exception cref="T:Spring.Collections.NoElementsException">if this queue is empty</exception>
        </member>
        <member name="M:Spring.Collections.IQueue.Poll">
            <summary> 
            Retrieves and removes the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Spring.Collections.IQueue.Element">
            <summary> 
            Retrieves, but does not remove, the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from <see cref="M:Spring.Collections.IQueue.Peek"/>
            only in that it throws an exception if this queue is empty.
            </p>
            </remarks>
            <returns> 
            The head of this queue.
            </returns>
            <exception cref="T:Spring.Collections.NoElementsException">If this queue is empty.</exception>
        </member>
        <member name="M:Spring.Collections.IQueue.Peek">
            <summary> 
            Retrieves, but does not remove, the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="P:Spring.Collections.IQueue.IsEmpty">
            <summary>
            Returns <see lang="true"/> if there are no elements in the <see cref="T:Spring.Collections.IQueue"/>, <see lang="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Collections.AbstractQueue"/> class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.Add(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible
            to do so immediately without violating capacity restrictions.
            </summary>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns> 
            <see lang="true"/> if successful.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.Remove">
            <summary> 
            Retrieves and removes the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from
            <see cref="M:Spring.Collections.AbstractQueue.Poll"/> only in that
            it throws an exception if this queue is empty.
            </p>
            </remarks>
            <returns> 
            The head of this queue
            </returns>
            <exception cref="T:Spring.Collections.NoElementsException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.Element">
            <summary> 
            Retrieves, but does not remove, the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from <see cref="M:Spring.Collections.AbstractQueue.Peek"/>
            only in that it throws an exception if this queue is empty.
            </p>
            <p>
            ALso note that this implementation returns the result of
            <see cref="M:Spring.Collections.AbstractQueue.Peek"/> unless the queue
            is empty.
            </p>
            </remarks>
            <returns>The head of this queue.</returns>
            <exception cref="T:Spring.Collections.NoElementsException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.Clear">
            <summary> 
            Removes all of the elements from this queue.
            </summary>
            <remarks>
            <p>
            The queue will be empty after this call returns.
            </p>
            <p>
            This implementation repeatedly invokes
            <see cref="M:Spring.Collections.AbstractQueue.Poll"/> until it
            returns <see lang="null"/>.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.AddAll(System.Collections.ICollection)">
            <summary> 
            Adds all of the elements in the supplied <paramref name="collection"/>
            to this queue.
            </summary>
            <remarks>
            <p>
            Attempts to
            <see cref="M:Spring.Collections.AbstractQueue.AddAll(System.Collections.ICollection)"/>
            of a queue to itself result in <see cref="T:System.ArgumentException"/>.
            Further, the behavior of this operation is undefined if the specified
            collection is modified while the operation is in progress.
            </p>
            <p>
            This implementation iterates over the specified collection,
            and adds each element returned by the iterator to this queue, in turn.
            An exception encountered while trying to add an element (including,
            in particular, a <see lang="null"/> element) may result in only some
            of the elements having been successfully added when the associated
            exception is thrown.
            </p>
            </remarks>
            <param name="collection">
            The collection containing the elements to be added to this queue.
            </param>
            <returns>
            <see lang="true"/> if this queue changed as a result of the call.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="collection"/> or any one of its elements are <see lang="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the collection is the current <see cref="T:Spring.Collections.IQueue"/> or 
            the collection size is greater than the queue capacity.
            </exception>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.Offer(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions.
            </summary>
            <remarks>
            <p>
            When using a capacity-restricted queue, this method is generally
            preferable to <see cref="M:Spring.Collections.IQueue.Add(System.Object)"/>,
            which can fail to insert an element only by throwing an exception.
            </p>
            </remarks>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns>
            <see lang="true"/> if the element was added to this queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="objectToAdd"/> is
            <see lang="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.Peek">
            <summary> 
            Retrieves, but does not remove, the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.Poll">
            <summary> 
            Retrieves and removes the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.AbstractQueue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Spring.Collections.AbstractQueue.IsEmpty">
            <summary>
            Returns <see lang="true"/> if there are no elements in the <see cref="T:Spring.Collections.IQueue"/>, <see lang="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Spring.Collections.AbstractQueue.Capacity">
            <summary>
            Returns the current capacity of this queue.
            </summary>
        </member>
        <member name="P:Spring.Collections.AbstractQueue.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Spring.Collections.AbstractQueue.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Spring.Collections.AbstractQueue.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="T:Spring.Collections.CaseInsensitiveHashtable">
            <summary>
            Provides a performance improved hashtable with case-insensitive (string-only! based) key handling.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.#ctor">
            <summary>
            Creates a case-insensitive hashtable using <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a case-insensitive hashtable using the given <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="culture">the <see cref="T:System.Globalization.CultureInfo"/> to calculate the hashcode</param>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.#ctor(System.Collections.IDictionary,System.Globalization.CultureInfo)">
            <summary>
            Creates a case-insensitive hashtable using the given <see cref="T:System.Globalization.CultureInfo"/>, initially
            populated with entries from another dictionary.
            </summary>
            <param name="d">the dictionary to copy entries from</param>
            <param name="culture">the <see cref="T:System.Globalization.CultureInfo"/> to calculate the hashcode</param>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"></see> class that is serializable using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects.
            </summary>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable"></see>. </param>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable"></see> object.</param>
            <exception cref="T:System.ArgumentNullException">info is null. </exception>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:Spring.Collections.CaseInsensitiveHashtable"></see>.
            </summary>
            
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object containing the source and destination of the serialized stream associated with the <see cref="T:Spring.Collections.CaseInsensitiveHashtable"></see>. </param>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object containing the information required to serialize the <see cref="T:Spring.Collections.CaseInsensitiveHashtable"></see>. </param>
            <exception cref="T:System.ArgumentNullException">info is null. </exception>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.GetHash(System.Object)">
            <summary>
            Calculate the hashcode of the given string key, using the configured culture.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.KeyEquals(System.Object,System.Object)">
            <summary>
            Compares two keys
            </summary>
        </member>
        <member name="M:Spring.Collections.CaseInsensitiveHashtable.Clone">
            <summary>
            Creates a shallow copy of the current instance.
            </summary>
        </member>
        <member name="T:Spring.Collections.DictionarySet">
            <summary>
            <see cref="T:Spring.Collections.DictionarySet"/> is an
            <see langword="abstract"/> class that supports the creation of new
            <see cref="T:Spring.Collections.ISet"/> types where the underlying data
            store is an <see cref="T:System.Collections.IDictionary"/> instance.
            </summary>
            <remarks>
            <p>
            You can use any object that implements the
            <see cref="T:System.Collections.IDictionary"/> interface to hold set
            data. You can define your own, or you can use one of the objects
            provided in the framework. The type of
            <see cref="T:System.Collections.IDictionary"/> you
            choose will affect both the performance and the behavior of the
            <see cref="T:Spring.Collections.ISet"/> using it.
            </p>
            <p>
            This object overrides the <see cref="M:System.Object.Equals(System.Object)"/> method,
            but not the <see cref="M:System.Object.GetHashCode"/> method, because
            the <see cref="T:Spring.Collections.DictionarySet"/> class is mutable.
            Therefore, it is not safe to use as a key value in a dictionary.
            </p>
            <p>
            To make a <see cref="T:Spring.Collections.ISet"/> typed based on your
            own <see cref="T:System.Collections.IDictionary"/>, simply derive a new
            class with a constructor that takes no parameters. Some
            <see cref="T:Spring.Collections.ISet"/> implmentations cannot be defined
            with a default constructor. If this is the case for your class, you
            will need to override <b>clone</b> as well.
            </p>
            <p>
            It is also standard practice that at least one of your constructors
            takes an <see cref="T:System.Collections.ICollection"/> or an
            <see cref="T:Spring.Collections.ISet"/> as an argument.
            </p>
            </remarks>
            <seealso cref="T:Spring.Collections.ISet"/>
        </member>
        <member name="T:Spring.Collections.Set">
            <summary>
            A collection that contains no duplicate elements.
            </summary>
            <seealso cref="T:Spring.Collections.ISet"/>
        </member>
        <member name="M:Spring.Collections.Set.Union(Spring.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present. 
            </summary>
            <param name="setOne">A collection of elements.</param>
            <returns>
            A new <see cref="T:Spring.Collections.ISet"/> containing the union of
            this <see cref="T:Spring.Collections.ISet"/> with the specified
            collection. Neither of the input objects is modified by the union.
            </returns>
            <see cref="M:Spring.Collections.ISet.Union(Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.Union(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs a "union" of two sets, where all the elements in both are
            present.
            </summary>
            <remarks>
            <p>
            That is, the element is included if it is in either
            <paramref name="setOne"/> or <paramref name="anotherSet"/>. The return
            value is a <b>clone</b> of one of the sets (<paramref name="setOne"/>
            if it is not <see langword="null"/>) with elements of the other set
            added in. Neither of the input sets is modified by the operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the union of the input sets;
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.op_BitwiseOr(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs a "union" of two sets, where all the elements in both are
            present.
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the union of the input sets;
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
            <seealso cref="M:Spring.Collections.Set.Union(Spring.Collections.ISet,Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.Intersect(Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            The intersection of this set with <paramref name="setOne"/>.
            </returns>
            <see cref="M:Spring.Collections.ISet.Intersect(Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.Intersect(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain. 
            </summary>
            <remarks>
            <p>
            That is, the element is included only if it exists in both
            <paramref name="setOne"/> and <paramref name="anotherSet"/>. Neither input
            object is modified by the operation. The result object is a
            <b>clone</b> of one of the input objects (<paramref name="setOne"/>
            if it is not <see langword="null"/>) containing the elements from
            the intersect operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            The intersection of the two input sets; <see langword="null"/> if
            both sets are <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.op_BitwiseAnd(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain. 
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            The intersection of the two input sets; <see langword="null"/> if
            both sets are <see langword="null"/>.
            </returns>
            <seealso cref="M:Spring.Collections.Set.Intersect(Spring.Collections.ISet,Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.Minus(Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of this set from the <paramref name="setOne"/>
            set.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the elements from this set with the elements in
            <paramref name="setOne"/> removed.
            </returns>
            <seealso cref="M:Spring.Collections.ISet.Minus(Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.Minus(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of set <paramref name="anotherSet"/> from set
            <paramref name="setOne"/>.
            </summary>
            <remarks>
            <p>
            This returns a set of all the elements in set
            <paramref name="setOne"/>, removing the elements that are also in
            set <paramref name="anotherSet"/>. The original sets are not modified
            during this operation. The result set is a <b>clone</b> of set
            <paramref name="setOne"/> containing the elements from the operation. 
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing
            <c><paramref name="setOne"/> - <paramref name="anotherSet"/></c> elements.
            <see langword="null"/> if <paramref name="setOne"/> is
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.op_Subtraction(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs a "minus" of set <paramref name="anotherSet"/> from set
            <paramref name="setOne"/>.
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing
            <c><paramref name="setOne"/> - <paramref name="anotherSet"/></c> elements.
            <see langword="null"/> if <paramref name="setOne"/> is
            <see langword="null"/>.
            </returns>
            <seealso cref="M:Spring.Collections.Set.Minus(Spring.Collections.ISet,Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.ExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ this</c>.
            </returns>
            <seealso cref="M:Spring.Collections.ISet.ExclusiveOr(Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.ExclusiveOr(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <remarks>
            <p>
            The original sets are not modified during this operation. The
            result set is a <b>clone</b> of one of the sets (
            <paramref name="setOne"/> if it is not <see langword="null"/>)
            containing the elements from the exclusive-or operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ <paramref name="anotherSet"/></c>.
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.op_ExclusiveOr(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ <paramref name="anotherSet"/></c>.
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
            <seealso cref="M:Spring.Collections.Set.ExclusiveOr(Spring.Collections.ISet,Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.Set.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="M:Spring.Collections.Set.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.Clone">
            <summary>
            Returns a clone of the <see cref="T:Spring.Collections.ISet"/>
            instance.
            </summary>
            <remarks>
            <p>
            This will work for derived <see cref="T:Spring.Collections.ISet"/>
            classes if the derived class implements a constructor that takes no
            arguments.
            </p>
            </remarks>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Spring.Collections.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Spring.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="M:Spring.Collections.Set.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Spring.Collections.ISet"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.Equals(System.Object)">
            <summary>
            This method will test the <see cref="T:Spring.Collections.ISet"/>
            against another <see cref="T:Spring.Collections.ISet"/> for
            "equality".
            </summary>
            <remarks>
            <p>
            In this case, "equality" means that the two sets contain the same
            elements. The "==" and "!=" operators are not overridden by design.
            If you wish to check for "equivalent"
            <see cref="T:Spring.Collections.ISet"/> instances, use
            <c>Equals()</c>. If you wish to check to see if two references are
            actually the same object, use "==" and "!=".  
            </p>
            </remarks>
            <param name="obj">
            A <see cref="T:Spring.Collections.ISet"/> object to compare to.
            </param>
            <returns>
            <see langword="true"/> if the two sets contain the same elements.
            </returns>
        </member>
        <member name="M:Spring.Collections.Set.GetHashCode">
            <summary>
            Gets the hashcode for the object.
            </summary>
        </member>
        <member name="P:Spring.Collections.Set.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.Set.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.Set.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Spring.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <remarks>
            <p>
            Note that enumeration is inherently not thread-safe. Use the
            <see cref="P:Spring.Collections.Set.SyncRoot"/> to lock the object during enumeration.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Collections.Set.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <remarks>
            <p>
            When implementing this, if your object uses a base object, like an
            <see cref="T:System.Collections.IDictionary"/>, or anything that has
            a <c>SyncRoot</c>, return that object instead of "<c>this</c>".
            </p>
            </remarks>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="false"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection; also <see langword="false"/> if the
            supplied <paramref name="collection"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Spring.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="M:Spring.Collections.DictionarySet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Spring.Collections.ISet"/>.
            </returns>
        </member>
        <member name="P:Spring.Collections.DictionarySet.InternalDictionary">
            <summary>
            Provides the storage for elements in the
            <see cref="T:Spring.Collections.ISet"/>, stored as the key-set
            of the <see cref="T:System.Collections.IDictionary"/> object.  
            </summary>
            <remarks>
            <p>
            Set this object in the constructor if you create your own
            <see cref="T:Spring.Collections.ISet"/> class.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Collections.DictionarySet.Placeholder">
            <summary>
            The placeholder object used as the value for the
            <see cref="T:System.Collections.IDictionary"/> instance.
            </summary>
            <remarks>
            There is a single instance of this object globally, used for all
            <see cref="T:Spring.Collections.ISet"/>s.
            </remarks>
        </member>
        <member name="P:Spring.Collections.DictionarySet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.DictionarySet.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.DictionarySet.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Spring.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <seealso cref="P:Spring.Collections.Set.IsSynchronized"/>
        </member>
        <member name="P:Spring.Collections.DictionarySet.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
            <seealso cref="P:Spring.Collections.Set.SyncRoot"/>
        </member>
        <member name="T:Spring.Collections.HashedSet">
            <summary>
            Implements an <see cref="T:Spring.Collections.ISet"/> based on a
            hash table.
            </summary>
            <remarks>
            <p>
            This will give the best lookup, add, and remove performance for very
            large data-sets, but iteration will occur in no particular order.
            </p>
            </remarks>
            <seealso cref="T:Spring.Collections.ISet"/>
        </member>
        <member name="M:Spring.Collections.HashedSet.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Collections.HashedSet"/> class.
            </summary>
        </member>
        <member name="M:Spring.Collections.HashedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Collections.HashedSet"/> class, and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Spring.Collections.HybridSet">
            <summary>
            Implements an <see cref="T:Spring.Collections.ISet"/> that automatically
            changes from a list based implementation to a hashtable based
            implementation when the size reaches a certain threshold.
            </summary>
            <remarks>
            <p>
            This is good if you are unsure about whether you data-set will be tiny
            or huge.
            </p>
            <note>
            Because this uses a dual implementation, iteration order is <b>not</b>
            guaranteed!
            </note>
            </remarks>
            <seealso cref="T:Spring.Collections.ISet"/>
        </member>
        <member name="M:Spring.Collections.HybridSet.#ctor">
            <summary>
            Creates a new set instance based on either a list or a hash table,
            depending on which will be more efficient based on the data-set
            size.
            </summary>
        </member>
        <member name="M:Spring.Collections.HybridSet.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Collections.HybridSet"/> class with a given capacity
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spring.Collections.HybridSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on either a list or a hash table,
            depending on which will be more efficient based on the data-set
            size, and initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Spring.Collections.ImmutableSet">
            <summary>
            Implements an immutable (read-only)
            <see cref="T:Spring.Collections.ISet"/> wrapper.
            </summary>
            <remarks>
            <p>
            Although this class is advertised as immutable, it really isn't.
            Anyone with access to the wrapped <see cref="T:Spring.Collections.ISet"/>
            can still change the data. So <see cref="M:System.Object.GetHashCode"/>
            is not implemented for this <see cref="T:Spring.Collections.ISet"/>, as
            is the case for all <see cref="T:Spring.Collections.ISet"/>
            implementations in this library. This design decision was based on the
            efficiency of not having to <b>clone</b> the wrapped
            <see cref="T:Spring.Collections.ISet"/> every time you wrap a mutable
            <see cref="T:Spring.Collections.ISet"/>.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.#ctor(Spring.Collections.ISet)">
            <summary>
            Constructs an immutable (read-only)
            <see cref="T:Spring.Collections.ISet"/> wrapper.
            </summary>
            <param name="basisSet">
            The <see cref="T:Spring.Collections.ISet"/> that is to be wrapped.
            </param>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection.
            </returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Spring.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Spring.Collections.ISet"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Clone">
            <summary>
            Returns a clone of the <see cref="T:Spring.Collections.ISet"/>
            instance.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Union(Spring.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present. 
            </summary>
            <param name="setOne">A collection of elements.</param>
            <returns>
            A new <see cref="T:Spring.Collections.ISet"/> containing the union of
            this <see cref="T:Spring.Collections.ISet"/> with the specified
            collection. Neither of the input objects is modified by the union.
            </returns>
            <see cref="M:Spring.Collections.ISet.Union(Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Intersect(Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            The intersection of this set with <paramref name="setOne"/>.
            </returns>
            <see cref="M:Spring.Collections.ISet.Intersect(Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Minus(Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of this set from the <paramref name="setOne"/>
            set.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the elements from this set with the elements in
            <paramref name="setOne"/> removed.
            </returns>
            <seealso cref="M:Spring.Collections.ISet.Minus(Spring.Collections.ISet)"/>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.ExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ this</c>.
            </returns>
            <seealso cref="M:Spring.Collections.ISet.ExclusiveOr(Spring.Collections.ISet)"/>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Spring.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <remarks>
            <p>
            Note that enumeration is inherently not thread-safe. Use the
            <see cref="P:Spring.Collections.ImmutableSet.SyncRoot"/> to lock the object during enumeration.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
        </member>
        <member name="T:Spring.Collections.LinkedList">
            <summary>
            Simple linked list implementation.
            </summary>
            <author>Simon White</author>
        </member>
        <member name="M:Spring.Collections.LinkedList.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Collections.LinkedList"/> class.
            </summary>
        </member>
        <member name="M:Spring.Collections.LinkedList.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Collections.LinkedList"/> class that contains all
             elements of the specified list.
            </summary>
            <param name="list">
            A list of elements that defines the initial contents.
            </param>
        </member>
        <member name="M:Spring.Collections.LinkedList.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <param name="value">The object to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.Remove(System.Object)">
            <summary>
            Removes the first instance of the specified object found.
            </summary>
            <param name="value">The object to remove</param>
        </member>
        <member name="M:Spring.Collections.LinkedList.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this list contains the specified
            element.
            </summary>
            <param name="value">The element to look for.</param>
            <returns>
            <see langword="true"/> if this list contains the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.LinkedList.Clear">
            <summary>
            Removes all objects from the list.
            </summary>
        </member>
        <member name="M:Spring.Collections.LinkedList.IndexOf(System.Object)">
            <summary>
            Returns the index of the first instance of the specified
            <paramref name="value"/> found.
            </summary>
            <param name="value">The object to search for</param>
            <returns>
            The index of the first instance found, or -1 if the element was not
            found.
            </returns>
        </member>
        <member name="M:Spring.Collections.LinkedList.Add(System.Object)">
            <summary>
            Adds the specified object to the end of the list.
            </summary>
            <param name="value">The object to add</param>
            <returns>The index that the object was added at.</returns>
        </member>
        <member name="M:Spring.Collections.LinkedList.AddAll(System.Collections.IList)">
            <summary>
            Adds all of the elements of the supplied
            <paramref name="elements"/>list to the end of this list.
            </summary>
            <param name="elements">The list of objects to add.</param>
        </member>
        <member name="M:Spring.Collections.LinkedList.CheckUpdateState">
            <summary>
            Checks whether the list can be modified.
            </summary>
            <exception cref="T:System.NotSupportedException">
            If the list cannot be modified.
            </exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.ValidateIndex(System.Int32)">
            <summary>
            Validates the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the index is invalid.
            </exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.GetNode(System.Int32)">
            <summary>
            Returns the node at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <returns>The node at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.GetNode(System.Object)">
            <summary>
            Returns the node (and index) of the first node that contains
            the specified value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>
            The node, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Spring.Collections.LinkedList.RemoveNode(Spring.Collections.LinkedList.Node)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">The node to be removed.</param>
        </member>
        <member name="M:Spring.Collections.LinkedList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in this list to an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in this
            list, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> is less than zero
            or is greater than the length of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="array"/> is of insufficient size.
            </exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Spring.Collections.LinkedList"/>.
            </summary>
            <remarks>
            <p>
            Enumerators are fail fast.
            </p>
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Spring.Collections.LinkedList"/>.
            </returns>
        </member>
        <member name="P:Spring.Collections.LinkedList.IsReadOnly">
            <summary>
            Is list read only?
            </summary>
            <value>
            <see langword="true"/> if the list is read only.
            </value>
        </member>
        <member name="P:Spring.Collections.LinkedList.Item(System.Int32)">
            <summary>
            Returns the node at the specified index.
            </summary>
            <remarks>
            <p>
            This is the indexer for the
            <see cref="T:Spring.Collections.LinkedList"/> class.
            </p>
            </remarks>
            <seealso cref="M:Spring.Collections.LinkedList.GetNode(System.Int32)"/>
        </member>
        <member name="P:Spring.Collections.LinkedList.IsFixedSize">
            <summary>
            Is the list a fixed size?
            </summary>
            <value>
            <see langword="true"/> if the list is a fixed size list.
            </value>
        </member>
        <member name="P:Spring.Collections.LinkedList.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the list is synchronized across
            threads.
            </summary>
            <remarks>
            <note>
            This implementation <b>always</b> returns <see langword="false"/>.
            </note>
            <p>
            Note that enumeration is inherently not thread-safe. Use the
            <see cref="P:Spring.Collections.LinkedList.SyncRoot"/> to lock the object during enumeration.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Collections.LinkedList.Count">
            <summary>
            The number of objects within the list.
            </summary>
        </member>
        <member name="P:Spring.Collections.LinkedList.SyncRoot">
            <summary>
            An object that can be used to synchronize this
            <see cref="T:Spring.Collections.LinkedList"/> to make it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this
            <see cref="T:Spring.Collections.LinkedList"/> to make it thread-safe.
            </value>
        </member>
        <member name="T:Spring.Collections.ListSet">
            <summary>
            Implements a <see cref="T:Spring.Collections.ISet"/> based on a list.
            </summary>
            <remarks>
            <p>
            Performance is much better for very small lists than either
            <see cref="T:Spring.Collections.HashedSet"/> or <see cref="T:Spring.Collections.SortedSet"/>.
            However, performance degrades rapidly as the data-set gets bigger. Use a
            <see cref="T:Spring.Collections.HybridSet"/> instead if you are not sure your data-set
            will always remain very small. Iteration produces elements in the order they were added.
            However, element order is not guaranteed to be maintained by the various
            <see cref="T:Spring.Collections.ISet"/> mathematical operators.  
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.ListSet.#ctor">
            <summary>
            Creates a new set instance based on a list.
            </summary>
        </member>
        <member name="M:Spring.Collections.ListSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a list and initializes it based on a
            collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Spring.Collections.NoElementsException">
            <summary>
            Thrown when an element is requested from an empty <see cref="T:Spring.Collections.IQueue"/>.
            </summary>
            <author>Griffin Caprio</author>
        </member>
        <member name="M:Spring.Collections.NoElementsException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Collections.NoElementsException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Collections.NoElementsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Collections.NoElementsException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Collections.NoElementsException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Collections.NoElementsException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Collections.NoElementsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Collections.NoElementsException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="T:Spring.Collections.PriorityQueue">
            <summary> 
            An unbounded priority <see cref="T:Spring.Collections.IQueue"/> based on a priority
            heap.  This queue orders elements according to an order specified
            at construction time, which is specified either according to their
            <i>natural order</i> (see <see cref="T:System.IComparable"/>, or according to a
            <see cref="T:System.Collections.IComparer"/>, depending on which constructor is
            used. A priority queue does not permit <see lang="null"/> elements.
            A priority queue relying on natural ordering also does not
            permit insertion of non-comparable objects (doing so will result
            <see cref="T:System.InvalidCastException"/>.
            
            <p/>
            The <i>head</i> of this queue is the <i>lowest</i> element
            with respect to the specified ordering.  If multiple elements are
            tied for lowest value, the head is one of those elements -- ties are
            broken arbitrarily. 
            
            <p/>
            A priority queue is unbounded, but has an internal
            <i>capacity</i> governing the size of an array used to store the
            elements on the queue.  It is always at least as large as the queue
            size.  As elements are added to a priority queue, its capacity
            grows automatically.  The details of the growth policy are not
            specified.
            
            <p/>
            This class and its enumerator implement all of the
            <i>optional</i> methods of the <see cref="T:System.Collections.ICollection"/> and
            <see cref="T:System.Collections.IEnumerator"/> interfaces.
            The enumerator provided in method <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> 
            is <b>not</b> guaranteed to traverse the elements of the PriorityQueue in any
            particular order.
            
            <p/> 
            Note that this implementation is <b>NOT</b> synchronized.
            Multiple threads should not access a <see cref="T:Spring.Collections.PriorityQueue"/>
            instance concurrently if any of the threads modifies the list
            structurally. Instead, use the thread-safe PriorityBlockingQueue.
            </summary>
            <author>Josh Bloch</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Collections.PriorityQueue._queue">
            <summary> 
            Priority queue represented as a balanced binary heap: the two children
            of queue[n] are queue[2*n] and queue[2*n + 1].  The priority queue is
            ordered by comparator, or by the elements' natural ordering, if
            comparator is null:  For each node n in the heap and each descendant d
            of n, n &lt;= d.
            
            The element with the lowest value is in queue[1], assuming the queue is
            nonempty.  (A one-based array is used in preference to the traditional
            zero-based array to simplify parent and child calculations.)
            
            queue.length must be >= 2, even if size == 0.
            </summary>
        </member>
        <member name="F:Spring.Collections.PriorityQueue._priorityQueueSize">
            <summary> The number of elements in the priority queue.</summary>
        </member>
        <member name="F:Spring.Collections.PriorityQueue._comparator">
            <summary> 
            The comparator, or null if priority queue uses elements'
            natural ordering.
            </summary>
        </member>
        <member name="F:Spring.Collections.PriorityQueue._queueModificationCount">
            <summary> 
            The number of times this priority queue has been
            <i>structurally modified</i>.
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.#ctor">
            <summary>
            Creates a <see cref="T:Spring.Collections.PriorityQueue"/> with the default initial capacity
            (11) that orders its elements according to their natural
            ordering (using <see cref="T:System.IComparable"/>).
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.#ctor(System.Int32)">
            <summary> 
            Creates a <see cref="T:Spring.Collections.PriorityQueue"/> with the specified initial capacity
            that orders its elements according to their natural ordering
            (using <see cref="T:System.IComparable"/>).
            </summary>
            <param name="initialCapacity">the initial capacity for this priority queue.
            </param>
            <exception cref="T:System.ArgumentException">if <paramref name="initialCapacity"/> is less than 1.</exception>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.#ctor(System.Int32,System.Collections.IComparer)">
            <summary> 
            Creates a <see cref="T:Spring.Collections.PriorityQueue"/> with the specified initial capacity
            that orders its elements according to the specified comparator.
            </summary>
            <param name="initialCapacity">the initial capacity for this priority queue.</param>
            <param name="comparator">the comparator used to order this priority queue.
            If <see lang="null"/> then the order depends on the elements' natural ordering.
            </param>
            <exception cref="T:System.ArgumentException">if <paramref name="initialCapacity"/> is less than 1.</exception>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.#ctor(System.Collections.ICollection)">
            <summary> 
            Creates a <see cref="T:Spring.Collections.PriorityQueue"/> containing the elements in the
            specified collection.  The priority queue has an initial
            capacity of 110% of the size of the specified collection or 1
            if the collection is empty.  If the specified collection is an
            instance of a <see cref="T:Spring.Collections.PriorityQueue"/>, the priority queue will be sorted
            according to the same comparator, or according to its elements'
            natural order if the collection is sorted according to its
            elements' natural order.  Otherwise, the priority queue is
            ordered according to its elements' natural order.
            </summary>
            <param name="collection">the collection whose elements are to be placed into this priority queue.</param>
            <exception cref="T:System.InvalidCastException">if elements of <paramref name="collection"/> cannot be 
            compared to one another according to the priority queue's ordering</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="collection"/> or any element with it is
            <see lang="null"/>
            </exception>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.initializeArray(System.Collections.ICollection)">
            <summary> 
            Common code to initialize underlying queue array across
            constructors below.
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.urShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.fixUp(System.Int32)">
            <summary> 
            Establishes the heap invariant assuming the heap
            satisfies the invariant except possibly for the leaf-node indexed by k
            (which may have a nextExecutionTime less than its parent's).
            </summary>
            <remarks>
            This method functions by "promoting" queue[k] up the hierarchy
            (by swapping it with its parent) repeatedly until queue[k]
            is greater than or equal to its parent.
            </remarks>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.fixDown(System.Int32)">
            <summary> 
            Establishes the heap invariant (described above) in the subtree
            rooted at k, which is assumed to satisfy the heap invariant except
            possibly for node k itself (which may be greater than its children).
            </summary>
            <remarks>
            This method functions by "demoting" queue[k] down the hierarchy
            (by swapping it with its smaller child) repeatedly until queue[k]
            is less than or equal to its children.
            </remarks>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.heapify">
            <summary> 
            Establishes the heap invariant in the entire tree,
            assuming nothing about the order of the elements prior to the call.
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.getQueueSizeBasedOnPercentage(System.Int32,System.Int64)">
            <summary>
            Returns the <paramref name="percentage"/> of <paramref name="size"/> or <see cref="F:System.Int32.MaxValue"/> - 1,
            whichever is smaller. 
            </summary>
            <param name="size">base size</param>
            <param name="percentage">percentage to return</param>
            <returns><paramref name="percentage"/> of <paramref name="size"/></returns>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.fillFromSorted(System.Collections.ICollection)">
            <summary> 
            Initially fill elements of the queue array under the
            knowledge that it is sorted or is another <see cref="T:Spring.Collections.PriorityQueue"/>, in which
            case we can just place the elements in the order presented.
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.fillFromUnsorted(System.Collections.ICollection)">
            <summary> 
            Initially fill elements of the queue array that is not to our knowledge
            sorted, so we must rearrange the elements to guarantee the heap
            invariant.
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.removeAt(System.Int32)">
            <summary> 
            Removes and returns element located at <paramref name="index"/> from queue.  (Recall that the queue
            is one-based, so 1 &lt;= i &lt;= size.)
            </summary>
            <remarks>
            Normally this method leaves the elements at positions from 1 up to i-1,
            inclusive, untouched.  Under these circumstances, it returns <see lang="null"/>.
            Occasionally, in order to maintain the heap invariant, it must move
            the last element of the list to some index in the range [2, i-1],
            and move the element previously at position (i/2) to position i.
            Under these circumstances, this method returns the element that was
            previously at the end of the list and is now at some position between
            2 and i-1 inclusive.
            </remarks>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.grow(System.Int32)">
            <summary> Resize array, if necessary, to be able to hold given index</summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Offer(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions.
            </summary>
            <remarks>
            <p>
            When using a capacity-restricted queue, this method is generally
            preferable to <see cref="M:Spring.Collections.IQueue.Add(System.Object)"/>,
            which can fail to insert an element only by throwing an exception.
            </p>
            </remarks>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns>
            <see lang="true"/> if the element was added to this queue.
            </returns>
            <exception cref="T:System.InvalidCastException">
            if the specified element cannot be compared
            with elements currently in the priority queue according
            to the priority queue's ordering.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="objectToAdd"/> is
            <see lang="null"/> and this queue does not permit <see lang="null"/>
            elements.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Peek">
            <summary> 
            Retrieves, but does not remove, the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Add(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do so
            immediately without violating capacity restrictions, returning
            <see lang="true"/> upon success and throwing an
            <see cref="T:System.InvalidOperationException"/> if no space is
            currently available.
            </summary>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns> 
            <see lang="true"/> if successful.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified element is <see lang="null"/> and this queue does not
            permit <see lang="null"/> elements.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
            <exception cref="T:System.InvalidCastException">
            if the specified element cannot be compared
            with elements currently in the priority queue according
            to the priority queue's ordering.
            </exception>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Remove(System.Object)">
            <summary> 
            Removes a single instance of the specified element from this
            queue, if it is present.
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.GetEnumerator">
            <summary> 
            Returns an <see cref="T:System.Collections.IEnumerator"/> over the elements in this queue. 
            The enumeratoar does not return the elements in any particular order.
            </summary>
            <returns> an enumerator over the elements in this queue.</returns>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Clear">
            <summary> 
            Removes all elements from the priority queue.
            The queue will be empty after this call returns.
            </summary>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Poll">
            <summary> 
            Retrieves and removes the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Contains(System.Object)">
            <summary>
            Queries the queue to see if it contains the specified <pararef name="element"/>
            </summary>
            <param name="element">element to look for.</param>
            <returns><see lang="true"/> if the queue contains the <pararef name="element"/>, 
            <see lang="false"/> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.Comparator">
            <summary> Returns the comparator used to order this collection, or <see lang="null"/>
            if this collection is sorted according to its elements natural ordering
            (using <see cref="T:System.IComparable"/>).
            
            </summary>
            <returns> the comparator used to order this collection, or <see lang="null"/>
            if this collection is sorted according to its elements natural ordering.
            </returns>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Save the state of the instance to a stream (that
            is, serialize it).
            </summary>
            <serialData> The length of the array backing the instance is
            emitted (int), followed by all of its elements (each an
            <see cref="T:System.Object"/>) in the proper order.
            </serialData>
            <param name="serializationInfo">the stream</param>
            <param name="context">the context</param>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Reconstitute the <see cref="T:Spring.Collections.PriorityQueue"/> instance from a stream (that is,
            deserialize it).
            </summary>
            <param name="serializationInfo">the stream</param>
            <param name="context">the context</param>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.PriorityQueue.CopyTo(System.Array)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at index 0.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Spring.Collections.PriorityQueue.Capacity">
            <summary>
            Gets the Capacity of this queue.  Will equal <see cref="P:System.Collections.ICollection.Count"/>
            </summary>
        </member>
        <member name="P:Spring.Collections.PriorityQueue.Count">
            <summary>
            Returns the queue count.
            </summary>
        </member>
        <member name="P:Spring.Collections.PriorityQueue.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Spring.Collections.PriorityQueue.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Spring.Collections.PriorityQueue.IsEmpty">
            <summary>
            Returns <see lang="true"/> if there are no elements in the <see cref="T:Spring.Collections.IQueue"/>, <see lang="false"/> otherwise.
            </summary>
        </member>
        <member name="F:Spring.Collections.PriorityQueue.PriorityQueueEnumerator._cursorIndex">
            <summary> 
            Index (into queue array) of element to be returned by subsequent call to next.
            </summary>
        </member>
        <member name="T:Spring.Collections.SortedSet">
            <summary>
            Implements an <see cref="T:Spring.Collections.ISet"/> based on a sorted
            tree.
            </summary>
            <remarks>
            <p>
            This gives good performance for operations on very large data-sets,
            though not as good - asymptotically - as a
            <see cref="T:Spring.Collections.HashedSet"/>. However, iteration occurs
            in order.
            </p>
            <p>
            Elements that you put into this type of collection must implement
            <see cref="T:System.IComparable"/>, and they must actually be comparable.
            You can't mix <see cref="T:System.String"/> and
            <see cref="T:System.Int32"/> values, for example.
            </p>
            <p>
            This <see cref="T:Spring.Collections.ISet"/> implementation does
            <b>not</b> support elements that are <see langword="null"/>.
            </p>
            </remarks>
            <seealso cref="T:Spring.Collections.ISet"/>
        </member>
        <member name="M:Spring.Collections.SortedSet.#ctor">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
        </member>
        <member name="M:Spring.Collections.SortedSet.#ctor(System.Collections.IComparer)">
            <summary>
            Creates a new set instance based on a sorted tree using <param name="comparer"/> for ordering.
            </summary>
        </member>
        <member name="M:Spring.Collections.SortedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a sorted tree and initializes
            it based on a collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Spring.Collections.SynchronizedDictionaryEnumerator">
            <summary>
            Synchronized <see cref="T:System.Collections.IDictionaryEnumerator"/> that should be returned by synchronized
            dictionary implementations in order to ensure that the enumeration is thread safe.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Collections.SynchronizedEnumerator">
            <summary>
            Synchronized <see cref="T:System.Collections.IEnumerator"/> that should be returned by synchronized
            collections in order to ensure that the enumeration is thread safe.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Collections.SynchronizedHashtable">
            <summary>
            Synchronized <see cref="T:System.Collections.Hashtable"/> that, unlike hashtable created
            using <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)"/> method, synchronizes 
            reads from the underlying hashtable in addition to writes.
            </summary>
            <remarks>
            <p>
            In addition to synchronizing reads, this implementation also fixes
            IEnumerator/ICollection issue described at 
            http://msdn.microsoft.com/en-us/netframework/aa570326.aspx
            (search for SynchronizedHashtable for issue description), by implementing 
            <see cref="T:System.Collections.IEnumerator"/> interface explicitly, and returns thread safe enumerator
            implementations as well.
            </p>
            <p>
            This class should be used whenever a truly synchronized <see cref="T:System.Collections.Hashtable"/>
            is needed.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Spring.Collections.SynchronizedHashtable"/>
            </summary>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Spring.Collections.SynchronizedHashtable"/>
            </summary>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.#ctor(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Spring.Collections.SynchronizedHashtable"/>, copying inital entries from <param name="dictionary"/>
            handling keys depending on <param name="ignoreCase"/>.
            </summary>        
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.#ctor(System.Collections.Hashtable)">
            <summary>
            Creates a <see cref="T:Spring.Collections.SynchronizedHashtable"/> instance that 
            synchronizes access to the underlying <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="other">the hashtable to be synchronized</param>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.Wrap(System.Collections.Hashtable)">
            <summary>
            Creates a <see cref="T:Spring.Collections.SynchronizedHashtable"/> wrapper that synchronizes
            access to the passed <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="other">the hashtable to be synchronized</param>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add. </param>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add. </param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.ContainsKey(System.Object)">
            <summary>
             Returns, whether this <see cref="T:System.Collections.IDictionary"/> contains an entry with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look for</param>
            <returns><see lang="true"/>, if this <see cref="T:System.Collections.IDictionary"/> contains an entry with this <paramref name="key"/></returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.ContainsValue(System.Object)">
            <summary>
             Returns, whether this <see cref="T:System.Collections.IDictionary"/> contains an entry with the specified <paramref name="value"/>.
            </summary>
            <param name="value">The valúe to look for</param>
            <returns><see lang="true"/>, if this <see cref="T:System.Collections.IDictionary"/> contains an entry with this <paramref name="value"/></returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.SynchronizedHashtable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedHashtable.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set. </param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The property is set, key does not exist in the collection, and the <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:Spring.Collections.SynchronizedSet">
            <summary>
            Implements a thread-safe <see cref="T:Spring.Collections.ISet"/> wrapper.
            </summary>
            <remarks>
            <p>
            The implementation is extremely conservative, serializing critical
            sections to prevent possible deadlocks, and locking on everything. The
            one exception is for enumeration, which is inherently not thread-safe.
            For this, you have to <c>lock</c> the <c>SyncRoot</c> object for the
            duration of the enumeration.
            </p>
            </remarks>
            <seealso cref="T:Spring.Collections.ISet"/>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.#ctor(Spring.Collections.ISet)">
            <summary>
            Constructs a thread-safe <see cref="T:Spring.Collections.ISet"/>
            wrapper.
            </summary>
            <param name="basisSet">
            The <see cref="T:Spring.Collections.ISet"/> object that this object
            will wrap.
            </param>
            <exception cref="T:System.NullReferenceException">
            If the supplied <paramref name="basisSet"/> ecposes a
            <see langword="null"/> <c>SyncRoot</c> value.
            </exception>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection; also <see langword="false"/> if the
            supplied <paramref name="collection"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="c">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Spring.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Spring.Collections.ISet"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Clone">
            <summary>
            Returns a clone of the <see cref="T:Spring.Collections.ISet"/> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Spring.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <seealso cref="P:Spring.Collections.Set.IsSynchronized"/>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
            <seealso cref="P:Spring.Collections.Set.SyncRoot"/>
        </member>
        <member name="T:Spring.Context.Events.ConsoleListener">
            <summary>
            Simple listener that logs application events to the console.
            </summary>
            <remarks>
            <p>
            Intended for use during debugging only.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="T:Spring.Context.IApplicationEventListener"/>
        </member>
        <member name="T:Spring.Context.IApplicationEventListener">
            <summary>
            A listener for application events.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Context.IApplicationEventListener.HandleApplicationEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Handle an application event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The event that is to be handled.
            </param>
        </member>
        <member name="M:Spring.Context.Events.ConsoleListener.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Context.Events.ConsoleListener"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Events.ConsoleListener.HandleApplicationEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Handle an application event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The event that is to be handled.
            </param>
        </member>
        <member name="T:Spring.Context.Events.ContextEventArgs">
            <summary>
            Event object sent to listeners registered with an
            <see cref="T:Spring.Context.IApplicationContext"/> to inform them of
            context lifecycle events.
            </summary>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="T:Spring.Context.IApplicationContext"/>
            <seealso cref="T:Spring.Context.IApplicationEventListener"/>
            <seealso cref="T:Spring.Context.EventListenerAttribute"/>
        </member>
        <member name="T:Spring.Context.ApplicationEventArgs">
            <summary>
            Encapsulates the data associated with an event raised by an
            <see cref="T:Spring.Context.IApplicationContext"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="T:Spring.Context.IApplicationEventListener"/>
        </member>
        <member name="M:Spring.Context.ApplicationEventArgs.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Spring.Context.ApplicationEventArgs.TimeStamp">
            <summary>
            The date and time when the event occured.
            </summary>
            <value>
            The date and time when the event occured.
            </value>
        </member>
        <member name="P:Spring.Context.ApplicationEventArgs.EventTimeMilliseconds">
            <summary>
            The system time in milliseconds when the event happened.
            </summary>
            <value>
            The system time in milliseconds when the event happened.
            </value>
        </member>
        <member name="M:Spring.Context.Events.ContextEventArgs.#ctor(Spring.Context.Events.ContextEventArgs.ContextEvent)">
            <summary>
            Creates a new instance of the ContextEventArgs class to represent the
            supplied context event.
            </summary>
            <param name="e">The type of context event.</param>
        </member>
        <member name="M:Spring.Context.Events.ContextEventArgs.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:Spring.Context.Events.ContextEventArgs.Event">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="T:Spring.Context.Events.ContextEventArgs.ContextEvent">
            <summary>
            The various context event types.
            </summary>
        </member>
        <member name="F:Spring.Context.Events.ContextEventArgs.ContextEvent.Refreshed">
            <summary>
            The event type when the context is refreshed or created.
            </summary>
        </member>
        <member name="F:Spring.Context.Events.ContextEventArgs.ContextEvent.Closed">
            <summary>
            The event type when the context is closed.
            </summary>
        </member>
        <member name="T:Spring.Context.Events.ContextRefreshedEventArgs">
            <summary>
            Event object sent to listeners registered with an
            <see cref="T:Spring.Context.IApplicationContext"/> to inform them of
            context <see cref="F:Spring.Context.Events.ContextEventArgs.ContextEvent.Refreshed"/> lifecycle event.
            </summary>
        </member>
        <member name="T:Spring.Context.Events.ContextClosedEventArgs">
            <summary>
            Event object sent to listeners registered with an
            <see cref="T:Spring.Context.IApplicationContext"/> to inform them of
            context <see cref="F:Spring.Context.Events.ContextEventArgs.ContextEvent.Closed"/> lifecycle event.
            </summary>
        </member>
        <member name="T:Spring.Context.Support.AbstractApplicationContext">
            <summary>
            Partial implementation of the
            <see cref="T:Spring.Context.IApplicationContext"/> interface.
            </summary>
            <remarks>
            <p>
            Does not mandate the type of storage used for configuration, but does
            implement common functionality. Uses the Template Method design
            pattern, requiring concrete subclasses to implement
            <see langword="abstract"/> methods.
            </p>
            <p>
            In contrast to a plain vanilla
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, an
            <see cref="T:Spring.Context.IApplicationContext"/> is supposed
            to detect special objects defined in its object factory: therefore,
            this class automatically registers
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>s,
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            and <see cref="T:Spring.Context.IApplicationEventListener"/>s that are
            defined as objects in the context.
            </p>
            <p>
            An <see cref="T:Spring.Context.IMessageSource"/> may be also supplied as
            an object in the context, with the special, well-known-name of
            <c>"messageSource"</c>. Else, message resolution is delegated to the
            parent context.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergan Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
        </member>
        <member name="T:Spring.Core.IO.ConfigurableResourceLoader">
            <summary>
            Configurable implementation of the
            <see cref="T:Spring.Core.IO.IResourceLoader"/> interface.
            </summary>
            <remarks>
            <p>
            This <see cref="T:Spring.Core.IO.IResourceLoader"/> implementation
            supports the configuration of resource access protocols and the
            corresponding .NET types that know how to handle those protocols.
            </p>
            <p>
            Basic protocol-to-resource type mappings are also defined by this class,
            while others can be added either internally, by application contexts
            extending this class, or externally, by the end user configuring the
            context.
            </p>
            <p>
            Only one resource type can be defined for each protocol, but multiple
            protocols can map to the same resource type (for example, the
            <c>"http"</c> and <c>"ftp"</c> protocols both map to the
            <see cref="T:Spring.Core.IO.UrlResource"/> type. The protocols that are
            mapped by default can be found in the following list.
            </p>
            <p>
            <list type="bullet">
            <item>
            <description>assembly</description>
            </item>
            <item>
            <description>config</description>
            </item>
            <item>
            <description>file</description>
            </item>
            <item>
            <description>http</description>
            </item>
            <item>
            <description>https</description>
            </item>
            </list>
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <seealso cref="T:Spring.Core.IO.ResourceConverter"/>
            <seealso cref="T:Spring.Context.IApplicationContext"/>
        </member>
        <member name="T:Spring.Core.IO.IResourceLoader">
            <summary>
            Describes an object that can load
            <see cref="T:Spring.Core.IO.IResource"/>s.
            </summary>
            <remarks>
            <p>
            An <see cref="T:Spring.Context.IApplicationContext"/> implementation is
            generally required to support the functionality described by this
            interface.
            </p>
            <p>
            The <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/> class is a
            standalone implementation that is usable outside an
            <see cref="T:Spring.Context.IApplicationContext"/>; the aforementioned
            class is also used by the
            <see cref="T:Spring.Core.IO.ResourceConverter"/> class.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <seealso cref="T:Spring.Core.IO.ResourceConverter"/>
            <seealso cref="T:Spring.Core.IO.ConfigurableResourceLoader"/>
        </member>
        <member name="M:Spring.Core.IO.IResourceLoader.GetResource(System.String)">
            <summary>
            Return an <see cref="T:Spring.Core.IO.IResource"/> handle for the
            specified resource.
            </summary>
            <remarks>
            <p>
            The handle should always be a reusable resource descriptor; this
            allows one to make repeated calls to the underlying
            <see cref="P:Spring.Core.IO.IInputStreamSource.InputStream"/>.
            </p>
            <p>
            <ul>
            <li>
            <b>Must</b> support fully qualified URLs, e.g. "file:C:/test.dat".
            </li>
            <li>
            Should support relative file paths, e.g. "test.dat" (this will be
            implementation-specific, typically provided by an
            <see cref="T:Spring.Context.IApplicationContext"/> implementation).
            </li>
            </ul>
            </p>
            <note>
            An <see cref="T:Spring.Core.IO.IResource"/> handle does not imply an
            existing resource; you need to check the value of an
            <see cref="T:Spring.Core.IO.IResource"/>'s
            <see cref="P:Spring.Core.IO.IResource.Exists"/> property to determine
            conclusively whether or not the resource actually exists.
            </note>
            </remarks>
            <param name="location">The resource location.</param>
            <returns>
            An appropriate <see cref="T:Spring.Core.IO.IResource"/> handle.
            </returns>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <seealso cref="P:Spring.Core.IO.IResource.Exists"/>
            <seealso cref="T:Spring.Context.IApplicationContext"/>
        </member>
        <member name="F:Spring.Core.IO.ConfigurableResourceLoader.ProtocolSeparator">
            <summary>
            The separator between the protocol name and the resource name.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/> class using the specified default protocol for unqualified resources.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.GetResource(System.String)">
            <summary>
            Returns a <see cref="T:Spring.Core.IO.IResource"/> that has been
            mapped to the protocol of the supplied <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <returns>
            A new <see cref="T:Spring.Core.IO.IResource"/> instance for the
            supplied <paramref name="resourceName"/>.
            </returns>
            <exception cref="T:System.UriFormatException">
            If a <see cref="T:Spring.Core.IO.IResource"/> <see cref="T:System.Type"/>
            mapping does not exist for the supplied <paramref name="resourceName"/>.
            </exception>
            <exception cref="T:System.Exception">
            In the case of any errors arising from the instantiation of the
            returned <see cref="T:Spring.Core.IO.IResource"/> instance.
            </exception>
            <seealso cref="M:Spring.Core.IO.ResourceHandlerRegistry.RegisterResourceHandler(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.HasProtocol(System.String)">
            <summary>
            Checks that the supplied <paramref name="resourceName"/> starts
            with one of the protocol names currently mapped by this
            <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/> instance.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <returns>
            <see langword="true"/> if the supplied
            <paramref name="resourceName"/> starts with one of the known
            protocols; <see langword="false"/> if not, or if the supplied
            <paramref name="resourceName"/> is itself <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.GetProtocol(System.String)">
            <summary>
            Extracts the protocol name from the supplied
            <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <returns>
            The extracted protocol name or <see langword="null"/> if the
            supplied <paramref name="resourceName"/> is unqualified (or
            is itself <see langword="null"/>).
            </returns>
        </member>
        <member name="P:Spring.Core.IO.ConfigurableResourceLoader.DefaultResourceProtocol">
            <summary>
            The default protocol to use for unqualified resources.
            </summary>
            <remarks>
            <p>
            The initial value is <c>"file"</c>.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Context.IConfigurableApplicationContext">
            <summary>
            Provides the means to configure an application context in addition to
            the methods exposed on the
            <see cref="T:Spring.Context.IApplicationContext"/> interface.
            </summary>
            <remarks>
            <p>
            This interface is to be implemented by most (if not all)
            <see cref="T:Spring.Context.IApplicationContext"/> implementations.
            </p>
            <p>
            Configuration and lifecycle methods are encapsulated here to avoid
            making them obvious to <see cref="T:Spring.Context.IApplicationContext"/>
            client code.
            </p>
            <p>
            Calling <see cref="M:System.IDisposable.Dispose"/> will close this
            application context, releasing all resources and locks that the
            implementation might hold. This includes disposing all cached
            <b>singleton</b> objects.
            </p>
            <note type="caution">
            <see cref="M:System.IDisposable.Dispose"/> does <i>not</i> invoke the
            attendant <see cref="M:System.IDisposable.Dispose"/> on any parent
            context.
            </note>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:Spring.Context.IApplicationContext"/>
        </member>
        <member name="T:Spring.Context.IApplicationContext">
            <summary>
            The central interface to Spring.NET's IoC container.
            </summary>
            <remarks>
            <p>
            <see cref="T:Spring.Context.IApplicationContext"/> implementations
            provide:
            <list type="bullet">
            <item>
            <description>
            Object factory functionality inherited from the
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/>
            and <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>
            interfaces.
            </description>
            </item>
            <item>
            <description>
            The ability to resolve messages, supporting internationalization.
            Inherited from the <see cref="T:Spring.Context.IMessageSource"/>
            interface.
            </description>
            </item>
            <item>
            <description>
            The ability to load file resources in a generic fashion.
            Inherited from the <see cref="T:Spring.Core.IO.IResourceLoader"/>
            interface.
            </description>
            </item>
            <item>
            <description>
            Acts an an event registry for supporting loosely coupled eventing
            between objecs. Inherited from the
            <see cref="T:Spring.Objects.Events.IEventRegistry"/> interface.
            </description>
            </item>
            <item>
            <description>
            The ability to raise events related to the context lifecycle. Inherited
            from the <see cref="T:Spring.Context.IApplicationEventPublisher"/>
            interface.
            </description>
            </item>
            <item>
            <description>
            Inheritance from a parent context. Definitions in a descendant context
            will always take priority.
            </description>
            </item>
            </list>
            </p>
            <p>
            In addition to standard object factory lifecycle capabilities,
            <see cref="T:Spring.Context.IApplicationContext"/> implementations need
            to detect
            <see cref="T:Spring.Context.IApplicationContextAware"/>,
            <see cref="T:Spring.Objects.Events.IEventRegistryAware"/>, and
            <see cref="T:Spring.Context.IMessageSourceAware"/> objects and supply
            their attendant dependencies accordingly.
            </p>
            <p>
            This interface is the central client interface in Spring.NET's IoC
            container implementation. As such it does inherit a quite sizeable
            number of interfaces; implementations are strongly encouraged to use
            composition to satisfy each of the inherited interfaces (where
            appropriate of course).
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:Spring.Context.Support.AbstractApplicationContext"/>
            <seealso cref="T:Spring.Context.Support.XmlApplicationContext"/>
            <seealso cref="T:Spring.Context.Support.DelegatingMessageSource"/>
            <seealso cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
        </member>
        <member name="T:Spring.Objects.Factory.IListableObjectFactory">
            <summary>
            Extension of the <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface
            to be implemented by object factories that can enumerate all their object instances,
            rather than attempting object lookup by name one by one as requested by clients.
            </summary>
            <remarks>
            <p>
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> implementations that preload
            all their objects (for example, DOM-based XML factories) may implement this
            interface. This interface is discussed in
            "Expert One-on-One J2EE Design and Development", by Rod Johnson.
            </p>
            <p>
            If this is an <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>,
            the return values will not take any
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> hierarchy into account, but
            will relate only to the objects defined in the current factory.
            Use the <see cref="T:Spring.Objects.Factory.ObjectFactoryUtils"/> helper class to
            get all objects.
            </p>
            <p>
            With the exception of
            <see cref="P:Spring.Objects.Factory.IListableObjectFactory.ObjectDefinitionCount"/>,
            the methods and properties in this interface are not designed for frequent
            invocation. Implementations may be slow.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.IObjectFactory">
            <summary>
            The root interface for accessing a Spring.NET IoC container.
            </summary>
            <remarks>
            <para>
            This is the basic client view of a Spring.NET IoC container; further interfaces
            such as <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/> and
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectFactory"/>
            are available for specific purposes such as enumeration and configuration.
            </para>
            <para>
            This is the root interface to be implemented by objects that can hold a number
            of object definitions, each uniquely identified by a <see cref="T:System.String"/>
            name. An independent instance of any of these objects can be obtained
            (the Prototype design pattern), or a single shared instance can be obtained
            (a superior alternative to the Singleton design pattern, in which the instance is a
            singleton in the scope of the factory). Which type of instance
            will be returned depends on the object factory configuration - the API is the same.
            The Singleton approach is more useful and hence more common in practice.
            </para>
            <para>
            The point of this approach is that the IObjectFactory is a central registry of
            application components, and centralizes the configuring of application components
            (no more do individual objects need to read properties files, for example).
            See chapters 4 and 11 of "Expert One-on-One J2EE Design and Development" for a
            discussion of the benefits of this approach.
            </para>
            <para>
            Normally an IObjectFactory will load object definitions stored in a configuration
            source (such as an XML document), and use the <see cref="N:Spring.Objects"/>
            namespace to configure the objects. However, an implementation could simply return
            .NET objects it creates as necessary directly in .NET code. There are no
            constraints on how the definitions could be stored: LDAP, RDBMS, XML, properties
            file etc. Implementations are encouraged to support references amongst objects,
            to either Singletons or Prototypes.
            </para>
            <para>
            In contrast to the methods in
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/>, all of the methods
            in this interface will also check parent factories if this is an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>. If an object is
            not found in this factory instance, the immediate parent is asked. Objects in
            this factory instance are supposed to override objects of the same name in any
            parent factory.
            </para>
            <para>
            Object factories are supposed to support the standard object lifecycle interfaces
            as far as possible. The maximum set of initialization methods and their standard
            order is:
            </para>
            <para>
            <list type="bullet">
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.IObjectNameAware"/>'s
            <see cref="P:Spring.Objects.Factory.IObjectNameAware.ObjectName"/> property.
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>'s
            <see cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/> property.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Spring.Context.IApplicationContextAware.ApplicationContext"/>
            (only applicable if running within an <see cref="T:Spring.Context.IApplicationContext"/>).
            </description>
            </item>
            <item>
            <description>
            The
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
            method of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/> method.
            </description>
            </item>
            <item>
            <description>
            A custom init-method definition.
            </description>
            </item>
            <item>
            <description>
            The
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
            method of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </description>
            </item>
            </list>
            </para>
            <p/>
            <para>
            On shutdown of an object factory, the following lifecycle methods apply:
            </para>
            <para>
            <list type="bullet">
            <item>
            <description>
            <see cref="T:System.IDisposable"/>'s
            <see cref="M:System.IDisposable.Dispose"/> method.
            </description>
            </item>
            <item>
            <description>
            A custom destroy-method definition.
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <remarks>
            <para>
            That is, will <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            always return the same object?
            </para>
            <para>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </para>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if the named object is a singleton.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.IsPrototype(System.String)">
            <summary>
            Determines whether the specified object name is prototype.  That is, will GetObject
            always return independent instances?
            </summary>
            <remarks>This method returning false does not clearly indicate a singleton object.
            It indicated non-independent instances, which may correspond to a scoped object as 
            well.  use the IsSingleton property to explicitly check for a shared 
            singleton instance.
            <para>Translates aliases back to the corresponding canonical object name.  Will ask the
            parent factory if the object can not be found in this factory instance.
            </para>
            </remarks>
            
            <param name="name">The name of the object to query</param>
            <returns>
            	<c>true</c> if the specified object name will always deliver independent instances; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">if there is no object with the given name.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.ContainsObject(System.String)">
            <summary>
            Does this object factory contain an object with the given name?
            </summary>
            <remarks>
            <para>
            The concrete lookup strategy depends on the implementation. E.g. <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>s
            will also search their parent factory if a name isn't found .
            </para>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if an object with the given name is defined.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <remarks>
            <para>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </para>
            </remarks>
            <param name="name">The object name to check for aliases.</param>
            <returns>The aliases, or an empty array if none.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <para>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </para>
            <para>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </para>
            <para>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </para>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <para>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </para>
            <para>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </para>
            <para>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </para>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. If there is no factory method and the
            arguments are not null, then match the argument values by type and
            call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <para>
            Provides a measure of type safety by throwing an exception if the object is
            not of the required <see cref="T:System.Type"/>.
            </para>
            <para>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </para>
            <para>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </para>
            <para>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </para>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetType(System.String)">
            <summary>
            Determine the type of the object with the given name.
            </summary>
            <remarks>
            <para>
            More specifically, checks the type of object that
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> would return.
            For an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, returns the type
            of object that the <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </para>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>
            The type of the object or <cref lang="null"/> if not determinable.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.IsTypeMatch(System.String,System.Type)">
            <summary>
            Determines whether the object with the given name matches the specified type.
            </summary>
            <remarks>More specifically, check whether a GetObject call for the given name
            would return an object that is assignable to the specified target type.
            Translates aliases back to the corresponding canonical bean name.
            Will ask the parent factory if the bean cannot be found in this factory instance.
            </remarks>
            <param name="name">The name of the object to query.</param>
            <param name="targetType">Type of the target to match against.</param>
            <returns>
            	<c>true</c> if the object type matches; otherwise, <c>false</c>
            if it doesn't match or cannot be determined yet.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">Ff there is no object with the given name
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.CreateObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an unconfigured(!) instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <returns>The unconfigured(!) instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type,System.Object[])"/>
            <remarks>
             This method will only <b>instantiate</b> the requested object. It does <b>NOT</b> inject any dependencies!
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <remarks>
            <para>
            In addition to being generally useful, typically this method is used to provide
            dependency injection functionality for objects that are instantiated outwith the
            control of a developer. A case in point is the way that the current (1.1)
            ASP.NET classes instantiate web controls... the instantiation takes place within
            a private method of a compiled page, and thus cannot be hooked into the
            typical Spring.NET IOC container lifecycle for dependency injection.
            </para>
            </remarks>
            <example>
            The following code snippet assumes that the instantiated factory instance
            has been configured with an object definition named
            '<i>ExampleNamespace.BusinessObject</i>' that has been configured to set the
            <c>Dao</c> property of any <c>ExampleNamespace.BusinessObject</c> instance
            to an instance of an appropriate implementation...
            <code language="C#">
            namespace ExampleNamespace
            {
                public class BusinessObject
                {
                    private IDao _dao;
            		
                    public BusinessObject() {}
            
                    public IDao Dao
                    {
            		    get { return _dao;	}
                        set { _dao = value; }
                    }
                }
            }
            </code>
            with the corresponding driver code looking like so...
            <code language="C#">
            IObjectFactory factory = GetAnIObjectFactoryImplementation();
            BusinessObject instance = new BusinessObject();
            factory.ConfigureObject(instance, "object_definition_name");
            // at this point the dependencies for the 'instance' object will have been resolved...
            </code>
            </example>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object definition for the supplied <paramref name="name"/>.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any of the target object's dependencies could not be created.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.IObjectFactory.IsCaseSensitive">
            <summary>
            Determine whether this object factory treats object names case-sensitive or not.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.IObjectFactory.Item(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <para>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </para>
            <para>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </para>
            <para>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </para>
            <para>
            This is the indexer for the <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            interface.
            </para>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this object factory contains an object definition with the given name.
            </summary>
            <remarks>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            <note>
            Ignores any singleton objects that have been registered by other means
            than object definitions.
            </note>
            </remarks>
            <param name="name">The name of the object to look for.</param>
            <returns>
            <see langword="true"/> if this object factory contains an object
            definition with the given name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this factory.
            </summary>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectNamesForType(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <remarks>
            <p>
            Does consider objects created by <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            or rather it considers the type of objects created by
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> (which means that
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s will be instantiated).
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectNamesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <remarks>
            <p>
            Does consider objects created by <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            or rather it considers the type of objects created by
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> (which means that
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s will be instantiated).
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            Use <see cref="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectNamesForTypeIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)"/>
            to include beans in ancestor factories too.
            &lt;p&gt;Note: Does &lt;i&gt;not&lt;/i&gt; ignore singleton objects that have been registered
            by other means than bean definitions.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            This version of the <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
            method matches all kinds of object definitions, be they singletons, prototypes, or
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s. Typically, the results
            of this method call will be the same as a call to
            <code>IListableObjectFactory.GetObjectsOfType(type,true,true)</code> .
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.IListableObjectFactory.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the factory.
            </summary>
            <value>
            The number of objects defined in the factory.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.IHierarchicalObjectFactory">
            <summary>
            Sub-interface implemented by object factories that can be part
            of a hierarchy.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.IHierarchicalObjectFactory.ContainsLocalObject(System.String)">
            <summary>
            Determines whether the local object factory contains a bean of the given name,
            ignoring object defined in ancestor contexts, also resolving a given alias if necessary.
            This is an alternative to <code>ContainsObject</code>, ignoring an object
            of the given name from an ancestor object factory.
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>
            	<c>true</c> if objects with the specified name is defined in the local factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.IHierarchicalObjectFactory.ParentObjectFactory">
            <summary>
            Return the parent object factory, or <see langword="null"/>
            if this factory does not have a parent.
            </summary>
            <value>
            The parent object factory, or <see langword="null"/>
            if this factory does not have a parent.
            </value>
        </member>
        <member name="T:Spring.Context.IMessageSource">
            <summary>
            Describes an object that can resolve messages.
            </summary>
            <remarks>
            <p> 
            This enables the parameterization and internationalization of messages.
            </p>
            <p>
            Spring.NET provides one out-of-the-box implementation for production
            use:
            <ul>
            <li><see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.</li>
            </ul>
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Context.Support.ResourceSetMessageSource"/>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            <p>
            If the lookup is not successful, implementations are permitted to
            take one of two actions.
            </p>
            <list type="bullet">
            <item>
            <description>Throw an exception.</description>
            </item>
            <item>
            <description>
            Return the supplied <paramref name="name"/> as is.
            </description>
            </item>
            </list>
            </remarks>
            <param name="name">The name of the message to resolve.</param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            <p>
            If the lookup is not successful, implementations are permitted to
            take one of two actions.
            </p>
            <list type="bullet">
            <item>
            <description>Throw an exception.</description>
            </item>
            <item>
            <description>
            Return the supplied <paramref name="name"/> as is.
            </description>
            </item>
            </list>
            </remarks>
            <param name="name">The name of the message to resolve.</param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            Note that the fallback behavior based on CultureInfo seem to 
            have a bug that is fixed by installed .NET 1.1 Service Pack 1.  
            <p>
            If the lookup is not successful, implementations are permitted to
            take one of two actions.
            </p>
            <list type="bullet">
            <item>
            <description>Throw an exception.</description>
            </item>
            <item>
            <description>
            Return the supplied <paramref name="name"/> as is.
            </description>
            </item>
            </list>
            </remarks>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            Note that the fallback behavior based on CultureInfo seem to 
            have a bug that is fixed by installed .NET 1.1 Service Pack 1.      
            <p>
            If the lookup is not successful, implementations are permitted to
            take one of two actions.
            </p>
            <list type="bullet">
            <item>
            <description>Throw an exception.</description>
            </item>
            <item>
            <description>
            Return the supplied <paramref name="name"/> as is.
            </description>
            </item>
            </list>
            </remarks>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            Note that the fallback behavior based on CultureInfo seem to 
            have a bug that is fixed by installed .NET 1.1 Service Pack 1.      
            <p>
            If the lookup is not successful, implementations are permitted to
            take one of two actions.
            </p>
            <list type="bullet">
            <item>
            <description>Throw an exception.</description>
            </item>
            <item>
            <description>
            Return the supplied <paramref name="name"/> as is.
            </description>
            </item>
            </list>
            </remarks>
            <param name="name">The name of the message to resolve.</param>
            <param name="defaultMessage">The default message if name is not found.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message using all of the attributes contained within
            the supplied <see cref="T:Spring.Context.IMessageSourceResolvable"/>
            argument.
            </summary>
            <param name="resolvable">
            The value object storing those attributes that are required to
            properly resolve a message.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetResourceObject(System.String)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            <p>
            This method must use the
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            value to obtain a resource.
            </p>
            <p>
            Examples of resources that may be resolved by this method include
            (but are not limited to) objects such as icons and bitmaps.
            </p>
            </remarks>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            <p>
            Examples of resources that may be resolved by this method include
            (but are not limited to) objects such as icons and bitmaps.
            </p>
            </remarks>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Applies resources to object properties.
            </summary>
            <remarks>
            <p>
            Resource key names are of the form <c>objectName.propertyName</c>.
            </p>
            </remarks>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
        </member>
        <member name="T:Spring.Context.IApplicationEventPublisher">
            <summary>
            Encapsulates event publication functionality.
            </summary>
            <remarks>
            <p>
            Serves as a super-interface for the
            <see cref="T:Spring.Context.IApplicationContext"/> interface.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Context.IApplicationEventPublisher.PublishEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Publishes an application context event.
            </summary>
            <param name="sender">
            The source of the event. May be <see langword="null"/>.
            </param>
            <param name="e">
            The event that is to be raised.
            </param>
        </member>
        <member name="T:Spring.Objects.Events.IEventRegistry">
            <summary>
            A registry that manages subscriptions to and the
            publishing of events.
            </summary>
            <author>Griffin Caprio</author>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.PublishEvents(System.Object)">
            <summary>
            Publishes <b>all</b> events of the source object.
            </summary>
            <param name="sourceObject">
            The source object containing events to publish.
            </param>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.Subscribe(System.Object)">
            <summary>
            Subscribes to <b>all</b> events published, if the subscriber
            implements compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.Subscribe(System.Object,System.Type)">
            <summary>
            Subscribes to the published events of all objects of a given
            <see cref="T:System.Type"/>, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="targetSourceType">
            The target <see cref="T:System.Type"/> to subscribe to.
            </param>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.Unsubscribe(System.Object)">
            <summary>
            Unsubscribes to <b>all</b> events published, if the subscriber
            implmenets compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use</param>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.Unsubscribe(System.Object,System.Type)">
            <summary>
            Unsubscribes to the published events of all objects of a given
            <see cref="T:System.Type"/>, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="targetSourceType">
            The target <see cref="T:System.Type"/> to unsubscribe from
            </param>
        </member>
        <member name="E:Spring.Context.IApplicationContext.ContextEvent">
            <summary>
            Raised in response to an application context event.
            </summary>
        </member>
        <member name="P:Spring.Context.IApplicationContext.StartupDate">
            <summary>
            Returns the date and time this context was loaded.
            </summary>
            <remarks>
            <p>
            This is to be set immediately after an 
            <see cref="T:Spring.Context.IApplicationContext"/> has been
            instantiated and its configuration has been loaded. Implementations
            are permitted to update this value if the context is reset or
            refreshed in some way.
            </p>
            </remarks>
            <returns>
            The <see cref="T:System.DateTime"/> representing when this context
            was loaded.
            </returns>
            <seealso cref="M:Spring.Context.IConfigurableApplicationContext.Refresh"/>
        </member>
        <member name="P:Spring.Context.IApplicationContext.ParentContext">
            <summary>
            Gets the parent context, or <see langword="null"/> if there is no
            parent context.
            </summary>
            <remarks>
            <p>
            If the parent context is <see langword="null"/>, then this context
            is the root of any context hierarchy.
            </p>
            </remarks>
            <returns>
            The parent context, or <see langword="null"/>  if there is no
            parent.
            </returns>
        </member>
        <member name="P:Spring.Context.IApplicationContext.Name">
            <summary>
            Gets and sets a name for this context.
            </summary>
            <returns>
            A name for this context.
            </returns>
        </member>
        <member name="T:Spring.Context.ILifecycle">
            <summary>
            Interface defining methods for start/stop lifecycle control.
            The typical use case for this is to control asynchronous processing.
            </summary>
            <remarks>
            <para>
            Can be implemented by both components (typically a Spring object defined in
            a spring <see cref="T:Spring.Objects.Factory.IObjectFactory"/> and containers
            (typically a spring <see cref="T:Spring.Context.IApplicationContext"/>.  Containers will 
            propagate start/stop signals to all components that apply.
            </para>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Context.ILifecycle.Start">
            <summary>
            Starts this component.
            </summary>
            <remarks>Should not throw an exception if the component is already running.
            In the case of a container, this will propagate the start signal
            to all components that apply.
            </remarks>
        </member>
        <member name="M:Spring.Context.ILifecycle.Stop">
            <summary>
            Stops this component.
            </summary>
            <remarks>
            Should not throw an exception if the component isn't started yet.
            In the case of a container, this will propagate the stop signal
            to all components that apply.
            </remarks>
        </member>
        <member name="P:Spring.Context.ILifecycle.IsRunning">
            <summary>
            Gets a value indicating whether this component is currently running.
            </summary>
            <remarks>
            In the case of a container, this will return <code>true</code>
            only if <i>all</i> components that apply are currently running.
            </remarks>
            <value>
            	<c>true</c> if this component is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spring.Context.IConfigurableApplicationContext.AddObjectFactoryPostProcessor(Spring.Objects.Factory.Config.IObjectFactoryPostProcessor)">
            <summary>
            Add an
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            that will get applied to the internal object factory of this
            application context on refresh, before any of the object
            definitions are evaluated.
            </summary>
            <remarks>
            <p>
            To be invoked during context configuration.
            </p>
            </remarks>
            <param name="objectFactoryPostProcessor">
            The factory processor to register.
            </param>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
        </member>
        <member name="M:Spring.Context.IConfigurableApplicationContext.Refresh">
            <summary>
            Load or refresh the persistent representation of the configuration,
            which might an XML file, properties file, or relational database schema.
            </summary>
            <exception cref="T:Spring.Context.ApplicationContextException">
            If the configuration cannot be loaded.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object factory could not be initialized.
            </exception>
        </member>
        <member name="P:Spring.Context.IConfigurableApplicationContext.ObjectFactory">
            <summary>
            Return the internal object factory of this application context.
            </summary>
            <remarks>
            <p>
            Can be used to access specific functionality of the factory.
            </p>
            <note type="caution">
            This is just guaranteed to return an instance that is not 
            <see langword="null"/> <i>after</i> the context has been refreshed
            at least once.
            </note>
            <note type="caution">
            Do not use this to post-process the object factory; singletons
            will already have been instantiated. Use an
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            to intercept the object factory setup process before objects even
            get touched.
            </note>
            </remarks>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
        </member>
        <member name="P:Spring.Context.IConfigurableApplicationContext.ParentContext">
            <summary>
            Sets the parent of this application context.
            </summary>
            <remarks>
            <note>
            The parent should <b>not</b> be changed: it should only be set
            outside a constructor if it isn't available when an instance of
            this class is created.
            </note>
            </remarks>
            <value>
            The parent context.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry">
            <summary>
            Interface for registries that hold object definitions, i.e. 
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            instances.
            </summary>
            <remarks>
            <p>
            Typically implemented by object factories that work with the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            hierarchy internally.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.IsObjectNameInUse(System.String)">
            <summary>
            Determine whether the given object name is already in use within this registry, 
            i.e. whether there is a local object or alias registered under this name.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this registry.
            </summary>
            <returns>
            The names of all objects defined in this registry, or an empty array
            if none defined
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this registry contains a object definition with the given name.
            </summary>
            <param name="name">
            The name of the object to look for.
            </param>
            <returns>
            True if this object factory contains an object definition with the
            given name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetObjectDefinition(System.String)">
            <summary>
            Returns the
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>
            for the given object name.
            </summary>
            <param name="name">
            The name of the object to find a definition for.
            </param>
            <returns>
            The <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for
            the given name (never null).
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If the object definition cannot be resolved.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Register a new object definition with this registry.
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            and <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </summary>
            <param name="name">
            The name of the object instance to register.
            </param>
            <param name="definition">
            The definition of the object instance to register.
            </param>
            <remarks>
            <p>
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object definition is invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <param name="name">the object name to check for aliases
            </param>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this
            factory instance.
            </p>
            </remarks>
            <returns>
            The aliases, or an empty array if none.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.RegisterAlias(System.String,System.String)">
            <summary>
            Given a object name, create an alias. We typically use this method to
            support names that are illegal within XML ids (used for object names).
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="theAlias">
            The alias that will behave the same as the object name.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            If the alias is already in use.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the registry.
            </summary>
            <value>
            The number of objects defined in the registry.
            </value>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext.ContextSectionName">
            <summary>
            Name of the .Net config section that contains Spring.Net context definition.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext.DefaultRootContextName">
            <summary>
            Default name of the root context.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext.MessageSourceObjectName">
            <summary>
            The special, well-known-name of the default
            <see cref="T:Spring.Context.IMessageSource"/> in the context.
            </summary>
            <remarks>
            <p>
            If no <see cref="T:Spring.Context.IMessageSource"/> can be found
            in the context using this lookup key, then message resolution
            will be delegated to the parent context (if any).
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext.EventRegistryObjectName">
            <summary>
            The special, well-known-name of the default
            <see cref="T:Spring.Objects.Events.IEventRegistry"/> in the context.
            </summary>
            <remarks>
            <p>
            If no <see cref="T:Spring.Objects.Events.IEventRegistry"/> can be found
            in the context using this lookup key, then a default
            <see cref="T:Spring.Objects.Events.IEventRegistry"/> will be used.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext.log">
            <summary>
            The <see cref="T:Common.Logging.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext._messageSource">
            <summary>
            The <see cref="T:Spring.Context.IMessageSource"/> instance we delegate
            our implementation of said interface to.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext._eventRegistry">
            <summary>
            The <see cref="T:Spring.Objects.Events.IEventRegistry"/> instance we
            delegate our implementation of said interface to.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>
            with no parent context.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes
            no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>
            with no parent context.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes
            no public constructors.
            </p>
            </remarks>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.#ctor(System.String,System.Boolean,Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>
            with the supplied parent context.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes
            no public constructors.
            </p>
            </remarks>
            <param name="name">The application context name.</param>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
            <param name="parentApplicationContext">The parent application context.</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.AddDefaultObjectPostProcessor(Spring.Objects.Factory.Config.IObjectPostProcessor)">
            <summary>
            Adds the given <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the list of standard
            processors being added to the underlying <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectFactory"/>
            </summary>
            <remarks>
            Each time <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/> is called on this context, the context ensures, that 
            all default <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s are registered with the underlying <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectFactory"/>.
            </remarks>
            <param name="defaultObjectPostProcessor">The <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> instance.</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Dispose">
            <summary>
            Closes this context and disposes of any resources (such as
            singleton objects in the wrapped
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>).
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.RefreshObjectFactory">
            <summary>
            Subclasses must implement this method to perform the actual
            configuration loading.
            </summary>
            <remarks>
            <p>
            This method is invoked by
            <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/>,
            before any other initialization occurs.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors encountered while refreshing the object factory.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetInternalParentObjectFactory">
            <summary>
            Returns the internal object factory of the parent context if it implements
            <see cref="T:Spring.Context.IConfigurableApplicationContext"/>; else,
            returns the parent context itself.
            </summary>
            <returns>
            The parent context's object factory, or the parent itself.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.OnContextEvent(Spring.Context.ApplicationEventArgs)">
            <summary>
            Raises an application context event.
            </summary>
            <param name="e">
            Any arguments to the event. May be <see langword="null"/>.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.OnContextEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Raises an application context event.
            </summary>
            <param name="source">
            The source of the event.
            </param>
            <param name="e">
            Any arguments to the event. May be <see langword="null"/>.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.CreateEventRaiser">
            <summary>
            Create the <see cref="P:Spring.Context.Support.AbstractApplicationContext.EventRaiser"/> strategy to be used
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its standard
            initialization.
            </summary>
            <remarks>
            <p>
            All object definitions will have been loaded, but no objects
            will have been instantiated yet. This allows for the registration
            of special
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            in certain
            <see cref="T:Spring.Context.IApplicationContext"/> implementations.
            </p>
            </remarks>
            <param name="objectFactory">
            The object factory used by the application context.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>.
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.OnPreRefresh">
            <summary>
            Template method which can be overridden to add context-specific
            work before the underlying object factory gets refreshed.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.OnRefresh">
            <summary>
            Template method which can be overridden to add context-specific
            refresh work.
            </summary>
            <remarks>
            <p>
            Called on initialization of special objects, before instantiation
            of singletons.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.OnPostRefresh">
            <summary>
            Template method which can be overridden to add context-specific
            work after the context was refreshed but before the <see cref="F:Spring.Context.Events.ContextEventArgs.ContextEvent.Refreshed"/>
            event gets raised.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.InvokeObjectFactoryPostProcessors(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Instantiate and invoke all registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            objects, respecting any explicit ordering.
            </summary>
            <remarks>
            <note type="caution">
            <b>Must</b> be called before singleton instantiation.
            </note>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">In the case of errors.</exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.RefreshObjectPostProcessorChecker(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Resets the well-known ObjectPostProcessorChecker that logs an info
            message when an object is created during IObjectPostProcessor
            instantiation, i.e. when an object is not eligible for being
            processed by all IObjectPostProcessors.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.InitEventRegistry">
            <summary>
            Initializes the default event registry for this context.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetInternalParentMessageSource">
            <summary>
            Returns the internal message source of the parent context if said
            parent context is an <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>, else
            simply the parent context itself.
            </summary>
            <returns>
            The internal message source of the parent context if said
            parent context is an <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>, else
            simply the parent context itself.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.InitMessageSource">
            <summary>
            Initializes the default message source for this context.
            </summary>
            <remarks>
            <p>
            Uses any parent context's message source if one is not available
            in this context.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.AddObjectFactoryPostProcessor(Spring.Objects.Factory.Config.IObjectFactoryPostProcessor)">
            <summary>
            Add a new <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            that will get applied to the internal object factory of this application context
            on refresh, before any of the object definitions are evaluated.
            </summary>
            <param name="objectFactoryPostProcessor">
            The factory processor to register.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Refresh">
            <summary>
            Load or refresh the persistent representation of the configuration,
            which might an XML file, properties file, or relational database schema.
            </summary>
            <exception cref="T:Spring.Context.ApplicationContextException">
            If the configuration cannot be loaded.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object factory could not be initialized.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.PrepareObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Registers well-known <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s and 
            preregisters well-known dependencies using <see cref="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.RegisterResolvableDependency(System.Type,System.Object)"/>
            </summary>
            <param name="objectFactory">the raw object factory as returned from <see cref="M:Spring.Context.Support.AbstractApplicationContext.RefreshObjectFactory"/></param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.EnsureKnownObjectPostProcessors(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Ensures, that predefined ObjectPostProcessors are registered with this ObjectFactory
            </summary>
            <param name="objectFactory"></param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Start">
            <summary>
            Starts this component.
            </summary>
            <remarks>Should not throw an exception if the component is already running.
            In the case of a container, this will propagate the start signal
            to all components that apply.
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Stop">
            <summary>
            Stops this component.
            </summary>
            <remarks>
            Should not throw an exception if the component isn't started yet.
            In the case of a container, this will propagate the stop signal
            to all components that apply.
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectNamesForType(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectNamesForType(System.Type)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectNamesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectNamesForType(System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this factory.
            </summary>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectDefinition(System.String)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>        
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectDefinition(System.String,System.Boolean)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="includeAncestors">Whether to search parent object factories.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>       
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this object factory contains an object definition with the given name.
            </summary>
            <param name="name">The name of the object to look for.</param>
            <returns>
            True if this object factory contains an object definition with the given name.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.ContainsObjectDefinition(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ContainsObject(System.String)">
            <summary>
            Does this object factory contain an object with the given name?
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>
            <see langword="true"/> if an object with the given name is defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ContainsObject(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <param name="name">The object name to check for aliases.</param>
            <returns>The aliases, or an empty array if none.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetAliases(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.CreateObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an unconfigured(!) instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <returns>The unconfigured(!) instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.CreateObject(System.String,System.Type,System.Object[])"/>
            <remarks>
             This method will only <b>instantiate</b> the requested object. It does <b>NOT</b> inject any dependencies!
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObject(System.String,System.Type)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObject(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObject(System.String,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. If there is no factory method and the
            arguments are not null, then match the argument values by type and
            call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type,System.Object[])"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>True if the named object is a singleton.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.IsSingleton(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.IsPrototype(System.String)">
            <summary>
            Determines whether the specified object name is prototype.  That is, will GetObject
            always return independent instances?
            </summary>
            <param name="name">The name of the object to query</param>
            <returns>
            	<c>true</c> if the specified object name will always deliver independent instances; otherwise, <c>false</c>.
            </returns>
            <remarks>This method returning false does not clearly indicate a singleton object.
            It indicated non-independent instances, which may correspond to a scoped object as
            well.  use the IsSingleton property to explicitly check for a shared
            singleton instance.
            <para>Translates aliases back to the corresponding canonical object name.  Will ask the
            parent factory if the object can not be found in this factory instance.
            </para>
            </remarks>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">if there is no object with the given name.</exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.IsTypeMatch(System.String,System.Type)">
            <summary>
            Determines whether the object with the given name matches the specified type.
            </summary>
            <remarks>More specifically, check whether a GetObject call for the given name
            would return an object that is assignable to the specified target type.
            Translates aliases back to the corresponding canonical bean name.
            Will ask the parent factory if the bean cannot be found in this factory instance.
            </remarks>
            <param name="name">The name of the object to query.</param>
            <param name="targetType">Type of the target to match against.</param>
            <returns>
            	<c>true</c> if the object type matches; otherwise, <c>false</c>
            if it doesn't match or cannot be determined yet.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">Ff there is no object with the given name
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetType(System.String)">
            <summary>
            Determine the <see cref="T:System.Type"/>  of the object with the
            given name.
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>
            The <see cref="T:System.Type"/> of the object, or <see langword="null"/>
            if not determinable.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetType(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ConfigureObject(System.Object,System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the supplied <paramref name="definition"/>.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <param name="definition">
            An object definition that should be used to configure object.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ContainsLocalObject(System.String)">
            <summary>
            Determines whether the local object factory contains a bean of the given name,
            ignoring object defined in ancestor contexts.
            This is an alternative to <code>ContainsObject</code>, ignoring an object
            of the given name from an ancestor object factory.
            </summary>
            <remarks>
            
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>
            	<c>true</c> if objects with the specified name is defined in the local factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.IsObjectNameInUse(System.String)">
            <summary>
            Determine whether the given object name is already in use within this context, 
            i.e. whether there is a local object. May be override by subclasses, the default 
            implementation simply returns <see cref="M:Spring.Context.Support.AbstractApplicationContext.ContainsLocalObject(System.String)"/>
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Register a new object definition with this registry.
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            and <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </summary>
            <param name="name">The name of the object instance to register.</param>
            <param name="definition">The definition of the object instance to register.</param>
            <remarks>
            	<p>
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object definition is invalid.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.RegisterAlias(System.String,System.String)">
            <summary>
            Given a object name, create an alias. We typically use this method to
            support names that are illegal within XML ids (used for object names).
            </summary>
            <param name="name">The name of the object.</param>
            <param name="theAlias">The alias that will behave the same as the object name.</param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            If the alias is already in use.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If no message could be resolved.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="defaultMessage">The default message.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If no message could be resolved.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <returns>
            The resolved message if the lookup was successful.
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If no message could be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful.
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If no message could be resolved.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Object[])"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If no message could be resolved.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message using all of the attributes contained within
            the supplied <see cref="T:Spring.Context.IMessageSourceResolvable"/>
            argument.
            </summary>
            <param name="resolvable">
            The value object storing those attributes that are required to
            properly resolve a message.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Spring#Context#IMessageSource#GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Spring#Context#IMessageSource#GetResourceObject(System.String)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetResourceObject(System.String)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetResourceObject(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Applies resources to object properties.
            </summary>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <seealso cref="M:Spring.Context.IMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.PublishEvents(System.Object)">
            <summary>
            Publishes <b>all</b> events of the source object.
            </summary>
            <param name="sourceObject">
            The source object containing events to publish.
            </param>
            <seealso cref="M:Spring.Objects.Events.IEventRegistry.PublishEvents(System.Object)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Subscribe(System.Object)">
            <summary>
            Subscribes to <b>all</b> events published, if the subscriber
            implements compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <seealso cref="M:Spring.Objects.Events.IEventRegistry.Subscribe(System.Object)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Subscribe(System.Object,System.Type)">
            <summary>
            Subscribes to published events of a all objects of a given
            <see cref="T:System.Type"/>, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="targetSourceType">
            The target <see cref="T:System.Type"/> to subscribe to.
            </param>
            <seealso cref="M:Spring.Objects.Events.IEventRegistry.Subscribe(System.Object,System.Type)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Unsubscribe(System.Object)">
            <summary>
            Unsubscribes to <b>all</b> events published, if the subscriber
            implmenets compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Unsubscribe(System.Object,System.Type)">
            <summary>
            Unsubscribes to the published events of all objects of a given
            <see cref="T:System.Type"/>, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="targetSourceType">
            The target <see cref="T:System.Type"/> to unsubscribe from
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.PublishEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Publishes an application context event.
            </summary>
            <remarks>
            <p>
            
            </p>
            </remarks>
            <param name="sender">
            The source of the event. May be <see langword="null"/>.
            </param>
            <param name="e">
            The event that is to be raised.
            </param>
            <seealso cref="M:Spring.Context.IApplicationEventPublisher.PublishEvent(System.Object,Spring.Context.ApplicationEventArgs)"/>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.SyncRoot">
            <summary>
            An object that can be used to synchronize access to the <see cref="T:Spring.Context.Support.AbstractXmlApplicationContext"/>
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.EventRaiser">
            <summary>
            Set the <see cref="P:Spring.Context.Support.AbstractApplicationContext.EventRaiser"/> to be used by this context.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.StartupDateMilliseconds">
            <summary>
            The timestamp when this context was first loaded.
            </summary>
            <returns>
            The timestamp (milliseconds) when this context was first loaded.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.IsCaseSensitive">
            <summary>
            Gets a flag indicating whether context should be case sensitive.
            </summary>
            <value><c>true</c> if object lookups are case sensitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.MessageSource">
            <summary>
            The <see cref="T:Spring.Context.IMessageSource"/> for this context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the context has not been initialized yet.
            </exception>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.EventRegistry">
            <summary>
            The <see cref="T:Spring.Objects.Events.IEventRegistry"/> for this context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the context has not been initialized yet.
            </exception>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ObjectFactoryPostProcessors">
            <summary>
            Returns the list of the
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>s
            that will be applied to the objects created with this factory.
            </summary>
            <remarks>
            <p>
            The elements of this list are instances of implementations of the
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            interface.
            </p>
            </remarks>
            <value>
            The list of the
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>s
            that will be applied to the objects created with this factory.
            </value>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ObjectFactory">
            <summary>
            Return the internal object factory of this application context.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ParentContext">
            <summary>
            Gets the parent context, or <see langword="null"/> if there is no
            parent context.
            </summary>
            <returns>
            The parent context, or <see langword="null"/>  if there is no
            parent.
            </returns>
            <seealso cref="P:Spring.Context.IApplicationContext.ParentContext"/>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.IsRunning">
            <summary>
            Gets a value indicating whether this component is currently running.
            </summary>
            <value>
            	<c>true</c> if this component is running; otherwise, <c>false</c>.
            </value>
            <remarks>
            In the case of a container, this will return <code>true</code>
            only if <i>all</i> components that apply are currently running.
            </remarks>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.LifeCycleObjects">
            <summary>
            Gets a dictionary of all singleton beans that implement the
            ILifecycle interface in this context.
            </summary>
            <value>A dictionary of ILifecycle objects with object name as key.</value>
        </member>
        <member name="E:Spring.Context.Support.AbstractApplicationContext.ContextEvent">
            <summary>
            Raised in response to an implementation-dependant application
            context event.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.StartupDate">
            <summary>
            The date and time this context was first loaded.
            </summary>
            <returns>
            The <see cref="T:System.DateTime"/> representing when this context
            was first loaded.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.Name">
            <summary>
            A name for this context.
            </summary>
            <returns>
            A name for this context.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the factory.
            </summary>
            <value>
            The number of objects defined in the factory.
            </value>
            <seealso cref="P:Spring.Objects.Factory.IListableObjectFactory.ObjectDefinitionCount"/>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.Item(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ParentObjectFactory">
            <summary>
            Return the parent object factory, or <see langword="null"/> if there is none.
            </summary>
            <value>
            The parent object factory, or <see langword="null"/> if there is none.
            </value>
            <seealso cref="P:Spring.Objects.Factory.IHierarchicalObjectFactory.ParentObjectFactory"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IObjectPostProcessor">
            <summary>
            Allows for custom modification of new object instances, e.g.
            checking for marker interfaces or wrapping them with proxies.
            </summary>
            <remarks>
            <p>
            Application contexts can auto-detect
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            objects in their object definitions and apply them before any other
            objects get created. Plain object factories allow for programmatic
            registration of post-processors.
            </p>
            <p>
            Typically, post-processors that populate objects via marker interfaces
            or the like will implement
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>,
            and post-processors that wrap objects with proxies will normally implement
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.NET)</author>
            <see cref="T:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to the given new object instance <i>before</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values.
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance <i>after</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values. The returned object
            instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="objectName">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="T:Spring.Core.IOrdered">
            <summary>
            Interface that can be implemented by objects that should be orderable, e.g. in an
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
            <p>
            The actual order can be interpreted as prioritization, the first object (with the
            lowest order value) having the highest priority.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="P:Spring.Core.IOrdered.Order">
            <summary>
            Return the order value of this object, where a higher value means greater in
            terms of sorting.
            </summary>
            <remarks>
            <p>
            Normally starting with 0 or 1, with <see cref="F:System.Int32.MaxValue"/> indicating
            greatest. Same order values will result in arbitrary positions for the affected
            objects.
            </p>
            <p>
            Higher value can be interpreted as lower priority, consequently the first object
            has highest priority.
            </p>
            </remarks>
            <returns>The order value.</returns>
        </member>
        <member name="T:Spring.Context.Support.AbstractMessageSource">
            <summary>
            Abstract implementation of the <see cref="T:Spring.Context.IHierarchicalMessageSource"/> interface,
            implementing common handling of message variants, making it easy
            to implement a specific strategy for a concrete <see cref="T:Spring.Context.IMessageSource"/>.
            </summary>
            <remarks>
            <p>Subclasses must implement the abstract <code>ResolveObject</code>
            method.</p>
            <p><b>Note:</b> By default, message texts are only parsed through
            String.Format if arguments have been passed in for the message. In case
            of no arguments, message texts will be returned as-is. As a consequence,
            you should only use String.Format escaping for messages with actual
            arguments, and keep all other messages unescaped.
            </p>
            <p>Supports not only IMessageSourceResolvables as primary messages
            but also resolution of message arguments that are in turn
            IMessageSourceResolvables themselves.
            </p>
            <p>This class does not implement caching of messages per code, thus
            subclasses can dynamically change messages over time. Subclasses are
            encouraged to cache their messages in a modification-aware fashion,
            allowing for hot deployment of updated messages.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Harald Radi (.NET)</author>
            <seealso cref="T:Spring.Context.IMessageSourceResolvable"/>
            <seealso cref="T:Spring.Context.IMessageSource"/>
            <seealso cref="T:Spring.Context.IHierarchicalMessageSource"/>
        </member>
        <member name="T:Spring.Context.IHierarchicalMessageSource">
            <summary>
            Sub-interface of <see cref="T:Spring.Context.IMessageSource"/> to be
            implemented by objects that can resolve messages hierarchically.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:Spring.Context.IMessageSource"/>
        </member>
        <member name="P:Spring.Context.IHierarchicalMessageSource.ParentMessageSource">
            <summary>
            The parent message source used to try and resolve messages that
            this object can't resolve.
            </summary>
            <remarks>
            <p>
            If the value of this property is <see langword="null"/> then no
            further resolution is possible.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Context.Support.AbstractMessageSource.log">
            <summary>
            holds the logger instance shared with subclasses.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.#ctor">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <remarks>
            If the lookup is not successful throw NoSuchMessageException
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.</param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <remarks>
            Note that the fallback behavior based on CultureInfo seem to
            have a bug that is fixed by installed .NET 1.1 Service Pack 1.
            <p>
            If the lookup is not successful, implementations are permitted to
            take one of two actions.
            </p>
            If the lookup is not successful throw NoSuchMessageException
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="arguments">The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <remarks>
            If the lookup is not successful throw NoSuchMessageException
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.</param>
            <param name="arguments">The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <remarks>
            Note that the fallback behavior based on CultureInfo seem to
            have a bug that is fixed by installed .NET 1.1 Service Pack 1.
            <p>
            If the lookup is not successful throw NoSuchMessageException.
            </p>
            </remarks>        
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="defaultMessage">The default message if name is not found.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.</param>
            <param name="arguments">The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.</param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <remarks>
            Note that the fallback behavior based on CultureInfo seem to
            have a bug that is fixed by installed .NET 1.1 Service Pack 1.
            <p>
            If the lookup is not successful throw NoSuchMessageException
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message using all of the attributes contained within
            the supplied <see cref="T:Spring.Context.IMessageSourceResolvable"/>
            argument.
            </summary>
            <param name="resolvable">The value object storing those attributes that are required to
            properly resolve a message.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.</param>
            <returns>
            The resolved message if the lookup was successful.
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetResourceObject(System.String)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetResourceObject(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <remarks>
            Note that the fallback behavior based on CultureInfo seem to 
            have a bug that is fixed by installed .NET 1.1 Service Pack 1.  
            </remarks>	    
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.  If
            the resource name resolves to null, then in .NET 1.1 the return
            value will be String.Empty whereas in .NET 2.0 it will return
            null.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Applies resources to object properties.
            </summary>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <seealso cref="M:Spring.Context.IMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessageInternal(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary>Resolve the given code and arguments as message in the given culture,
            returning null if not found. Does <i>not</i> fall back to the code
            as default message. Invoked by GetMessage methods.
            </summary>
            <param name="code">The code to lookup up, such as 'calculator.noRateSet'.</param>
            <param name="args"> array of arguments that will be filled in for params
            within the message.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.</param>
            <returns>
            The resolved message if the lookup was successful.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessageFromParent(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Try to retrieve the given message from the parent MessageSource, if any.
            </summary>
            <param name="code">The code to lookup up, such as 'calculator.noRateSet'.</param>
            <param name="args"> array of arguments that will be filled in for params
            within the message.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.</param>
            <returns>
            The resolved message if the lookup was successful.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetDefaultMessage(System.String)">
            <summary>
            Return a fallback default message for the given code, if any.
            </summary>
            <remarks>
            Default is to return the code itself if "UseCodeAsDefaultMessage"
            is activated, or return no fallback else. In case of no fallback,
            the caller will usually receive a NoSuchMessageException from GetMessage
            </remarks>
            <param name="code">The code to lookup up, such as 'calculator.noRateSet'.</param>
            <returns>The default message to use, or null if none.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.RenderDefaultMessage(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Renders the default message string.  The default message is passed in as specified by the
            caller and can be rendered into a fully formatted default message shown to the user.
            </summary>
            <remarks>Default implementation passed he String for String.Format resolving any 
            argument placeholders found in them.  Subclasses may override this method to plug
            in custom processing of default messages.
            </remarks>
            <param name="defaultMessage">The default message.</param>
            <param name="args">The array of agruments that will be filled in for parameter
            placeholders within the message, or null if none.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.</param>
            <returns>The rendered default message (with resolved arguments)</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.FormatMessage(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Format the given default message String resolving any 
            agrument placeholders found in them.
            </summary>
            <param name="msg">The message to format.</param>
            <param name="args">The array of agruments that will be filled in for parameter
            placeholders within the message, or null if none.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.</param>
            <returns>The formatted message (with resolved arguments)</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ResolveArguments(System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Search through the given array of objects, find any
            MessageSourceResolvable objects and resolve them.
            </summary>
            <remarks>
            Allows for messages to have MessageSourceResolvables as arguments.
            </remarks>
            
            <param name="args">The array of arguments for a message.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.</param>
            <returns>An array of arguments with any IMessageSourceResolvables resolved</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetResourceInternal(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the specified resource (e.g. Icon or Bitmap).
            </summary>
            <param name="name">The name of the resource to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <returns>The resource if found. <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ApplyResourcesInternal(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Applies resources from the given name on the specified object.
            </summary>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Subclasses must implement this method to resolve a message.
            </summary>
            <param name="code">The code to lookup up, such as 'calculator.noRateSet'.</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.</param>
            <returns>The resolved message from the backing store of message data.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves an object (typically an icon or bitmap).
            </summary>
            <remarks>
            <p>
            Subclasses must implement this method to resolve an object.
            </p>
            </remarks>
            <param name="code">The code of the object to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <returns>
            The resolved object or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Applies resources to object properties.
            </summary>
            <remarks>
            <p>
            Subclasses must implement this method to apply resources
            to an arbitrary object.
            </p>
            </remarks>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
        </member>
        <member name="P:Spring.Context.Support.AbstractMessageSource.UseCodeAsDefaultMessage">
            <summary>Gets or Sets a value indicating whether to use the message code as 
            default message instead of throwing a NoSuchMessageException. 
            Useful for development and debugging. Default is "false".
            </summary>
            <remarks>
            <p>Note: In case of a IMessageSourceResolvable with multiple codes
            (like a FieldError) and a MessageSource that has a parent MessageSource,
            do <i>not</i> activate "UseCodeAsDefaultMessage" in the <i>parent</i>:
            Else, you'll get the first code returned as message by the parent,
            without attempts to check further codes.</p>
            <p>To be able to work with "UseCodeAsDefaultMessage" turned on in the parent,
            AbstractMessageSource contains special checks
            to delegate to the internal <code>GetMessageInternal</code> method if available.
            In general, it is recommended to just use "UseCodeAsDefaultMessage" during
            development and not rely on it in production in the first place, though.</p>
            <p>Alternatively, consider overriding the <code>GetDefaultMessage</code>
            method to return a custom fallback message for an unresolvable code.</p>
            </remarks>
            <value>
            	<c>true</c> if use the message code as default message instead of 
            throwing a NoSuchMessageException; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Context.Support.AbstractMessageSource.ParentMessageSource">
            <summary>
            The parent message source used to try and resolve messages that
            this object can't resolve.
            </summary>
            <value></value>
            <remarks>
            	<p>
            If the value of this property is <see langword="null"/> then no
            further resolution is possible.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Context.Support.AbstractXmlApplicationContext">
            <summary>
            Convenient abstract superclass for
            <see cref="T:Spring.Context.IApplicationContext"/> implementations that
            draw their configuration from XML documents containing object
            definitions as understood by an 
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.AbstractXmlApplicationContext"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes
            no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.#ctor(System.String,System.Boolean,Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.AbstractXmlApplicationContext"/> class
            with the given parent context.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes
            no public constructors.
            </p>
            </remarks>
            <param name="name">The application context name.</param>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
            <param name="parentContext">The parent context.</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.RefreshObjectFactory">
            <summary>
            Instantiates and populates the underlying
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> with the object
            definitions yielded up by the <see cref="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationLocations"/>
            method.
            </summary>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors encountered while refreshing the object factory.
            </exception>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of errors encountered reading any of the resources
            yielded by the <see cref="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationLocations"/> method.
            </exception>
            <seealso cref="M:Spring.Context.Support.AbstractApplicationContext.RefreshObjectFactory"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.InitObjectDefinitionReader(Spring.Objects.Factory.Xml.XmlObjectDefinitionReader)">
            <summary>
            Initialize the object definition reader used for loading the object
            definitions of this context.
            </summary>
            <remarks>
            <p>
            The default implementation of this method is a no-op; i.e. it does
            nothing. Can be overridden in subclasses to provide custom
            initialization of the supplied
            <paramref name="objectDefinitionReader"/>; for example, a derived
            class may want to turn off XML validation.
            </p>
            </remarks>
            <param name="objectDefinitionReader">
            The object definition reader used by this context.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.LoadObjectDefinitions(Spring.Objects.Factory.Xml.XmlObjectDefinitionReader)">
            <summary>
            Load the object definitions with the given 
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>.
            </summary>
            <remarks>
            <p>
            The lifecycle of the object factory is handled by
            <see cref="M:Spring.Context.Support.AbstractXmlApplicationContext.RefreshObjectFactory"/>;
            therefore this method is just supposed to load and / or register
            object definitions.
            </p>
            </remarks>
            <param name="objectDefinitionReader">
            The reader containing object definitions.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of object registration errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors encountered reading any of the resources
            yielded by either the <see cref="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationLocations"/> or
            the <see cref="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationResources"/> methods.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.LoadObjectDefinitions(Spring.Objects.Factory.Support.DefaultListableObjectFactory)">
            <summary>
            Loads the object definitions into the given object factory, typically through
            delegating to one or more object definition readers.
            </summary>
            <param name="objectFactory">The object factory to lead object definitions into</param>
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>
            <see cref="T:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.CreateXmlObjectDefinitionReader(Spring.Objects.Factory.Support.DefaultListableObjectFactory)">
            <summary>
            Create a new reader instance for importing object definitions into the specified <paramref name="objectFactory"/>.
            </summary>
            <param name="objectFactory">the <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> to be associated with the reader</param>
            <returns>a new <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> instance.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.CustomizeObjectFactory(Spring.Objects.Factory.Support.DefaultListableObjectFactory)">
            <summary>
            Customizes the internal object factory used by this context.
            </summary>
            <remarks>Called for each <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/> attempt.
            <p>
            The default implementation is empty.  Can be overriden in subclassses to customize
            DefaultListableBeanFatory's standard settings.
            </p></remarks>
            <param name="objectFactory">The newly created object factory for this context</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.CreateObjectFactory">
            <summary>
            Create an internal object factory for this context.
            </summary>
            <remarks>
            <p>
            Called for each <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/> attempt.
            This default implementation creates a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
            with the internal object factory of this context's parent serving
            as the parent object factory.  Can be overridden in subclasse,s 
            for example to customize DefaultListableBeanFactory's settings.
            </p>
            </remarks>
            <returns>The object factory for this context.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.IsObjectNameInUse(System.String)">
            <summary>
            Determine whether the given object name is already in use within this context's object factory, 
            i.e. whether there is a local object or alias registered under this name. 
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationLocations">
            <summary>
            An array of resource locations, referring to the XML object
            definition files that this context is to be built with.
            </summary>
            <remarks>
            <p>
            Examples of the format of the various strings that would be
            returned by accessing this property can be found in the overview
            documentation of with the <see cref="T:Spring.Context.Support.XmlApplicationContext"/>
            class.
            </p>
            </remarks>
            <returns>
            An array of resource locations, or <see langword="null"/> if none.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationResources">
            <summary>
            An array of resources that this context is to be built with.
            </summary>
            <remarks>
            <p>
            Examples of the format of the various strings that would be
            returned by accessing this property can be found in the overview
            documentation of with the <see cref="T:Spring.Context.Support.XmlApplicationContext"/>
            class.
            </p>
            </remarks>
            <returns>
            An array of <see cref="T:Spring.Core.IO.IResource"/>s, or <see langword="null"/> if none.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractXmlApplicationContext.ObjectFactory">
            <summary>
            Subclasses must return their internal object factory here.
            </summary>
            <returns>
            The internal object factory for the application context.
            </returns>
            <seealso cref="P:Spring.Context.Support.AbstractApplicationContext.ObjectFactory"/>
        </member>
        <member name="T:Spring.Context.Support.ApplicationContextAwareProcessor">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            implementation that passes the application context to object that
            implement the
            <see cref="T:Spring.Context.IApplicationContextAware"/>,
            <see cref="T:Spring.Context.IMessageSourceAware"/>, and
            <see cref="T:Spring.Context.IResourceLoaderAware"/> interfaces. 
            </summary>
            <remarks>
            <p>
            If an object's class implements more than one of the
            <see cref="T:Spring.Context.IApplicationContextAware"/>,
            <see cref="T:Spring.Context.IMessageSourceAware"/>, and
            <see cref="T:Spring.Context.IResourceLoaderAware"/> interfaces, then the
            order in which the interfaces are satisfied is as follows...
            <list type="bullet">
            <item><description>
            <see cref="T:Spring.Context.IResourceLoaderAware"/>
            </description></item>
            <item><description>
            <see cref="T:Spring.Context.IMessageSourceAware"/>
            </description></item>
            <item><description>
            <see cref="T:Spring.Context.IApplicationContextAware"/>
            </description></item>
            </list>
            </p>
            <p>
            Application contexts will automatically register this with their
            underlying object factory. Applications should thus never need to use
            this class directly.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Context.Support.ApplicationContextAwareProcessor.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ApplicationContextAwareProcessor"/> class.
            </summary>
            <param name="applicationContext">
            The <see cref="T:Spring.Context.IApplicationContext"/> that this
            instance will work with.
            </param>
        </member>
        <member name="M:Spring.Context.Support.ApplicationContextAwareProcessor.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to the given new object instance <i>before</i> any object
            initialization callbacks.
            </summary>
            <param name="obj">
            The new object instance.
            </param>
            <param name="objectName">
            The name of the object.
            </param>
            <returns>
            The the object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.ApplicationContextAwareProcessor.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance <i>after</i> any object initialization
            callbacks.
            </summary>
            <param name="obj">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
        </member>
        <member name="T:Spring.Context.Support.ApplicationObjectSupport">
            <summary>
            Convenient superclass for application objects that want to be aware of
            the application context, e.g. for custom lookup of collaborating object
            or for context-specific resource access. 
            </summary>
            <remarks>
            <p>
            It saves the application context reference and provides an
            initialization callback method. Furthermore, it offers numerous
            convenience methods for message lookup.
            </p>
            <p>
            There is no requirement to subclass this class: it just makes things
            a little easier if you need access to the context, e.g. for access to
            file resources or to the message source. Note that many application
            objects do not need to be aware of the application context at all,
            as they can receive collaborating objects via object references.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Context.IApplicationContextAware">
            <summary>
            To be implemented by any object that wishes to be notified
            of the <see cref="T:Spring.Context.IApplicationContext"/> that it runs in.
            </summary>
            <remarks>
            <p>
            Implementing this interface makes sense when an object requires access
            to a set of collaborating objects. Note that configuration via object
            references is preferable to implementing this interface just for object
            lookup purposes.
            </p>
            <p>
            This interface can also be implemented if an object needs access to
            file resources, i.e. wants to call
            <see cref="M:Spring.Core.IO.IResourceLoader.GetResource(System.String)"/>, or access to
            the <see cref="T:Spring.Context.IMessageSource"/>. However, it is
            preferable to implement the more specific
            <see cref="T:Spring.Context.IResourceLoaderAware"/>
            interface to receive a reference to the
            <see cref="T:Spring.Context.IMessageSource"/> object in that scenario.
            </p>
            <p>
            Note that <see cref="T:Spring.Core.IO.IResource"/> dependencies can also
            be exposed as object properties of the
            <see cref="T:Spring.Core.IO.IResource"/> type, populated via strings with
            automatic type conversion performed by an object factory. This obviates
            the need for implementing any callback interface just for the purpose
            of accessing a specific file resource.
            </p>
            <p>
            <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/>
            is a convenience implementation of this interface for your
            application objects.
            </p>
            <p>
            For a list of all object lifecycle methods, see the overview for the 
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
        </member>
        <member name="P:Spring.Context.IApplicationContextAware.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <remarks>
            <p>
            Normally this call will be used to initialize the object.
            </p>
            <p>
            Invoked after population of normal object properties but before an
            init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/>
            property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="M:Spring.Context.Support.ApplicationObjectSupport.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.ApplicationObjectSupport.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
            <param name="applicationContext">
            The <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </param>
        </member>
        <member name="M:Spring.Context.Support.ApplicationObjectSupport.InitApplicationContext">
            <summary>
            Intializes the wrapped
            <see cref="T:Spring.Context.IApplicationContext"/>.
            </summary>
            <remarks>
            <p>
            This is a template method that subclasses can override for custom
            initialization behavior.
            </p>
            <p>
            Gets called by the
            <see cref="P:Spring.Context.Support.ApplicationObjectSupport.ApplicationContext"/>
            instance directly after setting the context instance.
            </p>
            <note type="caution">
            Does not get called on reinitialization of the context.
            </note>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of any initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by application context methods.
            </exception>
        </member>
        <member name="P:Spring.Context.Support.ApplicationObjectSupport.RequiredType">
            <summary>
            The context class that any context passed to the
            <see cref="P:Spring.Context.Support.ApplicationObjectSupport.ApplicationContext"/>
            must be an instance of.
            </summary>
            <value>
            The <see cref="T:Spring.Context.IApplicationContext"/>
            <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="P:Spring.Context.Support.ApplicationObjectSupport.MessageSourceAccessor">
            <summary>
            Return a <see cref="T:Spring.Context.Support.MessageSourceAccessor"/> for the
            application context used by this object, for easy message access.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.ApplicationObjectSupport.ApplicationContext">
            <summary>
            Gets or sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <exception cref="T:Spring.Context.ApplicationContextException">
            When passed an unexpected
            <see cref="T:Spring.Context.IApplicationContext"/> implementation
            instance that is not compatible with the <see cref="T:System.Type"/>
            defined by the value of the
            <see cref="P:Spring.Context.Support.ApplicationObjectSupport.RequiredType"/>. 
            property. Also, thrown when trying to re-initialize with a
            different <see cref="T:Spring.Context.IApplicationContext"/> than was
            originally used.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
            <seealso cref="P:Spring.Context.IApplicationContextAware.ApplicationContext"/>
        </member>
        <member name="T:Spring.Context.Support.ContextHandler">
            <summary>
            Creates an <see cref="T:Spring.Context.IApplicationContext"/> instance
            using context definitions supplied in a custom configuration and
            configures the <see cref="T:Spring.Context.Support.ContextRegistry"/> with that instance.
            </summary>
            <remarks>
            Implementations of the <see cref="T:Spring.Context.IApplicationContext"/>
            interface <b>must</b> provide the following two constructors:
            <list type="number">
            <item>
            <description>
            A constructor that takes a string array of resource locations.
            </description>
            </item>
            <item>
            <description>
            A constructor that takes a reference to a parent application context
            and a string array of resource locations (and in that order).
            </description>
            </item>
            </list>
            <p>
            Note that if the <c>type</c> attribute is not present in the declaration
            of a particular context, then a default
            <see cref="T:Spring.Context.IApplicationContext"/> <see cref="T:System.Type"/>
            is assumed. This default
            <see cref="T:Spring.Context.IApplicationContext"/> <see cref="T:System.Type"/>
            is currently the <see cref="T:Spring.Context.Support.XmlApplicationContext"/>
            <see cref="T:System.Type"/>; please note the exact <see cref="T:System.Type"/>
            of this default <see cref="T:Spring.Context.IApplicationContext"/> is an
            implementation detail, that, while unlikely, may do so in the future.
            to
            </p>
            </remarks>
            <example>
            <p>
            This is an example of specifying a context that reads its resources from
            an embedded Spring.NET XML object configuration file...
            </p>
            <code escaped="true">
            <configuration>
                <configSections>
            	    <sectionGroup name="spring">
            		    <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
            	    </sectionGroup>
                </configSections>
                <spring>
            	    <context>
            		    <resource uri="assembly://MyAssemblyName/MyResourceNamespace/MyObjects.xml"/>
            	    </context>
                </spring>
            </configuration>
            </code>
            <p>
            This is an example of specifying a context that reads its resources from
            a custom configuration section within the same application / web
            configuration file and uses case insensitive object lookups. 
            </p>
            <p>
            Please note that you <b>must</b> adhere to the naming
            of the various sections (i.e. '&lt;sectionGroup name="spring"&gt;' and
            '&lt;section name="context"&gt;'.
            </p>
            <code escaped="true">
            <configuration>
                <configSections>
            	    <sectionGroup name="spring">
            		    <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
            		    <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
            	    </sectionGroup>
                </configSections>
                <spring>
            	    <context caseSensitive="false" type="Spring.Context.Support.XmlApplicationContext, Spring.Core">
            		    <resource uri="config://spring/objects"/>
            	    </context>
            	    <objects xmlns="http://www.springframework.net">
            		    <!-- object definitions... -->
            	    </objects>
                </spring>
            </configuration>
            </code>
            <p>
            And this is an example of specifying a hierarchy of contexts. The
            hierarchy in this case is only a simple parent-&gt;child hierarchy, but
            hopefully it illustrates the nesting of context configurations. This
            nesting of contexts can be arbitrarily deep, and is one way... child
            contexts know about their parent contexts, but parent contexts do not
            know how many child contexts they have (if any), or have references
            to any such child contexts.
            </p>
            <code escaped="true">
            <configuration>
            	<configSections>
            		<sectionGroup name="spring">
            			<section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
            			<section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
                        <sectionGroup name="child">
            			    <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
                        </sectionGroup>
            		</sectionGroup>
            	</configSections>
            	
                <spring>
            		<context name="Parent">
            			<resource uri="config://spring/objects"/>
            		    <context name="Child">
            			    <resource uri="config://spring/childObjects"/>
            		    </context>
            		</context>
            		<!-- parent context's objects -->
            		<objects xmlns="http://www.springframework.net">
            			<object id="Parent" type="Spring.Objects.TestObject,Spring.Core.Tests">
                            <property name="name" value="Parent"/>
                        </object>
            		</objects>
            		<!-- child context's objects -->
                    <child>
            		    <objects xmlns="http://www.springframework.net">
            			    <object id="Child" type="Spring.Objects.TestObject,Spring.Core.Tests">
                                <property name="name" value="Child"/>
                            </object>
            		    </objects>
                    </child>
                </spring>
            </configuration>
            </code>
            </example>
            <author>Mark Pollack</author>
            <author>Aleksandar Seovic</author>
            <author>Rick Evans</author>
            <seealso cref="T:Spring.Context.Support.ContextRegistry"/>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates an <see cref="T:Spring.Context.IApplicationContext"/> instance
            using the context definitions supplied in a custom
            configuration section.
            </summary>
            <remarks>
            <p>
            This <see cref="T:Spring.Context.IApplicationContext"/> instance is
            also used to configure the <see cref="T:Spring.Context.Support.ContextRegistry"/>.
            </p>
            </remarks>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is <see langword="null"/>.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            An <see cref="T:Spring.Context.IApplicationContext"/> instance
            populated with the object definitions supplied in the configuration
            section.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.CreateChildContexts(Spring.Context.IApplicationContext,System.Object,System.Xml.XmlNode[])">
            <summary>
            Create all child-contexts in the given <see cref="T:System.Xml.XmlNodeList"/> for the given context.
            </summary>
            <param name="parentContext">The parent context to use</param>
            <param name="configContext">The current configContext <see cref="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)"/></param>
            <param name="childContexts">The list of child context elements</param>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.InstantiateContext(Spring.Context.IApplicationContext,System.Object,System.String,System.Type,System.Boolean,System.String[])">
            <summary>
            Instantiates a new context.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.GetContextName(System.Object,System.Xml.XmlElement)">
            <summary>
            Gets the context's name specified in the name attribute of the context element.
            </summary>
            <param name="configContext">The current configContext <see cref="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)"/></param>
            <param name="contextElement">The context element</param>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.GetContextType(System.Xml.XmlElement,Spring.Context.IApplicationContext)">
            <summary>
            Extracts the context-type from the context element. 
            If none is specified, returns the parent's type.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.GetCaseSensitivity(System.Xml.XmlElement)">
            <summary>
            Extracts the case-sensitivity attribute from the context element
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.GetConfiguredContextType(System.Xml.XmlElement,System.Type)">
            <summary>
            Gets the context <see cref="T:System.Type"/> specified in the type
            attribute of the context element.
            </summary>
            <remarks>
            <p>
            If this attribute is not defined it defaults to the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> type.
            </p>
            </remarks>
            <exception cref="T:Spring.Core.TypeMismatchException">
            If the context type does not implement the
            <see cref="T:Spring.Context.IApplicationContext"/> interface.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.GetResources(System.Xml.XmlElement)">
            <summary>
            Returns the array of resources containing object definitions for
            this context.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.GetChildContexts(System.Xml.XmlElement)">
            <summary>
            Returns the array of child contexts for this context.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.DefaultApplicationContextType">
            <summary>
            The <see cref="T:System.Type"/> of <see cref="T:Spring.Context.IApplicationContext"/>
            created if no <c>type</c> attribute is specified on a <c>context</c> element.
            </summary>
            <seealso cref="M:Spring.Context.Support.ContextHandler.GetContextType(System.Xml.XmlElement,Spring.Context.IApplicationContext)"/>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.DefaultCaseSensitivity">
            <summary>
            Get the context's case-sensitivity to use if none is specified
            </summary>
            <remarks>
            <p>
            Derived handlers may override this property to change their default case-sensitivity.
            </p>
            <p>
            Defaults to 'true'.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.AutoRegisterWithContextRegistry">
            <summary>
            Specifies, whether the instantiated context will be automatically registered in the 
            global <see cref="T:Spring.Context.Support.ContextRegistry"/>.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.IsLazy">
            <summary>
            Returns <see langword="true"/> if the context should be lazily
            initialized.
            </summary>
        </member>
        <member name="T:Spring.Context.Support.ContextHandler.ContextSchema">
            <summary>
            Constants defining the structure and values associated with the
            schema for laying out Spring.NET contexts in XML.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.ContextElement">
            <summary>
            Defines a single
            <see cref="T:Spring.Context.IApplicationContext"/>.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.NameAttribute">
            <summary>
            Specifies a context name.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.CaseSensitiveAttribute">
            <summary>
            Specifies if context should be case sensitive or not. Default is <c>true</c>.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.TypeAttribute">
            <summary>
            Specifies a <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <p>
            Does not have to be fully assembly qualified, but its generally regarded
            as better form if the <see cref="T:System.Type"/> names of one's objects
            are specified explicitly.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.LazyAttribute">
            <summary>
            Specifies whether context should be lazy initialized.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.ResourceElement">
            <summary>
            Defines an <see cref="T:Spring.Core.IO.IResource"/>
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.URIAttribute">
            <summary>
            Specifies the URI for an
            <see cref="T:Spring.Core.IO.IResource"/>.
            </summary>
        </member>
        <member name="T:Spring.Context.Support.ContextRegistry">
            <summary> 
            Provides access to a central registry of 
            <see cref="T:Spring.Context.IApplicationContext"/>s.
            </summary>
            <remarks>
            <p>
            A singleton implementation to access one or more application contexts.  Application
            context instances are cached.
            </p>
            <p>Note that the use of this class or similar is unnecessary except (sometimes) for
            a small amount of glue code.  Excessive usage will lead to code that is more tightly
            coupled, and harder to modify or test.  Consider refactoring your code to use standard
            Dependency Injection techniques or implement the interface IApplicationContextAware to
            obtain a reference to an application context.</p>
            </remarks>
            <author>Mark Pollack</author>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Context.IApplicationContext"/>
        </member>
        <member name="F:Spring.Context.Support.ContextRegistry.log">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.#cctor">
            <summary>
            Creates a new instance of the ContextRegistry class.
            </summary>
            <remarks>
            <p>
            Explicit static constructor to tell C# compiler
            not to mark type as beforefieldinit.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.RegisterContext(Spring.Context.IApplicationContext)">
            <summary> 
            Registers an instance of an
            <see cref="T:Spring.Context.IApplicationContext"/>. 
            </summary> 
            <remarks>
            <p>
            This is usually called via a
            <see cref="T:Spring.Context.Support.ContextHandler"/> inside a .NET
            application configuration file. 
            </p>
            </remarks>
            <param name="context">The application context to be registered.</param>
            <exception cref="T:Spring.Context.ApplicationContextException">
            If a context has previously been registered using the same name
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.OnContextEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Handles events raised by an application context.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.UnregisterContext(Spring.Context.IApplicationContext)">
            <summary>
            Removes the context from the registry 
            </summary>
            <remarks>
            Has no effect if the context wasn't registered
            </remarks>
            <param name="context">´the context to remove from the registry</param>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.GetContext">
            <summary>
            Returns the root application context.
            </summary>
            <remarks>
            <p>
            The first call to GetContext will create the context 
            as specified in the .NET application configuration file 
            under the location spring/context.
            </p>
            </remarks>
            <returns>The root application context.</returns>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.GetContext(System.String)">
            <summary>
            Returns context based on specified name.
            </summary>
            <remarks>
            <p>
            The first call to GetContext will create the context 
            as specified in the .NET application configuration file 
            under the location spring/context.
            </p>
            </remarks>
            <param name="name">The context name.</param>
            <returns>The specified context, or null, if context with that name doesn't exists.</returns>
            <exception cref="T:System.ArgumentException">
            If the context name is null or empty
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.Clear">
            <summary>
            Removes all registered
            <see cref="T:Spring.Context.IApplicationContext"/>s from this
            registry.
            </summary>
            <remarks>
            Raises the <see cref="E:Spring.Context.Support.ContextRegistry.Cleared"/> event while still holding a lock on <see cref="P:Spring.Context.Support.ContextRegistry.SyncRoot"/>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.IsContextRegistered(System.String)">
            <summary>
            Allows to check, if a context is already registered
            </summary>
            <param name="name">The context name.</param>
            <returns>true, if the context is already registered. false otherwise</returns>
        </member>
        <member name="E:Spring.Context.Support.ContextRegistry.Cleared">
            <summary>
            This event is fired, if ContextRegistry.Clear() is called.<br/>
            Clients may register to get informed
            </summary>
            <remarks>
            This event is fired while still holding a lock on the Registry.<br/>
            'sender' parameter is sent as typeof(ContextRegistry), EventArgs are not used
            </remarks>
        </member>
        <member name="P:Spring.Context.Support.ContextRegistry.SyncRoot">
            <summary>
            Gets an object that should be used to synchronize access to ContextRegistry
            from the calling code.
            </summary>
        </member>
        <member name="T:Spring.Context.Support.DefaultMessageSourceResolvable">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> interface.
            </summary>
            <remarks>
            <p>
            Provides easy ways to store all the necessary values needed to resolve
            messages from an <see cref="T:Spring.Context.IMessageSource"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)"/>
        </member>
        <member name="T:Spring.Context.IMessageSourceResolvable">
            <summary>
            Describes objects that are suitable for message resolution in a
            <see cref="T:Spring.Context.IMessageSource"/>.
            </summary>
            <remarks>
            <p>
            Spring.NET's own validation error classes implement this interface.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)"/>
            <seealso cref="T:Spring.Context.Support.DefaultMessageSourceResolvable"/>
        </member>
        <member name="M:Spring.Context.IMessageSourceResolvable.GetCodes">
            <summary>
            Return the codes to be used to resolve this message, in the order
            that they are to be tried.
            </summary>
            <remarks>
            <p>
            The last code will therefore be the default one.
            </p>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> array of codes which are associated
            with this message.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSourceResolvable.GetArguments">
            <summary>
            Return the array of arguments to be used to resolve this message.
            </summary>
            <returns>
            An array of objects to be used as parameters to replace
            placeholders within the message text.
            </returns>
        </member>
        <member name="P:Spring.Context.IMessageSourceResolvable.DefaultMessage">
            <summary>
            Return the default message to be used to resolve this message.
            </summary>
            <returns>
            The default message, or <see langword="null"/> if there is no
            default.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DefaultMessageSourceResolvable"/> class
            using a single code.
            </summary>
            <param name="code">The message code to be resolved.</param>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.DefaultMessageSourceResolvable"/> class.
            </summary>
            <param name="codes">The codes to be used to resolve this message</param>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.#ctor(System.String[],System.Object[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DefaultMessageSourceResolvable"/> class
            using multiple codes.
            </summary>
            <param name="codes">The message codes to be resolved.</param>
            <param name="arguments">
            The arguments used to resolve the supplied <paramref name="codes"/>.
            </param>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.#ctor(System.String[],System.Object[],System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DefaultMessageSourceResolvable"/> class
            using multiple codes and a default message.
            </summary>
            <param name="codes">The message codes to be resolved.</param>
            <param name="arguments">
            The arguments used to resolve the supplied <paramref name="codes"/>.
            </param>
            <param name="defaultMessage">
            The default message used if no code could be resolved.
            </param>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.#ctor(Spring.Context.IMessageSourceResolvable)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DefaultMessageSourceResolvable"/> class
            from another resolvable.
            </summary>
            <remarks>
            <p>
            This is the <i>copy constructor</i> for the
            <see cref="T:Spring.Context.Support.DefaultMessageSourceResolvable"/> class.
            </p>
            </remarks>
            <param name="resolvable">
            The <see cref="T:Spring.Context.IMessageSourceResolvable"/> to be copied.
            </param>
            <exception cref="T:System.NullReferenceException">
            If the supplied <paramref name="resolvable"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this
            <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this
            <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.Accept(Spring.Context.Support.MessageSourceResolvableVisitor)">
            <summary>
            Calls the visit method on the supplied <paramref name="visitor"/>
            to output a <see cref="T:System.String"/> version of this class.
            </summary>
            <param name="visitor">The visitor to use.</param>
            <returns>
            A <see cref="T:System.String"/> representation of this
            <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.GetCodes">
            <summary>
            Return the codes to be used to resolve this message, in the order
            that they are to be tried.
            </summary>
            <returns>
            A <see cref="T:System.String"/> array of codes which are associated
            with this message.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSourceResolvable.GetCodes"/>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageSourceResolvable.GetArguments">
            <summary>
            Return the array of arguments to be used to resolve this message.
            </summary>
            <returns>
            An array of objects to be used as parameters to replace
            placeholders within the message text.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSourceResolvable.GetArguments"/>
        </member>
        <member name="P:Spring.Context.Support.DefaultMessageSourceResolvable.LastCode">
            <summary>
            Return the default code for this resolvable.
            </summary>
            <returns>
            The default code of this resolvable; this will be the last code in
            the codes array, or <see langword="null"/> if this instance has no
            codes.
            </returns>
            <seealso cref="M:Spring.Context.Support.DefaultMessageSourceResolvable.GetCodes"/>
        </member>
        <member name="P:Spring.Context.Support.DefaultMessageSourceResolvable.DefaultMessage">
            <summary>
            Return the default message to be used to resolve this message.
            </summary>
            <returns>
            The default message, or <see langword="null"/> if there is no
            default.
            </returns>
            <seealso cref="P:Spring.Context.IMessageSourceResolvable.DefaultMessage"/>
        </member>
        <member name="T:Spring.Context.Support.DefaultSectionHandler">
            <summary>
            Default section handler that can handle any configuration section.
            </summary>
            <remarks>
            <p>
            Simply returns the configuration section as an <see cref="T:System.Xml.XmlElement"/>.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Context.Support.DefaultSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Returns the configuration section as an <see cref="T:System.Xml.XmlElement"/>
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is a null reference.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>Config section as XmlElement.</returns>
        </member>
        <member name="T:Spring.Context.Support.DelegatingMessageSource">
            <summary>
            Empty <see cref="T:Spring.Context.IMessageSource"/> implementation that
            simply delegates all method calls to it's parent
            <see cref="T:Spring.Context.IMessageSource"/>.
            </summary>
            <remarks>
            <p>
            If no parent <see cref="T:Spring.Context.IMessageSource"/> is available,
            no messages will be resolved (and a
            <see cref="T:Spring.Context.NoSuchMessageException"/> will be thrown).
            </p>
            <p>
            Used as placeholder <see cref="T:Spring.Context.IMessageSource"/> by the
            <see cref="T:Spring.Context.Support.AbstractApplicationContext"/> class,
            if the context definition doesn't define its own
            <see cref="T:Spring.Context.IMessageSource"/>. Not intended for direct use
            in applications.
            </p>
            </remarks>
            <author>Juergan Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Context.Support.AbstractApplicationContext"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DelegatingMessageSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.#ctor(Spring.Context.IMessageSource)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DelegatingMessageSource"/> class.
            </summary>
            <param name="parentMessageSource">
            The parent message source used to try and resolve messages that
            this object can't resolve.
            </param>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetMessage(System.String)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetMessage(System.String,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Object[])"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetMessage(System.String,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Resolve the message identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the message to resolve.</param>
            <param name="defaultMessage">The default message.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <param name="arguments">
            The array of arguments that will be filled in for parameters within
            the message, or <see langword="null"/> if there are no parameters
            within the message. Parameters within a message should be
            referenced using the same syntax as the format string for the
            <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>
            Resolve the message using all of the attributes contained within
            the supplied <see cref="T:Spring.Context.IMessageSourceResolvable"/>
            argument.
            </summary>
            <param name="resolvable">
            The value object storing those attributes that are required to
            properly resolve a message.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents
            the culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful (see above for
            the return value in the case of an unsuccessful lookup).
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be resolved.
            </exception>
            <seealso cref="M:Spring.Context.IMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetResourceObject(System.String)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetResourceObject(System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized resource object identified by the supplied
            <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource object to resolve.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <returns>
            The resolved object, or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.IMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.DelegatingMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Applies resources to object properties.
            </summary>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <seealso cref="M:Spring.Context.IMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="P:Spring.Context.Support.DelegatingMessageSource.ParentMessageSource">
            <summary>
            The parent message source used to try and resolve messages that
            this object can't resolve.
            </summary>
            <seealso cref="P:Spring.Context.IHierarchicalMessageSource.ParentMessageSource"/>
        </member>
        <member name="T:Spring.Context.Support.GenericApplicationContext">
            <summary>
            Generic ApplicationContext implementation that holds a single internal
            <see cref="P:Spring.Context.Support.GenericApplicationContext.DefaultListableObjectFactory"/>  instance and does not 
            assume a specific object definition format.
            </summary>
            <remarks>
            Implements the <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/> interface in order
            to allow for aplying any object definition readers to it.
            <para>Typical usage is to register a variety of object definitions via the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/> interface and then call 
            <see cref="M:Spring.Context.IConfigurableApplicationContext.Refresh"/> to initialize those
            objects with application context semantics (handling 
            <see cref="T:Spring.Context.IApplicationContextAware"/>, auto-detecting 
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> ObjectFactoryPostProcessors, etc).
            </para>
            <para>In contrast to other IApplicationContext implementations that create a new internal
            IObjectFactory instance for each refresh, the internal IObjectFactory of this context
            is available right from the start, to be able to register object definitions on it.
            <see cref="M:Spring.Context.IConfigurableApplicationContext.Refresh"/> may only be called once</para>
            <para>Usage examples</para>
            <example>
            GenericApplicationContext ctx = new GenericApplicationContext();
            // register your objects and object definitions
            ctx.RegisterObjectDefinition(...)
            ctx.Refresh();
            </example>
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.GenericApplicationContext"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.GenericApplicationContext"/> class.
            </summary>
            <param name="caseSensitive">if set to <c>true</c> names in the context are case sensitive.</param>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.#ctor(Spring.Objects.Factory.Support.DefaultListableObjectFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.GenericApplicationContext"/> class.
            </summary>
            <param name="objectFactory">The object factory instance to use for this context.</param>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.GenericApplicationContext"/> class.
            </summary>
            <param name="parent">The parent application context.</param>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.#ctor(System.String,System.Boolean,Spring.Context.IApplicationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.GenericApplicationContext"/> class.
            </summary>
            <param name="name">The name of the application context.</param>
            <param name="caseSensitive">if set to <c>true</c> names in the context are case sensitive.</param>
            <param name="parent">The parent application context.</param>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.#ctor(Spring.Objects.Factory.Support.DefaultListableObjectFactory,Spring.Context.IApplicationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.GenericApplicationContext"/> class.
            </summary>
            <param name="objectFactory">The object factory to use for this context</param>
            <param name="parent">The parent applicaiton context.</param>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.#ctor(System.String,System.Boolean,Spring.Context.IApplicationContext,Spring.Objects.Factory.Support.DefaultListableObjectFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.GenericApplicationContext"/> class.
            </summary>
            <param name="name">The name of the application context.</param>
            <param name="caseSensitive">if set to <c>true</c> names in the context are case sensitive.</param>
            <param name="parent">The parent application context.</param>
            <param name="objectFactory">The object factory to use for this context</param>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.RefreshObjectFactory">
            <summary>
            Do nothing operation.  We hold a single internal ObjectFactory and rely on callers
            to register objects throug our public methods (or the ObjectFactory's).
            </summary>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors encountered while refreshing the object factory.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.GenericApplicationContext.IsObjectNameInUse(System.String)">
            <summary>
            Determines whether the given object name is already in use within this factory,
            i.e. whether there is a local object or alias registered under this name or
            an inner object created with this name.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.GenericApplicationContext.ObjectFactory">
            <summary>
            Return the internal object factory of this application context.
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Context.Support.GenericApplicationContext.DefaultListableObjectFactory">
            <summary>
            Gets the underlying object factory of this context, available for 
            registering object definitions.
            </summary>
            <remarks>You need to call <code>Refresh</code> to initialize the
            objects factory and its contained objects with application context
            semantics (autodecting IObjectFactoryPostProcessors, etc).</remarks>
            <value>The internal object factory (as DefaultListableObjectFactory).</value>
        </member>
        <member name="T:Spring.Context.Support.MessageSourceAccessor">
            <summary>
            Helper class for easy access to messages from an
            <see cref="T:Spring.Context.IMessageSource"/>, providing various
            overloaded <c>GetMessage</c> methods.
            </summary>
            <remarks>
            <p>
            Available from
            <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/>, but also
            reusable as a standalone helper to delegate to in application objects.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="T:Spring.Context.IMessageSource"/>
            <seealso cref="T:Spring.Context.Support.ApplicationObjectSupport"/>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.#ctor(Spring.Context.IMessageSource)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.MessageSourceAccessor"/> class
            that uses the current <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            for all locale specific lookups.
            </summary>
            <param name="messageSource">
            The <see cref="T:Spring.Context.IMessageSource"/> to use to locate messages.
            </param>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.#ctor(Spring.Context.IMessageSource,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.MessageSourceAccessor"/> class
            </summary>
            <param name="messageSource">
            The <see cref="T:Spring.Context.IMessageSource"/> to use to locate
            messages.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for
            locale specific messages.
            </param>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String)">
            <summary>
            Retrieve the message for the given code and the default
            <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="code">The code of the message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Retrieve the message for the given code and the given
            <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="code">The code of the message.</param>       
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for
            lookups.
            </param>
            <returns>The message.</returns>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String,System.Object[])">
            <summary>
            Retrieve the message for the given code and the default
            <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="code">The code of the message.</param>
            <param name="args">
            The arguments for the message, or <see langword="null"/> if none.
            </param>
            <returns>The message.</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be found.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Retrieve the message for the given code and the given
            <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="code">The code of the message.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for
            lookups.
            </param>
            <param name="args">
            The arguments for the message, or <see langword="null"/> if none.
            </param>
            <returns>The message.</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be found.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(Spring.Context.IMessageSourceResolvable)">
            <summary>
            Retrieve a mesage using the given
            <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </summary>
            <param name="resolvable">
            The <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </param>
            <returns>The message.</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be found.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>
            Retrieve a mesage using the given
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> in the given
            <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="resolvable">
            The <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </param>     
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for
            lookups.
            </param>
            <returns>The message</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message could not be found.
            </exception>
        </member>
        <member name="T:Spring.Context.Support.MessageSourceResolvableVisitor">
            <summary>
            Visitor class to represent
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> instances.
            </summary>
            <remarks>
            <p>
            Used in the first instance to supply stringified versions of
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> instances. 
            </p>
            <p>
            Other methods can be added here to return different representations,
            including XML, CSV, etc..
            </p>
            </remarks>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceResolvableVisitor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.MessageSourceResolvableVisitor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceResolvableVisitor.VisitMessageSourceResolvableString(Spring.Context.IMessageSourceResolvable)">
            <summary>
            Outputs the supplied <see cref="T:Spring.Context.IMessageSourceResolvable"/>
            as a nicely formatted <see cref="T:System.String"/>.
            </summary>
            <param name="resolvable">
            The <see cref="T:Spring.Context.IMessageSourceResolvable"/> to output.
            </param>
        </member>
        <member name="T:Spring.Context.Support.NamespaceParsersSectionHandler">
            <summary>
            Configuration section handler for the (recommended, Spring.NET standard) <c>parsers</c>
            config section.
            </summary>
            <remarks>
            <p>
            Spring.NET allows the registration of custom configuration parsers that
            can be used to create simplified configuration schemas that better
            describe object definitions.
            </p>
            <p>
            For example, Spring.NET uses this facility internally in order to
            define simplified schemas for various AOP, Data and Services definitions.
            </p>
            </remarks>
            <example>
            <p>
            The following example shows how to configure both this section handler
            and how to define custom configuration parsers within a Spring.NET
            config section.
            </p>
            <code escaped="true">
            <configuration>
                <configSections>
            	    <sectionGroup name="spring">
            		    <section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core"/>
            	    </sectionGroup>
                </configSections>
                <spring>
            	    <parsers>
            		    <parser type="Spring.Aop.Config.AopNamespaceParser, Spring.Aop"/>
            		    <parser type="Spring.Data.Config.DatabaseNamespaceParser, Spring.Data"/>
            		    ...
            	    </parsers>
            	    ...
                </spring>
            </configuration>
            </code>
            </example>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry"/>
        </member>
        <member name="M:Spring.Context.Support.NamespaceParsersSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Registers parsers specified in the (recommended, Spring.NET standard)
            <c>parsers</c> config section with the <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry"/>.
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is <see langword="null"/>.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            This method always returns <see langword="null"/>, because parsers
            are registered as a side-effect of this object's execution and there
            is thus no need to return anything.
            </returns>
        </member>
        <member name="T:Spring.Context.Support.NullMessageSource">
            <summary>
            An <see cref="T:Spring.Context.IMessageSource"/> that doesn't do a whole lot.
            </summary>
            <remarks>
            <p>
            <see cref="T:Spring.Context.Support.NullMessageSource"/> is an implementation of
            the <c>NullObject</c> pattern. It should be used in those situations where a
            <see cref="T:Spring.Context.IMessageSource"/> needs to be passed (say to a
            method) but where the resolution of messages is not required.
            </p>
            <p>
            There should not (typically) be a need to instantiate instances of this class;
            <see cref="T:Spring.Context.Support.NullMessageSource"/> does not maintan any state
            and the <see cref="F:Spring.Context.Support.NullMessageSource.Null"/> instance is
            thus safe to pass around. 
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Context.Support.NullMessageSource.Null">
            <summary>
            The canonical instance of the
            <see cref="T:Spring.Context.Support.NullMessageSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.NullMessageSource.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Context.Support.NullMessageSource"/> class.
            </summary>
            <remarks>
            <p>
            Consider using <see cref="F:Spring.Context.Support.NullMessageSource.Null"/>
            instead.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.NullMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Simply returns the supplied message <paramref name="code"/> as-is.
            </summary>
            <param name="code">The code of the message to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <returns>
            The supplied message <paramref name="code"/> as-is.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.NullMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Always returns <see lang="null"/>.
            </summary>
            <param name="code">The code of the object to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <returns>
            <see lang="null"/> (always).
            </returns>
        </member>
        <member name="M:Spring.Context.Support.NullMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Does nothing.
            </summary>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
        </member>
        <member name="T:Spring.Context.Support.ResourceHandlersSectionHandler">
            <summary>
            Handler for Spring.NET <c>resourceHandlers</c> config section.
            </summary>
            <remarks>
            <p>
            Spring allows registration of custom resource handlers that can be used to load
            object definitions from.
            </p>
            <p>
            For example, if you wanted to store your object definitions in a database instead
            of in the config file, you could write a custom <see cref="T:Spring.Core.IO.IResource"/> implementation
            and register it with Spring using 'db' as a protocol name.
            </p>
            <p>
            Afterwards, you would simply specify resource URI within the <c>context</c> config element
            using your custom resource handler.
            </p>
            </remarks>
            <example>
            <p>
            The following example shows how to configure both this section handler,
            how to define custom resource within Spring config section, and how to load
            object definitions using custom resource handler:
            </p>
            <code escaped="true">
            <configuration>
                <configSections>
            	    <sectionGroup name="spring">
            		    <section name="resourceHandlers" type="Spring.Context.Support.ResourceHandlersSectionHandler, Spring.Core"/>
            	    </sectionGroup>
                </configSections>
                <spring>
            	    <resourceHandlers>
            		    <handler protocol="db" type="MyCompany.MyApp.Resources.MyDbResource, MyAssembly"/>
            	    </resourceHandlers>
            	    <context>
            	        <resource uri="db://user:pass@dbName/MyDefinitionsTable"/>
            	    </context>
                </spring>
            </configuration>
            </code>
            </example>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Core.IO.IResource"/>
        </member>
        <member name="M:Spring.Context.Support.ResourceHandlersSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Registers resource handlers that are specified in
            the <c>resources</c> config section with the <see cref="T:Spring.Core.IO.ResourceHandlerRegistry"/>.
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section. Ignored.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is <see langword="null"/>.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            This method always returns <c>null</c>, because resource handlers are registered
            as a sideffect of its execution and there is no need to return anything.
            </returns>
        </member>
        <member name="T:Spring.Context.Support.ResourceSetMessageSource">
            <summary>
            An <see cref="T:Spring.Context.IMessageSource"/> implementation that
            accesses resources from .resx / .resource files.
            </summary>
            <remarks>Note that for the method 
            GetResourceObject if the resource name resolves to null, then in 
            .NET 1.1 the return value will be String.Empty whereas 
            in .NET 2.0 it will return null.</remarks>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.IInitializingObject">
            <summary>
            Defines a simple initialization callback for objects that need to to some
            post-initialization logic after all of their dependencies have been injected.
            </summary>
            <remarks>
            <p>
            An implementation of the
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method might perform some additional custom initialization (over and above that
            performed by the constructor), or merely check that all mandatory properties
            have been set (this last example is a very typical use case of this interface).
            </p>
            <note>
            The use of the
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/> interface
            by non-Spring.NET framework code can be avoided (and is generally
            discouraged). The Spring.NET container provides support for a generic
            initialization method given to the object definition in the object
            configuration store (be it XML, or a database, etc). This requires
            slightly more configuration (one attribute-value pair in the case of
            XML configuration), but removes any dependency on Spring.NET from the
            class definition.
            </note>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.IObjectFactory"/>
        </member>
        <member name="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform the kind of
            initialization only possible when all of it's dependencies have
            been injected (set), and to throw an appropriate exception in the
            event of misconfiguration.
            </p>
            <p>
            Please do consult the class level documentation for the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface for a
            description of exactly <i>when</i> this method is invoked. In
            particular, it is worth noting that the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            callbacks will have been invoked <i>prior</i> to this method being
            called.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves a given code by searching through each assembly name in
            the base names array.
            </summary>
            <param name="code">The code to resolve.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The message from the resource set.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves a given code by searching through each assembly name in the array.
            </summary>
            <param name="code">The code to resolve.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The object from the resource set.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Uses a System.ComponentModel.ComponentResourceManager
            to apply resources to object properties.
            Resource key names are of the form objectName.propertyName
            </summary>
            <remarks>
            This feature is not currently supported on version 1.0 of the .NET platform.
            </remarks>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for the key lookup.
            </param>      
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            If <cref lang="null"/>, uses the
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> value.
            </param>
            <exception cref="T:System.NotSupportedException">
            This feature is not currently supported on version 1.0 of the .NET platform.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ResolveObject(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves a code into an object given a base name.
            </summary>
            <param name="resourceManager">The <see cref="T:System.Resources.ResourceManager"/> to search.</param>
            <param name="code">The code to resolve.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The object from the resource file.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the
            <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the
            <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied.
            </summary>
            <remarks>
            <p>
            The list may contain objects of type <see cref="T:System.String"/> or
            <see cref="T:System.Resources.ResourceManager"/>. <see cref="T:System.String"/> types
            are converted to <see cref="T:System.Resources.ResourceManager"/> instances using the notation
            resourcename, assembly partial name.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the conversion from a <see cref="T:System.String"/> to a
            <see cref="T:System.Resources.ResourceManager"/> can't be performed.
            </exception>
        </member>
        <member name="P:Spring.Context.Support.ResourceSetMessageSource.ResourceManagers">
            <summary>
            The collection of <see cref="T:System.Resources.ResourceManager"/>s
            in this <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.
            </summary>
        </member>
        <member name="T:Spring.Context.Support.StaticApplicationContext">
            <summary>
            <see cref="T:Spring.Context.IApplicationContext"/> that allows concrete registration of
            objects and messages in code, rather than from external configuration sources.
            </summary>
            <remarks>
            <p>
            Mainly useful for testing.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.#ctor">
            <summary>
            Creates a new instance of the StaticApplicationContext class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the StaticApplicationContext class.
            </summary>
            <param name="parentContext">The parent application context.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.#ctor(System.String,Spring.Context.IApplicationContext)">
            <summary>
            Creates a new, named instance of the StaticApplicationContext class.
            </summary>
            <param name="name">the context name</param>
            <param name="parentContext">The parent application context.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.RefreshObjectFactory">
            <summary>
            Do nothing: we rely on callers to update our public methods.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.RegisterSingleton(System.String,System.Type,Spring.Objects.MutablePropertyValues)">
            <summary>
            Register a singleton object with the default object factory.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="classType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="propertyValues">The property values for the singleton instance.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.RegisterPrototype(System.String,System.Type,Spring.Objects.MutablePropertyValues)">
            <summary>
            Registers a prototype object with the default object factory.
            </summary>
            <param name="name">The name of the prototype object.</param>
            <param name="classType">The <see cref="T:System.Type"/> of the prototype object.</param>
            <param name="propertyValues">The property values for the prototype instance.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.AddMessage(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Associate the given message with the given code.
            </summary>
            <param name="code">The lookup code.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that the message should be found within.
            </param>
            <param name="defaultMessage">The message associated with the lookup code.</param>
        </member>
        <member name="T:Spring.Context.Support.StaticMessageSource">
            <summary>
            Simple implementation of <see cref="T:Spring.Context.IMessageSource"/>
            that allows messages to be held in an object and added programmatically.
            </summary>
            <remarks>
            <p>
            Mainly useful for testing.
            </p>
            <p>
            This <see cref="T:Spring.Context.IMessageSource"/> supports internationalization.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="T:Spring.Context.Support.DelegatingMessageSource"/>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.StaticMessageSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a format string.
            </summary>
            <param name="code">The code of the message to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <returns>
            A format string or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.Support.AbstractMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves an object (typically an icon or bitmap).
            </summary>
            <param name="code">The code of the object to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <returns>
            The resolved object or <see langword="null"/> if not found.
            </returns>
            <seealso cref="M:Spring.Context.Support.AbstractMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Applies resources to object properties.
            </summary>
            <remarks>
            <p>
            Uses a System.ComponentModel.ComponentResourceManager
            internally to apply resources to object properties. Resource key
            names are of the form <c>objectName.propertyName</c>.
            </p>
            <p>
            This feature is not currently supported on version 1.0 of the .NET platform.
            </p>
            </remarks>
            <param name="value">
            An object that contains the property values to be applied.
            </param>
            <param name="objectName">
            The base name of the object to use for key lookup.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> with which the
            resource is associated.
            </param>
            <exception cref="T:System.NotSupportedException">
            This feature is not currently supported on version 1.0 of the .NET platform.
            </exception>
            <seealso cref="M:Spring.Context.Support.AbstractMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.AddMessage(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Associate the supplied <paramref name="messageFormat"/> with the
            supplied <paramref name="code"/>.
            </summary>
            <param name="code">The lookup code.</param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <param name="messageFormat">
            The message format associated with this lookup code.
            </param>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.AddObject(System.String,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Associate the supplied <paramref name="value"/> with the
            supplied <paramref name="code"/>.
            </summary>
            <param name="code">The lookup code.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the
            code for.
            </param>
            <param name="value">
            The object associated with this lookup code.
            </param>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this
            message source.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing all of this message
            source's messages.
            </returns>
        </member>
        <member name="T:Spring.Context.Support.TypeAliasesSectionHandler">
            <summary>
            Configuration section handler for the Spring.NET <c>typeAliases</c>
            config section.
            </summary>
            <remarks>
            <p>
            Type aliases can be used instead of fully qualified type names anywhere
            a type name is expected in a Spring.NET configuration file.
            </p>
            <p>
            This includes type names specified within an object definition, as well
            as values of the properties or constructor arguments that expect
            <see cref="T:System.Type"/> instances.
            </p>
            </remarks>
            <example>
            <p>
            The following example shows how to configure both this section handler and
            how to define type aliases within a Spring.NET config section:
            </p>
            <code escaped="true">
            <configuration>
                <configSections>
            	    <sectionGroup name="spring">
            		    <section name="typeAliases" type="Spring.Context.Support.TypeAliasesSectionHandler, Spring.Core"/>
            	    </sectionGroup>
                </configSections>
                <spring>
            	    <typeAliases>
            		    <alias name="WebServiceExporter" type="Spring.Web.Services.WebServiceExporter, Spring.Web"/>
            		    <alias name="MyType" type="MyCompany.MyProject.MyNamespace.MyType, MyAssembly"/>
            		    ...
            	    </typeAliases>
            	    ...
                </spring>
            </configuration>
            </code>
            </example>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Core.TypeResolution.TypeRegistry"/>
        </member>
        <member name="M:Spring.Context.Support.TypeAliasesSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Populates <see cref="T:Spring.Core.TypeResolution.TypeRegistry"/> using values specified in
            the <c>typeAliases</c> config section.
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is <see langword="null"/>.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            This method always returns <see langword="null"/>, because the
            <see cref="T:Spring.Core.TypeResolution.TypeRegistry"/> is populated as a side-effect of this
            object's execution and thus there is no need to return anything.
            </returns>
        </member>
        <member name="T:Spring.Context.Support.TypeConvertersSectionHandler">
            <summary>
            Configuration section handler for the Spring.NET <c>typeConverters</c>
            config section.
            </summary>
            <remarks>
            <p>
            Type converters are used to convert objects from one type into another
            when injecting property values, evaluating expressions, performing data
            binding, etc.
            </p>
            <p>
            They are a very powerful mechanism as they allow Spring.NET to automatically
            convert string-based property values from the configuration file into the appropriate
            type based on the target property's type or to convert string values submitted
            via a web form into a type that is used by your data model when Spring.NET data
            binding is used. Because they offer such tremendous help, you should always provide
            a type converter implementation for your custom types that you want to be able to use
            for injected properties or for data binding.
            </p>
            <p>
            The standard .NET mechanism for specifying type converter for a particular type is
            to decorate the type with a <see cref="T:System.ComponentModel.TypeConverterAttribute"/>, passing the type
            of the <see cref="T:System.ComponentModel.TypeConverter"/>-derived class as a parameter.
            </p>
            <p>
            This mechanism will still work and is a preferred way of defining type converters if
            you control the source code for the type that you want to define a converter for. However, 
            this configuration section allows you to specify converters for the types that you don't 
            control and it also allows you to override some of the standard type converters, such as
            the ones that are defined for some of the types in the .NET Base Class Library.
            </p>
            </remarks>
            <example>
            <p>
            The following example shows how to configure both this section handler and
            how to define type converters within a Spring.NET config section:
            </p>
            <code escaped="true">
            <configuration>
                <configSections>
            	    <sectionGroup name="spring">
            		    <section name="typeConverters" type="Spring.Context.Support.TypeConvertersSectionHandler, Spring.Core"/>
            	    </sectionGroup>
                </configSections>
                <spring>
            	    <typeConverters>
            		    <converter for="Spring.Expressions.IExpression, Spring.Core" type="Spring.Expressions.ExpressionConverter, Spring.Core"/>
            		    <converter for="MyTypeAlias" type="MyCompany.MyProject.Converters.MyTypeConverter, MyAssembly"/>
            		    ...
            	    </typeConverters>
            	    ...
                </spring>
            </configuration>
            </code>
            </example>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Core.TypeResolution.TypeRegistry"/>
        </member>
        <member name="M:Spring.Context.Support.TypeConvertersSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Populates <see cref="T:Spring.Core.TypeConversion.TypeConverterRegistry"/> using values specified in
            the <c>typeConverters</c> config section.
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is <see langword="null"/>.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            This method always returns <see langword="null"/>, because the
            <see cref="T:Spring.Core.TypeConversion.TypeConverterRegistry"/> is populated as a side-effect of 
            its execution and thus there is no need to return anything.
            </returns>
        </member>
        <member name="T:Spring.Context.Support.XmlApplicationContext">
            <summary>
            An <see cref="T:Spring.Context.IApplicationContext"/> implementation that
            reads context definitions from XML based resources.
            </summary>
            <remarks>
            <p>
            Currently, the resources that are supported are the <c>file</c>,
            <c>http</c>, <c>ftp</c>, <c>config</c> and <c>assembly</c> resource
            types.
            </p>
            <p>
            You can provide custom implementations of the
            <see cref="T:Spring.Core.IO.IResource"/> interface and and register them
            with any <see cref="T:Spring.Context.IApplicationContext"/> that inherits
            from the
            <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>
            interface.
            </p>
            <note>
            In case of multiple config locations, later object definitions will
            override ones defined in previously loaded resources. This can be
            leveraged to deliberately override certain object definitions via an
            extra XML file.
            </note>
            </remarks>
            <example>
            <p>
            Find below some examples of instantiating an
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> using a
            variety of different XML resources.
            </p>
            <code language="C#">
            // an XmlApplicationContext that reads its object definitions from an
            //    XML file that has been embedded in an assembly...
            IApplicationContext context = new XmlApplicationContext
            	(
            		"assembly://AssemblyName/NameSpace/ResourceName"
            	);
            	
            // an XmlApplicationContext that reads its object definitions from a
            //    number of disparate XML resources...
            IApplicationContext context = new XmlApplicationContext
            	(
            		// from an XML file that has been embedded in an assembly...
            		"assembly://AssemblyName/NameSpace/ResourceName",
            		// and from a (relative) filesystem-based resource...
            		"file://Objects/services.xml",
            		// and from an App.config / Web.config resource...
            		"config://spring/objects"
            	);
            </code>
            </example>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <seealso cref="T:Spring.Core.IO.IResourceLoader"/>
            <seealso cref="T:Spring.Core.IO.ConfigurableResourceLoader"/>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(Spring.Context.Support.XmlApplicationContextArgs)">
            <summary>
            Initializes a new instance of the XmlApplicationContext class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class,
            loading the definitions from the supplied XML resource locations.
            </summary>
            <remarks>The created context will be case sensitive.</remarks>
            <param name="configurationLocations">
            Any number of XML based object definition resource locations.
            </param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.Boolean,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class,
            loading the definitions from the supplied XML resource locations.
            </summary>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
            <param name="configurationLocations">
            Any number of XML based object definition resource locations.
            </param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class,
            loading the definitions from the supplied XML resource locations.
            </summary>
            <param name="name">The application context name.</param>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
            <param name="configurationLocations">
            Any number of XML based object definition resource locations.
            </param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(Spring.Context.IApplicationContext,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class,
            loading the definitions from the supplied XML resource locations,
            with the given <paramref name="parentContext"/>.
            </summary>
            <param name="parentContext">
            The parent context (may be <see langword="null"/>).
            </param>
            <param name="configurationLocations">
            Any number of XML based object definition resource locations.
            </param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.Boolean,Spring.Context.IApplicationContext,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class,
            loading the definitions from the supplied XML resource locations,
            with the given <paramref name="parentContext"/>.
            </summary>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
            <param name="parentContext">
            The parent context (may be <see langword="null"/>).
            </param>
            <param name="configurationLocations">
            Any number of XML based object definition resource locations.
            </param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.String,System.Boolean,Spring.Context.IApplicationContext,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class,
            loading the definitions from the supplied XML resource locations,
            with the given <paramref name="parentContext"/>.
            </summary>
            <param name="name">The application context name.</param>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
            <param name="parentContext">
            The parent context (may be <see langword="null"/>).
            </param>
            <param name="configurationLocations">
            Any number of XML based object definition resource locations.
            </param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.Boolean,System.String,System.Boolean,Spring.Context.IApplicationContext,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class,
            loading the definitions from the supplied XML resource locations,
            with the given <paramref name="parentContext"/>.
            </summary>
            <remarks>
            This constructor is meant to be used by derived classes. By passing <paramref name="refresh"/>=false, it is
            the responsibility of the deriving class to call <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/> to initialize the context instance.
            </remarks>
            <param name="refresh">if true, <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/> is called automatically.</param>
            <param name="name">The application context name.</param>
            <param name="caseSensitive">Flag specifying whether to make this context case sensitive or not.</param>
            <param name="parentContext">
            The parent context (may be <see langword="null"/>).
            </param>
            <param name="configurationLocations">
            Any number of XML based object definition resource locations.
            </param>
        </member>
        <member name="P:Spring.Context.Support.XmlApplicationContext.ConfigurationLocations">
            <summary>
            An array of resource locations, referring to the XML object
            definition files with which this context is to be built.
            </summary>
            <returns>
            An array of resource locations, or <see langword="null"/> if none.
            </returns>
            <seealso cref="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationLocations"/>
        </member>
        <member name="P:Spring.Context.Support.XmlApplicationContext.ConfigurationResources">
            <summary>
            An array of resources instances with which this context is to be built.
            </summary>
            <returns>
            An array of <see cref="T:Spring.Core.IO.IResource"/>s, or <see langword="null"/> if none.
            </returns>
            <seealso cref="P:Spring.Context.Support.AbstractXmlApplicationContext.ConfigurationLocations"/>
        </member>
        <member name="T:Spring.Context.Support.XmlApplicationContextArgs">
            <summary>
            Encapsulates arguments to the <see cref="T:Spring.Context.Support.XmlApplicationContext"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContextArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.XmlApplicationContextArgs"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContextArgs.#ctor(System.String,Spring.Context.IApplicationContext,System.String[],Spring.Core.IO.IResource[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Context.Support.XmlApplicationContextArgs"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parentContext">The parent context.</param>
            <param name="configurationLocations">The configuration locations.</param>
            <param name="configurationResources">The configuration resources.</param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContextArgs.#ctor(System.String,Spring.Context.IApplicationContext,System.String[],Spring.Core.IO.IResource[],System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the XmlApplicationContextArgs class.
            </summary>
            <param name="name">The name.</param>
            <param name="parentContext">The parent context.</param>
            <param name="configurationLocations">The configuration locations.</param>
            <param name="configurationResources">The configuration resources.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <param name="refresh">if set to <c>true</c> [refresh].</param>
        </member>
        <member name="T:Spring.Context.ApplicationContextException">
            <summary>Exception thrown during application context initialization.</summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Objects.FatalObjectException">
            <summary>
            Thrown on an unrecoverable problem encountered in the
            objects namespace or sub-namespaces, e.g. bad class or field.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Objects.ObjectsException">
            <summary>
            Superclass for all exceptions thrown in the Objects namespace and sub-namespaces.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor">
            <summary>Creates a new instance of the ObjectsException class.</summary>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectsException class. with the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectsException class with the specified message
            and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor(System.String)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="T:Spring.Context.EventListenerAttribute">
            <summary>
            Marks an interface as being an application event listener.
            </summary>
            <author>Griffin Caprio</author>
            <see cref="T:Spring.Context.IApplicationEventListener"/>
        </member>
        <member name="M:Spring.Context.EventListenerAttribute.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.EventListenerAttribute"/> class.
            </summary>
        </member>
        <member name="T:Spring.Context.ApplicationEventHandler">
            <summary>
            The callback for application events.
            </summary>
        </member>
        <member name="T:Spring.Context.IMessageSourceAware">
            <summary>
            To be implemented by any object that wishes to be notified
            of the <see cref="T:Spring.Context.IMessageSource"/> associated with it.
            </summary>
            <remarks>
            <p>
            In the current implementation, the
            <see cref="T:Spring.Context.IMessageSource"/> will typically be the
            associated <see cref="T:Spring.Context.IApplicationContext"/> that
            spawned the implementing object.
            </p>
            <p>
            The <see cref="T:Spring.Context.IMessageSource"/> can usually also be
            passed on as an object reference to arbitrary object properties or
            constructor arguments, because a
            <see cref="T:Spring.Context.IMessageSource"/> is typically defined as an
            object with the well known name <c>"messageSource"</c> in the
            associated application context.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.IInitializingObject"/>
        </member>
        <member name="P:Spring.Context.IMessageSourceAware.MessageSource">
            <summary>
            Sets the <see cref="T:Spring.Context.IMessageSource"/> associated
            with this object.
            </summary>
            <remarks>
            <p>
            Invoked <b>after</b> population of normal object properties but
            <b>before</b> an initializing callback such as the
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method of the
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/> interface
            or a custom init-method.
            </p>
            <p>
            It is also invoked <b>before</b> the
            <see cref="P:Spring.Context.IApplicationContextAware.ApplicationContext"/>
            property of any
            <see cref="T:Spring.Context.IApplicationContextAware"/>
            implementation.
            </p>
            </remarks>
            <value>
            The <see cref="T:Spring.Context.IMessageSource"/> associated
            with this object.
            </value>
        </member>
        <member name="T:Spring.Context.IResourceLoaderAware">
            <summary>
            Interface to be implemented by any object that wishes to be notified
            of the <see cref="T:Spring.Core.IO.IResourceLoader"/> (typically the
            <see cref="T:Spring.Context.IApplicationContext"/>) that it runs in.
            </summary>
            <remarks>
            <p>
            Note that <see cref="T:Spring.Core.IO.IResource"/> dependencies can also
            be exposed as object properties of type
            <see cref="T:Spring.Core.IO.IResource"/>, populated via strings with
            automatic type conversion by the object factory. This obviates the
            need for implementing any callback interface just for the purpose of
            accessing a specific resource.
            </p>
            <p>
            You typically need an <see cref="T:Spring.Core.IO.IResourceLoader"/>
            when your application object has to access a variety of file resources
            whose names are calculated. A good strategy is to make the object use
            a default resource loader but still implement the
            <see cref="T:Spring.Context.IResourceLoaderAware"/> interface to allow
            for overriding when running in an
            <see cref="T:Spring.Context.IApplicationContext"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <see cref="T:Spring.Context.IApplicationContextAware"/>
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>
            <see cref="T:Spring.Core.IO.IResourceLoader"/>
        </member>
        <member name="P:Spring.Context.IResourceLoaderAware.ResourceLoader">
            <summary>
            Sets the <see cref="T:Spring.Core.IO.IResourceLoader"/>
            that this object runs in.
            </summary>
            <remarks>
            <p>
            Invoked <b>after</b> population of normal objects properties but
            before an init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s 
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked <b>before</b> setting 
            <see cref="T:Spring.Context.IApplicationContextAware"/>'s
            <see cref="P:Spring.Context.IApplicationContextAware.ApplicationContext"/>
            property.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Context.NoSuchMessageException">
            <summary>
            Thrown when a message cannot be resolved.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:Spring.Context.IMessageSource"/>
            <seealso cref="T:Spring.Context.IMessageSourceResolvable"/>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being
            thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or
            destination.
            </param>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
            <param name="code">
            The code that could not be resolved for given culture.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that was used
            to search for the code.
            </param>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
            <param name="code">
            The code that could not be resolved for the current UI culture.
            </param>
        </member>
        <member name="T:Spring.Core.IO.AbstractResource">
            <summary>
            Convenience base class for <see cref="T:Spring.Core.IO.IResource"/>
            implementations, pre-implementing typical behavior.
            </summary>
            <remarks>
            <p>
            The <see cref="P:Spring.Core.IO.AbstractResource.Exists"/> method will
            check whether a <see cref="T:System.IO.FileInfo"/> or
            <see cref="T:System.IO.Stream"/> can be opened;
            <see cref="P:Spring.Core.IO.AbstractResource.IsOpen"/> will always return
            <see langword="false"/>;
            <see cref="P:Spring.Core.IO.AbstractResource.Uri"/> and
            <see cref="P:Spring.Core.IO.AbstractResource.File"/> throw an exception;
            and <see cref="M:Spring.Core.IO.AbstractResource.ToString"/> will
            return the value of the
            <see cref="P:Spring.Core.IO.IResource.Description"/> property.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Core.IO.IResource"/>
        </member>
        <member name="T:Spring.Core.IO.IResource">
            <summary>
            The central abstraction for Spring.NET's access to resources such as
            <see cref="T:System.IO.Stream"/>s.
            </summary>
            <remarks>
            <p>
            This interface encapsulates a resource descriptor that abstracts away
            from the underlying type of resource; possible resource types include
            files, memory streams, and databases (this list is not exhaustive).
            </p>
            <p>
            A <see cref="T:System.IO.Stream"/> can definitely be opened and accessed
            for every such resource; if the resource exists in a physical form (for
            example, the resource is not an in-memory stream or one that has been
            extracted from an assembly or ZIP file), a <see cref="T:System.Uri"/> or
            <see cref="T:System.IO.FileInfo"/> can also be accessed. The actual
            behavior is implementation-specific.
            </p>
            <p>
            This interface, when used in tandem with the
            <see cref="T:Spring.Core.IO.IResourceLoader"/> interface, forms the backbone of
            Spring.NET's resource handling. Third party extensions or libraries
            that want to integrate external resources with Spring.NET's IoC
            container are encouraged expose such resources via this abstraction.
            </p>
            <p>
            Interfaces cannot obviously mandate implementation, but derived classes
            are <b>strongly</b> encouraged to expose a constructor that takes a
            single <see cref="T:System.String"/> as it's sole argument (see example).
            Exposing such a constructor will make your custom
            <see cref="T:Spring.Core.IO.IResource"/> implementation integrate nicely
            with the <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/> class.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Core.IO.IResourceLoader"/>
            <seealso cref="T:Spring.Core.IO.ConfigurableResourceLoader"/>
        </member>
        <member name="T:Spring.Core.IO.IInputStreamSource">
            <summary>
            Simple interface for objects that are sources for
            <see cref="T:System.IO.Stream"/>s.
            </summary>
            <remarks>
            <p>
            This is the base interface for the abstraction encapsulated by
            Spring.NET's <see cref="T:Spring.Core.IO.IResource"/> interface.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Core.IO.IResource"/>
        </member>
        <member name="P:Spring.Core.IO.IInputStreamSource.InputStream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            <note type="caution">
            Clients of this interface must be aware that every access of this
            property will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such
            <see cref="T:System.IO.Stream"/>.
            </note>
            </remarks>
            <value>
            An <see cref="T:System.IO.Stream"/>.
            </value>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="M:Spring.Core.IO.IResource.CreateRelative(System.String)">
            <summary>
            Creates a resource relative to this resource.
            </summary>
            <param name="relativePath">
            The path (always resolved as relative to this resource).
            </param>
            <returns>
            The relative resource.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied
            path.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the resource does not support the notion of a relative path.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.IResource.IsOpen">
            <summary>
            Does this resource represent a handle with an open stream?
            </summary>
            <remarks>
            <p>
            If <see langword="true"/>, the <see cref="T:System.IO.Stream"/>
            cannot be read multiple times, and must be read and then closed to
            avoid resource leaks.
            </p>
            <p>
            Will be <see langword="false"/> for all usual resource descriptors.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this resource represents a handle with an
            open stream.
            </value>
            <seealso cref="P:Spring.Core.IO.IInputStreamSource.InputStream"/>
        </member>
        <member name="P:Spring.Core.IO.IResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <remarks>
            <p>
            For safety, always check the value of the
            <see cref="P:Spring.Core.IO.IResource.Exists"/> property prior to
            accessing this property; resources that cannot be exposed as 
            a <see cref="T:System.Uri"/> will typically return
            <see langword="false"/> from a call to the
            <see cref="P:Spring.Core.IO.IResource.Exists"/> property.
            </p>
            </remarks>
            <value>
            The <see cref="T:System.Uri"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.IOException">
            If the resource is not available or cannot be exposed as a
            <see cref="T:System.Uri"/>.
            </exception>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <seealso cref="P:Spring.Core.IO.IResource.Exists"/>
        </member>
        <member name="P:Spring.Core.IO.IResource.File">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <remarks>
            <p>
            For safety, always check the value of the
            <see cref="P:Spring.Core.IO.IResource.Exists"/> property prior to
            accessing this property; resources that cannot be exposed as 
            a <see cref="T:System.IO.FileInfo"/> will typically return
            <see langword="false"/> from a call to the
            <see cref="P:Spring.Core.IO.IResource.Exists"/> property.
            </p>
            </remarks>
            <value>
            The <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.IOException">
            If the resource is not available on a filesystem, or cannot be
            exposed as a <see cref="T:System.IO.FileInfo"/> handle.
            </exception>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <seealso cref="P:Spring.Core.IO.IResource.Exists"/>
        </member>
        <member name="P:Spring.Core.IO.IResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <remarks>
            <p>
            The description is typically used for diagnostics and other such
            logging when working with the resource.
            </p>
            <p>
            Implementations are also encouraged to return this value from their
            <see cref="M:System.Object.ToString"/> method.
            </p>
            </remarks>
            <value>
            A description for this resource.
            </value>
        </member>
        <member name="P:Spring.Core.IO.IResource.Exists">
            <summary>
            Does this resource actually exist in physical form?
            </summary>
            <remarks>
            <p>
            An example of a resource that physically exists would be a
            file on a local filesystem. An example of a resource that does not
            physically exist would be an in-memory stream.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this resource actually exists in physical
            form (for example on a filesystem).
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.File"/>
            <seealso cref="P:Spring.Core.IO.IResource.Uri"/>
        </member>
        <member name="F:Spring.Core.IO.AbstractResource.DefaultBasePathPlaceHolder">
            <summary>
            The default special character that denotes the base (home, or root)
            path.
            </summary>
            <remarks>
            <p>
            Will be resolved (by those <see cref="T:Spring.Core.IO.IResource"/>
            implementations that support it) to the home (or root) path for
            the specific <see cref="T:Spring.Core.IO.IResource"/> implementation.
            </p>
            <p>
            For example, in the case of a web application this will (probably)
            resolve to the virtual directory of said web application.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.AbstractResource"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.AbstractResource"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
            <param name="resourceName">
            A string representation of the resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="resourceName"/> is
            <see langword="null"/> or contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.GetResourceNameWithoutProtocol(System.String)">
            <summary>
            Strips any protocol name from the supplied
            <paramref name="resourceName"/>.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="resourceName"/> does not
            have any protocol associated with it, then the supplied
            <paramref name="resourceName"/> will be returned as-is.
            </p>
            </remarks>
            <example>
            <code language="C#">
            GetResourceNameWithoutProtocol("http://www.mycompany.com/resource.txt");
            	// returns www.mycompany.com/resource.txt
            </code>
            </example>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            The name of the resource without the protocol name.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.ResolveResourceNameWithoutProtocol(System.String)">
            <summary>
            Resolves the supplied <paramref name="resourceName"/> to its value
            sans any leading protocol.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            The name of the resource without the protocol name.
            </returns>
            <see cref="M:Spring.Core.IO.AbstractResource.GetResourceNameWithoutProtocol(System.String)"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.ResolveBasePathPlaceHolder(System.String,System.String)">
            <summary>
            Resolves the presence of the
            <paramref name="basePathPlaceHolder"/> value
            in the supplied <paramref name="resourceName"/> into a path.
            </summary>
            <remarks>
            <p>
            The default implementation simply returns the supplied
            <paramref name="resourceName"/> as is.
            </p>
            </remarks>
            <param name="resourceName">
            The name of the resource.
            </param>
            <param name="basePathPlaceHolder">
            The string that is a placeholder for a base path.
            </param>
            <returns>
            The name of the resource with any <paramref name="basePathPlaceHolder"/>
            value having been resolved into an actual path.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.ToString">
            <summary>
            This implementation returns the
            <see cref="P:Spring.Core.IO.AbstractResource.Description"/> of this resource.
            </summary>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <remarks>
            <p>
            This implementation compares <see cref="P:Spring.Core.IO.AbstractResource.Description"/> values.
            </p>
            </remarks>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table. 
            </summary>
            <remarks>
            <p>
            This implementation returns the hashcode of the
            <see cref="P:Spring.Core.IO.AbstractResource.Description"/> property.
            </p>
            </remarks>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.CreateResourceInstance(System.String)">
            <summary>
            Factory Method. Create a new instance of the current resource type using the given resourceName
            </summary>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.GetResourceLoader">
            <summary>
            The ResourceLoader to be used for resolving relative resources
            </summary>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.IsRelativeResource(System.String)">
            <summary>
            Does the supplied <paramref name="resourceName"/> relative ?
            </summary>
            <param name="resourceName">
            The name of the resource to test.
            </param>
            <returns>
            <see langword="true"/> if resource name is relative; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.CreateRelative(System.String)">
            <summary>
            Creates a new resource that is relative to this resource based on the
            supplied <paramref name="resourceName"/>.
            </summary>
            <remarks>
            <p>
            This method can accept either a fully qualified resource name or a
            relative resource name as it's parameter.
            </p>
            <p>
            A fully qualified resource is one that has a protocol prefix and
            all elements of the resource name. All other resources are treated
            as relative to this resource, and the following rules are used to
            locate a relative resource:
            </p>
            <list type="bullet">
                <item>
                If the <paramref name="resourceName"/> starts with <c>'..'</c>,
                the current resource path is navigated backwards before the
                <paramref name="resourceName"/> is concatenated to the current
                <see cref="P:Spring.Core.IO.AbstractResource.ResourcePath"/> of
                this resource.
                </item>
                <item>
                If the <paramref name="resourceName"/> starts with '/', the
                current resource path is ignored and a new resource name is
                appended to the
                <see cref="P:Spring.Core.IO.AbstractResource.RootLocation"/> of
                this resource.
                </item>
                <item>
                If the <paramref name="resourceName"/> starts with '.' or a
                letter, a new path is appended to the current 
                <see cref="P:Spring.Core.IO.AbstractResource.ResourcePath"/> of
                this resource.
                </item>
            </list>
            </remarks>
            <param name="resourceName">
            The name of the resource to create.
            </param>
            <returns>The relative resource.</returns>
            <exception cref="T:System.UriFormatException">
            If the process of resolving the relative resource yielded an
            invalid URI.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If this resource does not support the resolution of relative
            resources (as determined by the value of the
            <see cref="P:Spring.Core.IO.AbstractResource.SupportsRelativeResources"/>
            property).
            </exception>
            <seealso cref="P:Spring.Core.IO.AbstractResource.ResourcePath"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.CalculateResourcePath(System.String)">
            <summary>
            Calculates a new resource path based on the supplied
            <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">
            The relative path to evaluate.
            </param>
            <returns>The newly calculated resource path.</returns>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.BasePathPlaceHolder">
            <summary>
            The special character that denotes the base (home, or root)
            path.
            </summary>
            <remarks>
            <p>
            Will be resolved (by those <see cref="T:Spring.Core.IO.IResource"/>
            implementations that support it) to the home (or root) path for
            the specific <see cref="T:Spring.Core.IO.IResource"/> implementation.
            </p>
            <p>
            For example, in the case of a web application this will (probably)
            resolve to the virtual directory of said web application.
            </p>
            </remarks>
            <seealso cref="F:Spring.Core.IO.AbstractResource.DefaultBasePathPlaceHolder"/>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.InputStream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>
            An <see cref="T:System.IO.Stream"/>.
            </value>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <seealso cref="P:Spring.Core.IO.IInputStreamSource.InputStream"/>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Protocol">
            <summary>
            Returns the protocol associated with this resource (if any).
            </summary>
            <remarks>
            <p>
            The value of this property may be <see langword="null"/> if no
            protocol is associated with the resource type (for example if the
            resource is a memory stream).
            </p>
            </remarks>
            <value>
            The protocol associated with this resource (if any).
            </value>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.IsOpen">
            <summary>
            Does this resource represent a handle with an open stream?
            </summary>
            <remarks>
            <p>
            This, the default implementation, always returns
            <see langword="false"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this resource represents a handle with an
            open stream.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.IsOpen"/>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <seealso cref="P:Spring.Core.IO.IResource.Uri"/>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.File">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <remarks>
            <p>
            This, the default implementation, always throws a
            <see cref="T:System.IO.FileNotFoundException"/>, assuming that the
            resource cannot be resolved to an absolute file path.
            </p>
            </remarks>
            <value>
            The <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.FileNotFoundException">
            This implementation <b>always</b> throws a
            <see cref="T:System.IO.FileNotFoundException"/>.
            </exception>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <see cref="P:Spring.Core.IO.IResource.Exists"/>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Exists">
            <summary>
            Does this resource actually exist in physical form?
            </summary>
            <remarks>
            <p>
            This implementation checks whether a <see cref="T:System.IO.FileInfo"/>
            can be opened, falling back to whether a
            <see cref="T:System.IO.Stream"/> can be opened.
            </p>
            <p>
            This will cover both directories and content resources.
            </p>
            <p>
            This implementation will also return <see langword="false"/> if
            permission to the (file's) path is denied.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this resource actually exists in physical
            form (for example on a filesystem).
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Exists"/>
            <seealso cref="P:Spring.Core.IO.IResource.File"/>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.SupportsRelativeResources">
            <summary>
            Does this <see cref="T:Spring.Core.IO.IResource"/> support relative
            resource retrieval?
            </summary>
            <remarks>
            <p>
            This property is generally to be consulted prior to attempting
            to attempting to access a resource that is relative to this
            resource (via a call to
            <see cref="M:Spring.Core.IO.IResource.CreateRelative(System.String)"/>).
            </p>
            <p>
            This, the default implementation, always returns
            <see langword="false"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Core.IO.IResource"/> supports relative resource
            retrieval.
            </value>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.RootLocation">
            <summary>
            Gets the root location of the resource.
            </summary>
            <remarks>
            <p>
            Where root resource can be taken to mean that part of the resource
            descriptor that doesn't change when a relative resource is looked
            up. Examples of such a root location would include a drive letter,
            a web server name, an assembly name, etc.
            </p>
            </remarks>
            <value>
            The root location of the resource.
            </value>
            <exception cref="T:System.NotSupportedException">
            This, the default implementation, <b>always</b> throws a
            <see cref="T:System.NotSupportedException"/>.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.ResourcePath">
            <summary>
            Gets the current path of the resource.
            </summary>
            <remarks>
            <p>
            An example value of this property would be the name of the
            directory containing a filesystem based resource.
            </p>
            </remarks>
            <value>
            The current path of the resource.
            </value>
            <exception cref="T:System.NotSupportedException">
            This, the default implementation, <b>always</b> throws a
            <see cref="T:System.NotSupportedException"/>.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.PathSeparatorChars">
            <summary>
            Gets those characters that are valid path separators for the
            resource type.
            </summary>
            <remarks>
            <p>
            An example value of this property would be the
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/> and
            <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> values for a
            filesystem based resource.
            </p>
            <p>
            Any derived classes that override this method are expected to
            return a new array for each access of this property.
            </p>
            </remarks>
            <value>
            Those characters that are valid path separators for the resource
            type.
            </value>
            <exception cref="T:System.NotSupportedException">
            This, the default implementation, <b>always</b> throws a
            <see cref="T:System.NotSupportedException"/>.
            </exception>
        </member>
        <member name="T:Spring.Core.IO.AssemblyResource">
            <summary>
            An <see cref="T:Spring.Core.IO.IResource"/> implementation for
            resources stored within assemblies.
            </summary>
            <remarks>
            <p>
            This implementation expects any resource name passed to the
            constructor to adhere to the following format:
            </p>
            <p>
            assembly://<i>assemblyName</i>/<i>namespace</i>/<i>resourceName</i>
            </p>
            </remarks>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Federico Spinazzi (.NET)</author>
        </member>
        <member name="M:Spring.Core.IO.AssemblyResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.AssemblyResource"/> class.
            </summary>
            <param name="resourceName">
            The name of the assembly resource.
            </param>
            <exception cref="T:System.UriFormatException">
            If the supplied <paramref name="resourceName"/> did not conform
            to the expected format.
            </exception>
            <exception cref="T:System.IO.FileLoadException">
            If the assembly specified in the supplied
            <paramref name="resourceName"/> was loaded twice with two
            different evidences.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            If the assembly specified in the supplied
            <paramref name="resourceName"/> could not be found.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            If the caller does not have the required permission to load
            the assembly specified in the supplied
            <paramref name="resourceName"/>.
            </exception>
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
        </member>
        <member name="M:Spring.Core.IO.AssemblyResource.IsRelativeResource(System.String)">
            <summary>
            Does the supplied <paramref name="resourceName"/> relative ?
            </summary>
            <param name="resourceName">
            The name of the resource to test.
            </param>
            <returns>
            <see langword="true"/> if resource name is relative; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.InputStream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>
            An <see cref="T:System.IO.Stream"/>.
            </value>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            If the caller does not have the required permission to load
            the underlying assembly's manifest.
            </exception>
            <seealso cref="T:Spring.Core.IO.IInputStreamSource"/>
            <see cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)"/> 
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.Exists">
            <summary>
            Does the embedded resource specified in the value passed to the
            constructor exist?
            </summary>
            <value>
            <see langword="true"/> if this resource actually exists in physical
            form (for example on a filesystem).
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Exists"/>
            <seealso cref="P:Spring.Core.IO.IResource.File"/>
            <see cref="M:System.Reflection.Assembly.GetManifestResourceNames"/> 
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.SupportsRelativeResources">
            <summary>
            Does this <see cref="T:Spring.Core.IO.IResource"/> support relative
            resource retrieval?
            </summary>
            <remarks>
            <p>
            This implementation does support relative resource retrieval, and
            so will always return <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Core.IO.IResource"/> supports relative resource
            retrieval.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.SupportsRelativeResources"/>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.RootLocation">
            <summary>
            Gets the root location of the resource (the assembly name in this
            case).
            </summary>
            <value>
            The root location of the resource.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.RootLocation"/>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.ResourcePath">
            <summary>
            Gets the current path of the resource (the namespace in which the
            target resource was embedded in this case).
            </summary>
            <value>
            The current path of the resource.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.ResourcePath"/>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.PathSeparatorChars">
            <summary>
            Gets those characters that are valid path separators for the
            resource type.
            </summary>
            <value>
            Those characters that are valid path separators for the resource
            type.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.PathSeparatorChars"/>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <seealso cref="P:Spring.Core.IO.IResource.Uri"/>
        </member>
        <member name="T:Spring.Core.IO.ConfigSectionResource">
            <summary>
            Used when retrieving information from the standard .NET configuration
            files (App.config / Web.config).
            </summary>
            <remarks>
            <p>
            If created with the name of a configuration section, then all methods
            aside from the description return <see langword="null"/>,
            <see langword="false"/>, or throw an exception. If created with an
            <see cref="T:System.Xml.XmlElement"/>, then the
            <see cref="P:Spring.Core.IO.ConfigSectionResource.InputStream"/> property
            will return a corresponding <see cref="T:System.IO.Stream"/> to parse.
            </p>
            </remarks>
            <author>Mark Pollack</author>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Core.IO.ConfigSectionResource.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates new instance of the
            <see cref="T:Spring.Core.IO.ConfigSectionResource"/> class.
            </summary>
            <param name="configSection">
            The actual XML configuration section.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="configSection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Core.IO.ConfigSectionResource.#ctor(System.String)">
            <summary>
            Creates new instance of the
            <see cref="T:Spring.Core.IO.ConfigSectionResource"/> class.
            </summary>
            <param name="resourceName">
            The name of the configuration section.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="resourceName"/> is
            <see langword="null"/> or contains only whitespace character(s).
            </exception>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <remarks>
            <p>
            This implementation always returns <see langword="null"/>.
            </p>
            </remarks>
            <value>
            <see langword="null"/>.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Uri"/>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.File">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <remarks>
            <p>
            This implementation always returns <see langword="null"/>.
            </p>
            </remarks>
            <value>
            <see langword="null"/>.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.File"/>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.Description">
            <summary>
            Returns a description for this resource (the name of the
            configuration section in this case).
            </summary>
            <value>
            A description for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.Exists">
            <summary>
            Does this resource actually exist in physical form?
            </summary>
            <remarks>
            <p>
            This implementation always returns <see langword="false"/>.
            </p>
            </remarks>
            <value>
            <see langword="false"/>
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Exists"/>
            <seealso cref="P:Spring.Core.IO.IResource.File"/>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.InputStream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>
            An <see cref="T:System.IO.Stream"/>.
            </value>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <seealso cref="T:Spring.Core.IO.IInputStreamSource"/>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.ConfigElement">
            <summary>
            Exposes the actual <see cref="T:System.Xml.XmlElement"/> for the
            configuration section.
            </summary>
            <remarks>
            <p>
            Introduced to accomodate line info tracking during parsing.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Core.IO.EncodedResource">
            <summary>
            Holder that combines <see cref="T:Spring.Core.IO.IResource"/> with a specific encoding to be used for reading
            from the resource
            </summary>
            <author>Juergen Hoeller</author>
            <author>Erich Eichinger (.NET)</author>
        </member>
        <member name="M:Spring.Core.IO.EncodedResource.#ctor(Spring.Core.IO.IResource)">
            <summary>
            Create an encoded resource, autodetecting the encoding from the resource stream.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Spring.Core.IO.EncodedResource.#ctor(Spring.Core.IO.IResource,System.Boolean)">
            <summary>
            Create an encoded resource, autodetecting the encoding from the resource stream.
            </summary>
            <param name="resource">the resource to read from. Must not be <c>null</c></param>
            <param name="autoDetectEncoding">whether to autoDetect encoding from byte-order marks (<see cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)"/>)</param>
        </member>
        <member name="M:Spring.Core.IO.EncodedResource.#ctor(Spring.Core.IO.IResource,System.Text.Encoding,System.Boolean)">
            <summary>
            Create an encoded resource using the specified encoding.
            </summary>
            <param name="resource">the resource to read from. Must not be <c>null</c></param>
            <param name="encoding">the encoding to use. If <c>null</c>, encoding will be autodetected.</param>
            <param name="autoDetectEncoding">whether to autoDetect encoding from byte-order marks (<see cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)"/>)</param>
        </member>
        <member name="M:Spring.Core.IO.EncodedResource.OpenReader">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Core.IO.EncodedResource.Equals(System.Object)">
            <summary>
            Determine whether <paramref name="obj"/> equals this instance.
            </summary>
            <returns>
            <c>true</c> if obj is an <see cref="T:Spring.Core.IO.EncodedResource"/> and both
            , <see cref="P:Spring.Core.IO.EncodedResource.Resource"/> and <see cref="P:Spring.Core.IO.EncodedResource.Encoding"/> are equal.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.EncodedResource.GetHashCode">
            <summary>
            Calculate the unique hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Core.IO.EncodedResource.ToString">
            <summary>
            Get a textual description of the resource.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.EncodedResource.Resource">
            <summary>
            Get the underlying resource
            </summary>
        </member>
        <member name="P:Spring.Core.IO.EncodedResource.Encoding">
            <summary>
            Get the encoding to use for reading, if any. May be <c>null</c>
            </summary>
        </member>
        <member name="P:Spring.Core.IO.EncodedResource.AutoDetectEncoding">
            <summary>
            whether to autoDetect encoding from byte-order marks (<see cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)"/>)
            </summary>
        </member>
        <member name="T:Spring.Core.IO.FileSystemResource">
            <summary>
            A <see cref="T:System.IO.File"/> backed resource.
            </summary>
            <remarks>
            <p>
            Supports resolution as both a <see cref="T:System.IO.FileInfo"/> and a
            <see cref="T:System.Uri"/>.
            </p>
            <p>
            Also supports the use of the <c>~</c> character. If the <c>~</c> character
            is the first character in a resource path (sans protocol), the <c>~</c>
            character will be replaced with the value of the
            <c>System.AppDomain.CurrentDomain.BaseDirectory</c> property (an example of
            this can be seen in the examples below).
            </p>
            </remarks>
            <example>
            <p>
            Consider the example of an application that is running (has been launched
            from) the <c>C:\App\</c> directory. The following resource paths will map
            to the following resources on the filesystem...
            </p>
            <code escaped="true">
                strings.txt              C:\App\strings.txt
                ~/strings.txt            C:\App\strings.txt
                file://~/strings.txt     C:\App\strings.txt
                file://~/../strings.txt  C:\strings.txt
                ../strings.txt           C:\strings.txt
                ~/../strings.txt         C:\strings.txt
                
                // note that only a leading ~ character is resolved to the executing directory...
                stri~ngs.txt              C:\App\stri~ngs.txt
            </code>
            </example>
            <author>Juergen Hoeller</author>
            <author>Leonardo Susatyo (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.FileSystemResource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Core.IO.FileSystemResource"/> class.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="resourceName"/> is
            <see langword="null"/> or contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Core.IO.FileSystemResource"/> class.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <param name="suppressInitialize">
            Supresses initialization of this instance. Used from derived classes.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="resourceName"/> is
            <see langword="null"/> or contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.Initialize(System.String)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.ResolveFileHandle(System.String)">
            <summary>
            Resolves the <see cref="T:System.IO.FileInfo"/> handle 
            for the supplied <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <returns>
            The <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.ResolveRootLocation(System.String)">
            <summary>
            Resolves the root location for the supplied <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <returns>
            The root location of the resource.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.ResolveResourcePath(System.String)">
            <summary>
            Resolves the path for the supplied <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <returns>
            The current path of the resource.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.ResolveBasePathPlaceHolder(System.String,System.String)">
            <summary>
            Resolves the presence of the
            <paramref name="basePathPlaceHolder"/> value
            in the supplied <paramref name="resourceName"/> into a path.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <param name="basePathPlaceHolder">
            The string that is a placeholder for a base path.
            </param>
            <returns>
            The name of the resource with any <paramref name="basePathPlaceHolder"/>
            value having been resolved into an actual path.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.IsRelativeResource(System.String)">
            <summary>
            Does the supplied <paramref name="resourceName"/> relative ?
            </summary>
            <param name="resourceName">
            The name of the resource to test.
            </param>
            <returns>
            <see langword="true"/> if resource name is relative; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.File">
            <summary>
            Returns the underlying <see cref="T:System.IO.FileInfo"/> handle for
            this resource.
            </summary>
            <value>
            The <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.File"/>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.SupportsRelativeResources">
            <summary>
            Does this <see cref="T:Spring.Core.IO.IResource"/> support relative
            resource retrieval?
            </summary>
            <remarks>
            <p>
            This implementation does support relative resource retrieval, and
            so will always return <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Core.IO.IResource"/> supports relative resource
            retrieval.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.SupportsRelativeResources"/>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.RootLocation">
            <summary>
            Gets the root location of the resource (a drive or UNC file share
            name in this case).
            </summary>
            <value>
            The root location of the resource.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.RootLocation"/>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.ResourcePath">
            <summary>
            Gets the current path of the resource.
            </summary>
            <value>
            The current path of the resource.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.ResourcePath"/>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.PathSeparatorChars">
            <summary>
            Gets those characters that are valid path separators for the
            resource type.
            </summary>
            <value>
            Those characters that are valid path separators for the resource
            type.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.PathSeparatorChars"/>
            <seealso cref="T:System.IO.Path"/>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.InputStream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>
            An <see cref="T:System.IO.Stream"/>.
            </value>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            If the underlying file could not be found.
            </exception>
            <seealso cref="T:Spring.Core.IO.IInputStreamSource"/>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value>
            The <see cref="T:System.Uri"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.IOException">
            If the resource is not available or cannot be exposed as a
            <see cref="T:System.Uri"/>.
            </exception>
            <seealso cref="P:Spring.Core.IO.IResource.Uri"/>
        </member>
        <member name="T:Spring.Core.IO.InputStreamResource">
            <summary>
            <see cref="T:Spring.Core.IO.IResource"/> adapter implementation for a
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <p>
            Should only be used if no other <see cref="T:Spring.Core.IO.IResource"/>
            implementation is applicable.
            </p>
            <p>
            In contrast to other <see cref="T:Spring.Core.IO.IResource"/>
            implementations, this is an adapter for an <i>already opened</i>
            resource - the <see cref="P:Spring.Core.IO.InputStreamResource.IsOpen"/>
            therefore always returns <see langword="true"/>. Do not use this class
            if you need to keep the resource descriptor somewhere, or if you need
            to read a stream multiple times.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Core.IO.InputStreamResource.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.InputStreamResource"/> class.
            </summary>
            <param name="inputStream">
            The input <see cref="T:System.IO.Stream"/> to use.
            </param>
            <param name="description">
            Where the input <see cref="T:System.IO.Stream"/> comes from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="inputStream"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.InputStream">
            <summary>
            The input <see cref="T:System.IO.Stream"/> to use.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the underlying <see cref="T:System.IO.Stream"/> has already
            been read.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.IsOpen">
            <summary>
            This implementation always returns true
            </summary>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.Exists">
            <summary>
            This implemementation always returns true
            </summary>
        </member>
        <member name="T:Spring.Core.IO.ResourceConverter">
            <summary>
            Custom type converter for <see cref="T:Spring.Core.IO.IResource"/> instances.
            </summary>
            <remarks>
            <p>
            A resource path may contain placeholder variables of the form <c>${...}</c>
            that will be expended to <b>environment variables</b>.
            </p>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/>
            instance.
            </p>
            </remarks>
            <example>
            <p>
            On Win9x boxes, this resource path, <c>${userprofile}\objects.xml</c> will
            be expanded at runtime with the value of the <c>'userprofile'</c> environment
            variable substituted for the <c>'${userprofile}'</c> portion of the path.
            </p>
            <code escaped="true">
            // assuming a user called Rick, running on a plain vanilla Windows XP setup...
            // this resource path...
            
            ${userprofile}\objects.xml
            
            // will become (after expansion)...
            
            C:\Documents and Settings\Rick\objects.xml
            </code>
            </example>
            <author>Mark Pollack</author>
            <seealso cref="T:Spring.Core.IO.IResourceLoader"/>
            <seealso cref="T:System.ComponentModel.TypeConverter"/>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.ResourceConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.#ctor(Spring.Core.IO.IResourceLoader)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.ResourceConverter"/> class using the specified resourceLoader.
            </summary>
            <param name="resourceLoader">the underlying IResourceLoader to be used to resolve resources</param>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:Spring.Core.IO.IResource"/>
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>
            <see langword="true"/> if the conversion is possible.
            </returns>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a
            <see cref="T:Spring.Core.IO.IResource"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            An <see cref="T:Spring.Core.IO.IResource"/> if successful. 
            </returns>
            <exception cref="T:System.UriFormatException">
            If the resource name objectained form the supplied
            <paramref name="value"/> is malformed.
            </exception>
            <exception cref="T:System.Exception">
            In the case of any errors arising from the instantiation of the
            returned <see cref="T:Spring.Core.IO.IResource"/> instance.
            </exception>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.ResolvePath(System.String)">
            <summary>
            Resolve the given path, replacing placeholder values with
            corresponding property values if necessary.
            </summary>
            <remarks>
            <p>
            This implementation resolves environment variables only.
            </p>
            </remarks>
            <param name="path">The original resource path.</param>
            <returns>The resolved resource path.</returns>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.GetResourceLoader">
            <summary>
            Return the <see cref="T:Spring.Core.IO.IResourceLoader"/> used to
            resolve the string.
            </summary>
            <returns>
            The <see cref="T:Spring.Core.IO.IResourceLoader"/> used to resolve
            the string.
            </returns>
        </member>
        <member name="T:Spring.Core.IO.ResourceHandlerRegistry">
            <summary>
            Registry class that allows users to register and retrieve protocol handlers.
            </summary>
            <remarks>
            <para>
            Resource handler is an implementation of <see cref="T:Spring.Core.IO.IResource"/> interface
            that should be used to process resources with the specified protocol.
            </para>
            <para>
            They are used throughout the framework to access resources from various 
            sources. For example, application context loads object definitions from the resources
            that are processed using one of the registered resource handlers.
            </para>
            <para>Following resource handlers are registered by default:</para>
            <list type="table">
                <listheader>
                    <term>Protocol</term>
                    <term>Handler Type</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <description>config</description>
                    <description><see cref="T:Spring.Core.IO.ConfigSectionResource"/></description>
                    <description>Resolves the resources by loading specified configuration section from the standard .NET config file.</description>
                </item>
                <item>
                    <description>file</description>
                    <description><see cref="T:Spring.Core.IO.FileSystemResource"/></description>
                    <description>Resolves filesystem resources.</description>
                </item>
                <item>
                    <description>http</description>
                    <description><see cref="T:Spring.Core.IO.UrlResource"/></description>
                    <description>Resolves remote web resources.</description>
                </item>
                <item>
                    <description>https</description>
                    <description><see cref="T:Spring.Core.IO.UrlResource"/></description>
                    <description>Resolves remote web resources via HTTPS.</description>
                </item>
                <item>
                    <description>ftp</description>
                    <description><see cref="T:Spring.Core.IO.UrlResource"/></description>
                    <description>Resolves ftp resources.</description>
                </item>
                <item>
                    <description>assembly</description>
                    <description><see cref="T:Spring.Core.IO.AssemblyResource"/></description>
                    <description>Resolves resources that are embedded into an assembly.</description>
                </item>
                <item>
                    <description>web</description>
                    <description><c>Spring.Core.IO.WebResource, Spring.Web</c>*</description>
                    <description>Resolves resources relative to the web application's virtual directory.</description>
                </item>
            </list>
            * only available in web applications.
            <para>
            Users can create and register their own protocol handlers by implementing <see cref="T:Spring.Core.IO.IResource"/> interface
            and mapping custom protocol name to that implementation. See <see cref="T:Spring.Context.Support.ResourceHandlersSectionHandler"/> for details
            on how to register custom protocol handler.
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Core.IO.ResourceHandlerRegistry.ResourcesSectionName">
            <summary>
            Name of the .Net config section that contains definitions 
            for custom resource handlers.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ResourceHandlerRegistry.#cctor">
            <summary>
            Registers standard and user-configured resource handlers.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ResourceHandlerRegistry.GetResourceHandler(System.String)">
            <summary>
            Returns resource handler for the specified protocol name.
            </summary>
            <remarks>
            <para>
            This method returns <see cref="T:System.Reflection.ConstructorInfo"/> object that should be used
            to create an instance of the <see cref="T:Spring.Core.IO.IResource"/>-derived type by passing
            resource location as a parameter.
            </para>
            </remarks>
            <param name="protocolName">Name of the protocol to get the handler for.</param>
            <returns>Resource handler constructor for the specified protocol name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="protocolName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spring.Core.IO.ResourceHandlerRegistry.IsHandlerRegistered(System.String)">
            <summary>
            Returns <c>true</c> if a handler is registered for the specified protocol, 
            <c>false</c> otherwise.
            </summary>
            <param name="protocolName">Name of the protocol.</param>
            <returns>
                <c>true</c> if a handler is registered for the specified protocol, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="protocolName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spring.Core.IO.ResourceHandlerRegistry.RegisterResourceHandler(System.String,System.String)">
            <summary>
            Registers resource handler and maps it to the specified protocol name.
            </summary>
            <remarks>
            <p>
            If the mapping already exists, the existing mapping will be
            silently overwritten with the new mapping.
            </p>
            </remarks>
            <param name="protocolName">
            The protocol to add (or override).
            </param>
            <param name="handlerTypeName">
            The type name of the concrete implementation of the
            <see cref="T:Spring.Core.IO.IResource"/> interface that will handle
            the specified protocol.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="protocolName"/> is
            <see langword="null"/> or contains only whitespace character(s); or
            if the supplied <paramref name="handlerTypeName"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="handlerTypeName"/> is not a 
            <see cref="T:System.Type"/> that derives from the
            <see cref="T:Spring.Core.IO.IResource"/> interface; or (having passed
            this first check), the supplied <paramref name="handlerTypeName"/>
            does not expose a constructor that takes a single
            <see cref="T:System.String"/> parameter.
            </exception>
        </member>
        <member name="M:Spring.Core.IO.ResourceHandlerRegistry.RegisterResourceHandler(System.String,System.Type)">
            <summary>
            Registers resource handler and maps it to the specified protocol name.
            </summary>
            <remarks>
            <p>
            If the mapping already exists, the existing mapping will be
            silently overwritten with the new mapping.
            </p>
            </remarks>
            <param name="protocolName">
            The protocol to add (or override).
            </param>
            <param name="handlerType">
            The concrete implementation of the
            <see cref="T:Spring.Core.IO.IResource"/> interface that will handle
            the specified protocol.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="protocolName"/> is
            <see langword="null"/> or contains only whitespace character(s); or
            if the supplied <paramref name="handlerType"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="handlerType"/> is not a 
            <see cref="T:System.Type"/> that derives from the
            <see cref="T:Spring.Core.IO.IResource"/> interface; or (having passed
            this first check), the supplied <paramref name="handlerType"/>
            does not expose a constructor that takes a single
            <see cref="T:System.String"/> parameter.
            </exception>
        </member>
        <member name="T:Spring.Core.IO.ResourceHandlerRegistry.TolerantUriParser">
            <summary>
            Allows to create any arbitrary Url format
            </summary>
        </member>
        <member name="T:Spring.Core.IO.StringResource">
            <summary>
            A <see cref="T:Spring.Core.IO.IResource"/> adapter implementation encapsulating a simple string.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Core.IO.StringResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.StringResource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.StringResource.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.StringResource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.StringResource.#ctor(System.String,System.Text.Encoding,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.StringResource"/> class.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.StringResource.InputStream">
            <summary>
            Get the <see cref="T:System.IO.Stream"/> to 
            for accessing this resource.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.StringResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="P:Spring.Core.IO.StringResource.IsOpen">
            <summary>
            This implementation always returns true
            </summary>
        </member>
        <member name="P:Spring.Core.IO.StringResource.Exists">
            <summary>
            This implemementation always returns true
            </summary>
        </member>
        <member name="P:Spring.Core.IO.StringResource.Encoding">
            <summary>
            Gets the encoding used to create a byte stream of the <see cref="P:Spring.Core.IO.StringResource.Content"/> string.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.StringResource.Content">
            <summary>
            Gets the content encapsulated by this <see cref="T:Spring.Core.IO.StringResource"/>.
            </summary>
        </member>
        <member name="T:Spring.Core.IO.UrlResource">
            <summary>
            A <see cref="T:System.Uri"/> backed resource 
            on top of <see cref="T:System.Net.WebRequest"/>
            </summary>
            <remarks>
            <p>
            Obviously supports resolution as a <see cref="T:System.Uri"/>, and also
            as a <see cref="T:System.IO.FileInfo"/> in the case of the <c>"file:"</c>
            protocol.
            </p>
            </remarks>
            <example>
            <p>
            Some examples of the strings that can be used to initialize a new
            instance of the <see cref="T:Spring.Core.IO.UrlResource"/> class
            include...
            <list type="bullet">
            <item>
            <description>file:///Config/objects.xml</description>
            </item>
            <item>
            <description>http://www.mycompany.com/services.txt</description>
            </item>
            </list>
            </p>
            </example>
            <author>Juergen Hoeller</author>
            <author>Leonardo Susatyo (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <seealso cref="T:Spring.Core.IO.IResource"/>
            <seealso cref="T:Spring.Core.IO.IResourceLoader"/>
            <seealso cref="T:Spring.Core.IO.ConfigurableResourceLoader"/>
        </member>
        <member name="M:Spring.Core.IO.UrlResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.UrlResource"/> class.
            </summary>
            <example>
            <p>
            Some examples of the values that the <paramref name="resourceName"/>
            can typically be expected to hold include...
            <list type="bullet">
            <item>
            <description>file:///Config/objects.xml</description>
            </item>
            <item>
            <description>http://www.mycompany.com/services.txt</description>
            </item>
            </list>
            </p>
            </example>
            <param name="resourceName">
            A string representation of the <see cref="T:System.Uri"/> resource.
            </param>
        </member>
        <member name="M:Spring.Core.IO.UrlResource.IsRelativeResource(System.String)">
            <summary>
            Does the supplied <paramref name="resourceName"/> relative ?
            </summary>
            <param name="resourceName">
            The name of the resource to test.
            </param>
            <returns>
            <see langword="true"/> if resource name is relative; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.WebRequest">
            <summary>
            Returns the <see cref="T:System.Net.WebRequest"/> instance 
            used for the resource resolution.
            </summary>
            <value>
            A <see cref="T:System.Net.WebRequest"/> instance.
            </value>
            <seealso cref="T:System.Net.HttpWebRequest"/>
            <seealso cref="T:System.Net.FileWebRequest"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.InputStream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>
            An <see cref="T:System.IO.Stream"/>.
            </value>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <seealso cref="T:Spring.Core.IO.IInputStreamSource"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value>
            The <see cref="T:System.Uri"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.IOException">
            If the resource is not available or cannot be exposed as a
            <see cref="T:System.Uri"/>.
            </exception>
            <seealso cref="P:Spring.Core.IO.IResource.Uri"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.File">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <value>
            The <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.FileNotFoundException">
            If the resource is not available on a filesystem.
            </exception>
            <seealso cref="P:Spring.Core.IO.IResource.File"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.SupportsRelativeResources">
            <summary>
            Does this <see cref="T:Spring.Core.IO.IResource"/> support relative
            resource retrieval?
            </summary>
            <remarks>
            <p>
            This implementation does support relative resource retrieval, and
            so will always return <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if this
            <see cref="T:Spring.Core.IO.IResource"/> supports relative resource
            retrieval.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.SupportsRelativeResources"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.RootLocation">
            <summary>
            Gets the root location of the resource.
            </summary>
            <value>
            The root location of the resource.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.RootLocation"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.ResourcePath">
            <summary>
            Gets the current path of the resource.
            </summary>
            <value>
            The current path of the resource.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.ResourcePath"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.PathSeparatorChars">
            <summary>
            Gets those characters that are valid path separators for the
            resource type.
            </summary>
            <value>
            Those characters that are valid path separators for the resource
            type.
            </value>
            <seealso cref="P:Spring.Core.IO.AbstractResource.PathSeparatorChars"/>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
            <seealso cref="P:Spring.Core.IO.IResource.Description"/>
        </member>
        <member name="T:Spring.Core.TypeConversion.CredentialConverter">
            <summary>
            Converts string representation of a credential for Web client authentication 
            into an instance of <see cref="T:System.Net.NetworkCredential"/>.
            </summary>
            <example>
            <p>
            Find below some examples of the XML formatted strings that this
            converter will sucessfully convert.
            </p>
            <code escaped="true">
            <property name="credentials" value="Spring\bbaia:sprnet"/>
            </code>
            <code escaped="true">
            <property name="credentials" value="bbaia:sprnet"/>
            </code>
            </example>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.CredentialConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from the sourcetype 
            to a <see cref="T:System.Net.NetworkCredential"/> instance ?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.CredentialConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a <see cref="T:System.String"/> value to an
            <see cref="T:System.Net.NetworkCredential"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture.
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Net.NetworkCredential"/> instance if successful.
            </returns>        
        </member>
        <member name="T:Spring.Core.TypeConversion.CustomNumberConverter">
            <summary>
            A custom <see cref="T:System.ComponentModel.TypeConverter"/> for any
            primitive numeric type such as <see cref="T:System.Int32"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, etc.
            </summary>
            <remarks>
            <p>
            Can use a given <see cref="T:System.Globalization.NumberFormatInfo"/> for
            (locale-specific) parsing and rendering.
            </p>
            <p>
            This is not meant to be used as a system
            <see cref="T:System.ComponentModel.TypeConverter"/> but rather as a
            locale-specific number converter within custom controller code, to
            parse user-entered number strings into number properties of objects,
            and render them in a UI form.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.CustomNumberConverter.#ctor(System.Type,System.Globalization.NumberFormatInfo,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.TypeConversion.CustomNumberConverter"/>
            class.
            </summary>
            <param name="type">
            The primitive numeric <see cref="T:System.Type"/> to convert to.
            </param>
            <param name="format">
            The <see cref="T:System.Globalization.NumberFormatInfo"/> to use for
            (locale-specific) parsing and rendering
            </param>
            <param name="allowEmpty">
            Is an empty string allowed to be converted? If
            <see langword="true"/>, an empty string value will be converted to
            numeric 0.</param>
            <exception cref="T:System.ArgumentException">
            Id the supplied <paramref name="type"/> is not a primitive
            <see cref="T:System.Type"/>.
            </exception>
            <seealso cref="P:System.Type.IsPrimitive"/>
        </member>
        <member name="M:Spring.Core.TypeConversion.CustomNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>
            <see langword="true"/> if the conversion is possible.
            </returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.CustomNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object (a string) to the required primitive
            type.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="val">
            The value that is to be converted.
            </param>
            <returns>A primitive representation of the string value.</returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.FileInfoConverter">
            <summary>
            Converter for <see cref="T:System.IO.FileInfo"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.FileInfoConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.TypeConversion.FileInfoConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.FileInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.FileInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.IO.FileInfo"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.IO.FileInfo"/> if successful. 
            </returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.NameValueConverter">
            <summary>
            Custom <see cref="T:System.ComponentModel.TypeConverter"/> implementation for
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> objects.
            </summary>
            <remarks>
            <p>
            Handles conversion from an <b>XML formatted string</b> to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> object
            (see below for an example of the expected XML format).
            </p>
            <p>
            This converter must be registered before it will be available. Standard
            converters in this namespace are automatically registered by the
            <see cref="T:Spring.Objects.ObjectWrapper"/> class.
            </p>
            </remarks>
            <example>
            <p>
            Find below some examples of the XML formatted strings that this
            converter will sucessfully convert. Note that the name of the top level
            (document) element is quite arbitrary... it is only the content that
            matters (and which must be in the format
            <c>&lt;add key="..." value="..."/&gt;</c>. For your continued sanity
            though, you may wish to standardize on the top level name of
            <c>'dictionary'</c> (although you are of course free to not do so).
            </p>
            <code escaped="true">
            <dictionary>
            	<add key="host" value="localhost"/>
            	<add key="port" value="8080"/>
            </dictionary>
            </code>
            <p>
            The following example uses a different top level (document) element
            name, but is equivalent to the first example.
            </p>
            <code escaped="true">
            <web-configuration-parameters>
            	<add key="host" value="localhost"/>
            	<add key="port" value="8080"/>
            </web-configuration-parameters>
            </code>
            </example>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.NameValueConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.TypeConversion.NameValueConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.NameValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from an
            <b>XML formatted</b> <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.NameValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            if successful. 
            </returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.RegexConverter">
            <summary>
            Converts string representation of a regular expression into an instance of <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.RegexConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from the sourcetype to a <see cref="T:System.Text.RegularExpressions.Regex"/>?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.RegexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a <see cref="T:System.String"/> value to an
            <see cref="T:System.Text.RegularExpressions.Regex"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture.
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Text.RegularExpressions.Regex"/> if successful.
            </returns>        
        </member>
        <member name="T:Spring.Core.TypeConversion.RegistryKeyConverter">
            <summary>
            Converts string representation of the registry key
            into <see cref="T:Microsoft.Win32.RegistryKey"/> instance.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.RegistryKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from a the sourcetype to a <see cref="T:Microsoft.Win32.RegistryKey"/>?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.RegistryKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a <see cref="T:System.String"/> value to an
            <see cref="T:Microsoft.Win32.RegistryKey"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture.
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.String"/> array if successful.
            </returns>        
        </member>
        <member name="M:Spring.Core.TypeConversion.RegistryKeyConverter.GetPartialKeyName(System.String[],System.Int32)">
            <summary>
            Generates partial registry key name.
            </summary>
            <param name="keys">
            Key elements.
            </param>
            <param name="index">
            Index of the last element to use.
            </param>
            <returns>
            Friendly key name containing key element from 
            0 to <paramref name="index"/>, inclusive.
            </returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.RegistryKeyConverter.GetRootKey(System.String)">
            <summary>
            Returns <see cref="T:Microsoft.Win32.RegistryKey"/> for the specified
            root hive name.
            </summary>
            <param name="name">
            Root hive name.
            </param>
            <returns>
            Registry key for the specified name.
            </returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.ResourceManagerConverter">
            <summary>
            Converts a two part string, (resource name, assembly name)
            to a ResourceManager instance.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeConversion.ResourceManagerConverter.APP_GLOBALRESOURCES_ASSEMBLYNAME">
            <summary>
            This constant represents the name of the folder/assembly containing global resources.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.ResourceManagerConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.TypeConversion.ResourceManagerConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.ResourceManagerConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a
            <see cref="T:System.Resources.ResourceManager"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.ResourceManagerConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a
            <see cref="T:System.Resources.ResourceManager"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Resources.ResourceManager"/>
            if successful. 
            </returns>
            <exception cref="T:System.ArgumentException">If the specified <paramref name="value"/> does not denote a valid resource</exception>
        </member>
        <member name="T:Spring.Core.TypeConversion.RGBColorConverter">
            <summary>
            Converter for <see cref="T:System.Drawing.Color"/> from a comma separated
            list of RBG values.
            </summary>
            <remarks>
            <p>
            Please note that this class does <b>not</b> implement converting
            to a comma separated list of RBG values from a
            <see cref="T:System.Drawing.Color"/>.
            </p>
            </remarks>
            <author>Federico Spinazzi</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.RGBColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a 
            <see cref="T:System.Drawing.Color"/>.
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.RGBColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object (a string) a <see cref="T:System.Drawing.Color"/>
            instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture: currently ignored.
            </param>
            <param name="value">
            The value that is to be converted, in "R,G,B", "A,R,G,B", or 
            symbolic color name (<see cref="T:System.Drawing.KnownColor"/>).
            </param>
            <returns>
            A <see cref="T:System.Drawing.Color"/> representation of the string value.
            </returns>
            <exception cref="T:System.FormatException">
            If the input string is not in a supported format, or is not one of the
            predefined system colors (<see cref="T:System.Drawing.KnownColor"/>).
            </exception>
        </member>
        <member name="T:Spring.Core.TypeConversion.RuntimeTypeConverter">
            <summary>
            A custom <see cref="T:System.ComponentModel.TypeConverter"/> for
            runtime type references.
            </summary>
            <remarks>
            <p>
            Currently only supports conversion to and from a
            <see cref="T:System.String"/>.
            </p>
            </remarks>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.RuntimeTypeConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.TypeConversion.RuntimeTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.RuntimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to the <see cref="T:System.Type"/>
            of this converter.
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.RuntimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified
            <see cref="T:System.Type"/>.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert to.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.RuntimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.RuntimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type,
            using the specified context and culture information.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the
            <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.StreamConverter">
            <summary>
            Converter for <see cref="T:System.IO.Stream"/> to directly set a
            <see cref="T:System.IO.Stream"/> property.
            </summary>
            <author>Jurgen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.StreamConverter.#ctor">
            <summary>
            Create a new StreamConverter using the default
            <see cref="T:Spring.Core.IO.ResourceConverter"/>.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.StreamConverter.#ctor(Spring.Core.IO.ResourceConverter)">
            <summary>
            Create a new StreamConverter using the given
            <see cref="T:Spring.Core.IO.ResourceConverter"/>.
            </summary>
            <param name="resourceConverter">
            The <see cref="T:Spring.Core.IO.ResourceConverter"/> to use.</param>
        </member>
        <member name="M:Spring.Core.TypeConversion.StreamConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.Stream"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.StreamConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.IO.Stream"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="val">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.IO.Stream"/> if successful. 
            </returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.StringArrayConverter">
             <summary>
             Converts a separated <see cref="T:System.String"/> to a <see cref="T:System.String"/>
             array.
             </summary>
             <remarks>
             <p>
             Defaults to using the <c>,</c> (comma) as the list separator. Note that the value
             of the current <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is
             <b>not</b> used.
             </p>
             <p>
             If you want to provide your own list separator, you can set the value of the
             <see cref="P:Spring.Core.TypeConversion.StringArrayConverter.ListSeparator"/>
             property to the value that you want. Please note that this value will be used
             for <i>all</i> future conversions in preference to the default list separator.
             </p>
             <p>
             Please note that the individual elements of a string will be passed
             through <i>as is</i> (i.e. no conversion or trimming of surrounding
             whitespace will be performed).
             </p>
             <p>
             This <see cref="T:System.ComponentModel.TypeConverter"/> should be
             automatically registered with any <see cref="T:Spring.Objects.IObjectWrapper"/>
             implementations.
             </p>
             </remarks>
             <example>
             <code language="C#">
             public class StringArrayConverterExample 
             {     
                 public static void Main()
                 {
                     StringArrayConverter converter = new StringArrayConverter();
            			
            			string csvWords = "This,Is,It";
            			string[] frankBoothWords = converter.ConvertFrom(csvWords);
            
            			// the 'frankBoothWords' array will have 3 elements, namely
            			// "This", "Is", "It".
            			
            			// please note that extraneous whitespace is NOT trimmed off
            			// in the current implementation...
            			string csv = "  Cogito ,ergo ,sum ";
            			string[] descartesWords = converter.ConvertFrom(csv);
            			
            			// the 'descartesWords' array will have 3 elements, namely
            			// "  Cogito ", "ergo ", "sum ".
            			// notice how the whitespace has NOT been trimmed.
                 }
             }
             </code>
             </example>
             <author></author>
        </member>
        <member name="M:Spring.Core.TypeConversion.StringArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from a the sourcetype to a <see cref="T:System.String"/> array?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.StringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a <see cref="T:System.String"/> value to a
            <see cref="T:System.String"/> array.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture.
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.String"/> array if successful.
            </returns>        
        </member>
        <member name="P:Spring.Core.TypeConversion.StringArrayConverter.ListSeparator">
            <summary>
            The value that will be used as the list separator when performing
            conversions.
            </summary>
            <value>
            A 'single' string character that will be used as the list separator
            when performing conversions.
            </value>
            <exception cref="T:System.ArgumentException">
            If the supplied value is not <cref lang="null"/> and is an empty
            string, or has more than one character.
            </exception>
        </member>
        <member name="T:Spring.Core.TypeConversion.SpecifierParser">
            <summary>
            Base parser for <see cref="T:Spring.Core.TypeConversion.TimeSpanConverter"/> custom specifiers.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.SpecifierParser.Parse(System.Int32)">
            <summary>
            Convert int value to a Timespan based on the specifier
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.SpecifierParser.Match(System.String)">
            <summary>
            Check if the string contains the specifier and 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.Core.TypeConversion.SpecifierParser.Specifier">
            <summary>
            Specifier
            </summary>
        </member>
        <member name="T:Spring.Core.TypeConversion.DaySpecifier">
            <summary>
            Recognize 10d as ten days
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.DaySpecifier.Parse(System.Int32)">
            <summary>
            Parse value as days
            </summary>
            <param name="value">Timespan in days</param>
            <returns></returns>
        </member>
        <member name="P:Spring.Core.TypeConversion.DaySpecifier.Specifier">
            <summary>
            Day specifier: d
            </summary>
        </member>
        <member name="T:Spring.Core.TypeConversion.HourSpecifier">
            <summary>
            Recognize 10h as ten hours
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.HourSpecifier.Parse(System.Int32)">
            <summary>
            Parse value as hours
            </summary>
            <param name="value">Timespan in hours</param>
            <returns></returns>
        </member>
        <member name="P:Spring.Core.TypeConversion.HourSpecifier.Specifier">
            <summary>
            Hour specifier: h
            </summary>
        </member>
        <member name="T:Spring.Core.TypeConversion.MinuteSpecifier">
            <summary>
            Recognize 10m as ten minutes
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.MinuteSpecifier.Parse(System.Int32)">
            <summary>
            Parse value as minutes
            </summary>
            <param name="value">Timespan in minutes</param>
            <returns></returns>
        </member>
        <member name="P:Spring.Core.TypeConversion.MinuteSpecifier.Specifier">
            <summary>
            Minute specifier: m
            </summary>
        </member>
        <member name="T:Spring.Core.TypeConversion.SecondSpecifier">
            <summary>
            Recognize 10s as ten seconds
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.SecondSpecifier.Parse(System.Int32)">
            <summary>
            Parse value as seconds
            </summary>
            <param name="value">Timespan in seconds</param>
            <returns></returns>
        </member>
        <member name="P:Spring.Core.TypeConversion.SecondSpecifier.Specifier">
            <summary>
            Second specifier: s
            </summary>
        </member>
        <member name="T:Spring.Core.TypeConversion.MillisecondSpecifier">
            <summary>
            Recognize 10ms as ten milliseconds
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.MillisecondSpecifier.Parse(System.Int32)">
            <summary>
            Parse value as milliseconds
            </summary>
            <param name="value">Timespan in milliseconds</param>
            <returns></returns>
        </member>
        <member name="P:Spring.Core.TypeConversion.MillisecondSpecifier.Specifier">
            <summary>
            Millisecond specifier: ms
            </summary>
        </member>
        <member name="T:Spring.Core.TypeConversion.TimeSpanConverter">
            <summary>
            Converter for <see cref="T:System.TimeSpan"/> instances.
            </summary>
            <author>Bruno Baia</author>
            <author>Roberto Paterlini</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.TimeSpanConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.TypeConversion.TimeSpanConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.TimeSpan"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.TimeSpan"/> if successful. 
            </returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.TypeConversionUtils">
            <summary>
            Utility methods that are used to convert objects from one type into another.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.TypeConversionUtils.ConvertValueIfNecessary(System.Type,System.Object,System.String)">
            <summary>
            Convert the value to the required <see cref="T:System.Type"/> (if necessary from a string).
            </summary>
            <param name="newValue">The proposed change value.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> we must convert to.
            </param>
            <param name="propertyName">Property name, used for error reporting purposes...</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If there is an internal error.
            </exception>
            <returns>The new value, possibly the result of type conversion.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.TypeConversionUtils.CreatePropertyChangeEventArgs(System.String,System.Object,System.Object)">
            <summary>
            Utility method to create a property change event.
            </summary>
            <param name="fullPropertyName">
            The full name of the property that has changed.
            </param>
            <param name="oldValue">The property old value</param>
            <param name="newValue">The property new value</param>
            <returns>
            A new <see cref="T:Spring.Core.PropertyChangeEventArgs"/>.
            </returns>
        </member>
        <member name="T:Spring.Core.TypeConversion.TypeConverterRegistry">
            <summary>
            Registry class that allows users to register and retrieve type converters.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Core.TypeConversion.TypeConverterRegistry.TypeConvertersSectionName">
            <summary>
            Name of the .Net config section that contains Spring.Net type aliases.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.TypeConverterRegistry.#cctor">
            <summary>
            Registers standard and configured type converters.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.TypeConverterRegistry.GetConverter(System.Type)">
            <summary>
            Returns <see cref="T:System.ComponentModel.TypeConverter"/> for the specified type.
            </summary>
            <param name="type">Type to get the converter for.</param>
            <returns>a type converter for the specified type.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spring.Core.TypeConversion.TypeConverterRegistry.RegisterConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Registers <see cref="T:System.ComponentModel.TypeConverter"/> for the specified type.
            </summary>
            <param name="type">Type to register the converter for.</param>
            <param name="converter">Type converter to register.</param>
            <exception cref="T:System.ArgumentNullException">If either of arguments is <c>null</c>.</exception>
        </member>
        <member name="M:Spring.Core.TypeConversion.TypeConverterRegistry.RegisterConverter(System.String,System.String)">
            <summary>
            Registers <see cref="T:System.ComponentModel.TypeConverter"/> for the specified type.
            </summary>
            <remarks>
            This is a convinience method that accepts the names of both
            type to register converter for and the converter itself,
            resolves them using <see cref="T:Spring.Core.TypeResolution.TypeRegistry"/>, creates an
            instance of type converter and calls overloaded
            <see cref="M:Spring.Core.TypeConversion.TypeConverterRegistry.RegisterConverter(System.Type,System.ComponentModel.TypeConverter)"/> method.
            </remarks>
            <param name="typeName">Type name of the type to register the converter for (can be a type alias).</param>
            <param name="converterTypeName">Type name of the type converter to register (can be a type alias).</param>
            <exception cref="T:System.ArgumentNullException">If either of arguments is <c>null</c> or empty string.</exception>
            <exception cref="T:System.TypeLoadException">
            If either of arguments fails to resolve to a valid <see cref="T:System.Type"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If type converter does not derive from <see cref="T:System.ComponentModel.TypeConverter"/> or if it cannot be instantiated.
            </exception>
        </member>
        <member name="T:Spring.Core.TypeConversion.UniqueKeyConverter">
            <summary>
            Converts between instances of <see cref="T:Spring.Util.UniqueKey"/> and their string representations.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.UniqueKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from the sourcetype to a <see cref="T:Spring.Util.UniqueKey"/>?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.UniqueKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
             <summary>
             Convert from a <see cref="T:System.String"/> value to an <see cref="T:Spring.Util.UniqueKey"/> instance.
             </summary>
             <param name="context">
             A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
             that provides a format context.
             </param>
             <param name="culture">
             The <see cref="T:System.Globalization.CultureInfo"/> to use
             as the current culture.
             </param>
             <param name="value">
             The value that is to be converted.
             </param>
             <returns>
             A <see cref="T:Spring.Util.UniqueKey"/> if successful, <see langword="null"/> otherwise.
             </returns>        
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Spring.Core.TypeConversion.UniqueKeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to. </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
             <remarks>
             At the moment only conversion to string is supported.
             </remarks>
        </member>
        <member name="M:Spring.Core.TypeConversion.UniqueKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:Spring.Core.TypeConversion.UriConverter">
            <summary>
            Converter for <see cref="T:System.Uri"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.TypeConversion.UriConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.TypeConversion.UriConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeConversion.UriConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.Uri"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.TypeConversion.UriConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Uri"/> if successful. 
            </returns>
        </member>
        <member name="T:Spring.Core.TypeResolution.CachedTypeResolver">
            <summary>
            Resolves (instantiates) a <see cref="T:System.Type"/> by it's (possibly
            assembly qualified) name, and caches the <see cref="T:System.Type"/>
            instance against the type name.
            </summary>
            <author>Rick Evans</author>
            <author>Bruno Baia</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Core.TypeResolution.ITypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this interface is to centralise
            the resolution of type names to <see cref="T:System.Type"/> instances
            beyond that offered by the plain vanilla
            <see cref="M:System.Type.GetType(System.String)"/> method call.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Core.TypeResolution.ITypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="F:Spring.Core.TypeResolution.CachedTypeResolver.typeCache">
            <summary>
            The cache, mapping type names (<see cref="T:System.String"/> instances) against
            <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeResolution.CachedTypeResolver.#ctor(Spring.Core.TypeResolution.ITypeResolver)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.TypeResolution.CachedTypeResolver"/> class.
            </summary>
            <param name="typeResolver">
            The <see cref="T:Spring.Core.TypeResolution.ITypeResolver"/> that this instance will delegate
            actual <see cref="T:System.Type"/> resolution to if a <see cref="T:System.Type"/>
            cannot be found in this instance's <see cref="T:System.Type"/> cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="typeResolver"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.CachedTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:Spring.Core.TypeResolution.GenericArgumentsHolder">
            <summary>
            Holder for the generic arguments when using type parameters.
            </summary>
            <remarks>
            <p>
            Type parameters can be applied to classes, interfaces, 
            structures, methods, delegates, etc...
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Core.TypeResolution.GenericArgumentsHolder.GenericArgumentsQuotePrefix">
            <summary>
            The generic arguments prefix.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.GenericArgumentsHolder.GenericArgumentsQuoteSuffix">
            <summary>
            The generic arguments suffix.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.GenericArgumentsHolder.GenericArgumentsPrefix">
            <summary>
            The generic arguments prefix.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.GenericArgumentsHolder.GenericArgumentsSuffix">
            <summary>
            The generic arguments suffix.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.GenericArgumentsHolder.GenericArgumentsSeparator">
            <summary>
            The character that separates a list of generic arguments.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeResolution.GenericArgumentsHolder.#ctor(System.String)">
            <summary>
            Creates a new instance of the GenericArgumentsHolder class.
            </summary>
            <param name="value">
            The string value to parse looking for a generic definition
            and retrieving its generic arguments.
            </param>
        </member>
        <member name="M:Spring.Core.TypeResolution.GenericArgumentsHolder.GetArrayDeclaration">
            <summary>
            Returns the array declaration portion of the definition, e.g. "[,]"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Core.TypeResolution.GenericArgumentsHolder.GetGenericArguments">
            <summary>
            Returns an array of unresolved generic arguments types.
            </summary>
            <remarks>
            <p>
            A empty string represents a type parameter that 
            did not have been substituted by a specific type.
            </p>
            </remarks>
            <returns>
            An array of strings that represents the unresolved generic 
            arguments types or an empty array if not generic.
            </returns>
        </member>
        <member name="P:Spring.Core.TypeResolution.GenericArgumentsHolder.GenericTypeName">
            <summary>
            The (unresolved) generic type name portion 
            of the original value when parsing a generic type.
            </summary>
        </member>
        <member name="P:Spring.Core.TypeResolution.GenericArgumentsHolder.GenericMethodName">
            <summary>
            The (unresolved) generic method name portion 
            of the original value when parsing a generic method.
            </summary>
        </member>
        <member name="P:Spring.Core.TypeResolution.GenericArgumentsHolder.ContainsGenericArguments">
            <summary>
            Is the string value contains generic arguments ?
            </summary>
            <remarks>
            <p>
            A generic argument can be a type parameter or a type argument.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Core.TypeResolution.GenericArgumentsHolder.IsGenericDefinition">
            <summary>
            Is generic arguments only contains type parameters ?
            </summary>
        </member>
        <member name="P:Spring.Core.TypeResolution.GenericArgumentsHolder.IsArrayDeclaration">
            <summary>
            Is this an array type definition?
            </summary>
        </member>
        <member name="T:Spring.Core.TypeResolution.GenericTypeResolver">
            <summary>
            Resolves a generic <see cref="T:System.Type"/> by name.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Core.TypeResolution.TypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <author>Rick Evans</author>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The unresolved (possibly partially assembly qualified) name 
            of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolver.LoadTypeDirectlyFromAssembly(Spring.Core.TypeResolution.TypeAssemblyHolder)">
            <summary>
            Uses <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            to load an <see cref="T:System.Reflection.Assembly"/> and then the attendant
            <see cref="T:System.Type"/> referred to by the <paramref name="typeInfo"/>
            parameter.
            </summary>
            <remarks>
            <p>
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> is
            deprecated in .NET 2.0, but is still used here (even when this class is
            compiled for .NET 2.0);
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> will
            still resolve (non-.NET Framework) local assemblies when given only the
            display name of an assembly (the behaviour for .NET Framework assemblies
            and strongly named assemblies is documented in the docs for the
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> method).
            </p>
            </remarks>
            <param name="typeInfo">
            The assembly and type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
            <exception cref="T:System.Exception">
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolver.LoadTypeByIteratingOverAllLoadedAssemblies(Spring.Core.TypeResolution.TypeAssemblyHolder)">
            <summary>
            Uses <see cref="M:System.AppDomain.CurrentDomain.GetAssemblies()"/>
            to load the attendant <see cref="T:System.Type"/> referred to by 
            the <paramref name="typeInfo"/> parameter.
            </summary>
            <param name="typeInfo">
            The type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolver.BuildTypeLoadException(System.String)">
            <summary>
            Creates a new <see cref="T:System.TypeLoadException"/> instance 
            from the given <paramref name="typeName"/>
            </summary>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolver.BuildTypeLoadException(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:System.TypeLoadException"/> instance
            from the given <paramref name="typeName"/> with the given inner <see cref="T:System.Exception"/> 
            </summary>
        </member>
        <member name="M:Spring.Core.TypeResolution.GenericTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied generic <paramref name="typeName"/> to a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The unresolved (possibly generic) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:Spring.Core.TypeResolution.TypeAssemblyHolder">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeAssemblyHolder.TypeAssemblySeparator">
            <summary>
            The string that separates a <see cref="T:System.Type"/> name
            from the name of it's attendant <see cref="T:System.Reflection.Assembly"/>
            in an assembly qualified type name.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeAssemblyHolder.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeAssemblyHolder class.
            </summary>
            <param name="unresolvedTypeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="P:Spring.Core.TypeResolution.TypeAssemblyHolder.TypeName">
            <summary>
            The (unresolved) type name portion of the original type name.
            </summary>
        </member>
        <member name="P:Spring.Core.TypeResolution.TypeAssemblyHolder.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:Spring.Core.TypeResolution.TypeAssemblyHolder.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="T:Spring.Core.TypeResolution.TypeRegistry">
            <summary> 
            Provides access to a central registry of aliased <see cref="T:System.Type"/>s.
            </summary>
            <remarks>
            <p>
            Simplifies configuration by allowing aliases to be used instead of
            fully qualified type names.
            </p>
            <p>
            Comes 'pre-loaded' with a number of convenience alias' for the more
            common types; an example would be the '<c>int</c>' (or '<c>Integer</c>'
            for Visual Basic.NET developers) alias for the <see cref="T:System.Int32"/>
            type.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Context.Support.TypeAliasesSectionHandler"/>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.TypeAliasesSectionName">
            <summary>
            Name of the .Net config section that contains Spring.Net type aliases.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int32Alias">
            <summary>
            The alias around the 'int' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int32AliasVB">
            <summary>
            The alias around the 'Integer' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int32ArrayAlias">
            <summary>
            The alias around the 'int[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int32ArrayAliasVB">
            <summary>
            The alias around the 'Integer()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DecimalAlias">
            <summary>
            The alias around the 'decimal' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DecimalAliasVB">
            <summary>
            The alias around the 'Decimal' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DecimalArrayAlias">
            <summary>
            The alias around the 'decimal[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DecimalArrayAliasVB">
            <summary>
            The alias around the 'Decimal()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.CharAlias">
            <summary>
            The alias around the 'char' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.CharAliasVB">
            <summary>
            The alias around the 'Char' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.CharArrayAlias">
            <summary>
            The alias around the 'char[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.CharArrayAliasVB">
            <summary>
            The alias around the 'Char()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int64Alias">
            <summary>
            The alias around the 'long' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int64AliasVB">
            <summary>
            The alias around the 'Long' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int64ArrayAlias">
            <summary>
            The alias around the 'long[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int64ArrayAliasVB">
            <summary>
            The alias around the 'Long()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int16Alias">
            <summary>
            The alias around the 'short' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int16AliasVB">
            <summary>
            The alias around the 'Short' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int16ArrayAlias">
            <summary>
            The alias around the 'short[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.Int16ArrayAliasVB">
            <summary>
            The alias around the 'Short()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.UInt32Alias">
            <summary>
            The alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.UInt64Alias">
            <summary>
            The alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.UInt64ArrayAlias">
            <summary>
            The alias around the 'ulong[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.UInt32ArrayAlias">
            <summary>
            The alias around the 'uint[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.UInt16Alias">
            <summary>
            The alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.UInt16ArrayAlias">
            <summary>
            The alias around the 'ushort[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DoubleAlias">
            <summary>
            The alias around the 'double' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DoubleAliasVB">
            <summary>
            The alias around the 'Double' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DoubleArrayAlias">
            <summary>
            The alias around the 'double[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DoubleArrayAliasVB">
            <summary>
            The alias around the 'Double()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.FloatAlias">
            <summary>
            The alias around the 'float' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.SingleAlias">
            <summary>
            The alias around the 'Single' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.FloatArrayAlias">
            <summary>
            The alias around the 'float[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.SingleArrayAliasVB">
            <summary>
            The alias around the 'Single()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DateTimeAlias">
            <summary>
            The alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DateAlias">
            <summary>
            The alias around the 'DateTime' type (C# style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DateAliasVB">
            <summary>
            The alias around the 'DateTime' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DateTimeArrayAlias">
            <summary>
            The alias around the 'DateTime[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DateTimeArrayAliasCSharp">
            <summary>
            The alias around the 'DateTime[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.DateTimeArrayAliasVB">
            <summary>
            The alias around the 'DateTime()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.BoolAlias">
            <summary>
            The alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.BoolAliasVB">
            <summary>
            The alias around the 'Boolean' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.BoolArrayAlias">
            <summary>
            The alias around the 'bool[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.BoolArrayAliasVB">
            <summary>
            The alias around the 'Boolean()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.StringAlias">
            <summary>
            The alias around the 'string' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.StringAliasVB">
            <summary>
            The alias around the 'string' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.StringArrayAlias">
            <summary>
            The alias around the 'string[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.StringArrayAliasVB">
            <summary>
            The alias around the 'string[]' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.ObjectAlias">
            <summary>
            The alias around the 'object' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.ObjectAliasVB">
            <summary>
            The alias around the 'object' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.ObjectArrayAlias">
            <summary>
            The alias around the 'object[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.ObjectArrayAliasVB">
            <summary>
            The alias around the 'object[]' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableInt32Alias">
            <summary>
            The alias around the 'int?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableInt32ArrayAlias">
            <summary>
            The alias around the 'int?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableDecimalAlias">
            <summary>
            The alias around the 'decimal?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableDecimalArrayAlias">
            <summary>
            The alias around the 'decimal?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableCharAlias">
            <summary>
            The alias around the 'char?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableCharArrayAlias">
            <summary>
            The alias around the 'char?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableInt64Alias">
            <summary>
            The alias around the 'long?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableInt64ArrayAlias">
            <summary>
            The alias around the 'long?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableInt16Alias">
            <summary>
            The alias around the 'short?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableInt16ArrayAlias">
            <summary>
            The alias around the 'short?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableUInt32Alias">
            <summary>
            The alias around the 'unsigned int?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableUInt64Alias">
            <summary>
            The alias around the 'unsigned long?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableUInt64ArrayAlias">
            <summary>
            The alias around the 'ulong?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableUInt32ArrayAlias">
            <summary>
            The alias around the 'uint?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableUInt16Alias">
            <summary>
            The alias around the 'unsigned short?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableUInt16ArrayAlias">
            <summary>
            The alias around the 'ushort?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableDoubleAlias">
            <summary>
            The alias around the 'double?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableDoubleArrayAlias">
            <summary>
            The alias around the 'double?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableFloatAlias">
            <summary>
            The alias around the 'float?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableFloatArrayAlias">
            <summary>
            The alias around the 'float?[]' array type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableBoolAlias">
            <summary>
            The alias around the 'bool?' type.
            </summary>
        </member>
        <member name="F:Spring.Core.TypeResolution.TypeRegistry.NullableBoolArrayAlias">
            <summary>
            The alias around the 'bool?[]' array type.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeRegistry.#cctor">
            <summary>
            Registers standard and user-configured type aliases.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeRegistry.RegisterType(System.String,System.String)">
            <summary> 
            Registers an alias for the specified <see cref="T:System.Type"/>. 
            </summary>
            <remarks>
            <p>
            This overload does eager resolution of the <see cref="T:System.Type"/>
            referred to by the <paramref name="typeName"/> parameter. It will throw a
            <see cref="T:System.TypeLoadException"/> if the <see cref="T:System.Type"/> referred
            to by the <paramref name="typeName"/> parameter cannot be resolved.
            </p>
            </remarks>
            <param name="alias">
            A string that will be used as an alias for the specified
            <see cref="T:System.Type"/>.
            </param>
            <param name="typeName">
            The (possibly partially assembly qualified) name of the
            <see cref="T:System.Type"/> to register the alias for.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either of the supplied parameters is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
            <exception cref="T:System.TypeLoadException">
            If the <see cref="T:System.Type"/> referred to by the supplied
            <paramref name="typeName"/> cannot be loaded.
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeRegistry.RegisterType(System.Type)">
            <summary> 
            Registers short type name as an alias for 
            the supplied <see cref="T:System.Type"/>. 
            </summary> 
            <param name="type">
            The <see cref="T:System.Type"/> to register.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeRegistry.RegisterType(System.String,System.Type)">
            <summary> 
            Registers an alias for the supplied <see cref="T:System.Type"/>. 
            </summary> 
            <param name="alias">
            The alias for the supplied <see cref="T:System.Type"/>.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/> to register the supplied <paramref name="alias"/> under.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="type"/> is <see langword="null"/>; or if
            the supplied <paramref name="alias"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeRegistry.ResolveType(System.String)">
            <summary> 
            Resolves the supplied <paramref name="alias"/> to a <see cref="T:System.Type"/>. 
            </summary> 
            <param name="alias">
            The alias to resolve.
            </param>
            <returns>
            The <see cref="T:System.Type"/> the supplied <paramref name="alias"/> was
            associated with, or <see lang="null"/> if no <see cref="T:System.Type"/> 
            was previously registered for the supplied <paramref name="alias"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="alias"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeRegistry.ContainsAlias(System.String)">
            <summary>
            Returns a flag specifying whether <b>TypeRegistry</b> contains
            specified alias or not.
            </summary>
            <param name="alias">
            Alias to check.
            </param>
            <returns>
            <c>true</c> if the specified type alias is registered, 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Spring.Core.TypeResolution.TypeResolutionUtils">
            <summary>
            Helper methods with regard to type resolution.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolutionUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.TypeResolution.TypeResolutionUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolutionUtils.ResolveType(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <remarks>
            <p>
            If you require special <see cref="T:System.Type"/> resolution, do
            <b>not</b> use this method, but rather instantiate
            your own <see cref="T:Spring.Core.TypeResolution.TypeResolver"/>.
            </p>
            </remarks>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolutionUtils.ResolveInterfaceArray(System.String[])">
            <summary>
            Resolves a string array of interface names to
            a <see cref="T:System.Type"/> array.
            </summary>
            <param name="interfaceNames">
            An array of valid interface names. Each name must include the full
            interface and assembly name.
            </param>
            <returns>An array of interface <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.TypeLoadException">
            If any of the interfaces can't be loaded.
            </exception>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="T:System.Type"/>s specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="interfaceNames"/> (or any of its elements ) is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Core.TypeResolution.TypeResolutionUtils.MethodMatch(System.String,System.Reflection.MethodInfo)">
            <summary>
            Match a method against the given pattern.
            </summary>
            <param name="pattern">the pattern to match against.</param>
            <param name="method">the method to match.</param>
            <returns>
            <see lang="true"/> if the method matches the given pattern; otherwise <see lang="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="pattern"/> is invalid.
            </exception>
        </member>
        <member name="T:Spring.Core.CannotLoadObjectTypeException">
            <summary>
            Exception thrown when the ObjectFactory cannot load the specified type of a given object.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Util.FatalReflectionException">
            <summary>
            Thrown on an unrecoverable problem encountered in the
            objects namespace or sub-namespaces, e.g. bad class or field.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Util.ReflectionException">
            <summary>
            Superclass for all exceptions thrown in the Objects namespace and sub-namespaces.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Util.ReflectionException.#ctor">
            <summary>Creates a new instance of the ObjectsException class.</summary>
        </member>
        <member name="M:Spring.Util.ReflectionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectsException class. with the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Util.ReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectsException class with the specified message
            and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Util.ReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Util.FatalReflectionException.#ctor">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
        </member>
        <member name="M:Spring.Util.FatalReflectionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Util.FatalReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Util.FatalReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Core.CannotLoadObjectTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Core.CannotLoadObjectTypeException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.CannotLoadObjectTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.CannotLoadObjectTypeException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.CannotLoadObjectTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.CannotLoadObjectTypeException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.CannotLoadObjectTypeException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Core.CannotLoadObjectTypeException"/> class.
            </summary>
            <param name="resourceDescription">The resource description that the object definition came from.</param>
            <param name="objectName">Name of the object requested</param>
            <param name="objectTypeName">Name of the object type.</param>
            <param name="rootCause">The root cause.</param>
        </member>
        <member name="M:Spring.Core.CannotLoadObjectTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.InvalidPropertyException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Core.CannotLoadObjectTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Core.CannotLoadObjectTypeException.ObjectName">
            <summary>
            Gets he name of the object we are trying to load.
            </summary>
            <value>The name of the object.</value>
        </member>
        <member name="P:Spring.Core.CannotLoadObjectTypeException.ObjectTypeName">
            <summary>
            Gets the name of the object type we are trying to load.
            </summary>
            <value>The name of the object type.</value>
        </member>
        <member name="P:Spring.Core.CannotLoadObjectTypeException.ResourceDescription">
            <summary>
            Gets the resource description that the object definition came from
            </summary>
            <value>The resource description.</value>
        </member>
        <member name="T:Spring.Core.ComposedCriteria">
            <summary>
            A <see cref="T:Spring.Core.ICriteria"/> implementation that represents
            a composed collection of <see cref="T:Spring.Core.ICriteria"/> instances.
            </summary>
        </member>
        <member name="T:Spring.Core.ICriteria">
            <summary>
            The criteria for an arbitrary filter.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Core.ICriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria
            encapsulated by this instance?
            </summary>
            <param name="datum">
            The datum to be checked by this criteria instance.
            </param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="datum"/>
            satisfies the criteria encapsulated by this instance;
            <see langword="false"/> if not, or the supplied
            <paramref name="datum"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Core.ComposedCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.ComposedCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.ComposedCriteria.#ctor(Spring.Core.ICriteria)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.ComposedCriteria"/> class.
            </summary>
            <param name="criteria">
            A user-defined (child) criteria that will be composed into this instance.
            </param>
        </member>
        <member name="M:Spring.Core.ComposedCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The data to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="M:Spring.Core.ComposedCriteria.Add(Spring.Core.ICriteria)">
            <summary>
            Adds the supplied <parameref name="criteria"/> into the criteria
            composed within this instance.
            </summary>
            <param name="criteria">
            The <see cref="T:Spring.Core.ICriteria"/> to be added.
            </param>
        </member>
        <member name="P:Spring.Core.ComposedCriteria.Criteria">
            <summary>
            The list of <see cref="T:Spring.Core.ICriteria"/> composing this
            instance.
            </summary>
        </member>
        <member name="T:Spring.Core.ControlFlowFactory">
            <summary>
            Factory class to conceal any default <see cref="T:Spring.Core.IControlFlow"/> implementation.
            </summary>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.CreateControlFlow">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IControlFlow"/>
            implementation provided by this factory.
            </summary>
            <returns>
            A new instance of the <see cref="T:Spring.Core.IControlFlow"/>
            implementation provided by this factory.
            </returns>
        </member>
        <member name="T:Spring.Core.IControlFlow">
            <summary> 
            Interface to be implemented by objects that can return information about
            the current call stack.
            </summary>
            <remarks>
            <p>
            Useful in AOP (as an expression of the AspectJ <c>cflow</c> concept) but not AOP-specific.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="M:Spring.Core.IControlFlow.Under(System.Type)">
            <summary>
            Detects whether the caller is under the supplied <see cref="T:System.Type"/>,
            according to the current stacktrace.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to look for.
            </param>
            <returns>
            <see langword="true"/> if the caller is under the supplied <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Spring.Core.IControlFlow.Under(System.Type,System.String)">
            <summary>
            Detects whether the caller is under the supplied <see cref="T:System.Type"/>
            and <paramref name="methodName"/>, according to the current stacktrace.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to look for.
            </param>
            <param name="methodName">The name of the method to look for.</param>
            <returns>
            <see langword="true"/> if the caller is under the supplied <see cref="T:System.Type"/>
            and <paramref name="methodName"/>.
            </returns>
        </member>
        <member name="M:Spring.Core.IControlFlow.UnderToken(System.String)">
            <summary>
            Does the current stack trace contain the supplied <paramref name="token"/>?
            </summary>
            <param name="token">The token to match against.</param>
            <returns>
            <see langword="true"/> if the current stack trace contains the supplied
            <paramref name="token"/>.
            </returns>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.DefaultControlFlow.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.ControlFlowFactory.DefaultControlFlow"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.DefaultControlFlow.Spring#Core#IControlFlow#Under(System.Type)">
            <summary>
            Detects whether the caller is under the supplied <see cref="T:System.Type"/>,
            according to the current stacktrace.
            </summary>
            <seealso cref="M:Spring.Core.IControlFlow.Under(System.Type)"/>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.DefaultControlFlow.Spring#Core#IControlFlow#Under(System.Type,System.String)">
            <summary>
            Detects whether the caller is under the supplied <see cref="T:System.Type"/>
            and <paramref name="methodName"/>, according to the current stacktrace.
            </summary>
            <remarks>
            <p>
            Matches the whole method name.
            </p>
            </remarks>
            <seealso cref="M:Spring.Core.IControlFlow.Under(System.Type,System.String)"/>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.DefaultControlFlow.Spring#Core#IControlFlow#UnderToken(System.String)">
            <summary>
            Does the current stack trace contain the supplied <paramref name="token"/>?
            </summary>
            <remarks>
            <p>
            This leaves it up to the caller to decide what matches, but is obviously less of
            an abstraction because the caller must know the exact format of the underlying
            stack trace.
            </p>
            </remarks>
            <seealso cref="M:Spring.Core.IControlFlow.UnderToken(System.String)"/>
        </member>
        <member name="T:Spring.Core.Conventions">
            <summary>
            Provides methods to support various naming and other conventions used throughout the framework.
            Mainly for internal use within the framework.
            </summary>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.Conventions.AttributeNameToPropertyName(System.String)">
            <summary> Convert <code>String</code>s in attribute name format (lowercase, hyphens separating words)
            into property name format (camel-cased). For example, <code>transaction-manager</code> is
            converted into <code>transactionManager</code>.
            </summary>
        </member>
        <member name="T:Spring.Core.CriteriaMemberFilter">
            <summary>
            Convenience class that exposes a signature that matches the
            <see cref="T:System.Reflection.MemberFilter"/> delegate.
            </summary>
            <remarks>
            <p>
            Useful when filtering <see cref="T:System.Type"/> members via the
            <see cref="T:Spring.Core.ICriteria"/> mechanism.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Core.CriteriaMemberFilter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.CriteriaMemberFilter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.CriteriaMemberFilter.FilterMemberByCriteria(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Returns true if the supplied <see cref="T:System.Reflection.MemberInfo"/> instance
            satisfies the supplied <paramref name="filterCriteria"/> (which must be an
            <see cref="T:Spring.Core.ICriteria"/> implementation).
            </summary>
            <param name="member">
            The <see cref="T:System.Reflection.MemberInfo"/> instance that will be checked to see if
            it matches the supplied <paramref name="filterCriteria"/>.
            </param>
            <param name="filterCriteria">
            The criteria against which to filter the supplied
            <see cref="T:System.Reflection.MemberInfo"/> instance.
            </param>
            <returns>
            True if the supplied <see cref="T:System.Reflection.MemberInfo"/> instance
            satisfies the supplied <paramref name="filterCriteria"/> (which must be an
            <see cref="T:Spring.Core.ICriteria"/> implementation); false if not or the
            supplied <paramref name="filterCriteria"/> is not an
            <see cref="T:Spring.Core.ICriteria"/> implementation or is null.
            </returns>
        </member>
        <member name="T:Spring.Core.IErrorCoded">
            <summary>
            Interface that can be implemented by exceptions etc that are error coded.
            </summary>
            <remarks>
            <p>
            The error code is a <see cref="T:System.String"/>, rather than a number, so it can
            be given user-readable values, such as "object.failureDescription".
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="P:Spring.Core.IErrorCoded.ErrorCode">
            <summary>
            Return the error code associated with this failure.
            </summary>
            <remarks>
            <p>
            The GUI can render this anyway it pleases, allowing for I18n etc.
            </p>
            </remarks>
            <returns>
            The <see cref="T:System.String"/> error code associated with this failure,
            or the empty string instance if not error-coded.
            </returns>
        </member>
        <member name="T:Spring.Core.InvalidPropertyException">
            <summary>
            Thrown in response to referring to an invalid property (most often via reflection).
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.InvalidPropertyException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.InvalidPropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.InvalidPropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.InvalidPropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.#ctor(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the InvalidPropertyException class.
            </summary>
            <param name="offendingType">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="offendingProperty">
            The name of the offending property.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.InvalidPropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.InvalidPropertyException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Core.InvalidPropertyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Core.InvalidPropertyException.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </summary>
        </member>
        <member name="P:Spring.Core.InvalidPropertyException.OffendingPropertyName">
            <summary>
            The name of the offending property.
            </summary>
        </member>
        <member name="T:Spring.Core.IPriorityOrdered">
            <summary>
            Extension of the <see cref="T:Spring.Core.IOrdered"/> interface, expressing a 'priority'
            ordering: Order values expressed by IPriorityOrdered objects always
            apply before order values of 'plain' Ordered values.
            </summary>
            <remarks>
            <para>This is primarily a special-purpose interface, used for objects
            where it is particularly important to determine 'prioritized'
            objects first, without even obtaining the remaining objects.
            A typical example: Prioritized post-processors in a Spring
            <see cref="T:Spring.Context.IApplicationContext"/>
            </para>
            <para>IPriorityOrdered post-processor objects are initialized in
            a special phase, ahead of other post-processor objects.</para>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <see cref="T:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer"/>
            <see cref="T:Spring.Objects.Factory.Config.TypeAliasConfigurer"/>
            <see cref="T:Spring.Objects.Factory.Config.ResourceHandlerConfigurer"/>
        </member>
        <member name="T:Spring.Core.MethodArgumentsCriteria">
            <summary>
            Criteria that is satisfied if the <see cref="T:System.Type"/> of each of the
            arguments matches each of the parameter <see cref="T:System.Type"/>s of a given
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <remarks>
            <p>
            If no <see cref="T:System.Type"/> array is passed to the overloaded constructor,
            any method that has no parameters will satisfy an instance of this
            class. The same effect could be achieved by passing the
            <see cref="F:Spring.Util.ObjectUtils.EmptyObjects"/> array to the overloaded constructor.
            </p>
            </remarks>
            <author>Rick Evans</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Core.MethodArgumentsCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodArgumentsCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.MethodArgumentsCriteria.#ctor(System.Object[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodArgumentsCriteria"/> class.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="arguments"/> array is null, then this
            constructor uses the <see cref="F:System.Type.EmptyTypes"/> array.
            </p>
            </remarks>
            <param name="arguments">
            The <see cref="T:System.Object"/> array that this criteria will use to
            check parameter <see cref="T:System.Type"/>s.
            </param>
        </member>
        <member name="M:Spring.Core.MethodArgumentsCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <remarks>
            <p>
            This implementation respects the inheritance chain of any parameter
            <see cref="T:System.Type"/>s... i.e. methods that have a base type (or
            interface) that is assignable to the <see cref="T:System.Type"/> in the
            same corresponding index of the parameter types will satisfy this
            criteria instance.
            </p>
            </remarks>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Core.MethodGenericArgumentsCountCriteria">
            <summary>
            Criteria that is satisfied if the number of generic arguments to a given
            <see cref="T:System.Reflection.MethodBase"/> matches an arbitrary number.
            </summary>
            <remarks>
            <p>
            This class supports checking the generic arguments count of both 
            generic methods and constructors.
            </p>
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Core.MethodGenericArgumentsCountCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodGenericArgumentsCountCriteria"/> class.
            </summary>
            <remarks>
            <p>
            This constructor sets the
            <see cref="P:Spring.Core.MethodGenericArgumentsCountCriteria.ExpectedGenericArgumentCount"/>
            property to zero (0).
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Core.MethodGenericArgumentsCountCriteria.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodGenericArgumentsCountCriteria"/> class.
            </summary>
            <param name="expectedGenericArgumentCount">
            The number of generic arguments that a <see cref="T:System.Reflection.MethodInfo"/> 
            must have to satisfy this criteria.
            </param>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="expectedGenericArgumentCount"/> is less
            than zero.
            </exception>
        </member>
        <member name="M:Spring.Core.MethodGenericArgumentsCountCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="P:Spring.Core.MethodGenericArgumentsCountCriteria.ExpectedGenericArgumentCount">
            <summary>
            The number of generic arguments that a <see cref="T:System.Reflection.MethodInfo"/> 
            must have to satisfy this criteria.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the supplied value is less than zero.
            </exception>
        </member>
        <member name="T:Spring.Core.MethodInvocationException">
            <summary>
            Thrown when a method (typically a property getter or setter invoked via reflection)
            throws an exception, analogous to a <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Core.PropertyAccessException">
            <summary>
            Superclass for exceptions related to a property access, such as a <see cref="T:System.Type"/>
            mismatch or a target invocation exception.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.PropertyAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Spring.Core.PropertyAccessException.#ctor(System.String,Spring.Core.PropertyChangeEventArgs)">
            <summary>
            Create a new instance of the PropertyAccessException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="propertyChangeEvent">Describes the change attempted on the property.</param>
        </member>
        <member name="M:Spring.Core.PropertyAccessException.#ctor(System.String,Spring.Core.PropertyChangeEventArgs,System.Exception)">
            <summary>
            Create a new instance of the PropertyAccessException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="propertyChangeEvent">Describes the change attempted on the property.</param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.PropertyAccessException.#ctor">
            <summary>
            Creates a new instance of the PropertyAccessException class.
            </summary>
        </member>
        <member name="M:Spring.Core.PropertyAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the PropertyAccessException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.PropertyAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.PropertyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Core.PropertyAccessException.PropertyChangeArgs">
            <summary>
            Returns the PropertyChangeEventArgs that resulted in the problem.
            </summary>
        </member>
        <member name="P:Spring.Core.PropertyAccessException.ErrorCode">
            <summary>
            The string error code used to classify the error.
            </summary>
        </member>
        <member name="M:Spring.Core.MethodInvocationException.#ctor">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
        </member>
        <member name="M:Spring.Core.MethodInvocationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.MethodInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.MethodInvocationException.#ctor(System.Exception,Spring.Core.PropertyChangeEventArgs)">
            <summary>
            Constructor to use when an exception results from a
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </summary>
            <param name="ex">
            The <see cref="T:System.Exception"/> raised by the invoked property.
            </param>
            <param name="argument">
            The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that
            resulted in an exception.
            </param>
        </member>
        <member name="M:Spring.Core.MethodInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Core.MethodInvocationException.ErrorCode">
            <summary>
            The error code string for this exception.
            </summary>
        </member>
        <member name="T:Spring.Core.MethodNameMatchCriteria">
            <summary>
            Criteria that is satisfied if the method <c>Name</c> of an
            <see cref="T:System.Reflection.MethodInfo"/> instance matches a
            supplied string pattern.
            </summary>
            <remarks>
            <para>
            Supports the following simple pattern styles: 
            "xxx*", "*xxx" and "*xxx*" matches, as well as direct equality.
            </para>
            </remarks>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Core.MethodNameMatchCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodNameMatchCriteria"/> class.
            </summary>
            <remarks>
            <p>
            This constructor sets the
            <see cref="P:Spring.Core.MethodNameMatchCriteria.Pattern"/>
            property to * (any method name).
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Core.MethodNameMatchCriteria.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodNameMatchCriteria"/> class.
            </summary>
            The pattern that <see cref="T:System.Reflection.MethodInfo"/> names
            must match against in order to satisfy this criteria.
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="pattern"/> is null or resolve to an empty string.
            </exception>
        </member>
        <member name="M:Spring.Core.MethodNameMatchCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="P:Spring.Core.MethodNameMatchCriteria.Pattern">
            <summary>
            The number of parameters that a <see cref="T:System.Reflection.MethodInfo"/>
            must have to satisfy this criteria.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the supplied value is null or resolve to an empty string.
            </exception>
        </member>
        <member name="T:Spring.Core.MethodParameter">
            <summary>
            Helper class that encapsulates the specification of a method parameter, i.e.
            a MethodInfo or ConstructorInfo plus a parameter index.
            Useful as a specification object to pass along.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rob Harrop</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.MethodParameter.#ctor(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Core.MethodParameter"/> class for the given
            MethodInfo.
            </summary>
            <param name="methodInfo">The MethodInfo to specify a parameter for.</param>
            <param name="parameterIndex">Index of the parameter.</param>
        </member>
        <member name="M:Spring.Core.MethodParameter.#ctor(System.Reflection.ConstructorInfo,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Core.MethodParameter"/> class.
            </summary>
            <param name="constructorInfo">The ConstructorInfo to specify a parameter for.</param>
            <param name="parameterIndex">Index of the parameter.</param>
        </member>
        <member name="M:Spring.Core.MethodParameter.ForMethodOrConstructor(System.Object,System.Int32)">
            <summary>
            Create a new MethodParameter for the given method or donstructor.
            This is a convenience constructor for scenarios where a
            Method or Constructor reference is treated in a generic fashion.
            </summary>
            <param name="methodOrConstructorInfo">The method or constructor to specify a parameter for.</param>
            <param name="parameterIndex">Index of the parameter.</param>
            <returns>the corresponding MethodParameter instance</returns>
        </member>
        <member name="M:Spring.Core.MethodParameter.ParameterName">
            <summary>
            Parameters the name of the method/constructor parameter.
            </summary>
            <returns>the parameter name.</returns>
        </member>
        <member name="P:Spring.Core.MethodParameter.ParameterType">
            <summary>
            Gets the type of the method/constructor parameter.
            </summary>
            <value>The type of the parameter. (never <code>null</code>)</value>
        </member>
        <member name="P:Spring.Core.MethodParameter.MethodInfo">
            <summary>
            Gets the wrapped MethodInfo, if any.  Note Either MethodInfo or ConstructorInfo is available.
            </summary>
            <value>The MethodInfo, or <code>null</code> if none.</value>
        </member>
        <member name="P:Spring.Core.MethodParameter.ConstructorInfo">
            <summary>
            Gets wrapped ConstructorInfo, if any.  Note Either MethodInfo or ConstructorInfo is available.
            </summary>
            <value>The ConstructorInfo, or <code>null</code> if none</value>
        </member>
        <member name="T:Spring.Core.MethodParametersCountCriteria">
            <summary>
            Criteria that is satisfied if the number of parameters to a given
            <see cref="T:System.Reflection.MethodBase"/> matches an arbitrary number.
            </summary>
            <remarks>
            <p>
            This class supports checking the parameter count of both methods and
            constructors.
            </p>
            <p>
            Default parameters, etc need to taken into account.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Core.MethodParametersCountCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodParametersCountCriteria"/> class.
            </summary>
            <remarks>
            <p>
            This constructor sets the
            <see cref="P:Spring.Core.MethodParametersCountCriteria.ExpectedParameterCount"/>
            property to zero (0).
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Core.MethodParametersCountCriteria.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodParametersCountCriteria"/> class.
            </summary>
            <param name="expectedParameterCount">
            The number of parameters that a <see cref="T:System.Reflection.MethodInfo"/>
            must have to satisfy this criteria.
            </param>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="expectedParameterCount"/> is less
            than zero.
            </exception>
        </member>
        <member name="M:Spring.Core.MethodParametersCountCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="P:Spring.Core.MethodParametersCountCriteria.ExpectedParameterCount">
            <summary>
            The number of parameters that a <see cref="T:System.Reflection.MethodInfo"/>
            must have to satisfy this criteria.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the supplied value is less than zero.
            </exception>
        </member>
        <member name="T:Spring.Core.MethodParametersCriteria">
            <summary>
            Criteria that is satisfied if the <see cref="T:System.Type"/> of each of the
            parameters of a given <see cref="T:System.Reflection.MethodInfo"/> matches each
            of the parameter <see cref="T:System.Type"/>s of a given
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <remarks>
            <p>
            If no <see cref="T:System.Type"/> array is passed to the overloaded constructor,
            any method that has no parameters will satisfy an instance of this
            class. The same effect could be achieved by passing the
            <see cref="F:System.Type.EmptyTypes"/> array to the overloaded constructor.
            </p>
            </remarks>
            <author>Rick Evans</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Core.MethodParametersCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodParametersCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.MethodParametersCriteria.#ctor(System.Type[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodParametersCriteria"/> class.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="parameters"/> array is null, then this
            constructor uses the <see cref="F:System.Type.EmptyTypes"/> array.
            </p>
            </remarks>
            <param name="parameters">
            The <see cref="T:System.Type"/> array that this criteria will use to
            check parameter <see cref="T:System.Type"/>s.
            </param>
        </member>
        <member name="M:Spring.Core.MethodParametersCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Core.MethodReturnTypeCriteria">
            <summary>
            Criteria that is satisfied if the return <see cref="T:System.Type"/> of a given
            <see cref="T:System.Reflection.MethodInfo"/> matches a given <see cref="T:System.Type"/>.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="F:Spring.Core.MethodReturnTypeCriteria.DefaultType">
            <summary>
            The return <see cref="T:System.Type"/> to match against if no
            <see cref="T:System.Type"/> is provided explictly.
            </summary>
        </member>
        <member name="M:Spring.Core.MethodReturnTypeCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodReturnTypeCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.MethodReturnTypeCriteria.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.MethodReturnTypeCriteria"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that the return type of a given
            <see cref="T:System.Reflection.MethodInfo"/> must match in order to satisfy
            this criteria.
            </param>
        </member>
        <member name="M:Spring.Core.MethodReturnTypeCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="P:Spring.Core.MethodReturnTypeCriteria.ReturnType">
            <summary>
            The <see cref="T:System.Type"/> that the return type of a given
            <see cref="T:System.Reflection.MethodInfo"/> must match in order to satisfy
            this criteria.
            </summary>
        </member>
        <member name="T:Spring.Core.NotReadablePropertyException">
            <summary>
            Thrown in response to a failed attempt to read a property.
            </summary>
            <remarks>
            <p>
            Typically thrown when attempting to read the value of a write-only
            property via reflection.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Core.NotReadablePropertyException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NotReadablePropertyException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.NotReadablePropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NotReadablePropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.NotReadablePropertyException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NotReadablePropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
        </member>
        <member name="M:Spring.Core.NotReadablePropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NotReadablePropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.NotReadablePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NotReadablePropertyException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Core.NotWritablePropertyException">
            <summary>
            Thrown in response to a failed attempt to write a property.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.NotWritablePropertyException.#ctor">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
        </member>
        <member name="M:Spring.Core.NotWritablePropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.NotWritablePropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.NotWritablePropertyException.#ctor(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="offendingType">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="offendingProperty">
            The name of the offending property.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.NotWritablePropertyException.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class
            summarizing what property was not writable.
            </summary>
            <param name="offendingProperty">
            The name of the property that is not writable.
            </param>
            <param name="offendingType">
            The <see cref="T:System.Type"/> in which the property is not writable.
            </param>
        </member>
        <member name="M:Spring.Core.NotWritablePropertyException.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Creates new NotWritablePropertyException with a root cause.
            </summary>
            <param name="offendingProperty">
            The name of the property that is not writable.
            </param>
            <param name="offendingType">
            The <see cref="T:System.Type"/> in which the property is not writable.
            </param>
            <param name="rootCause">
            The root cause indicating why the property was not writable.
            </param>
        </member>
        <member name="M:Spring.Core.NotWritablePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Core.NullValueInNestedPathException">
            <summary>
            Thrown in response to encountering a <see langword="null"/> value
            when traversing a nested path expression.
            </summary>
        </member>
        <member name="M:Spring.Core.NullValueInNestedPathException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NullValueInNestedPathException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.NullValueInNestedPathException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NullValueInNestedPathException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.NullValueInNestedPathException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NullValueInNestedPathException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.NullValueInNestedPathException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NullValueInNestedPathException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object where the property was not found.
            </param>
            <param name="theProperty">The name of the property not found.</param>
        </member>
        <member name="M:Spring.Core.NullValueInNestedPathException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NullValueInNestedPathException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object where the property was not found.
            </param>
            <param name="theProperty">The name of the property not found.</param>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Core.NullValueInNestedPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.NullValueInNestedPathException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Core.NullValueInNestedPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Core.NullValueInNestedPathException.PropertyName">
            <summary>
            The name of the offending property.
            </summary>
        </member>
        <member name="P:Spring.Core.NullValueInNestedPathException.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of the class where the property was last looked for.
            </summary>
        </member>
        <member name="T:Spring.Core.OrderComparator">
            <summary>
            Comparator implementation for <see cref="T:Spring.Core.IOrdered"/> objects, sorting by
            order value ascending (resp. by priority descending).
            </summary>
            <remarks>
            <p>
            Non-<see cref="T:Spring.Core.IOrdered"/> objects are treated as greatest order values,
            thus ending up at the end of a list, in arbitrary order (just like same order values of
            <see cref="T:Spring.Core.IOrdered"/> objects).
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.Net)</author>
        </member>
        <member name="M:Spring.Core.OrderComparator.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to or greater than the other.
            </summary>
            <remarks>
            <p>
            Uses direct evaluation instead of <see cref="M:System.Int32.CompareTo(System.Object)"/>
            to avoid unnecessary boxing.
            </p>
            </remarks>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns>
            -1 if first object is less then second, 1 if it is greater, or 0 if they are equal.
            </returns>
        </member>
        <member name="M:Spring.Core.OrderComparator.CompareEqualOrder(System.Object,System.Object)">
            <summary>
            Handle the case when both objects have equal sort order priority. By default returns 0, 
            but may be overriden for handling special cases.
            </summary>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns>
            -1 if first object is less then second, 1 if it is greater, or 0 if they are equal.
            </returns>
        </member>
        <member name="T:Spring.Core.PropertyChangeEventArgs">
            <summary>
            Provides additional data for the <c>PropertyChanged</c> event.
            </summary>
            <remarks>
            <p>
            Provides some additional properties over and above the name of the
            property that has changed (which is inherited from the
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> base class).
            This allows calling code to determine whether or not a property has
            actually changed (i.e. a <c>PropertyChanged</c> event may have been
            raised, but the value itself may be equivalent).
            </p>
            </remarks>
            <seealso cref="T:System.ComponentModel.PropertyChangedEventArgs"/>
        </member>
        <member name="M:Spring.Core.PropertyChangeEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Create a new instance of the
            <see cref="T:Spring.Core.PropertyChangeEventArgs"/> class.
            </summary>
            <param name="propertyName">
            The name of the property that was changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">the new value of the property.</param>
        </member>
        <member name="P:Spring.Core.PropertyChangeEventArgs.OldValue">
            <summary>
            Get the old value for the property.
            </summary>
            <seealso cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
        </member>
        <member name="P:Spring.Core.PropertyChangeEventArgs.NewValue">
            <summary>
            Get the new value of the property.
            </summary>
            <seealso cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
        </member>
        <member name="T:Spring.Core.RegularExpressionCriteria">
            <summary>
            A base class for all <see cref="T:Spring.Core.ICriteria"/>
            implementations that are regular expression based.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="F:Spring.Core.RegularExpressionCriteria.MatchAnyThingPattern">
            <summary>
            The default pattern... matches absolutely anything.
            </summary>
        </member>
        <member name="M:Spring.Core.RegularExpressionCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.RegularExpressionCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.RegularExpressionCriteria.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.RegularExpressionCriteria"/> class.
            </summary>
            <param name="pattern">
            The regular expression pattern to be applied.
            </param>
        </member>
        <member name="M:Spring.Core.RegularExpressionCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="M:Spring.Core.RegularExpressionCriteria.IsMatch(System.String)">
            <summary>
            Convenience method that calls the
            <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)"/>
            on the supplied <paramref name="input"/>.
            </summary>
            <param name="input">The input to match against.</param>
            <returns>True if the <paramref name="input"/> matches.</returns>
        </member>
        <member name="P:Spring.Core.RegularExpressionCriteria.Pattern">
            <summary>
            The regular expression pattern to be applied.
            </summary>
        </member>
        <member name="P:Spring.Core.RegularExpressionCriteria.Options">
            <summary>
            The regular expression options to be applied.
            </summary>
        </member>
        <member name="P:Spring.Core.RegularExpressionCriteria.Expression">
            <summary>
            The regular expression to be applied.
            </summary>
        </member>
        <member name="T:Spring.Core.RegularExpressionEventNameCriteria">
            <summary>
            Criteria that is satisfied if the <c>Name</c> property of an
            <see cref="T:System.Reflection.EventInfo"/> instance matches a
            supplied regular expression pattern.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="F:Spring.Core.RegularExpressionEventNameCriteria.MatchAnyEventNamePattern">
            <summary>
            The default event name pattern... matches pretty much any event name.
            </summary>
        </member>
        <member name="M:Spring.Core.RegularExpressionEventNameCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.RegularExpressionEventNameCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.RegularExpressionEventNameCriteria.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.RegularExpressionEventNameCriteria"/> class.
            </summary>
            <param name="eventNamePattern">
            The pattern that <see cref="T:System.Reflection.EventInfo"/> names
            must match against in order to satisfy this criteria.
            </param>
        </member>
        <member name="M:Spring.Core.RegularExpressionEventNameCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Core.RegularExpressionMethodNameCriteria">
            <summary>
            Criteria that is satisfied if the <c>Name</c> property of an
            <see cref="T:System.Reflection.MethodInfo"/> instance matches a
            supplied regular expression pattern.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="F:Spring.Core.RegularExpressionMethodNameCriteria.MatchAnyMethodNamePattern">
            <summary>
            The default method name pattern... matches pretty much any method name.
            </summary>
        </member>
        <member name="M:Spring.Core.RegularExpressionMethodNameCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.RegularExpressionMethodNameCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.RegularExpressionMethodNameCriteria.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.RegularExpressionMethodNameCriteria"/> class.
            </summary>
            <param name="methodNamePattern">
            The pattern that <see cref="T:System.Reflection.MethodInfo"/> names
            must match against in order to satisfy this criteria.
            </param>
        </member>
        <member name="M:Spring.Core.RegularExpressionMethodNameCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Core.TypeMismatchException">
            <summary>
            Exception thrown on a <see cref="T:System.Type"/> mismatch when trying to set a property
            or resolve an argument to a method invocation.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.TypeMismatchException.#ctor">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
        </member>
        <member name="M:Spring.Core.TypeMismatchException.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Core.TypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Core.TypeMismatchException.#ctor(Spring.Core.PropertyChangeEventArgs,System.Type)">
            <summary>
            Creates a new instance of the TypeMismatchException class describing the
            property and required type that could not used to set a property on the target object.
            </summary>
            <param name="propertyChangeEventArgs">
            The description of the property that was to be changed.
            </param>
            <param name="requiredType">The target conversion type.</param>
        </member>
        <member name="M:Spring.Core.TypeMismatchException.#ctor(Spring.Core.PropertyChangeEventArgs,System.Type,System.Exception)">
            <summary>
            Creates a new instance of the TypeMismatchException class describing the
            property, required type, and underlying exception that could not be used
            to set a property on the target object.
            </summary>
            <param name="propertyChangeEventArgs">
            The description of the property that was to be changed.
            </param>
            <param name="requiredType">The target conversion type.</param>
            <param name="rootCause">The underlying exception.</param>
        </member>
        <member name="M:Spring.Core.TypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Core.TypeMismatchException.ErrorCode">
            <summary>
            The string error code used to classify the exception.
            </summary>
        </member>
        <member name="T:Spring.DataBinding.AbstractBinding">
            <summary>
            Abstract base class for <see cref="T:Spring.DataBinding.IBinding"/> implementations.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.DataBinding.IBinding">
            <summary>
            An interface that defines the methods that have to be implemented by all data bindings.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.DataBinding.IBinding.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
        </member>
        <member name="M:Spring.DataBinding.IBinding.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.IBinding.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
        </member>
        <member name="M:Spring.DataBinding.IBinding.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.IBinding.SetErrorMessage(System.String,System.String[])">
            <summary>
            Sets error message that should be displayed in the case 
            of a non-fatal binding error.
            </summary>
            <param name="messageId">
            Resource ID of the error message.
            </param>
            <param name="errorProviders">
            List of error providers message should be added to.
            </param>
        </member>
        <member name="F:Spring.DataBinding.AbstractBinding.ALL_BINDINGERRORS_PROVIDER">
            <summary>
            The name of the always filled error provider
            </summary>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.IsValid(Spring.Validation.IValidationErrors)">
            <summary>
            Gets or sets a flag specifying whether this binding is valid.
            </summary>
            <value>
                <c>true</c> if this binding evaluated without errors;
                <c>false</c> otherwise.
            </value>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.SetInvalid(Spring.Validation.IValidationErrors)">
            <summary>
            Marks this binding's state as invalid for this validationErrors collection. 
            Returns false if <paramref name="validationErrors"/> is null.
            </summary>
            <param name="validationErrors"></param>
            <returns>false, if validationErrors is null</returns>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"></see> class.
            </summary>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.SetErrorMessage(System.String,System.String[])">
            <summary>
            Sets error message that should be displayed in the case 
            of a non-fatal binding error.
            </summary>
            <param name="messageId">
            Resource ID of the error message.
            </param>
            <param name="errorProviders">
            List of error providers message should be added to.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.DataBinding.AbstractBinding.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Spring.DataBinding.AbstractBinding.Id">
            <summary>
             Gets the unique ID of this binding instance.
            </summary>
        </member>
        <member name="P:Spring.DataBinding.AbstractBinding.Direction">
            <summary>
            Gets or sets the <see cref="T:Spring.DataBinding.BindingDirection"/>.
            </summary>
            <value>The binding direction.</value>
        </member>
        <member name="P:Spring.DataBinding.AbstractBinding.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Spring.DataBinding.AbstractBinding.ErrorProviders">
            <summary>
            Gets the error providers.
            </summary>
        </member>
        <member name="T:Spring.DataBinding.AbstractSimpleBinding">
            <summary>
            Abstract base class for simple, one-to-one <see cref="T:Spring.DataBinding.IBinding"/> implementations.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Spring.DataBinding.AbstractSimpleBinding"/> without any <see cref="T:Spring.Globalization.IFormatter"/>
            </summary>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.#ctor(Spring.Globalization.IFormatter)">
            <summary>
            Initialize a new instance of <see cref="T:Spring.DataBinding.AbstractSimpleBinding"/> with the 
            specified <see cref="T:Spring.Globalization.IFormatter"/>.
            </summary>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.DoBindSourceToTarget(System.Object,System.Object,System.Collections.IDictionary)">
            <summary>
            Concrete implementation if source to target binding.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.DoBindTargetToSource(System.Object,System.Object,System.Collections.IDictionary)">
            <summary>
            Concrete implementation of target to source binding.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.GetSourceValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Gets the source value for the binding.
            </summary>
            <param name="source">
            Source object to extract value from.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
            <returns>
            The source value for the binding.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.SetSourceValue(System.Object,System.Object,System.Collections.IDictionary)">
            <summary>
            Sets the source value for the binding.
            </summary>
            <param name="source">
            The source object to set the value on.
            </param>
            <param name="value">
            The value to set.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.GetTargetValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Gets the target value for the binding.
            </summary>
            <param name="target">
            Source object to extract value from.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
            <returns>
            The target value for the binding.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.AbstractSimpleBinding.SetTargetValue(System.Object,System.Object,System.Collections.IDictionary)">
            <summary>
            Sets the target value for the binding.
            </summary>
            <param name="target">
            The target object to set the value on.
            </param>
            <param name="value">
            The value to set.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
        </member>
        <member name="P:Spring.DataBinding.AbstractSimpleBinding.Formatter">
            <summary>
            Gets or sets the <see cref="T:Spring.Globalization.IFormatter"/> to use.
            </summary>
            <value>The formatter to use.</value>
        </member>
        <member name="T:Spring.DataBinding.BaseBindingContainer">
            <summary>
            Base implementation of the <see cref="T:Spring.DataBinding.IBindingContainer"/>.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.DataBinding.IBindingContainer">
            <summary>
            An interface that has to be implemented by all data binding containers.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.DataBinding.IBindingContainer.AddBinding(Spring.DataBinding.IBinding)">
            <summary>
            Adds the binding.
            </summary>
            <param name="binding">
            Binding definition to add.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.IBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.IBindingContainer.AddBinding(System.String,System.String)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding with a default 
            binding direction of <see cref="F:Spring.DataBinding.BindingDirection.Bidirectional"/>.
            </summary>
            <remarks>
            This is a convinience method for adding <b>SimpleExpressionBinding</b>,
            one of the most often used binding types, to the bindings list.
            </remarks>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.IBindingContainer.AddBinding(System.String,System.String,Spring.DataBinding.BindingDirection)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding.
            </summary>
            <remarks>
            This is a convinience method for adding <b>SimpleExpressionBinding</b>,
            one of the most often used binding types, to the bindings list.
            </remarks>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <param name="direction">
            Binding direction.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.IBindingContainer.AddBinding(System.String,System.String,Spring.Globalization.IFormatter)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding with a default 
            binding direction of <see cref="F:Spring.DataBinding.BindingDirection.Bidirectional"/>.
            </summary>
            <remarks>
            This is a convinience method for adding <b>SimpleExpressionBinding</b>,
            one of the most often used binding types, to the bindings list.
            </remarks>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <param name="formatter">
            <see cref="T:Spring.Globalization.IFormatter"/> to use for value formatting and parsing.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.IBindingContainer.AddBinding(System.String,System.String,Spring.DataBinding.BindingDirection,Spring.Globalization.IFormatter)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding.
            </summary>
            <remarks>
            This is a convinience method for adding <b>SimpleExpressionBinding</b>,
            one of the most often used binding types, to the bindings list.
            </remarks>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <param name="direction">
            Binding direction.
            </param>
            <param name="formatter">
            <see cref="T:Spring.Globalization.IFormatter"/> to use for value formatting and parsing.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="P:Spring.DataBinding.IBindingContainer.HasBindings">
            <summary>
            Gets a value indicating whether this data binding container 
            has bindings.
            </summary>
            <value>
            	<c>true</c> if this data binding container has bindings; 
                <c>false</c> otherwise.
            </value>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Spring.DataBinding.BaseBindingContainer"/>.
            </summary>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.AddBinding(Spring.DataBinding.IBinding)">
            <summary>
            Adds the binding.
            </summary>
            <param name="binding">
            Binding definition to add.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.IBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.AddBinding(System.String,System.String)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding with a default 
            binding direction of <see cref="F:Spring.DataBinding.BindingDirection.Bidirectional"/>.
            </summary>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.AddBinding(System.String,System.String,Spring.DataBinding.BindingDirection)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding.
            </summary>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <param name="direction">
            Binding direction.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.AddBinding(System.String,System.String,Spring.Globalization.IFormatter)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding with a default 
            binding direction of <see cref="F:Spring.DataBinding.BindingDirection.Bidirectional"/>.
            </summary>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <param name="formatter">
            <see cref="T:Spring.Globalization.IFormatter"/> to use for value formatting and parsing.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.AddBinding(System.String,System.String,Spring.DataBinding.BindingDirection,Spring.Globalization.IFormatter)">
            <summary>
            Adds the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> binding.
            </summary>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <param name="direction">
            Binding direction.
            </param>
            <param name="formatter">
            <see cref="T:Spring.Globalization.IFormatter"/> to use for value formatting and parsing.
            </param>
            <returns>
            Added <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> instance.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingContainer.SetErrorMessage(System.String,System.String[])">
            <summary>
            Implemented as a NOOP for containers.
            of a non-fatal binding error.
            </summary>
            <param name="messageId">
            Resource ID of the error message.
            </param>
            <param name="errorProviders">
            List of error providers message should be added to.
            </param>
        </member>
        <member name="P:Spring.DataBinding.BaseBindingContainer.Bindings">
            <summary>
            Gets a list of bindings for this container.
            </summary>
            <value>
            A list of bindings for this container.
            </value>
        </member>
        <member name="P:Spring.DataBinding.BaseBindingContainer.HasBindings">
            <summary>
            Gets a value indicating whether this instance has bindings.
            </summary>
            <value>
            	<c>true</c> if this instance has bindings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.DataBinding.BaseBindingManager">
            <summary>
            BaseBindingManager keeps track of all registered bindings and 
            represents an entry point for the binding and unbinding process.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.DataBinding.BaseBindingManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.DataBinding.BaseBindingManager"/> class.
            </summary>
        </member>
        <member name="T:Spring.DataBinding.BindingDirection">
            <summary>
            Enumeration that defines possible values for data binding direction.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.DataBinding.BindingDirection.SourceToTarget">
            <summary>
            Specifies that value from the control property should be bound to a data model.
            </summary>
        </member>
        <member name="F:Spring.DataBinding.BindingDirection.TargetToSource">
            <summary>
            Specifies that value from the data model should be bound to control property.
            </summary>
        </member>
        <member name="F:Spring.DataBinding.BindingDirection.Bidirectional">
            <summary>
            Specifies that binding is bidirectional.
            </summary>
        </member>
        <member name="T:Spring.DataBinding.BindingErrorMessage">
            <summary>
            Represents an ErrorMessage specific to a binding instance.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Validation.ErrorMessage">
            <summary>
            Represents a single validation error message.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Goran Milosavljevic</author>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.ErrorMessage"/> class.
            </summary>
            <param name="id">Error message resource identifier.</param>
            <param name="parameters">Parameters that should be used for message resolution.</param>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.#ctor(Spring.Validation.ErrorMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.ErrorMessage"/> class copying values from another instance.
            </summary>
            <param name="other">Another Error message instance to copy values from.</param>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.GetSchema">
             <summary>
             This property is reserved, apply the 
             <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />
             to the class instead. 
             </summary>
             <returns>
             An <see cref="T:System.Xml.Schema.XmlSchema" /> 
             that describes the XML representation of the object that 
             is produced by the 
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
             method and consumed by the 
             <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
             method.
             </returns>
            
        </member>
        <member name="M:Spring.Validation.ErrorMessage.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"></see> stream 
            from which the object is deserialized. 
            </param>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"></see> stream 
            to which the object is serialized. 
            </param>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.GetMessage(Spring.Context.IMessageSource)">
            <summary>
            Resolves the message against specified <see cref="T:Spring.Context.IMessageSource"/>.
            </summary>
            <param name="messageSource">Message source to resolve this error message against.</param>
            <returns>Resolved error message.</returns>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Validation.ErrorMessage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Spring.Validation.ErrorMessage.Id">
            <summary>
            Gets or sets the resource identifier for this message.
            </summary>
            <value>The resource identifier for this message.</value>
        </member>
        <member name="P:Spring.Validation.ErrorMessage.Parameters">
            <summary>
            Gets or sets the message parameters.
            </summary>
            <value>The message parameters.</value>   
        </member>
        <member name="M:Spring.DataBinding.BindingErrorMessage.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.ErrorMessage"/> class.
            </summary>
            <param name="bindingId">the id of the binding this error message is associated with</param>
            <param name="id">the message id</param>
            <param name="parameters">optional parameters to this message</param>
        </member>
        <member name="M:Spring.DataBinding.BindingErrorMessage.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"></see> stream 
            from which the object is deserialized. 
            </param>
        </member>
        <member name="M:Spring.DataBinding.BindingErrorMessage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"></see> stream 
            to which the object is serialized. 
            </param>
        </member>
        <member name="M:Spring.DataBinding.BindingErrorMessage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.DataBinding.BindingErrorMessage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Spring.DataBinding.BindingErrorMessage.BindingId">
            <summary>
            Get the ID of the binding this message instance relates to.
            </summary>
        </member>
        <member name="T:Spring.DataBinding.IDataBound">
            <summary>
            Interface that should be implemented by data bound objects, such as 
            web pages, user controls, windows forms, etc.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="P:Spring.DataBinding.IDataBound.BindingManager">
            <summary>
            Gets the binding manager.
            </summary>
            <value>The binding manager.</value>
        </member>
        <member name="T:Spring.DataBinding.ListBinding">
            <summary>
            <see cref="T:Spring.DataBinding.IBindingContainer"/> implementation that allows
            data binding between collections that implement <see cref="T:System.Collections.IList"/>
            interface.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.DataBinding.ListBinding.BindSourceToTarget(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds source object to target object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.ListBinding.BindTargetToSource(System.Object,System.Object,Spring.Validation.IValidationErrors,System.Collections.IDictionary)">
            <summary>
            Binds target object to source object.
            </summary>
            <param name="source">
            The source object.
            </param>
            <param name="target">
            The target object.
            </param>
            <param name="validationErrors">
            Validation errors collection that type conversion errors should be added to.
            </param>
            <param name="variables">
            Variables that should be used during expression evaluation.
            </param>
        </member>
        <member name="T:Spring.DataBinding.SimpleExpressionBinding">
            <summary>
            Simple, expression-based implementation of <see cref="T:Spring.DataBinding.IBinding"/> that
            binds source to target one-to-one.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.DataBinding.SimpleExpressionBinding.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> class.
            </summary>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
        </member>
        <member name="M:Spring.DataBinding.SimpleExpressionBinding.#ctor(System.String,System.String,Spring.Globalization.IFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.DataBinding.SimpleExpressionBinding"/> class.
            </summary>
            <param name="sourceExpression">
            The source expression.
            </param>
            <param name="targetExpression">
            The target expression.
            </param>
            <param name="formatter">
            The formatter to use.
            </param>
        </member>
        <member name="M:Spring.DataBinding.SimpleExpressionBinding.GetSourceValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Gets the source value for the binding.
            </summary>
            <param name="source">
            Source object to extract value from.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
            <returns>
            The source value for the binding.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.SimpleExpressionBinding.SetSourceValue(System.Object,System.Object,System.Collections.IDictionary)">
            <summary>
            Sets the source value for the binding.
            </summary>
            <param name="source">
            The source object to set the value on.
            </param>
            <param name="value">
            The value to set.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
        </member>
        <member name="M:Spring.DataBinding.SimpleExpressionBinding.GetTargetValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Gets the target value for the binding.
            </summary>
            <param name="target">
            Source object to extract value from.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
            <returns>
            The target value for the binding.
            </returns>
        </member>
        <member name="M:Spring.DataBinding.SimpleExpressionBinding.SetTargetValue(System.Object,System.Object,System.Collections.IDictionary)">
            <summary>
            Sets the target value for the binding.
            </summary>
            <param name="target">
            The target object to set the value on.
            </param>
            <param name="value">
            The value to set.
            </param>
            <param name="variables">
            Variables for expression evaluation.
            </param>
        </member>
        <member name="P:Spring.DataBinding.SimpleExpressionBinding.SourceExpression">
            <summary>
            Gets the source expression.
            </summary>
            <value>The source expression.</value>
        </member>
        <member name="P:Spring.DataBinding.SimpleExpressionBinding.TargetExpression">
            <summary>
            Gets the target expression.
            </summary>
            <value>The target expression.</value>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.collections.AST">
            <summary>
            Minimal AST node interface used by ANTLR AST generation and tree-walker.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.addChild(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Add a (rightmost) child to this node
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.getFirstChild">
            <summary>
            Get the first child of this node; null if no children
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.getNextSibling">
            <summary>
            Get	the next sibling in line after this one
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.getText">
            <summary>
            Get the token text for this node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.getNumberOfChildren">
            <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
            <returns>Number of children</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.setFirstChild(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Set the first child of a node.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.setNextSibling(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Set the next sibling after this one.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.setText(System.String)">
            <summary>
            Set the token text for this node
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.collections.AST.setType(System.Int32)">
            <summary>
            Set the token type for this node
            </summary>
            <param name="ttype"></param>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.collections.AST.Type">
            <summary>
            Get the token type for this node
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.debug.ANTLREventArgs.type_">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.CharScanner.tokenCreator">
            <summary>Used for creating Token instances.</summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.CharScanner.cached_LA1">
            <summary>Used for caching lookahead characters.</summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.CharScanner.panic(System.String)">
            <summary>
            This method is executed by ANTLR internally when it detected an illegal
            state that cannot be recovered from.
            The previous implementation of this method called <see cref="M:System.Environment.Exit(System.Int32)"/>
            and writes directly to <see cref="P:System.Console.Error"/>, which is usually not 
            appropriate when a translator is embedded into a larger application.
            </summary>
            <param name="s">Error message.</param>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.TokenCreator">
            <summary>
            A creator of Token object instances.
            </summary>
            <remarks>
            <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of Token objects.
            </para>
            <para>
            Since Lexers in ANTLR use a single Token type, each TokenCreator can 
            create one class of Token objects (that's why it's not called TokenFactory).
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.TokenCreator.Create">
            <summary>
            Constructs a <see cref="T:Spring.Expressions.Parser.antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.TokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.CharScanner.ReflectionBasedTokenCreator.tokenTypeName">
            <summary>
            The fully qualified name of the Token type to create.
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.CharScanner.ReflectionBasedTokenCreator.tokenTypeObject">
            <summary>
            Type object used as a template for creating tokens by reflection.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.CharScanner.ReflectionBasedTokenCreator.SetTokenType(System.String)">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.CharScanner.ReflectionBasedTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:Spring.Expressions.Parser.antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.CharScanner.ReflectionBasedTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.DebuggingParser">
            <summary> This type was created in VisualAge.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.DebuggingCharScanner.reportError(Spring.Expressions.Parser.antlr.MismatchedCharException)">
            <summary>Report exception errors caught in nextToken() 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.DebuggingCharScanner.reportError(System.String)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.DebuggingCharScanner.reportWarning(System.String)">
            <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.InputBuffer">
            <summary>
            Represents a stream of characters fed to the lexer from that can be rewound 
            via mark()/rewind() methods.
            </summary>
            <remarks>
            <para>
            A dynamic array is used to buffer up all the input characters.  Normally,
            "k" characters are stored in the buffer.  More characters may be stored 
            during guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
            Consumption of characters is deferred.  In other words, reading the next
            character is not done by conume(), but deferred until needed by LA or LT.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.GuessingEventArgs.setValues(System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferEventArgs.setValues(System.Int32,System.Char,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.InputBufferListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.InputBufferListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.InputBufferListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferListenerBase.inputBufferConsume(System.Object,Spring.Expressions.Parser.antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "CharConsumed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferListenerBase.inputBufferLA(System.Object,Spring.Expressions.Parser.antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "CharLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferListenerBase.inputBufferMark(System.Object,Spring.Expressions.Parser.antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "Mark" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferListenerBase.inputBufferRewind(System.Object,Spring.Expressions.Parser.antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "Rewind" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferReporter.inputBufferConsume(System.Object,Spring.Expressions.Parser.antlr.debug.InputBufferEventArgs)">
            <summary> charBufferConsume method comment.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.InputBufferReporter.inputBufferLA(System.Object,Spring.Expressions.Parser.antlr.debug.InputBufferEventArgs)">
            <summary> charBufferLA method comment.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.Parser.panic">
            <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
            
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.Parser.setASTFactory(Spring.Expressions.Parser.antlr.ASTFactory)">
            <summary>
            Specify an object with support code (shared by Parser and TreeParser.
            Normally, the programmer does not play with this, using 
            <see cref="M:Spring.Expressions.Parser.antlr.Parser.setASTNodeClass(System.String)"/> instead.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.Parser.setASTNodeClass(System.String)">
            <summary>
            Specify the type of node to create during tree building. 
            </summary>
            <param name="cl">Fully qualified AST Node type name.</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.Parser.setASTNodeType(System.String)">
            <summary>
            Specify the type of node to create during tree building. 
            use <see cref="M:Spring.Expressions.Parser.antlr.Parser.setASTNodeClass(System.String)"/> now to be consistent with 
            Token Object Type accessor.
            </summary>
            <param name="nodeType">Fully qualified AST Node type name.</param>
        </member>
        <member name="E:Spring.Expressions.Parser.antlr.Parser.EnterRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.consume">
            <summary>Get another token object from the token stream 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.LA(System.Int32)">
            <summary>Return the token type of the ith token of lookahead where i=1
            is the current token being examined by the parser (i.e., it
            has not been matched yet).
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.match(System.Int32)">
            <summary>Make sure current lookahead symbol matches token type <tt>t</tt>.
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.match(Spring.Expressions.Parser.antlr.collections.impl.BitSet)">
            <summary>Make sure current lookahead symbol matches the given set
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.reportError(Spring.Expressions.Parser.antlr.RecognitionException)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.reportError(System.String)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.reportWarning(System.String)">
            <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.LLkDebuggingParser.setupDebugging(Spring.Expressions.Parser.antlr.TokenStream,Spring.Expressions.Parser.antlr.TokenBuffer)">
            <summary>User can override to do their own debugging 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.MessageEventArgs.setValues(System.Int32,System.String)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.MessageListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.MessageListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.MessageListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.MessageListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.MessageListenerBase.reportError(System.Object,Spring.Expressions.Parser.antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportError" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.MessageListenerBase.reportWarning(System.Object,Spring.Expressions.Parser.antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportWarning" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.NewLineEventArgs.ToString">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.ParserEventSupport">
            <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.ParserListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.ParserListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.ParserListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.enterRule(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "EnterRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.exitRule(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "ExitRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.parserConsume(System.Object,Spring.Expressions.Parser.antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "Consume" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.parserLA(System.Object,Spring.Expressions.Parser.antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "ParserLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.parserMatch(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "Match" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.parserMatchNot(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.parserMismatch(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatch" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.parserMismatchNot(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.reportError(System.Object,Spring.Expressions.Parser.antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportError" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.reportWarning(System.Object,Spring.Expressions.Parser.antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportWarning" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.semanticPredicateEvaluated(System.Object,Spring.Expressions.Parser.antlr.debug.SemanticPredicateEventArgs)">
            <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.syntacticPredicateFailed(System.Object,Spring.Expressions.Parser.antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredFailed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.syntacticPredicateStarted(System.Object,Spring.Expressions.Parser.antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredStarted" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserListenerBase.syntacticPredicateSucceeded(System.Object,Spring.Expressions.Parser.antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.MatchEventArgs.setValues(System.Int32,System.Int32,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.ParserMatchListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.ParserMatchListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.ParserMatchListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserMatchListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserMatchListenerBase.parserMatch(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "Match" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserMatchListenerBase.parserMatchNot(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserMatchListenerBase.parserMismatch(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatch" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserMatchListenerBase.parserMismatchNot(System.Object,Spring.Expressions.Parser.antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.TraceListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.TraceListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.TraceListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.TraceListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.TraceListenerBase.enterRule(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "EnterRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.TraceListenerBase.exitRule(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "ExitRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.TokenEventArgs.setValues(System.Int32,System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.ParserTokenListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.ParserTokenListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.ParserTokenListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserTokenListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserTokenListenerBase.parserConsume(System.Object,Spring.Expressions.Parser.antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "Consume" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParserTokenListenerBase.parserLA(System.Object,Spring.Expressions.Parser.antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "ParserLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser">
            <summary>
            Specifies the behaviour required (i.e. parser modifications) 
            specifically to support parse tree debugging and derivation.
            </summary>
            <remarks>
            <para>
            Override the standard matching and rule entry/exit routines
            to build parse trees.  This class is useful for 2.7.3 where
            you can specify a superclass like
            </para>
            <para>
            class TinyCParser extends Parser(ParseTreeDebugParser);
            </para>
            </remarks>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser.currentParseTreeRoot">
            <summary>
            Each new rule invocation must have it's own subtree. Tokens are
            added to the current root so we must have a stack of subtree roots.
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser.mostRecentParseTreeRoot">
            <summary>
            Track most recently created parse subtree so that when parsing
            is finished, we can get to the root.
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser.numberOfDerivationSteps">
            <summary>
            For every rule replacement with a production, we bump up count.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser.addCurrentTokenToParseTree">
            <summary>
            Adds LT(1) to the current parse subtree.
            </summary>
            <remarks>
            <para>
            Note that the match() routines add the node before checking for 
            correct match.  This means that, upon mismatched token, there 
            will a token node in the tree corresponding to where that token 
            was expected.  For no viable alternative errors, no node will 
            be in the tree as nothing was matched() (the lookahead failed 
            to predict an alternative).
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser.traceIn(System.String)">
            <summary>
            Create a rule node, add to current tree, and make it current root
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.ParseTreeDebugParser.traceOut(System.String)">
            <summary>
            Pop current root; back to adding to old root
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.ScannerEventSupport">
            <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.SemanticPredicateEventArgs.setValues(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.SemanticPredicateListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.SemanticPredicateListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.SemanticPredicateListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.SemanticPredicateListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.SemanticPredicateListenerBase.semanticPredicateEvaluated(System.Object,Spring.Expressions.Parser.antlr.debug.SemanticPredicateEventArgs)">
            <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.debug.SyntacticPredicateListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:Spring.Expressions.Parser.antlr.debug.SyntacticPredicateListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:Spring.Expressions.Parser.antlr.debug.SyntacticPredicateListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.SyntacticPredicateListenerBase.doneParsing(System.Object,Spring.Expressions.Parser.antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateFailed(System.Object,Spring.Expressions.Parser.antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredFailed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateStarted(System.Object,Spring.Expressions.Parser.antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredStarted" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateSucceeded(System.Object,Spring.Expressions.Parser.antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.debug.TraceEventArgs.setValues(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.ASTFactory">
            <summary>
            AST Support code shared by TreeParser and Parser.
            </summary>
            <remarks>
            <para>
            We use delegation to share code (and have only one 
            bit of code to maintain) rather than subclassing
            or superclassing (forces AST support code to be
            loaded even when you don't want to do AST stuff).
            </para>
            <para>
            Typically, <see cref="M:Spring.Expressions.Parser.antlr.ASTFactory.setASTNodeType(System.String)"/>  is used to specify the
            homogeneous type of node to create, but you can override
            <see cref="M:Spring.Expressions.Parser.antlr.ASTFactory.create"/>  to make heterogeneous nodes etc...
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.#ctor">
            <summary>
            Constructs an <c>ASTFactory</c> with the default AST node type of
            <see cref="T:Spring.Expressions.Parser.antlr.CommonAST"/>.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.#ctor(System.String)">
            <summary>
            Constructs an <c>ASTFactory</c> and use the specified AST node type
            as the default.
            </summary>
            <param name="nodeTypeName">
            	Name of default AST node type for this factory.
            </param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.#ctor(System.Type)">
            <summary>
            Constructs an <c>ASTFactory</c> and use the specified AST node type
            as the default.
            </summary>
            <param name="nodeType">
            	MetaType of default AST node type for this factory.
            </param>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.ASTFactory.defaultASTNodeTypeObject_">
            <summary>
            Stores the Type of the default AST node class to be used during tree construction.
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.ASTFactory.heteroList_">
            <summary>
            Stores the mapping between custom AST NodeTypes and their NodeTypeName/NodeTypeClass
            and ASTNodeCreator.
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.ASTFactory.typename2creator_">
            <summary>
            Stores the mapping between AST node typenames and their token ID.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.setTokenTypeASTNodeType(System.Int32,System.String)">
            <summary>
            Specify an "override" for the <see cref="T:Spring.Expressions.Parser.antlr.collections.AST"/> type created for
            the specified Token type.
            </summary>
            <remarks>
            This method is useful for situations that ANTLR cannot oridinarily deal 
            with (i.e., when you  create a token based upon a nonliteral token symbol 
            like #[LT(1)].  This is a runtime value and ANTLR cannot determine the token 
            type (and hence the AST) statically.
            </remarks>
            <param name="tokenType">Token type to override.</param>
            <param name="NodeTypeName">
            	Fully qualified AST typename (or null to specify 
            	the factory's default AST type).
            </param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.registerFactory(System.Int32,System.String)">
            <summary>
            Register an AST Node Type for a given Token type ID.
            </summary>
            <param name="NodeType">The Token type ID.</param>
            <param name="NodeTypeName">The AST Node Type to register.</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.setTokenTypeASTNodeCreator(System.Int32,Spring.Expressions.Parser.antlr.ASTNodeCreator)">
            <summary>
            Register an ASTNodeCreator for a given Token type ID.
            </summary>
            <param name="NodeType">The Token type ID.</param>
            <param name="creator">The creater to register.</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.setASTNodeCreator(Spring.Expressions.Parser.antlr.ASTNodeCreator)">
            <summary>
            Register an ASTNodeCreator to be used for creating node by default.
            </summary>
            <param name="creator">The ASTNodeCreator.</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.setMaxNodeType(System.Int32)">
            <summary>
            Pre-expands the internal list of TokenTypeID-to-ASTNodeType mappings
            to the specified size.
            This is primarily a convenience method that can be used to prevent 
            unnecessary and costly re-org of the mappings list.
            </summary>
            <param name="NodeType">Maximum Token Type ID.</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.addASTChild(Spring.Expressions.Parser.antlr.ASTPair@,Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Add a child to the current AST
            </summary>
            <param name="currentAST">The AST to add a child to</param>
            <param name="child">The child AST to be added</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.create">
            <summary>
            Creates a new uninitialized AST node. Since a specific AST Node Type
            wasn't indicated, the new AST node is created using the current default
            AST Node type - <see cref="F:Spring.Expressions.Parser.antlr.ASTFactory.defaultASTNodeTypeObject_"/>
            </summary>
            <returns>An uninitialized AST node object.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.create(System.Int32)">
            <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:Spring.Expressions.Parser.antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.create(System.Int32,System.String)">
            <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:Spring.Expressions.Parser.antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <param name="txt">Text for initializing the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.create(System.Int32,System.String,System.String)">
            <summary>
            Creates a new AST node using the specified AST Node Type name. Once created,
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined solely by <c>ASTNodeTypeName</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <param name="txt">Text for initializing the new AST Node.</param>
            <param name="ASTNodeTypeName">Fully qualified name of the Type to be used for creating the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.create(Spring.Expressions.Parser.antlr.IToken,System.String)">
            <summary>
            Creates a new AST node using the specified AST Node Type name.
            </summary>
            <param name="tok">Token instance to be used to initialize the new AST Node.</param>
            <param name="ASTNodeTypeName">
            	Fully qualified name of the Type to be used for creating the new AST Node.
            </param>
            <returns>A newly created and initialized AST node object.</returns>
            <remarks>
            Once created, the new AST node is initialized with the specified Token 
            instance. The <see cref="T:System.Type"/> used for creating this new AST 
            node is  determined solely by <c>ASTNodeTypeName</c>.
            <para>The AST Node type must have a default/parameterless constructor.</para>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.create(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Creates and initializes a new AST node using the specified AST Node instance.
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined solely by <c>aNode</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
            <param name="aNode">AST Node instance to be used for creating the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.create(Spring.Expressions.Parser.antlr.IToken)">
            <summary>
            Creates and initializes a new AST node using the specified Token instance.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:Spring.Expressions.Parser.antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="tok">Token instance to be used to create new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.dup(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Returns a copy of the specified AST Node instance. The copy is obtained by
            using the <see cref="T:System.ICloneable"/> method Clone().
            </summary>
            <param name="t">AST Node to copy.</param>
            <returns>An AST Node (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.dupList(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Duplicate AST Node tree rooted at specified AST node and all of it's siblings.
            </summary>
            <param name="t">Root of AST Node tree.</param>
            <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.dupTree(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Duplicate AST Node tree rooted at specified AST node. Ignore it's siblings.
            </summary>
            <param name="t">Root of AST Node tree.</param>
            <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.make(Spring.Expressions.Parser.antlr.collections.AST[])">
            <summary>
            Make a tree from a list of nodes.  The first element in the
            array is the root.  If the root is null, then the tree is
            a simple list not a tree.  Handles null children nodes correctly.
            For example, build(a, b, null, c) yields tree (a b c).  build(null,a,b)
            yields tree (nil a b).
            </summary>
            <param name="nodes">List of Nodes.</param>
            <returns>AST Node tree.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.make(Spring.Expressions.Parser.antlr.collections.impl.ASTArray)">
            <summary>
            Make a tree from a list of nodes, where the nodes are contained
            in an ASTArray object.
            </summary>
            <param name="nodes">List of Nodes.</param>
            <returns>AST Node tree.</returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.makeASTRoot(Spring.Expressions.Parser.antlr.ASTPair@,Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            Make an AST the root of current AST.
            </summary>
            <param name="currentAST"></param>
            <param name="root"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.setASTNodeType(System.String)">
            <summary>
            Sets the global default AST Node Type for this ASTFactory instance.
            This method also attempts to load the <see cref="T:System.Type"/> instance
            for the specified typename.
            </summary>
            <param name="t">Fully qualified AST Node Type name.</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTFactory.error(System.String)">
            <summary>
            To change where error messages go, can subclass/override this method
            and then setASTFactory in Parser and TreeParser.  This method removes
            a prior dependency on class antlr.Tool.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.ASTNodeCreator">
            <summary>
            A creator of AST node instances.
            </summary>
            <remarks>
            <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of AST node objects.
            </para>
            <para>
            Parsers and TreeParsers already use the ASTFactory class in ANTLR whenever
            they need to create an AST node objeect. What this class does is to support
            performant extensibility of the basic ASTFactory. The ASTFactory can now be
            extnded as run-time to support more new AST node types without using needing
            to use reflection.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ASTNodeCreator.Create">
            <summary>
            Constructs an <see cref="T:Spring.Expressions.Parser.antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.ASTNodeCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.ASTVisitor">
            <summary>
            Summary description for ASTVisitor.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.BaseAST.getNumberOfChildren">
            <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
            <returns>Number of children</returns>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.ByteBuffer.buf">
            <summary>
            Small buffer used to avoid reading individual chars
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.CharBuffer.buf">
            <summary>
            Small buffer used to avoid reading individual chars
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.CommonAST.CommonASTCreator.Create">
            <summary>
            Constructs a <see cref="T:Spring.Expressions.Parser.antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.CommonAST.CommonASTCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.Create">
            <summary>
            Constructs a <see cref="T:Spring.Expressions.Parser.antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.IToken">
            <summary>
            A token is minimally a token type.  Subclasses can add the text matched
            for the token and line info. 
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.CommonToken.CommonTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:Spring.Expressions.Parser.antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.CommonToken.CommonTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:Spring.Expressions.Parser.antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:Spring.Expressions.Parser.antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.DumpASTVisitor">
            <summary>
            Summary description for DumpASTVisitor.
            </summary>
            Simple class to dump the contents of an AST to the output 
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.MismatchedCharException.appendCharName(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append a char to the msg buffer.  If special, then show escaped version
            </summary>
            <param name="sb">Message buffer</param>
            <param name="c">Char to append</param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ParseTree.getLeftmostDerivationStep(System.Int32)">
            <summary>
            Walk parse tree and return requested number of derivation steps.
            If steps less-than 0, return node text.  If steps equals 1, return derivation
            string at step.
            </summary>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ParseTree.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
            <summary>
            Get derivation and return how many you did (less than requested for
            subtree roots.
            </summary>
            <param name="buf">string buffer</param>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.ParseTreeRule.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
            <summary>
            Do a step-first walk, building up a buffer of tokens until
            you've reached a particular step and print out any rule subroots
            insteads of descending.
            </summary>
            <param name="buf">derivation buffer</param>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine">
            <summary>
            This token stream tracks the *entire* token stream coming from
            a lexer, but does not pass on the whitespace (or whatever else
            you want to discard) to the parser.
            </summary>
            <remarks>
            <para>
            This class can then be asked for the ith token in the input stream.
            Useful for dumping out the input stream exactly after doing some
            augmentation or other manipulations.  Tokens are index from 0..n-1
            </para>
            <para>
            You can insert stuff, replace, and delete chunks.  Note that the
            operations are done lazily--only if you convert the buffer to a
            string.  This is very efficient because you are not moving data around
            all the time.  As the buffer of tokens is converted to strings, the
            toString() method(s) check to see if there is an operation at the
            current index.  If so, the operation is done and then normal string
            rendering continues on the buffer.  This is like having multiple Turing
            machine instruction streams (programs) operating on a single input tape. :)
            </para>
            <para>
            Since the operations are done lazily at toString-time, operations do not
            screw up the token index values.  That is, an insert operation at token
            index i does not change the index values for tokens i+1..n-1.
            </para>
            <para>
            Because operations never actually alter the buffer, you may always get
            the original token stream back without undoing anything.  Since
            the instructions are queued up, you can easily simulate transactions and
            roll back any changes if there is an error just by removing instructions.
            For example,
            </para>
            <example>For example:
            <code>
            TokenStreamRewriteEngine rewriteEngine = new TokenStreamRewriteEngine(lexer);
            JavaRecognizer           parser        = new JavaRecognizer(rewriteEngine);
            ...
            rewriteEngine.insertAfter("pass1", t, "foobar");}
            rewriteEngine.insertAfter("pass2", u, "start");}
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass1"));
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass2"));
            </code>
            </example>
            <para>
            You can also have multiple "instruction streams" and get multiple
            rewrites from a single pass over the input.  Just name the instruction
            streams and use that name again when printing the buffer.  This could be
            useful for generating a C file and also its header file--all from the
            same buffer.
            </para>
            <para>
            If you don't use named rewrite streams, a "default" stream is used.
            </para>
            <para>
            Terence Parr, parrt@cs.usfca.edu
            University of San Francisco
            February 2004
            </para>
            </remarks>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.tokens">
            <summary>
            Track the incoming list of tokens
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.programs">
            <summary>
            You may have multiple, named streams of rewrite operations.
            I'm calling these things "programs."
            Maps string (name) -> rewrite (List)
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.lastRewriteTokenIndexes">
            <summary>
            Map string (program name) -> Integer index
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.index">
            <summary>
            track index of tokens
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.stream">
            <summary>
            Who do we suck tokens from?
            </summary>
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.discardMask">
            <summary>
            Which (whitespace) token(s) to throw out
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.rollback(System.String,System.Int32)">
            <summary>
            Rollback the instruction stream for a program so that
            the indicated instruction (via instructionIndex) is no
            longer in the stream.
            </summary>
            <remarks>
            UNTESTED!
            </remarks>
            <param name="programName"></param>
            <param name="instructionIndex"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.deleteProgram(System.String)">
            <summary>
            Reset the program so that no instructions exist
            </summary>
            <param name="programName"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.addToSortedRewriteList(Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.RewriteOperation)">
            <summary>
            If op.index > lastRewriteTokenIndexes, just add to the end.
            Otherwise, do linear
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine.RewriteOperation.execute(System.Text.StringBuilder)">
            <summary>
            Execute the rewrite operation by possibly adding to the buffer.
            </summary>
            <param name="buf">rewrite buffer</param>
            <returns>The index of the next token to operate on.</returns>
        </member>
        <member name="T:Spring.Expressions.Parser.antlr.TokenWithIndex">
            <summary>
            This token tracks it's own index 0..n-1 relative to the beginning 
            of the stream. It is designed to work with 
            <see cref="T:Spring.Expressions.Parser.antlr.TokenStreamRewriteEngine"/> in TokenStreamRewriteEngine.cs
            </summary> 
        </member>
        <member name="F:Spring.Expressions.Parser.antlr.TokenWithIndex.index">
            <summary>
            Index into token array indicating position in input stream
            </summary>
        </member>
        <member name="M:Spring.Expressions.Parser.antlr.TreeParser.panic">
            <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
            
        </member>
        <member name="T:Spring.Expressions.Processors.AverageAggregator">
            <summary>
            Implementation of the average aggregator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Expressions.Processors.ICollectionProcessor">
            <summary>
            Defines an interface that should be implemented
            by all collection processors and aggregators.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Processors.ICollectionProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Processes a list of source items and returns a result.
            </summary>
            <param name="source">
            The source list to process.
            </param>
            <param name="args">
            An optional processor arguments array.
            </param>
            <returns>
            The processing result.
            </returns>
        </member>
        <member name="M:Spring.Expressions.Processors.AverageAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the average of the numeric values in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The average of the numeric values in the source collection.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.ConversionProcessor">
            <summary>
            Converts all elements in the input list to a given target type.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Expressions.Processors.ConversionProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Processes a list of source items and returns a result.
            </summary>
            <param name="source">
            The source list to process.
            </param>
            <param name="args">
            An optional processor arguments array.
            </param>
            <returns>
            The processing result.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.CountAggregator">
            <summary>
            Implementation of the count aggregator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Processors.CountAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the number of items in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The number of items in the source collection, 
            or zero if the collection is empty or <c>null</c>.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.DateConversionProcessor">
            <summary>
            Converts a string literal to a <see cref="T:System.DateTime"/> instance.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Expressions.Processors.IMethodCallProcessor">
            <summary>
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Expressions.Processors.DistinctProcessor">
            <summary>
            Implementation of the distinct processor.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Processors.DistinctProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns distinct items from the collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            0: boolean flag specifying whether to include <c>null</c>
            in the results or not. Default is false, which means that
            <c>null</c> values will not be included in the results.
            </param>
            <returns>
            A collection containing distinct source collection elements.
            </returns>
            <exception cref="T:System.ArgumentException">
            If there is more than one argument, or if the single optional argument 
            is not <b>Boolean</b>.
            </exception>
        </member>
        <member name="T:Spring.Expressions.Processors.MaxAggregator">
            <summary>
            Implementation of the maximum aggregator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Processors.MaxAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the largest item in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The largest item in the source collection.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.MinAggregator">
            <summary>
            Implementation of the minimum aggregator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Processors.MinAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the smallest item in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The smallest item in the source collection.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.NonNullProcessor">
            <summary>
            Implementation of the non-null processor.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Processors.NonNullProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns non-null items from the collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            A collection containing non-null source collection elements.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.OrderByProcessor">
            <summary>
            Implementation of the 'order by' processor.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Expressions.Processors.OrderByProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Sorts the source collection using custom sort criteria.
            </summary>
            <remarks>
            Please note that your compare function needs to take care about
            proper conversion of types to be comparable!
            </remarks>
            <param name="source">
            The source collection to sort.
            </param>
            <param name="args">
            Sort criteria to use.
            </param>
            <returns>
            A sorted array containing collection elements.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.ReverseProcessor">
            <summary>
            Reverts order of elements in the list
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Expressions.Processors.ReverseProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Processes a list of source items and returns a result.
            </summary>
            <param name="source">
            The source list to process.
            </param>
            <param name="args">
            An optional processor arguments array.
            </param>
            <returns>
            The processing result.
            </returns>
        </member>
        <member name="T:Spring.Expressions.Processors.SortProcessor">
            <summary>
            Implementation of the sort processor.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Processors.SortProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Sorts the source collection.
            </summary>
            <remarks>
            Please not that this processor requires that collection elements
            are of a uniform type and that they implement <see cref="T:System.IComparable"/>
            interface.
            <p/>
            If you want to perform custom sorting based on element properties
            you should consider using <see cref="T:Spring.Expressions.Processors.OrderByProcessor"/> instead.
            </remarks>
            <param name="source">
            The source collection to sort.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            An array containing sorted collection elements.
            </returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="source"/> collection is not empty and it is 
            neither <see cref="T:System.Collections.IList"/> nor <see cref="T:Spring.Collections.ISet"/>.
            </exception>
        </member>
        <member name="T:Spring.Expressions.Processors.SumAggregator">
            <summary>
            Implementation of the sum aggregator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Processors.SumAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the sum of the numeric values in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The sum of the numeric values in the source collection.
            </returns>
        </member>
        <member name="T:Spring.Expressions.ArrayConstructorNode">
            <summary>
            Represents parsed method node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Expressions.NodeWithArguments">
            <summary>
            Base type for nodes that accept arguments.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Expressions.BaseNode">
            <summary>
            Base type for all expression nodes.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Expressions.SpringAST">
            <summary>
            For internal purposes only. Use <see cref="T:Spring.Expressions.BaseNode"/> for expression node implementations.
            </summary>
            <remarks>
            This class is only required to enable serialization of parsed Spring expressions since antlr.CommonAST
            unfortunately is not marked as [Serializable].<br/>
            <br/>
            <b>Note:</b>Since SpringAST implements <see cref="T:System.Runtime.Serialization.ISerializable"/>, deriving classes 
            have to explicitely override <see cref="M:Spring.Expressions.SpringAST.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> if they need to persist additional
            data during serialization.
            </remarks>
        </member>
        <member name="F:Spring.Expressions.SpringAST.Creator">
            <summary>
            The global SpringAST node factory
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.#ctor">
            <summary>
            Create an instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.#ctor(Spring.Expressions.Parser.antlr.IToken)">
            <summary>
            Create an instance from a token
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.initialize(Spring.Expressions.Parser.antlr.collections.AST)">
            <summary>
            initialize this instance from an AST
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.initialize(Spring.Expressions.Parser.antlr.IToken)">
            <summary>
            initialize this instance from an IToken
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.initialize(System.Int32,System.String)">
            <summary>
            initialize this instance from a token type number and a text
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.setText(System.String)">
            <summary>
            sets the text of this node
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.getText">
            <summary>
            gets the text of this node
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.SpringAST.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            populate SerializationInfo from this instance
            </summary>
        </member>
        <member name="P:Spring.Expressions.SpringAST.Type">
            <summary>
            gets or sets the token type of this node
            </summary>
        </member>
        <member name="P:Spring.Expressions.SpringAST.Text">
            <summary>
            gets or sets the text of this node
            </summary>
        </member>
        <member name="T:Spring.Expressions.IExpression">
            <summary>
            Interface that all navigation expression nodes have to implement.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.IExpression.GetValue">
            <summary>
            Returns expression value.
            </summary>
            <returns>Value of the expression.</returns>
        </member>
        <member name="M:Spring.Expressions.IExpression.GetValue(System.Object)">
            <summary>
            Returns expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <returns>Value of the expression.</returns>
        </member>
        <member name="M:Spring.Expressions.IExpression.GetValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Returns expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Value of the expression.</returns>
        </member>
        <member name="M:Spring.Expressions.IExpression.SetValue(System.Object,System.Object)">
            <summary>
            Sets expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="newValue">New value for the last node of the expression.</param>
        </member>
        <member name="M:Spring.Expressions.IExpression.SetValue(System.Object,System.Collections.IDictionary,System.Object)">
            <summary>
            Sets expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="variables">Expression variables map.</param>
            <param name="newValue">New value for the last node of the expression.</param>
        </member>
        <member name="M:Spring.Expressions.BaseNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.BaseNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.BaseNode.GetValue">
            <summary>
            Returns node's value.
            </summary>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.BaseNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.BaseNode.GetValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.BaseNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.BaseNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object[])">
            <summary>
            Evaluates this node for the given context, switching local variables map to the ones specified in <paramref name="arguments"/>.
            </summary>
        </member>
        <member name="M:Spring.Expressions.BaseNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Spring.Expressions.BaseNode.SetValue(System.Object,System.Collections.IDictionary,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="variables">Expression variables map.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Spring.Expressions.BaseNode.Set(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <remarks>
            <p>
            This is a default implementation of <c>Set</c> method, which
            simply throws <see cref="T:System.NotSupportedException"/>. 
            </p>
            <p>
            This was done in order to avoid redundant <c>Set</c> method implementations,
            because most of the node types do not support value setting.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Expressions.BaseNode.ToString">
            <summary>
            Returns a string representation of this node instance.
            </summary>
        </member>
        <member name="M:Spring.Expressions.BaseNode.GetValueWithArguments(Spring.Expressions.BaseNode,System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object[])">
            <summary>
            Evaluates this node, switching local variables map to the ones specified in <paramref name="arguments"/>.
            </summary>
        </member>
        <member name="T:Spring.Expressions.BaseNode.EvaluationContext">
            <summary>
            Holds the state during evaluating an expression.
            </summary>
        </member>
        <member name="F:Spring.Expressions.BaseNode.EvaluationContext.RootContext">
            <summary>
            Gets/Sets the root context of the current evaluation
            </summary>
        </member>
        <member name="F:Spring.Expressions.BaseNode.EvaluationContext.ThisContext">
            <summary>
            Gets/Sets the current context of the current evaluation
            </summary>
        </member>
        <member name="F:Spring.Expressions.BaseNode.EvaluationContext.Variables">
            <summary>
            Gets/Sets global variables of the current evaluation
            </summary>
        </member>
        <member name="F:Spring.Expressions.BaseNode.EvaluationContext.LocalVariables">
            <summary>
            Gets/Sets local variables of the current evaluation
            </summary>
        </member>
        <member name="M:Spring.Expressions.BaseNode.EvaluationContext.#ctor(System.Object,System.Collections.IDictionary)">
            <summary>
            Initializes a new EvaluationContext instance.
            </summary>
            <param name="rootContext">The root context for this evaluation</param>
            <param name="globalVariables">dictionary of global variables used during this evaluation</param>
        </member>
        <member name="M:Spring.Expressions.BaseNode.EvaluationContext.SwitchThisContext">
            <summary>
            Switches current ThisContext.
            </summary>
        </member>
        <member name="M:Spring.Expressions.BaseNode.EvaluationContext.SwitchLocalVariables(System.Collections.IDictionary)">
            <summary>
            Switches current LocalVariables.
            </summary>
        </member>
        <member name="P:Spring.Expressions.BaseNode.EvaluationContext.RootContextType">
            <summary>
            Gets the type of the <see cref="F:Spring.Expressions.BaseNode.EvaluationContext.RootContext"/>
            </summary>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.#ctor(System.String)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.AddArgument(Spring.Expressions.BaseNode)">
            <summary>
            Append an argument node to the list of child nodes
            </summary>
            <param name="argumentNode"></param>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.InitializeNode">
            <summary>
            Initializes the node. 
            </summary>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.AssertArgumentCount(System.Int32)">
            <summary>
            Asserts the argument count.
            </summary>
            <param name="requiredCount">The required count.</param>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.ResolveArguments(Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the arguments.
            </summary>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>An array of argument values</returns>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.ResolveNamedArguments(Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the named arguments.
            </summary>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>A dictionary of argument name to value mappings.</returns>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.ResolveArgument(System.Int32,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the argument.
            </summary>
            <param name="position">Argument position.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Resolved argument value.</returns>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.ResolveArgumentInternal(System.Int32,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the argument without ensuring <see cref="M:Spring.Expressions.NodeWithArguments.InitializeNode"/> was called.
            </summary>
            <param name="position">Argument position.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Resolved argument value.</returns>
        </member>
        <member name="M:Spring.Expressions.NodeWithArguments.ResolveNamedArgument(System.String,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the named argument.
            </summary>
            <param name="name">Argument name.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Resolved named argument value.</returns>
        </member>
        <member name="M:Spring.Expressions.ArrayConstructorNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.ArrayConstructorNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.ArrayConstructorNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the type defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.AssignNode">
            <summary>
            Represents parsed assignment node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.AssignNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.AssignNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.AssignNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Assigns value of the right operand to the left one.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.AttributeNode">
            <summary>
            Represents parsed attribute node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Expressions.ConstructorNode">
            <summary>
            Represents parsed method node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.ConstructorNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.ConstructorNode.#ctor(System.Type)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.ConstructorNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.ConstructorNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the type defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.ConstructorNode.GetObjectType(System.String)">
            <summary>
            Determines the type of object that should be instantiated.
            </summary>
            <param name="typeName">
            The type name to resolve.
            </param>
            <returns>
            The type of object that should be instantiated.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:Spring.Expressions.ConstructorNode.InitializeNode(System.Object[],System.Collections.IDictionary)">
            <summary>
            Initializes this node by caching necessary constructor and property info.
            </summary>
            <param name="argValues"></param>
            <param name="namedArgValues"></param>
        </member>
        <member name="M:Spring.Expressions.ConstructorNode.SetNamedArguments(System.Object,System.Collections.IDictionary)">
            <summary>
            Sets the named arguments (properties).
            </summary>
            <param name="instance">Instance to set property values on.</param>
            <param name="namedArgValues">Argument (property) name to value mappings.</param>
        </member>
        <member name="M:Spring.Expressions.AttributeNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.AttributeNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.AttributeNode.GetObjectType(System.String)">
            <summary>
            Tries to determine attribute type based on the specified
            attribute type name.
            </summary>
            <param name="typeName">
            Attribute type name to resolve.
            </param>
            <returns>
            Resolved attribute type.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If type cannot be resolved.
            </exception>
        </member>
        <member name="T:Spring.Expressions.BinaryOperator">
            <summary>
            Base class for binary operators.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.BinaryOperator.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.BinaryOperator.#ctor(Spring.Expressions.BaseNode,Spring.Expressions.BaseNode)">
            <summary>
            Create a new instance with the supplied operands
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Spring.Expressions.BinaryOperator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.BinaryOperator.GetLeftValue(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluate the left operand
            </summary>
        </member>
        <member name="M:Spring.Expressions.BinaryOperator.GetRightValue(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluate the left operand
            </summary>
        </member>
        <member name="P:Spring.Expressions.BinaryOperator.Left">
            <summary>
            Gets the left operand.
            </summary>
            <value>The left operand.</value>
        </member>
        <member name="P:Spring.Expressions.BinaryOperator.Right">
            <summary>
            Gets the right operand.
            </summary>
            <value>The right operand.</value>
        </member>
        <member name="T:Spring.Expressions.BooleanLiteralNode">
            <summary>
            Represents parsed boolean literal node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.BooleanLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.BooleanLiteralNode.#ctor(System.String)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.BooleanLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.BooleanLiteralNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the boolean literal node.
            </summary>
            <summary>
            This is the entrypoint into evaluating this expression.
            </summary>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.DefaultNode">
            <summary>
            Represents parsed default node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.DefaultNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.DefaultNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.DefaultNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns left operand if it is not null, or the right operand if it is.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.Expression">
            <summary>
            Container object for the parsed expression.
            </summary>
            <remarks>
            <p>
            Preparing this object once and reusing it many times for expression
            evaluation can result in significant performance improvements, as 
            expression parsing and reflection lookups are only performed once. 
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.Expression.Parse(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Expressions.Expression"/> class
            by parsing specified expression string.
            </summary>
            <param name="expression">Expression to parse.</param>
        </member>
        <member name="M:Spring.Expressions.Expression.RegisterFunction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Registers lambda expression under the specified <paramref name="functionName"/>.
            </summary>
            <param name="functionName">Function name to register expression as.</param>
            <param name="lambdaExpression">Lambda expression to register.</param>
            <param name="variables">Variables dictionary that the function will be registered in.</param>
        </member>
        <member name="M:Spring.Expressions.Expression.ParsePrimary(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Expressions.Expression"/> class
            by parsing specified primary expression string.
            </summary>
            <param name="expression">Primary expression to parse.</param>
        </member>
        <member name="M:Spring.Expressions.Expression.ParseProperty(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Expressions.Expression"/> class
            by parsing specified property expression string.
            </summary>
            <param name="expression">Property expression to parse.</param>
        </member>
        <member name="M:Spring.Expressions.Expression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Expressions.Expression"/> class.
            </summary>
        </member>
        <member name="M:Spring.Expressions.Expression.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.Expression.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluates this expression for the specified root object and returns 
            value of the last node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Value of the last node.</returns>
        </member>
        <member name="M:Spring.Expressions.Expression.Set(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Evaluates this expression for the specified root object and sets 
            value of the last node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">Value to set last node to.</param>
            <exception cref="T:System.NotSupportedException">If navigation expression is empty.</exception>
        </member>
        <member name="M:Spring.Expressions.Expression.GetPropertyInfo(System.Object,System.Collections.IDictionary)">
            <summary>
            Evaluates this expression for the specified root object and returns 
            <see cref="T:System.Reflection.PropertyInfo"/> of the last node, if possible.
            </summary>
            <param name="context">Context to evaluate expression against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Value of the last node.</returns>
        </member>
        <member name="T:Spring.Expressions.Expression.ReservedVariableNames">
            <summary>
            Contains a list of reserved variable names.
            You must not use any variable names with the reserved prefix!
            </summary>
        </member>
        <member name="F:Spring.Expressions.Expression.ReservedVariableNames.RESERVEDPREFIX">
            <summary>
            Variable Names using this prefix are reserved for internal framework use
            </summary>
        </member>
        <member name="F:Spring.Expressions.Expression.ReservedVariableNames.CurrentObjectFactory">
            <summary>
            variable name of the currently processed object factory, if any
            </summary>
        </member>
        <member name="T:Spring.Expressions.ExpressionConverter">
            <summary>
            Converts string representation of expression into an instance of <see cref="T:Spring.Expressions.IExpression"/>.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from a the sourcetype to a <see cref="T:Spring.Expressions.IExpression"/>?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Expressions.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a <see cref="T:System.String"/> value to an
            <see cref="T:Spring.Expressions.IExpression"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture.
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.String"/> array if successful.
            </returns>        
        </member>
        <member name="T:Spring.Expressions.ExpressionEvaluator">
            <summary>
            Utility class that enables easy expression evaluation.
            </summary>
            <remarks>
            <p>
            This class allows users to get or set properties, execute methods, and evaluate
            logical and arithmetic expressions.
            </p>
            <p>
            Methods in this class parse expression on every invocation.
            If you plan to reuse the same expression many times, you should prepare
            the expression once using the static <see cref="M:Spring.Expressions.Expression.Parse(System.String)"/> method,
            and then call <see cref="M:Spring.Expressions.IExpression.GetValue(System.Object,System.Collections.IDictionary)"/> to evaluate it.
            </p>
            <p>
            This can result in significant performance improvements as it avoids expression
            parsing and node resolution every time it is called. 
            </p>
            <p>
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.ExpressionEvaluator.GetValue(System.Object,System.String)">
            <summary>
            Parses and evaluates specified expression.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <returns>Value of the last node in the expression.</returns>
        </member>
        <member name="M:Spring.Expressions.ExpressionEvaluator.GetValue(System.Object,System.String,System.Collections.IDictionary)">
            <summary>
            Parses and evaluates specified expression.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Value of the last node in the expression.</returns>
        </member>
        <member name="M:Spring.Expressions.ExpressionEvaluator.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Parses and specified expression and sets the value of the
            last node to the value of the <c>newValue</c> parameter.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="newValue">Value to set last node to.</param>
        </member>
        <member name="M:Spring.Expressions.ExpressionEvaluator.SetValue(System.Object,System.String,System.Collections.IDictionary,System.Object)">
            <summary>
            Parses and specified expression and sets the value of the
            last node to the value of the <c>newValue</c> parameter.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="variables">Expression variables map.</param>
            <param name="newValue">Value to set last node to.</param>
        </member>
        <member name="T:Spring.Expressions.ExpressionListNode">
            <summary>
            Represents parsed expression list node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.ExpressionListNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.ExpressionListNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.ExpressionListNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a result of the last expression in a list.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Result of the last expression in a list</returns>
        </member>
        <member name="T:Spring.Expressions.FunctionNode">
            <summary>
            Represents parsed function node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.FunctionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.FunctionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.FunctionNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluates function represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Result of the function evaluation.</returns>
        </member>
        <member name="T:Spring.Expressions.HexLiteralNode">
            <summary>
            Represents parsed hexadecimal integer literal node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.HexLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.HexLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.HexLiteralNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the hexadecimal integer literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.IndexerNode">
            <summary>
            Represents parsed indexer node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.IndexerNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.IndexerNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.IndexerNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.IndexerNode.Set(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Spring.Expressions.IndexerNode.GetPropertyInfo(System.Object,System.Collections.IDictionary)">
            <summary>
            Utility method that is needed by ObjectWrapper and AbstractAutowireCapableObjectFactory.
            </summary>
            <param name="context">Context to resolve property against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>PropertyInfo for this node.</returns>
        </member>
        <member name="T:Spring.Expressions.IntLiteralNode">
            <summary>
            Represents parsed integer literal node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.IntLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.IntLiteralNode.#ctor(System.String)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.IntLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.IntLiteralNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the integer literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.LambdaExpressionNode">
            <summary>
            Represents lambda expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Expressions.LambdaExpressionNode.argumentNames">
            <summary>
            caches argumentNames of this instance
            </summary>
        </member>
        <member name="F:Spring.Expressions.LambdaExpressionNode.bodyExpression">
            <summary>
            caches body expression of this lambda function
            </summary>
        </member>
        <member name="M:Spring.Expressions.LambdaExpressionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.LambdaExpressionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.LambdaExpressionNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Assigns value of the right operand to the left one.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.LambdaExpressionNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object[])">
            <summary>
            Evaluates this node, switching local variables map to the ones specified in <paramref name="argValues"/>.
            </summary>
        </member>
        <member name="P:Spring.Expressions.LambdaExpressionNode.ArgumentNames">
            <summary>
            Gets argument names for this lambda expression.
            </summary>
        </member>
        <member name="T:Spring.Expressions.ListInitializerNode">
            <summary>
            Represents parsed list initializer node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.ListInitializerNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.ListInitializerNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.ListInitializerNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the list defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.LocalFunctionNode">
            <summary>
            Represents local function node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.LocalFunctionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.LocalFunctionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.LocalFunctionNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluates function represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Result of the function evaluation.</returns>
        </member>
        <member name="T:Spring.Expressions.LocalVariableNode">
            <summary>
            Represents parsed variable node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.LocalVariableNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.LocalVariableNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.LocalVariableNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns value of the local variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.LocalVariableNode.Set(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets value of the local variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="T:Spring.Expressions.MapEntryNode">
            <summary>
            Represents parsed map entry node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.MapEntryNode.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Spring.Expressions.MapEntryNode"/>.
            </summary>
        </member>
        <member name="M:Spring.Expressions.MapEntryNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.MapEntryNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the map entry defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.MapInitializerNode">
            <summary>
            Represents parsed map initializer node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.MapInitializerNode.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Spring.Expressions.MapInitializerNode"/>.
            </summary>
        </member>
        <member name="M:Spring.Expressions.MapInitializerNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.MapInitializerNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the map defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.MethodNode">
            <summary>
            Represents parsed method node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.MethodNode.#cctor">
            <summary>
            Static constructor. Initializes a map of special collection processor methods.
            </summary>
        </member>
        <member name="M:Spring.Expressions.MethodNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.MethodNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.MethodNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.MethodNode.GetBestMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Gets the best method given the name, argument values, for a given type.
            </summary>
            <param name="type">The type on which to search for the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="argValues">The arg values.</param>
            <returns>Best matching method or null if none found.</returns>
        </member>
        <member name="T:Spring.Expressions.NamedArgumentNode">
            <summary>
            Represents parsed named argument node in the expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.NamedArgumentNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.NamedArgumentNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.NamedArgumentNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the value of the named argument defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.NullLiteralNode">
            <summary>
            Represents parsed null literal node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.NullLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.NullLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.NullLiteralNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the null literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpADD">
            <summary>
            Represents arithmetic addition operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpADD.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpADD.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpADD.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic addition operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpAND">
            <summary>
            Represents AND operator (both, bitwise and logical).
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpAND.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpAND.#ctor(Spring.Expressions.BaseNode,Spring.Expressions.BaseNode)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpAND.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpAND.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical AND operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpBetween">
            <summary>
            Represents logical BETWEEN operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpBetween.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpBetween.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpBetween.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical IN operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand is contained within the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Spring.Expressions.OpDIVIDE">
            <summary>
            Represents arithmetic division operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpDIVIDE.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpDIVIDE.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpDIVIDE.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic division operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpEqual">
            <summary>
            Represents logical equality operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpEqual.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical equality operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpGreater">
            <summary>
            Represents logical "greater than" operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpGreater.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpGreater.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpGreater.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "greater than" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpGreaterOrEqual">
            <summary>
            Represents logical "greater than or equal" operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpGreaterOrEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpGreaterOrEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpGreaterOrEqual.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "greater than or equal" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpIn">
            <summary>
            Represents logical IN operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpIn.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpIn.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpIn.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical IN operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand is contained within the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Spring.Expressions.OpIs">
            <summary>
            Represents logical IS operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpIs.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpIs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpIs.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical IS operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand is contained within the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Spring.Expressions.OpLess">
            <summary>
            Represents logical "less than" operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpLess.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpLess.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpLess.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "less than" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpLessOrEqual">
            <summary>
            Represents logical "less than or equal" operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpLessOrEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpLessOrEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpLessOrEqual.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "less than or equal" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpLike">
            <summary>
            Represents VB-style logical LIKE operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpLike.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpLike.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpLike.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical LIKE operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand matches the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Spring.Expressions.OpMatches">
            <summary>
            Represents logical MATCHES operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpMatches.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpMatches.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpMatches.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical MATCHES operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand matches the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Spring.Expressions.OpMODULUS">
            <summary>
            Represents arithmetic modulus operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpMODULUS.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpMODULUS.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpMODULUS.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic modulus operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpMULTIPLY">
            <summary>
            Represents arithmetic multiplication operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpMULTIPLY.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpMULTIPLY.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpMULTIPLY.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic multiplication operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpNOT">
            <summary>
            Represents NOT operator (both, bitwise and logical).
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Expressions.UnaryOperator">
            <summary>
            Base class for unary operators.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.UnaryOperator.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.UnaryOperator.#ctor(Spring.Expressions.BaseNode)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.UnaryOperator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="P:Spring.Expressions.UnaryOperator.Operand">
            <summary>
            Gets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="M:Spring.Expressions.OpNOT.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpNOT.#ctor(Spring.Expressions.BaseNode)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpNOT.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpNOT.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical NOT operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpNotEqual">
            <summary>
            Represents logical inequality operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpNotEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpNotEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpNotEqual.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical inequality operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpOR">
            <summary>
            Represents OR operator (both, bitwise and logical).
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpOR.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpOR.#ctor(Spring.Expressions.BaseNode,Spring.Expressions.BaseNode)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpOR.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpOR.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical OR operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpPOWER">
            <summary>
            Represents arithmetic exponent operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpPOWER.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpPOWER.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpPOWER.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic exponent operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpSUBTRACT">
            <summary>
            Represents arithmetic subtraction operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpSUBTRACT.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpSUBTRACT.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpSUBTRACT.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic subtraction operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpUnaryMinus">
            <summary>
            Represents unary minus operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpUnaryMinus.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpUnaryMinus.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpUnaryMinus.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the unary plus operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpUnaryPlus">
            <summary>
            Represents unary plus operator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.OpUnaryPlus.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpUnaryPlus.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpUnaryPlus.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the unary plus operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.OpXOR">
            <summary>
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Expressions.OpXOR.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpXOR.#ctor(Spring.Expressions.BaseNode,Spring.Expressions.BaseNode)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpXOR.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.OpXOR.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical AND operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.ProjectionNode">
            <summary>
            Represents parsed projection node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.ProjectionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.ProjectionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.ProjectionNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> containing results of evaluation
            of projection expression against each node in the context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.PropertyOrFieldNode">
            <summary>
            Represents node that navigates to object's property or public field.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.InitializeNode(System.Object)">
            <summary>
            Initializes the node.
            </summary>
            <param name="context">The parent.</param>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.GetPropertyOrFieldAccessor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Attempts to resolve property or field.
            </summary>
            <param name="contextType">
            Type to search for a property or a field.
            </param>
            <param name="memberName">
            Property or field name.
            </param>
            <param name="bindingFlags">
            Binding flags to use.
            </param>
            <returns>
            Resolved property or field accessor, or <c>null</c> 
            if specified <paramref name="memberName"/> cannot be resolved.
            </returns>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.Set(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.GetPropertyOrFieldValue(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Retrieves property or field value.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Property or field value.</returns>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.SetPropertyOrFieldValue(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets property value, doing any type conversions that are necessary along the way.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.SetPropertyOrFieldValueInternal(System.Object,System.Object)">
            <summary>
            Sets property or field value using either dynamic or standard reflection.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node, converted to appropriate type.</param>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.AddToCollections(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            In the case of read only collections or custom collections that are not assignable from
            IList, try to add to the collection.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
            <returns>true if was able add to IList, IDictionary, or ISet</returns>
        </member>
        <member name="M:Spring.Expressions.PropertyOrFieldNode.GetMemberInfo(System.Object)">
            <summary>
            Utility method that is needed by ObjectWrapper and AbstractAutowireCapableObjectFactory.
            We try as hard as we can, but there are instances when we won't be able to obtain PropertyInfo...
            </summary>
            <param name="context">Context to resolve property against.</param>
            <returns>PropertyInfo for this node.</returns>
        </member>
        <member name="P:Spring.Expressions.PropertyOrFieldNode.IsProperty">
            <summary>
            Gets a value indicating whether this node represents a property.
            </summary>
            <value>
            	<c>true</c> if this node is a property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Expressions.PropertyOrFieldNode.IsField">
            <summary>
            Gets a value indicating whether this node represents a field.
            </summary>
            <value>
            	<c>true</c> if this node is a field; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Expressions.QualifiedIdentifier">
            <summary>
            Represents parsed named argument node in the expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.QualifiedIdentifier.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.QualifiedIdentifier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.QualifiedIdentifier.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the value of the named argument defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.QualifiedIdentifier.getText">
            <summary>
            Overrides getText to allow easy way to get fully 
            qualified identifier.
            </summary>
            <returns>
            Fully qualified identifier as a string.
            </returns>
        </member>
        <member name="T:Spring.Expressions.RealLiteralNode">
            <summary>
            Represents parsed real literal node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.RealLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.RealLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.RealLiteralNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the real literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Context.Support.ReferenceNode">
            <summary>
            Represents a reference to a Spring-managed object.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Context.Support.ReferenceNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ReferenceNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ReferenceNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the integer literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.SelectionFirstNode">
            <summary>
            Represents parsed selection node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.SelectionFirstNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.SelectionFirstNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.SelectionFirstNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the first context item that matches selection expression.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.SelectionLastNode">
            <summary>
            Represents parsed selection node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.SelectionLastNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.SelectionLastNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.SelectionLastNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the last context item that matches selection expression.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.SelectionNode">
            <summary>
            Represents parsed selection node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.SelectionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.SelectionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.SelectionNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> containing results of evaluation
            of selection expression against each node in the context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.StringLiteralNode">
            <summary>
            Represents parsed string literal node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.StringLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.StringLiteralNode.#ctor(System.String)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.StringLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.StringLiteralNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the string literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.SyntaxErrorException">
            <summary>
            Exception thrown when detecting invalid SpEL syntax
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Expressions.SyntaxErrorException.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Spring.Expressions.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Spring.Expressions.SyntaxErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Spring.Expressions.SyntaxErrorException.Line">
            <summary>
            </summary>
        </member>
        <member name="P:Spring.Expressions.SyntaxErrorException.Column">
            <summary>
            </summary>
        </member>
        <member name="P:Spring.Expressions.SyntaxErrorException.Message">
            <summary>
            Gets a message that provides details on the syntax error.
            </summary>
        </member>
        <member name="P:Spring.Expressions.SyntaxErrorException.Expression">
            <summary>
             The expression that caused the error
            </summary>
        </member>
        <member name="T:Spring.Expressions.TernaryNode">
            <summary>
            Represents ternary expression node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.TernaryNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.TernaryNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.TernaryNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the string literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Spring.Expressions.TypeNode">
            <summary>
            Represents parsed type node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.TypeNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.TypeNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.TypeNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.TypeNode.getText">
            <summary>
            Overrides getText to allow easy way to get fully 
            qualified typename.
            </summary>
            <returns>
            Fully qualified typename as a string.
            </returns>
        </member>
        <member name="T:Spring.Expressions.VariableNode">
            <summary>
            Represents parsed variable node.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Expressions.VariableNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Expressions.VariableNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Spring.Expressions.VariableNode.Get(System.Object,Spring.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns value of the variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Expressions.VariableNode.Set(System.Object,Spring.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets value of the variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="T:Spring.Globalization.Formatters.BooleanFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that can be used to
            format and parse boolean values.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Globalization.IFormatter">
            <summary>
            Interface that should be implemented by all formatters.
            </summary>
            <remarks>
            <para>
            Formatters assume that source value is a string, and make no assumptions
            about the target value's type, which means that <c>Parse</c> method can return
            object of any type. 
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.IFormatter.Format(System.Object)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted <paramref name="value"/>.</returns>
        </member>
        <member name="M:Spring.Globalization.IFormatter.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>Parsed <paramref name="value"/>.</returns>
        </member>
        <member name="M:Spring.Globalization.Formatters.BooleanFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.BooleanFormatter"/> class
            using default values
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.BooleanFormatter.#ctor(System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.BooleanFormatter"/> class
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.BooleanFormatter.Format(System.Object)">
            <summary>
            Formats the specified boolean value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted boolean value.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not of type <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="M:Spring.Globalization.Formatters.BooleanFormatter.Parse(System.String)">
            <summary>
            Parses the specified boolean value according to settings of <see cref="P:Spring.Globalization.Formatters.BooleanFormatter.TrueString"/> and <see cref="P:Spring.Globalization.Formatters.BooleanFormatter.FalseString"/>
            </summary>
            <param name="value">The boolean value to parse.</param>
            <returns>Parsed boolean value as a <see cref="T:System.Boolean"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> does not match <see cref="P:Spring.Globalization.Formatters.BooleanFormatter.TrueString"/> or <see cref="P:Spring.Globalization.Formatters.BooleanFormatter.FalseString"/>.</exception>
        </member>
        <member name="P:Spring.Globalization.Formatters.BooleanFormatter.IgnoreCase">
            <summary>
            Set/Get value to control casesensitivity of <see cref="M:Spring.Globalization.Formatters.BooleanFormatter.Parse(System.String)"/>
            </summary>
            <remarks>
            Defaults to <value>true</value>
            </remarks>
        </member>
        <member name="P:Spring.Globalization.Formatters.BooleanFormatter.TrueString">
            <summary>
            Set/Get value to recognize as boolean "true" value
            </summary>
            <remarks>
            Defaults to <see cref="F:System.Boolean.TrueString"/>
            </remarks>
        </member>
        <member name="P:Spring.Globalization.Formatters.BooleanFormatter.FalseString">
            <summary>
            Set/Get value to recognize as boolean "false" value
            </summary>
            <remarks>
            Defaults to <see cref="F:System.Boolean.FalseString"/>
            </remarks>
        </member>
        <member name="T:Spring.Globalization.Formatters.CurrencyFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that can be used to
            format and parse currency values.
            </summary>
            <remarks>
            <para>
            <c>CurrencyFormatter</c> uses currency related properties of the
            <see cref="T:System.Globalization.NumberFormatInfo"/> to format and parse currency values. 
            </para>
            <para>
            If you use one of the constructors that accept culture as a parameter
            to create an instance of <c>CurrencyFormatter</c>, default <c>NumberFormatInfo</c>
            for the specified culture will be used.
            </para>
            <para>
            You can also use properties exposed by the <c>CurrencyFormatter</c> in order
            to override some of the default currency formatting parameters.
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.CurrencyFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.CurrencyFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the current thread's culture.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.CurrencyFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.CurrencyFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the specified culture.
            </summary>
            <param name="cultureName">The culture name.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.CurrencyFormatter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.CurrencyFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the specified culture.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.CurrencyFormatter.#ctor(System.Globalization.NumberFormatInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.CurrencyFormatter"/> class
            using specified <see cref="T:System.Globalization.NumberFormatInfo"/>.
            </summary>
            <param name="formatInfo">
            The <see cref="T:System.Globalization.NumberFormatInfo"/> instance that defines how 
            currency values are formatted.
            </param>
        </member>
        <member name="M:Spring.Globalization.Formatters.CurrencyFormatter.Format(System.Object)">
            <summary>
            Formats the specified currency value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted currency <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not a number.</exception>
        </member>
        <member name="M:Spring.Globalization.Formatters.CurrencyFormatter.Parse(System.String)">
            <summary>
            Parses the specified currency value.
            </summary>
            <param name="value">The currency value to parse.</param>
            <returns>Parsed currency value as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="P:Spring.Globalization.Formatters.CurrencyFormatter.DecimalDigits">
            <summary>
            Gets or sets the currency decimal digits.
            </summary>
            <value>The currency decimal digits.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.CurrencyFormatter.DecimalSeparator">
            <summary>
            Gets or sets the currency decimal separator.
            </summary>
            <value>The currency decimal separator.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.CurrencyFormatter.GroupSizes">
            <summary>
            Gets or sets the currency group sizes.
            </summary>
            <value>The currency group sizes.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.CurrencyFormatter.GroupSeparator">
            <summary>
            Gets or sets the currency group separator.
            </summary>
            <value>The currency group separator.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.CurrencyFormatter.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol.
            </summary>
            <value>The currency symbol.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.CurrencyFormatter.NegativePattern">
            <summary>
            Gets or sets the currency negative pattern.
            </summary>
            <value>The currency negative pattern.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.CurrencyFormatter.PositivePattern">
            <summary>
            Gets or sets the currency positive pattern.
            </summary>
            <value>The currency positive pattern.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/>
        </member>
        <member name="T:Spring.Globalization.Formatters.DateTimeFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that can be used to
            format and parse <see cref="T:System.DateTime"/> values.
            </summary>
            <remarks>
            <para>
            <c>DateTimeFormatter</c> uses properties of the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> to format and parse <see cref="T:System.DateTime"/> values. 
            </para>
            <para>
            If you use one of the constructors that accept culture as a parameter
            to create an instance of <c>DateTimeFormatter</c>, default <c>DateTimeFormatInfo</c>
            for the specified culture will be used.
            </para>
            <para>
            You can also use properties exposed by the <c>DateTimeFormatter</c> in order
            to override some of the default formatting parameters.
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.DateTimeFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.DateTimeFormatter"/> class
            using default <see cref="T:System.Globalization.DateTimeFormatInfo"/> for the current thread's culture.
            </summary>
            <param name="format">Date/time format string.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.DateTimeFormatter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.DateTimeFormatter"/> class
            using default <see cref="T:System.Globalization.DateTimeFormatInfo"/> for the specified culture.
            </summary>
            <param name="format">Date/time format string.</param>
            <param name="cultureName">The culture name.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.DateTimeFormatter.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.DateTimeFormatter"/> class
            using default <see cref="T:System.Globalization.DateTimeFormatInfo"/> for the specified culture.
            </summary>
            <param name="format">Date/time format string.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.DateTimeFormatter.Format(System.Object)">
            <summary>
            Formats the specified <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted <see cref="T:System.DateTime"/> value.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not an instance of <see cref="T:System.DateTime"/>.</exception>
        </member>
        <member name="M:Spring.Globalization.Formatters.DateTimeFormatter.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>Parsed <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="T:Spring.Globalization.Formatters.FilteringFormatter">
            <summary>
            Provides base functionality for filtering values before they actually get parsed/formatted.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.FilteringFormatter.#ctor(Spring.Globalization.IFormatter)">
            <summary>
             Creates a new instance of this FilteringFormatter.
            </summary>
            <param name="underlyingFormatter">an optional underlying formatter</param>
             <remarks>
             If no underlying formatter is specified, the values 
             get passed through "as-is" after being filtered
             </remarks>
        </member>
        <member name="M:Spring.Globalization.Formatters.FilteringFormatter.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>Parsed <paramref name="value"/>.</returns>
        </member>
        <member name="M:Spring.Globalization.Formatters.FilteringFormatter.Format(System.Object)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted <paramref name="value"/>.</returns>
        </member>
        <member name="M:Spring.Globalization.Formatters.FilteringFormatter.FilterValueToParse(System.String)">
            <summary>
            Allows to rewrite a value before it gets parsed by the underlying formatter
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.FilteringFormatter.FilterValueToFormat(System.Object)">
            <summary>
            Allows to change a value before it gets formatted by the underlying formatter
            </summary>
        </member>
        <member name="T:Spring.Globalization.Formatters.FloatFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that can be used to
            format and parse floating point numbers.
            </summary>
            <remarks>
            <para>
            This formatter allows you to format and parse numbers that conform 
            to <see cref="F:System.Globalization.NumberStyles.Float"/> number style (leading and trailing 
            white space, leading sign, decimal point, exponent).
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Globalization.Formatters.FloatFormatter.DefaultFormat">
            <summary>
            Default format string.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.FloatFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.FloatFormatter"/> class,
            using default format string of '{0:F}' and current thread's culture.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.FloatFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.FloatFormatter"/> class,
            using specified format string and current thread's culture.
            </summary>
            <param name="format">The format string.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.FloatFormatter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.FloatFormatter"/> class,
            using default format string of '{0:F}' and specified culture.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.FloatFormatter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.FloatFormatter"/> class,
            using specified format string and current thread's culture.
            </summary>
            <param name="format">The format string.</param>
            <param name="cultureName">The culture name.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.FloatFormatter.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.FloatFormatter"/> class,
            using specified format string and culture.
            </summary>
            <param name="format">The format string.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.FloatFormatter.Format(System.Object)">
            <summary>
            Formats the specified float value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted floating point number.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not a number.</exception>
        </member>
        <member name="M:Spring.Globalization.Formatters.FloatFormatter.Parse(System.String)">
            <summary>
            Parses the specified float value.
            </summary>
            <param name="value">The float value to parse.</param>
            <returns>Parsed float value as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="T:Spring.Globalization.Formatters.HasTextFilteringFormatter">
            <summary>
            Replaces input strings with a given default value, 
            if they are null or contain whitespaces only,
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.HasTextFilteringFormatter.#ctor(Spring.Globalization.IFormatter)">
            <summary>
             Creates a new instance of this HasTextFilteringFormatter using null as default value.
            </summary>
            <param name="underlyingFormatter">an optional underlying formatter</param>
             <remarks>
             If no underlying formatter is specified, the values 
             get passed through "as-is" after being filtered
             </remarks>
        </member>
        <member name="M:Spring.Globalization.Formatters.HasTextFilteringFormatter.#ctor(System.String,Spring.Globalization.IFormatter)">
            <summary>
             Creates a new instance of this HasTextFilteringFormatter.
            </summary>
             <param name="defaultValue">the default value to be returned, if input text doesn't contain text</param>
            <param name="underlyingFormatter">an optional underlying formatter</param>
             <remarks>
             If no underlying formatter is specified, the values 
             get passed through "as-is" after being filtered
             </remarks>
        </member>
        <member name="M:Spring.Globalization.Formatters.HasTextFilteringFormatter.FilterValueToParse(System.String)">
            <summary>
            If value contains no text, it will be replaced by a defaultValue.
            </summary>
        </member>
        <member name="T:Spring.Globalization.Formatters.IntegerFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that can be used to
            format and parse integer numbers.
            </summary>
            <remarks>
            <para>
            This formatter allows you to format and parse numbers that conform 
            to <see cref="F:System.Globalization.NumberStyles.Integer"/> number style (leading and trailing 
            white space, leading sign).
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.IntegerFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.IntegerFormatter"/> class,
            using default format string of '{0:D}'.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.IntegerFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.IntegerFormatter"/> class,
            using specified format string.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.IntegerFormatter.Format(System.Object)">
            <summary>
            Formats the specified integer value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted integer number.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not an integer number.</exception>
        </member>
        <member name="M:Spring.Globalization.Formatters.IntegerFormatter.Parse(System.String)">
            <summary>
            Parses the specified integer value.
            </summary>
            <param name="value">The integer value to parse.</param>
            <returns>Parsed number value as a <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="T:Spring.Globalization.Formatters.NullFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that simply calls <see cref="M:System.Object.ToString"/>.
            </summary>
            <remarks>
            This formatter is a no-operation implementation.
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.NullFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.NullFormatter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.NullFormatter.Format(System.Object)">
            <summary>
            Converts the passed value to a string by calling <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>to string converted value.</returns>
        </member>
        <member name="M:Spring.Globalization.Formatters.NullFormatter.Parse(System.String)">
            <summary>
            Returns the passed string "as is".
            </summary>
            <param name="value">The value to return.</param>
            <returns>The value passed into this method.</returns>
        </member>
        <member name="T:Spring.Globalization.Formatters.NumberFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that can be used to
            format and parse numbers.
            </summary>
            <remarks>
            <para>
            <c>NumberFormatter</c> uses number-related properties of the
            <see cref="T:System.Globalization.NumberFormatInfo"/> to format and parse numbers. 
            </para>
            <para>
            This formatter works with both integer and decimal numbers and allows
            you to format and parse numbers that conform to <see cref="F:System.Globalization.NumberStyles.Number"/>
            number style (leading and trailing white space and/or sign, thousands separator,
            decimal point)
            </para>
            <para>
            If you use one of the constructors that accept culture as a parameter
            to create an instance of <c>NumberFormatter</c>, default <c>NumberFormatInfo</c>
            for the specified culture will be used.
            </para>
            <para>
            You can also use properties exposed by the <c>NumberFormatter</c> in order
            to override some of the default number formatting parameters.
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.NumberFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.NumberFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the current thread's culture.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.NumberFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.NumberFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the specified culture.
            </summary>
            <param name="cultureName">The culture name.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.NumberFormatter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.NumberFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the specified culture.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.NumberFormatter.#ctor(System.Globalization.NumberFormatInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.NumberFormatter"/> class
            using specified <see cref="T:System.Globalization.NumberFormatInfo"/>.
            </summary>
            <param name="formatInfo">
            The <see cref="T:System.Globalization.NumberFormatInfo"/> instance that defines how 
            numbers are formatted and parsed.
            </param>
        </member>
        <member name="M:Spring.Globalization.Formatters.NumberFormatter.Format(System.Object)">
            <summary>
            Formats the specified number value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted number <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not a number.</exception>
        </member>
        <member name="M:Spring.Globalization.Formatters.NumberFormatter.Parse(System.String)">
            <summary>
            Parses the specified number value.
            </summary>
            <param name="value">The number value to parse.</param>
            <returns>Parsed number value as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="P:Spring.Globalization.Formatters.NumberFormatter.DecimalDigits">
            <summary>
            Gets or sets the number of decimal digits.
            </summary>
            <value>The number of decimal digits.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.NumberFormatter.DecimalSeparator">
            <summary>
            Gets or sets the decimal separator.
            </summary>
            <value>The decimal separator.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.NumberFormatter.GroupSizes">
            <summary>
            Gets or sets the number group sizes.
            </summary>
            <value>The number group sizes.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.NumberFormatter.GroupSeparator">
            <summary>
            Gets or sets the number group separator.
            </summary>
            <value>The number group separator.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.NumberFormatter.NegativePattern">
            <summary>
            Gets or sets the negative pattern.
            </summary>
            <value>The number negative pattern.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern"/>
        </member>
        <member name="T:Spring.Globalization.Formatters.PercentFormatter">
            <summary>
            Implementation of <see cref="T:Spring.Globalization.IFormatter"/> that can be used to
            format and parse numbers.
            </summary>
            <remarks>
            <para>
            <c>PercentFormatter</c> uses percent-related properties of the
            <see cref="T:System.Globalization.NumberFormatInfo"/> to format and parse percentages. 
            </para>
            <para>
            If you use one of the constructors that accept culture as a parameter
            to create an instance of <c>PercentFormatter</c>, default <c>NumberFormatInfo</c>
            for the specified culture will be used.
            </para>
            <para>
            You can also use properties exposed by the <c>PercentFormatter</c> in order
            to override some of the default number formatting parameters.
            </para>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.Formatters.PercentFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.PercentFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the current thread's culture.
            </summary>
        </member>
        <member name="M:Spring.Globalization.Formatters.PercentFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.PercentFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the specified culture.
            </summary>
            <param name="cultureName">The culture name.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.PercentFormatter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.PercentFormatter"/> class
            using default <see cref="T:System.Globalization.NumberFormatInfo"/> for the specified culture.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Spring.Globalization.Formatters.PercentFormatter.#ctor(System.Globalization.NumberFormatInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Globalization.Formatters.PercentFormatter"/> class
            using specified <see cref="T:System.Globalization.NumberFormatInfo"/>.
            </summary>
            <param name="formatInfo">
            The <see cref="T:System.Globalization.NumberFormatInfo"/> instance that defines how 
            numbers are formatted and parsed.
            </param>
        </member>
        <member name="M:Spring.Globalization.Formatters.PercentFormatter.Format(System.Object)">
            <summary>
            Formats the specified percentage value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Formatted percentage.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not a number.</exception>
        </member>
        <member name="M:Spring.Globalization.Formatters.PercentFormatter.Parse(System.String)">
            <summary>
            Parses the specified percentage value.
            </summary>
            <param name="value">The percentage value to parse.</param>
            <returns>Parsed percentage value as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.DecimalDigits">
            <summary>
            Gets or sets the number of decimal digits.
            </summary>
            <value>The number of decimal digits.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.DecimalSeparator">
            <summary>
            Gets or sets the decimal separator.
            </summary>
            <value>The decimal separator.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.GroupSizes">
            <summary>
            Gets or sets the percent group sizes.
            </summary>
            <value>The percent group sizes.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.GroupSeparator">
            <summary>
            Gets or sets the percent group separator.
            </summary>
            <value>The percent group separator.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.NegativePattern">
            <summary>
            Gets or sets the negative pattern.
            </summary>
            <value>The percent negative pattern.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.PositivePattern">
            <summary>
            Gets or sets the positive pattern.
            </summary>
            <value>The percent positive pattern.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.PercentSymbol">
            <summary>
            Gets or sets the percent symbol.
            </summary>
            <value>The percent symbol.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PercentSymbol"/>
        </member>
        <member name="P:Spring.Globalization.Formatters.PercentFormatter.PerMilleSymbol">
            <summary>
            Gets or sets the per mille symbol.
            </summary>
            <value>The per mille symbol.</value>
            <seealso cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol"/>
        </member>
        <member name="T:Spring.Globalization.Localizers.ResourceSetLocalizer">
            <summary>
            Loads a list of resources that should be applied from the .NET <see cref="T:System.Resources.ResourceSet"/>.
            </summary>
            <remarks>
            <p>
            This <see cref="T:Spring.Globalization.ILocalizer"/> implementation will iterate over all resource managers 
            within the message source and return a list of all the resources whose name starts with '$this'.
            </p>
            <p>
            All other resources will be ignored, but you can retrieve them by calling one of 
            <c>GetMessage</c> methods on the message source directly.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Globalization.AbstractLocalizer">
            <summary>
            Abstract base class that all localizers should extend
            </summary>
            <remarks>
            <p>
            This class contains the bulk of the localizer logic, including implementation
            of the <c>ApplyResources</c> methods that are defined in <see cref="T:Spring.Globalization.ILocalizer"/>
            interface.
            </p>
            <p>
            All specific localizers need to do is inherit this class and implement 
            <c>GetResources</c> method that will return a list of <see cref="T:Spring.Globalization.Resource"/>
            objects that should be applied to a specified <c>target</c>.
            </p>
            <p>
            Custom implementations can use whatever type of resource storage they want,
            such as standard .NET resource sets, custom XML files, database, etc.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Globalization.ILocalizer">
            <summary>
            Defines an interface that localizers have to implement.
            </summary>
            <remarks>
            <p>
            Localizers are used to automatically apply resources to object's members
            using reflection.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.ILocalizer.ApplyResources(System.Object,Spring.Context.IMessageSource,System.Globalization.CultureInfo)">
            <summary>
            Applies resources of the specified culture to the specified target object.
            </summary>
            <param name="target">Target object to apply resources to.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> instance to retrieve resources from.</param>
            <param name="culture">Resource culture to use for resource lookup.</param>
        </member>
        <member name="M:Spring.Globalization.ILocalizer.ApplyResources(System.Object,Spring.Context.IMessageSource)">
            <summary>
            Applies resources to the specified target object, using current thread's culture to resolve resources.
            </summary>
            <param name="target">Target object to apply resources to.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> instance to retrieve resources from.</param>
        </member>
        <member name="P:Spring.Globalization.ILocalizer.ResourceCache">
            <summary>
            Gets or sets the resource cache instance.
            </summary>
            <value>The resource cache instance.</value>
        </member>
        <member name="M:Spring.Globalization.AbstractLocalizer.ApplyResources(System.Object,Spring.Context.IMessageSource,System.Globalization.CultureInfo)">
            <summary>
            Applies resources of the specified culture to the specified target object.
            </summary>
            <param name="target">Target object to apply resources to.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> instance to retrieve resources from.</param>
            <param name="culture">Resource culture to use for resource lookup.</param>
        </member>
        <member name="M:Spring.Globalization.AbstractLocalizer.ApplyResources(System.Object,Spring.Context.IMessageSource)">
            <summary>
            Applies resources to the specified target object, using current thread's uiCulture to resolve resources.
            </summary>
            <param name="target">Target object to apply resources to.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> instance to retrieve resources from.</param>
        </member>
        <member name="M:Spring.Globalization.AbstractLocalizer.GetResources(System.Object,Spring.Context.IMessageSource,System.Globalization.CultureInfo)">
            <summary>
            Returns a list of <see cref="T:Spring.Globalization.Resource"/> instances that should be applied to the target.
            </summary>
            <param name="target">Target to get a list of resources for.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> instance to retrieve resources from.</param>
            <param name="culture">Resource locale.</param>
            <returns>A list of resources to apply.</returns>
        </member>
        <member name="M:Spring.Globalization.AbstractLocalizer.LoadResources(System.Object,Spring.Context.IMessageSource,System.Globalization.CultureInfo)">
            <summary>
            Loads resources from the storage and creates a list of <see cref="T:Spring.Globalization.Resource"/> instances that should be applied to the target.
            </summary>
            <param name="target">Target to get a list of resources for.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> instance to retrieve resources from.</param>
            <param name="culture">Resource locale.</param>
            <returns>A list of resources to apply.</returns>
        </member>
        <member name="P:Spring.Globalization.AbstractLocalizer.ResourceCache">
            <summary>
            Gets or sets the resource cache instance.
            </summary>
            <value>The resource cache instance.</value>
        </member>
        <member name="M:Spring.Globalization.Localizers.ResourceSetLocalizer.LoadResources(System.Object,Spring.Context.IMessageSource,System.Globalization.CultureInfo)">
            <summary>
            Loads resources from the storage and creates a list of <see cref="T:Spring.Globalization.Resource"/> instances that should be applied to the target.
            </summary>
            <remarks>
            This feature is not currently supported on version 1.0 of the .NET platform.
            </remarks>
            <param name="target">Target to get a list of resources for.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> instance to retrieve resources from.</param>
            <param name="culture">Resource locale.</param>
            <returns>A list of resources to apply.</returns>
        </member>
        <member name="T:Spring.Globalization.Resolvers.DefaultCultureResolver">
            <summary>
            <see cref="T:Spring.Globalization.ICultureResolver"/> implementation
            that simply returns the <see cref="T:System.Globalization.CultureInfo"/>
            value of the
            <see cref="P:Spring.Globalization.Resolvers.DefaultCultureResolver.DefaultCulture"/>
            property (if said property value is not <cref lang="null"/>), or the
            <see cref="T:System.Globalization.CultureInfo"/> of the current thread if it is
            <cref lang="null"/>.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Globalization.ICultureResolver">
            <summary>
            Strategy interface for <see cref="T:System.Globalization.CultureInfo"/>
            resolution.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.ICultureResolver.ResolveCulture">
            <summary>
            Resolves the <see cref="T:System.Globalization.CultureInfo"/>
            from some context.
            </summary>
            <remarks>
            <p>
            The 'context' is determined by the appropriate implementation class.
            An example of such a context might be a thread local bound
            <see cref="T:System.Globalization.CultureInfo"/>, or a
            <see cref="T:System.Globalization.CultureInfo"/> sourced from an HTTP
            session.
            </p>
            </remarks>
            <returns>
            The <see cref="T:System.Globalization.CultureInfo"/> that should be used
            by the caller.
             </returns>
        </member>
        <member name="M:Spring.Globalization.ICultureResolver.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <remarks>
            <p>
            This is an optional operation and does not need to be implemented
            such that it actually does anything useful (i.e. it can be a no-op).
            </p>
            </remarks>
            <param name="culture">
            The new <see cref="T:System.Globalization.CultureInfo"/> or
            <cref lang="null"/> to clear the current <see cref="T:System.Globalization.CultureInfo"/>.
            </param>
        </member>
        <member name="M:Spring.Globalization.Resolvers.DefaultCultureResolver.GetDefaultLocale">
            <summary>
            Returns the default <see cref="T:System.Globalization.CultureInfo"/>. 
            </summary>
            <remarks>
            <p>
            It tries to get the <see cref="T:System.Globalization.CultureInfo"/>
            from the value of the
            <see cref="P:Spring.Globalization.Resolvers.DefaultCultureResolver.DefaultCulture"/>
            property and falls back to the <see cref="T:System.Globalization.CultureInfo"/> of the
            current thread if the
            <see cref="P:Spring.Globalization.Resolvers.DefaultCultureResolver.DefaultCulture"/>
            is <cref lang="null"/>.
            </p>
            </remarks>
            <returns>
            The default <see cref="T:System.Globalization.CultureInfo"/>
            </returns>
        </member>
        <member name="M:Spring.Globalization.Resolvers.DefaultCultureResolver.ResolveCulture">
            <summary>
            Resolves the <see cref="T:System.Globalization.CultureInfo"/>
            from some context.
            </summary>
            <remarks>
            <p>
            The 'context' in this implementation is the
            <see cref="T:System.Globalization.CultureInfo"/> value of the
            <see cref="P:Spring.Globalization.Resolvers.DefaultCultureResolver.DefaultCulture"/>
            property (if said property value is not <cref lang="null"/>), or the
            <see cref="T:System.Globalization.CultureInfo"/> of the current thread if it is
            <cref lang="null"/>.
            </p>
            </remarks>
            <returns>
            The <see cref="T:System.Globalization.CultureInfo"/> that should be used
            by the caller.
             </returns>
        </member>
        <member name="M:Spring.Globalization.Resolvers.DefaultCultureResolver.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="culture">
            The new <see cref="T:System.Globalization.CultureInfo"/> or
            <cref lang="null"/> to clear the current <see cref="T:System.Globalization.CultureInfo"/>.
            </param>
            <seealso cref="P:Spring.Globalization.Resolvers.DefaultCultureResolver.DefaultCulture"/>
            <seealso cref="M:Spring.Globalization.ICultureResolver.SetCulture(System.Globalization.CultureInfo)"/>
        </member>
        <member name="P:Spring.Globalization.Resolvers.DefaultCultureResolver.DefaultCulture">
            <summary>
            The default <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <value>
            The default <see cref="T:System.Globalization.CultureInfo"/>.
            </value>
        </member>
        <member name="T:Spring.Globalization.AbstractResourceCache">
            <summary>
            Abstract base class that all resource cache implementations should extend.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Globalization.IResourceCache">
            <summary>
            Defines an interface that resource cache adapters have to implement.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.IResourceCache.GetResources(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the list of resources from cache.
            </summary>
            <param name="target">Target to get a list of resources for.</param>
            <param name="culture">Resource culture.</param>
            <returns>A list of cached resources for the specified target object and culture.</returns>
        </member>
        <member name="M:Spring.Globalization.IResourceCache.PutResources(System.Object,System.Globalization.CultureInfo,System.Collections.IList)">
            <summary>
            Puts the list of resources in the cache.
            </summary>
            <param name="target">Target to cache a list of resources for.</param>
            <param name="culture">Resource culture.</param>
            <param name="resources">A list of resources to cache.</param>
            <returns>A list of cached resources for the specified target object and culture.</returns>
        </member>
        <member name="M:Spring.Globalization.AbstractResourceCache.GetResources(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the list of resources from the cache.
            </summary>
            <param name="target">Target to get a list of resources for.</param>
            <param name="culture">Resource culture.</param>
            <returns>A list of cached resources for the specified target object and culture.</returns>
        </member>
        <member name="M:Spring.Globalization.AbstractResourceCache.PutResources(System.Object,System.Globalization.CultureInfo,System.Collections.IList)">
            <summary>
            Puts the list of resources in the cache.
            </summary>
            <param name="target">Target to cache a list of resources for.</param>
            <param name="culture">Resource culture.</param>
            <param name="resources">A list of resources to cache.</param>
            <returns>A list of cached resources for the specified target object and culture.</returns>
        </member>
        <member name="M:Spring.Globalization.AbstractResourceCache.CreateCacheKey(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Crates resource cache key for the specified target object and culture.
            </summary>
            <param name="target">Target object to apply resources to.</param>
            <param name="culture">Resource culture to use for resource lookup.</param>
        </member>
        <member name="M:Spring.Globalization.AbstractResourceCache.GetResources(System.String)">
            <summary>
            Gets the list of resources from cache.
            </summary>
            <param name="cacheKey">Cache key to use for lookup.</param>
            <returns>A list of cached resources for the specified target object and culture.</returns>
        </member>
        <member name="M:Spring.Globalization.AbstractResourceCache.PutResources(System.String,System.Collections.IList)">
            <summary>
            Puts the list of resources in the cache.
            </summary>
            <param name="cacheKey">Cache key to use for the specified resources.</param>
            <param name="resources">A list of resources to cache.</param>
            <returns>A list of cached resources for the specified target object and culture.</returns>
        </member>
        <member name="T:Spring.Globalization.NullResourceCache">
            <summary>
            Resource cache implementation that doesn't cache resources.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.NullResourceCache.GetResources(System.String)">
            <summary>
            Gets the list of resources from cache.
            </summary>
            <param name="cacheKey">Cache key to use for lookup.</param>
            <returns>Always returns <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Globalization.NullResourceCache.PutResources(System.String,System.Collections.IList)">
            <summary>
            Puts the list of resources in the cache.
            </summary>
            <param name="cacheKey">Cache key to use for the specified resources.</param>
            <param name="resources">A list of resources to cache.</param>
        </member>
        <member name="T:Spring.Globalization.Resource">
            <summary>
            Holds mapping between control property and it's value 
            as read from the resource file.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Globalization.Resource.#ctor(Spring.Expressions.IExpression,System.Object)">
            <summary>
            Creates instance of resource mapper.
            </summary>
            <param name="target">Target property.</param>
            <param name="resourceValue">Resource value.</param>
        </member>
        <member name="P:Spring.Globalization.Resource.Target">
            <summary>
            Gets parsed target property expression. See <see cref="T:Spring.Expressions.IExpression"/>
            for more information on object navigation expressions.
            </summary>
        </member>
        <member name="P:Spring.Globalization.Resource.Value">
            <summary>
            Value of the resource that target property should be set to.
            </summary>
        </member>
        <member name="T:Spring.Objects.Events.Support.EventManipulationUtils">
            <summary>
            Utility class to aid in the manipulation of events and delegates.
            </summary>
            <author>Griffin Caprio</author>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventManipulationUtils.GetHandlerDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Returns a new instance of the requested <see cref="T:System.Delegate"/>.
            </summary>
            <remarks>
            <p>
            Often used to wire subscribers to event publishers.
            </p>
            </remarks>
            <param name="delegateType">
            The <see cref="T:System.Type"/> of delegate to create.
            </param>
            <param name="targetSubscriber">
            The target subscriber object that contains the delegate implementation.
            </param>
            <param name="targetSubscriberDelegateMethod">
            <see cref="T:System.Reflection.MethodInfo"/> referencing the delegate method on the subscriber.
            </param>
            <returns>
            A delegate handler that can be added to an events list of handlers, or called directly.
            </returns>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventManipulationUtils.GetMethodInfoMatchingSignature(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Queries the input type for a <see cref="T:System.Reflection.MethodInfo"/> signature matching the input
            <see cref="T:System.Reflection.MethodInfo"/> signature.
            </summary>
            <remarks>
            Typically used to query a potential subscriber to see if they implement an event handler.
            </remarks>
            <param name="invoke"><see cref="T:System.Reflection.MethodInfo"/> to match against</param>
            <param name="subscriberType"><see cref="T:System.Type"/> to query</param>
            <returns>
            <see cref="T:System.Reflection.MethodInfo"/> matching input <see cref="T:System.Reflection.MethodInfo"/>
            signature, or <see langword="null"/> if there is no match.
            </returns>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventManipulationUtils.#ctor">
            <summary>
            Creates a new instance of the EventManipulationUtilities class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Events.Support.EventRegistry">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.Events.IEventRegistry"/>
            interface.
            </summary>
            <author>Griffin Caprio</author>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.#ctor">
            <summary>
            Creates a new instance of the EventRegistry class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.PublishEvents(System.Object)">
            <summary>
            Adds the input object to the list of publishers.
            </summary>
            <remarks>
            This publishes <b>all</b> events of the source object to any object
            wishing to subscribe
            </remarks>
            <param name="source">The source object to publish.</param>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.Subscribe(System.Object)">
            <summary>
            Subscribes to <b>all</b> events published, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.Subscribe(System.Object,System.Type)">
            <summary>
            Subscribes to published events of all objects of a given type, if the
            subscriber implements compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="sourceType">
            The target <see cref="T:System.Type"/> to subscribe to.
            </param>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.Unsubscribe(System.Object)">
            <summary>
            Unsubscribes to <b>all</b> events published, if the subscriber
            implmenets compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use</param>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.Unsubscribe(System.Object,System.Type)">
            <summary>
            Unsubscribes to the published events of all objects of a given
            <see cref="T:System.Type"/>, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="sourceType">The target <see cref="T:System.Type"/> to unsubscribe from</param>
        </member>
        <member name="P:Spring.Objects.Events.Support.EventRegistry.Publishers">
            <summary>
            The list of event publishers.
            </summary>
            <value>The list of event publishers.</value>
        </member>
        <member name="T:Spring.Objects.Events.IEventRegistryAware">
            <summary>
            To be implemented by any object that wishes to receive a reference to
            an <see cref="T:Spring.Objects.Events.IEventRegistry"/>.
            </summary>
            <remarks>
            <p>
            This interface only applies to objects that have been instantiated
            within the context of an
            <see cref="T:Spring.Context.IApplicationContext"/>. This interface does
            not typically need to be implemented by application code, but is rather
            used by classes internal to Spring.NET.
            </p>
            </remarks>
            <author>Mark Pollack</author>
            <author>Rick Evans</author>
        </member>
        <member name="P:Spring.Objects.Events.IEventRegistryAware.EventRegistry">
            <summary>
            Set the <see cref="T:Spring.Objects.Events.IEventRegistry"/>
            associated with the
            <see cref="T:Spring.Context.IApplicationContext"/> that created this
            object.
            </summary>
            <remarks>
            <p>
            This property will be set by the relevant
            <see cref="T:Spring.Context.IApplicationContext"/> after all of this
            object's dependencies have been resolved. This object can use the
            supplied <see cref="T:Spring.Objects.Events.IEventRegistry"/>
            immediately to publish or subscribe to one or more events.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Attributes.RequiredAttribute">
            <summary>
            Marks a property as being 'required': that is, the setter property 
            must be configured to be dependency-injected with a value.
            </summary>
            <remarks>Consult the SDK documentation for <see cref="T:Spring.Objects.Factory.Attributes.RequiredAttributeObjectPostProcessor"/>, 
            which, by default, checks for the presence of this annotation.
            </remarks>
            <author>Rob Harrop</author>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Objects.Factory.Attributes.RequiredAttributeObjectPostProcessor">
            <summary>
             A <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> implementation that enforces required properties to have been configured.
            Required properties are detected through an attribute, by default, Spring's <see cref="T:Spring.Objects.Factory.Attributes.RequiredAttribute"/>
            attribute.
            </summary>
            <remarks>
            <para>The motivation for the existence of this IObjectPostProcessor is to allow
            developers to annotate the setter properties of their own classes with an
            arbitrary attribute to indicate that the container must check
            for the configuration of a dependency injected value. This neatly pushes
            responsibility for such checking onto the container (where it arguably belongs),
            and obviates the need (<b>in part</b>) for a developer to code a method that
            simply checks that all required properties have actually been set.
            </para>
            <para>Please note that an 'init' method may still need to implemented (and may
            still be desirable), because all that this class does is enforce that a
            'required' property has actually been configured with a value. It does
            <b>not</b> check anything else... In particular, it does not check that a
            configured value is not <code>null</code>.
            </para>
            </remarks>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter">
            <summary>
            Adapter that implements all methods on <see cref="T:Spring.Objects.Factory.Config.SmartInstantiationAwareObjectPostProcessor"/>
            as no-ops, which will not change normal processing of each object instantiated
            by the container. Subclasses may override merely those methods that they are
            actually interested in.
            </summary>
            <remarks>
            Note that this base class is only recommendable if you actually require
            <see cref="T:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor"/> functionality.  If all you need
            is plain <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> functionality, prefer a straight
            implementation of that (simpler) interface.
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.SmartInstantiationAwareObjectPostProcessor">
            <summary>
            Extension of the <see cref="T:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor"/> interface,
            adding a callback for predicting the eventual type of a processed object.
            </summary>
            <remarks>This interface is a special purpose interface, mainly for
            internal use within the framework. In general, application-provided
            post-processors should simply implement the plain <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            interface or derive from the <see cref="T:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter"/>
            class.  New methods might be added to this interface even in point releases.
            </remarks>
            <seealso cref="T:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter"/>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor">
            <summary>
            Subinterface of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            that adds a before-instantiation callback and a callback after instantiation but before
            explicit properties are set or autowiring occurs.
            </summary>
            <remarks>
            <para>
            Typically used to suppress default instantiation for specific target objects,
            for example to create proxies with special <c>Spring.Aop.ITargetSource</c>s (pooling targets,
            lazily initializing targets, etc), or to implement additional injection strategies such as field
            injection.
            </para>
            <para>
            This interface is a special purpose interface, mainly for internal use within the framework.
            It is recommended to implement the plain <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> interface as far as 
            possible, or to derive from <see cref="T:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor"/> in order to be shielded
            from extension to this interface.
            </para>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessBeforeInstantiation(System.Type,System.String)">
            <summary>
            Apply this
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            <i>before the target object gets instantiated</i>.
            </summary>
            <remarks>
            <p>
            The returned object may be a proxy to use instead of the target
            object, effectively suppressing the default instantiation of the
            target object.
            </p>
            <p>
            If the object is returned by this method is not
            <see langword="null"/>, the object creation process will be
            short-circuited. The returned object will not be processed any
            further; in particular, no further
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            callbacks will be applied to it. This mechanism is mainly intended
            for exposing a proxy instead of an actual target object.
            </p>
            <p>
            This callback will only be applied to object definitions with an
            object class. In particular, it will <b>not</b> be applied to
            objects with a "factory-method" (i.e. objects that are to be
            instantiated via a layer of indirection anyway).
            </p>
            </remarks>
            <param name="objectType">
            The <see cref="T:System.Type"/> of the target object that is to be
            instantiated.
            </param>
            <param name="objectName">
            The name of the target object.
            </param>
            <returns>
            The object to expose instead of a default instance of the target
            object.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of any errors.
            </exception>
            <seealso cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasObjectType"/>
            <seealso cref="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.FactoryMethodName"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessAfterInstantiation(System.Object,System.String)">
            <summary>
            Perform operations after the object has been instantiated, via a constructor or factory method,
            but before Spring property population (from explicit properties or autowiring) occurs.
            </summary>
            <param name="objectInstance">The object instance created, but whose properties have not yet been set</param>
            <param name="objectName">Name of the object.</param>
            <returns>true if properties should be set on the object; false if property population
            should be skipped.  Normal implementations should return true.  Returning false will also
            prevent any subsequent InstantiationAwareObjectPostProcessor instances from being 
            invoked on this object instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessPropertyValues(Spring.Objects.IPropertyValues,System.Reflection.PropertyInfo[],System.Object,System.String)">
            <summary>
            Post-process the given property values before the factory applies them
            to the given object.
            </summary>
            <remarks>Allows for checking whether all dependencies have been
            satisfied, for example based on a "Required" annotation on bean property setters.
            <para>Also allows for replacing the property values to apply, typically through
            creating a new MutablePropertyValues instance based on the original PropertyValues,
            adding or removing specific values.
            </para>
            </remarks>
            <param name="pvs">The property values that the factory is about to apply (never <code>null</code>).</param>
            <param name="pis">he relevant property infos for the target object (with ignored
            dependency types - which the factory handles specifically - already filtered out)</param>
            <param name="objectInstance">The object instance created, but whose properties have not yet 
            been set.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The actual property values to apply to the given object (can be the 
            passed-in PropertyValues instances0 or null to skip property population.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SmartInstantiationAwareObjectPostProcessor.PredictObjectType(System.Type,System.String)">
            <summary>
            Predicts the type of the object to be eventually returned from this
            processors <see cref="M:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor.PostProcessBeforeInstantiation(System.Type,System.String)"/> callback.
            </summary>
            <param name="objectType">The raw Type of the object.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The type of the object, or <code>null</code> if not predictable.</returns>
            <exception cref="T:Spring.Objects.ObjectsException">in case of errors</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SmartInstantiationAwareObjectPostProcessor.DetermineCandidateConstructors(System.Type,System.String)">
            <summary>
            Determines the candidate constructors to use for the given object.
            </summary>
            <param name="objectType">The raw Type of the object.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The candidate constructors, or <code>null</code> if none specified</returns>
            <exception cref="T:Spring.Objects.ObjectsException">in case of errors</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter.PredictObjectType(System.Type,System.String)">
            <summary>
            Predicts the type of the object to be eventually returned from this
            processors PostProcessBeforeInstantiation callback.
            </summary>
            <param name="objectType">The raw Type of the object.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The type of the object, or <code>null</code> if not predictable.</returns>
            <exception cref="T:Spring.Objects.ObjectsException">in case of errors</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter.DetermineCandidateConstructors(System.Type,System.String)">
            <summary>
            Determines the candidate constructors to use for the given object.
            </summary>
            <param name="objectType">The raw Type of the object.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The candidate constructors, or <code>null</code> if none specified</returns>
            <exception cref="T:Spring.Objects.ObjectsException">in case of errors</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter.PostProcessBeforeInstantiation(System.Type,System.String)">
            <summary>
            Apply this
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            <i>before the target object gets instantiated</i>.
            </summary>
            <remarks>
            <p>
            The returned object may be a proxy to use instead of the target
            object, effectively suppressing the default instantiation of the
            target object.
            </p>
            <p>
            If the object is returned by this method is not
            <see langword="null"/>, the object creation process will be
            short-circuited. The returned object will not be processed any
            further; in particular, no further
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            callbacks will be applied to it. This mechanism is mainly intended
            for exposing a proxy instead of an actual target object.
            </p>
            <p>
            This callback will only be applied to object definitions with an
            object class. In particular, it will <b>not</b> be applied to
            objects with a "factory-method" (i.e. objects that are to be
            instantiated via a layer of indirection anyway).
            </p>
            </remarks>
            <param name="objectType">
            The <see cref="T:System.Type"/> of the target object that is to be
            instantiated.
            </param>
            <param name="objectName">
            The name of the target object.
            </param>
            <returns>
            The object to expose instead of a default instance of the target
            object.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of any errors.
            </exception>
            <seealso cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasObjectType"/>
            <seealso cref="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.FactoryMethodName"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter.PostProcessAfterInstantiation(System.Object,System.String)">
            <summary>
            Perform operations after the object has been instantiated, via a constructor or factory method,
            but before Spring property population (from explicit properties or autowiring) occurs.
            </summary>
            <param name="objectInstance">The object instance created, but whose properties have not yet been set</param>
            <param name="objectName">Name of the object.</param>
            <returns>true if properties should be set on the object; false if property population
            should be skipped.  Normal implementations should return true.  Returning false will also
            prevent any subsequent InstantiationAwareObjectPostProcessor instances from being 
            invoked on this object instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter.PostProcessPropertyValues(Spring.Objects.IPropertyValues,System.Reflection.PropertyInfo[],System.Object,System.String)">
            <summary>
            Post-process the given property values before the factory applies them
            to the given object.
            </summary>
            <remarks>Allows for checking whether all dependencies have been
            satisfied, for example based on a "Required" annotation on bean property setters.
            <para>Also allows for replacing the property values to apply, typically through
            creating a new MutablePropertyValues instance based on the original PropertyValues,
            adding or removing specific values.
            </para>
            </remarks>
            <param name="pvs">The property values that the factory is about to apply (never <code>null</code>).</param>
            <param name="pis">he relevant property infos for the target object (with ignored
            dependency types - which the factory handles specifically - already filtered out)</param>
            <param name="objectInstance">The object instance created, but whose properties have not yet 
            been set.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The actual property values to apply to the given object (can be the 
            passed-in PropertyValues instances0 or null to skip property population.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to the given new object instance <i>before</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values.
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.InstantiationAwareObjectPostProcessorAdapter.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance <i>after</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values. The returned object
            instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The new object instance.
            </param>
            <param name="objectName">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="F:Spring.Objects.Factory.Attributes.RequiredAttributeObjectPostProcessor.validatedObjectNames">
            <summary>
            Cache for validated object names, skipping re-validation for the same object
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Attributes.RequiredAttributeObjectPostProcessor.PostProcessPropertyValues(Spring.Objects.IPropertyValues,System.Reflection.PropertyInfo[],System.Object,System.String)">
            <summary>
            Post-process the given property values before the factory applies them
            to the given object.  Checks for the attribute specified by this PostProcessor's RequiredAttributeType.
            </summary>
            <param name="pvs">The property values that the factory is about to apply (never <code>null</code>).</param>
            <param name="pis">The relevant property infos for the target object (with ignored
            dependency types - which the factory handles specifically - already filtered out)</param>
            <param name="objectInstance">The object instance created, but whose properties have not yet
            been set.</param>
            <param name="objectName">Name of the object.</param>
            <returns>
            The actual property values to apply to the given object (can be the
            passed-in PropertyValues instances or null to skip property population.
            </returns>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException">If a required property value has not been specified
            in the configuration metadata.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Attributes.RequiredAttributeObjectPostProcessor.IsRequiredProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the supplied property is required to have a value, that is to be dependency injected.
            </summary>
            <remarks>
            This implementation looks for the existence of a "required" attribute on the supplied PropertyInfo and that
            the property has a setter method.
            </remarks>
            <param name="pi">The target PropertyInfo</param>
            <returns>
            	<c>true</c> if the supplied property has been marked as being required;; otherwise, <c>false</c> if
            not or if the supplied property does not have a setter method
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Attributes.RequiredAttributeObjectPostProcessor.BuildExceptionMessage(System.String[],System.ICloneable)">
            <summary>
            Builds an exception message for the given list of invalid properties.
            </summary>
            <param name="invalidProperties">The list of names of invalid properties.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The exception message</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Attributes.RequiredAttributeObjectPostProcessor.RequiredAttributeType">
            <summary>
            Sets the type of the required attribute, to be used on a property setter
            </summary>
            <remarks>
            The default required attribute type is the Spring-provided <see cref="T:Spring.Objects.Factory.Attributes.RequiredAttribute"/> attribute.
            This setter property exists so that developers can provide their own 
            (non-Spring-specific) annotation type to indicate that a property value is required.
            </remarks>
            <value>The type of the required attribute.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.AbstractConfigurer">
            <summary>
            Base class that provides common functionality needed for several IObjectFactoryPostProcessor
            implementations
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor">
            <summary>
            Allows for custom modification of an application context's object
            definitions, adapting the object property values of the context's
            underlying object factory.
            </summary>
            <remarks>
            <p>
            Application contexts can auto-detect
            <c>IObjectFactoryPostProcessor</c> objects in their object definitions and
            apply them before any other objects get created.
            </p>
            <p>
            Useful for custom config files targeted at system administrators that
            override object properties configured in the application context.
            </p>
            <p>
            See PropertyResourceConfigurer and its concrete implementations for
            out-of-the-box solutions that address such configuration needs.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.Net)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its
            standard initialization.
            </summary>
            <remarks>
            <p>
            All object definitions will have been loaded, but no objects will have
            been instantiated yet. This allows for overriding or adding properties
            even to eager-initializing objects.
            </p>
            </remarks>
            <param name="factory">
            The object factory used by the application context.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its
            standard initialization.
            </summary>
            <param name="factory">The object factory used by the application context.</param>
            <remarks>
            	<p>
            All object definitions will have been loaded, but no objects will have
            been instantiated yet. This allows for overriding or adding properties
            even to eager-initializing objects.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractConfigurer.ResolveRequiredType(System.Object,System.String,System.String)">
            <summary>
            Resolves the supplied <paramref name="value"/> into a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="value">The object that is to be resolved into a <see cref="T:System.Type"/>
            instance.</param>
            <param name="errorContextSource">The error context source.</param>
            <param name="errorContext">The error context string.</param>
            <returns>A resolved <see cref="T:System.Type"/>.</returns>
            <remarks>
            	<p>
            This (default) implementation supports resolving
            <see cref="T:System.String"/>s and <see cref="T:System.Type"/>s.
            Only override this method if you want to key your type alias
            on something other than <see cref="T:System.String"/>s
            and <see cref="T:System.Type"/>s.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the supplied <paramref name="value"/> is <see langword="null"/>,
            or the supplied <paramref name="value"/> cannot be resolved.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.AbstractConfigurer.Order">
            <summary>
            Return the order value of this object, with a higher value meaning
            greater in terms of sorting.
            </summary>
            <returns>The order value.</returns>
            <seealso cref="P:Spring.Core.IOrdered.Order"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.AbstractFactoryObject">
            <summary>
            Simple template superclass for <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            implementations that allows for the creation of a singleton or a prototype
            instance (depending on a flag).
            </summary>
            <remarks>
            If the value of the 
            <see cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>
            property is <see langword="true"/> (this is the default), this class
            will create a single instance of it's object upon initialization and
            subsequently return the singleton instance; else, this class will
            create a new instance each time (prototype mode). Subclasses must
            implement the <see langword="abstract"/>
            <see cref="M:Spring.Objects.Factory.Config.AbstractFactoryObject.CreateInstance"/>
            template method to actually create objects.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Keith Donald</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.IFactoryObject">
            <summary>
            Interface to be implemented by objects used within an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> that are themselves
            factories.
            </summary>
            <remarks>
            <p>
            If an object implements this interface, it is used as a factory,
            not directly as an object. <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s
            can support singletons and prototypes
            (<see cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>)...
            please note that an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            itself can only ever be a singleton. It is a logic error to configure an
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> itself to be a prototype.
            </p>
            <note type="caution">
            An object that implements this interface cannot be used as a normal object.
            </note>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.IFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <remarks>
            <note type="caution">
            If this method is being called in the context of an enclosing IoC container and
            returns <see langword="null"/>, the IoC container will consider this factory
            object as not being fully initialized and throw a corresponding (and most
            probably fatal) exception.
            </note>
            </remarks>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.IFactoryObject.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see langword="null"/> if not known in advance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.IFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractFactoryObject.CreateInstance">
            <summary>
            Template method that subclasses must override to construct
            the object returned by this factory.
            </summary>
            <remarks>
            Invoked once immediately after the initialization of this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> in the case of
            a singleton; else, on each call to the
            <see cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
            method.
            </remarks>
            <exception cref="T:System.Exception">
            If an exception occured during object creation.
            </exception>
            <returns>
            A distinct instance of the object created by this factory.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractFactoryObject.Dispose">
            <summary>
            Performs cleanup on any cached singleton object.
            </summary>
            <remarks>
            <p>
            Only makes sense in the context of a singleton object.
            </p>
            </remarks>
            <see cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>
            <seealso cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.AbstractFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
            <remarks>
            <p>
            Please note that changing the value of this property <b>after</b>
            this factory object instance has been created by an enclosing
            Spring.NET IoC container really is a programming error. This
            property should really only be set once, prior to the invocation
            of the
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            callback method.
            </p>
            </remarks>
            <see cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.AbstractFactoryObject.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see langword="null"/> if not known in advance.
            </summary>
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.AutoWiringMode">
            <summary>
            The various autowiring modes.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.No">
            <summary>
            Do not autowire.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.ByName">
            <summary>
            Autowire by name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.ByType">
            <summary>
            Autowire by <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.Constructor">
            <summary>
            Autowiring by constructor.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.AutoDetect">
            <summary>
            The autowiring strategy is to be determined by introspection
            of the object's <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.CommandLineArgsVariableSource">
            <summary>
            Implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that
            resolves variable name against command line arguments.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IVariableSource">
            <summary>
            Defines contract that different variable sources have to implement.
            </summary>
            <remarks>
            <p>
            The "variable sources" are objects containing name-value pairs
            that allow a variable value to be retrieved for the given name.</p>
            <p>
            Out of the box, Spring.NET supports a number of variable sources, 
            that allow users to obtain variable values from .NET config files,
            Java-style property files, environment, registry, etc.</p>
            <p>
            Users can always write their own variable sources implementations,
            that will allow them to load variable values from the database or 
            other proprietary data source.</p>
            </remarks>
            <seealso cref="T:Spring.Objects.Factory.Config.ConfigSectionVariableSource"/>
            <seealso cref="T:Spring.Objects.Factory.Config.PropertyFileVariableSource"/>
            <seealso cref="T:Spring.Objects.Factory.Config.EnvironmentVariableSource"/>
            <seealso cref="T:Spring.Objects.Factory.Config.CommandLineArgsVariableSource"/>
            <seealso cref="T:Spring.Objects.Factory.Config.RegistryVariableSource"/>
            <seealso cref="T:Spring.Objects.Factory.Config.SpecialFolderVariableSource"/>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves variable value for the specified variable name.
            </summary>
            <param name="name">
            The name of the variable to resolve.
            </param>
            <returns>
            The variable value if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CommandLineArgsVariableSource.#ctor">
            <summary>
            Default constructor. 
            Initializes command line arguments from the environment.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CommandLineArgsVariableSource.#ctor(System.String[])">
            <summary>
            Constructor that allows arguments to be passed externally.
            Useful for testing.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CommandLineArgsVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CommandLineArgsVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves variable value for the specified variable name.
            </summary>
            <param name="name">
            The name of the variable to resolve.
            </param>
            <returns>
            The variable value if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CommandLineArgsVariableSource.InitArguments">
            <summary>
            Initializes command line arguments dictionary.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.CommandLineArgsVariableSource.ArgumentPrefix">
            <summary>
            Gets or sets a prefix that should be used to 
            identify arguments to extract values from.
            </summary>
            <value>
            A prefix that should be used to identify arguments 
            to extract values from. Defaults to slash ("/").
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.CommandLineArgsVariableSource.ValueSeparator">
            <summary>
            Gets or sets a character that should be used to
            separate argument name from its value.
            </summary>
            <value>
            A character that should be used to separate argument 
            name from its value. Defaults to colon (":").
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConfigSectionVariableSource">
            <summary>
            Implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that
            resolves variable name against name-value sections in
            the standard .NET configuration file.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigSectionVariableSource.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Spring.Objects.Factory.Config.ConfigSectionVariableSource"/>
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigSectionVariableSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Spring.Objects.Factory.Config.ConfigSectionVariableSource"/> from the given <paramref name="sectionName"/>
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigSectionVariableSource.#ctor(System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Spring.Objects.Factory.Config.ConfigSectionVariableSource"/> from the given <paramref name="sectionNames"/>
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigSectionVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigSectionVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves variable value for the specified variable name.
            </summary>
            <param name="name">
            The name of the variable to resolve.
            </param>
            <returns>
            The variable value if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigSectionVariableSource.InitVariables">
            <summary>
            Initializes properties based on the specified 
            property file locations.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConfigSectionVariableSource.SectionNames">
            <summary>
            Gets or sets a list of section names variables should be loaded from.
            </summary>
            <remarks>
            All sections specified need to be handled by the <see cref="T:System.Configuration.NameValueSectionHandler"/>
            in order to be processed successfully.
            </remarks>
            <value>
            A list of section names variables should be loaded from.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConfigSectionVariableSource.SectionName">
            <summary>
            Convinience property. Gets or sets a single section
            to read properties from.
            </summary>
            <remarks>
            The section specified needs to be handled by the <see cref="T:System.Configuration.NameValueSectionHandler"/>
            in order to be processed successfully.
            </remarks>
            <value>
            A section to read properties from.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConfigurationReader">
            <summary>
            Various utility methods for .NET style .config files. 
            </summary>
            <remarks>
            <p>
            Currently supports reading custom configuration sections and returning them as 
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> objects.
            </p>
            </remarks>
            <author>Simon White</author>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.#cctor">
            <summary>
            Initializes the type members
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.Read(Spring.Core.IO.IResource,System.String)">
            <summary>
            Reads the specified configuration section into a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="resource">The resource to read.</param>
            <param name="configSection">The section name.</param>
            <returns>
            A newly populated
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If any errors are encountered while attempting to open a stream
            from the supplied <paramref name="resource"/>.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            If any errors are encountered while loading or reading (this only applies to
            v1.1 and greater of the .NET Framework) the actual XML.
            </exception>
            <exception cref="T:System.Exception">
            If any errors are encountered while loading or reading (this only applies to
            v1.0 of the .NET Framework).
            </exception>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the configuration section was otherwise invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.Read(Spring.Core.IO.IResource,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Reads the specified configuration section into the supplied
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="resource">The resource to read.</param>
            <param name="configSection">The section name.</param>
            <param name="properties">
            The collection that is to be populated. May be
            <see langword="null"/>.
            </param>
            <returns>
            A newly populated
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If any errors are encountered while attempting to open a stream
            from the supplied <paramref name="resource"/>.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            If any errors are encountered while loading or reading (this only applies to
            v1.1 and greater of the .NET Framework) the actual XML.
            </exception>
            <exception cref="T:System.Exception">
            If any errors are encountered while loading or reading (this only applies to
            v1.0 of the .NET Framework).
            </exception>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the configuration section was otherwise invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.Read(Spring.Core.IO.IResource,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Reads the specified configuration section into the supplied
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="resource">The resource to read.</param>
            <param name="configSection">The section name.</param>
            <param name="properties">
            The collection that is to be populated. May be
            <see langword="null"/>.
            </param>
            <param name="overrideValues">
            If a key already exists, is its value to be appended to the current
            value or replaced?
            </param>
            <returns>
            The populated
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If any errors are encountered while attempting to open a stream
            from the supplied <paramref name="resource"/>.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            If any errors are encountered while loading or reading (this only applies to
            v1.1 and greater of the .NET Framework) the actual XML.
            </exception>
            <exception cref="T:System.Exception">
            If any errors are encountered while loading or reading (this only applies to
            v1.0 of the .NET Framework).
            </exception>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the configuration section was otherwise invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.ReadFromXmlDocument(System.Xml.XmlDocument,System.String)">
            <summary>
            Read from the specified configuration from the supplied XML
            <paramref name="document"/> into a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <remarks>
            <note>
            Does <b>not</b> support section grouping. The supplied XML
            <paramref name="document"/> must already be loaded.
            </note>
            </remarks>
            <param name="document">
            The <see cref="T:System.Xml.XmlDocument"/> to read from.
            </param>
            <param name="configSectionName">
            The configuration section name to read.
            </param>
            <returns>
            A newly populated
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </returns>
            <exception cref="T:System.Xml.XmlException">
            If any errors are encountered while reading (this only applies to
            v1.1 and greater of the .NET Framework).
            </exception>
            <exception cref="T:System.Exception">
            If any errors are encountered while reading (this only applies to
            v1.0 of the .NET Framework).
            </exception>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the configuration section was otherwise invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSection(Spring.Core.IO.IResource,System.String)">
            <summary>
            Returns the section from the specified resource with the given section name
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSection(Spring.Core.IO.IResource,System.String,System.Type)">
            <summary>
            Returns the section from the specified resource with the given section name. Use <paramref name="defaultConfigurationSectionHandlerType"/>
            in case no section handler is specified.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSection``1(Spring.Core.IO.IResource,System.String)">
            <summary>
            Returns the typed section from the specified resource with the given section name
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSection``1(Spring.Core.IO.IResource,System.String,System.Type)">
            <summary>
            Returns the section from the specified resource with the given section name. Use <paramref name="defaultConfigurationSectionHandlerType"/>
            in case no section handler is specified.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSectionFromXmlDocument``1(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the typed result of evaluating the specified <paramref name="configSectionName"/>.
            </summary>
            <exception cref="T:System.ArgumentException">if the result's type does not match the expected type</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSectionFromXmlDocument(System.Xml.XmlDocument,System.String)">
            <summary>
            Reads the specified configuration section from the given <see cref="T:System.Xml.XmlDocument"/>
            </summary>
            <param name="document"></param>
            <param name="configSectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSectionFromXmlDocument(System.Xml.XmlDocument,System.String,System.Type)">
            <summary>
            Reads the specified configuration section from the given <see cref="T:System.Xml.XmlDocument"/>
            </summary>
            <param name="document"></param>
            <param name="configSectionName"></param>
            <param name="defaultConfigurationSectionHandlerType"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.GetSectionHandlerType(System.Xml.XmlDocument,System.String,System.Type)">
            <summary>
            Determine the configuration section handler type
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.PopulateFromAppConfig(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Populates the supplied <paramref name="properties"/> with values from
            a .NET application configuration file.
            </summary>
            <param name="properties">
            The <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            to add any key-value pairs to.
            </param>
            <param name="configSectionName">
            The configuration section name in the a .NET application configuration
            file.
            </param>
            <param name="overrideValues">
            If a key already exists, is its value to be appended to the current
            value or replaced?
            </param>
            <returns>
            <see langword="true"/> if the supplied
            <paramref name="configSectionName"/> was found.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.#ctor">
            <summary>
            Creates a new instance of the ConfigurationReader class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConnectionStringsVariableSource">
            <summary>
            Implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that
            resolves variable name connection strings defined in
            the standard .NET configuration file.
            </summary>
            <remarks>
            <p>
            When the &lt;connectionStrings&gt; configuration section is processed by this class,
            two variables are defined for each connection string: one for connection string and
            the second one for the provider name.</p>
            <p>
            Variable names are generated by appending '.connectionString' and '.providerName'
            literals to the value of the <c>name</c> attribute of the connection string element.
            For example:</p>
            <pre>
            <connectionStrings>
               <add name="myConn" connectionString="..." providerName="..."/>
            </connectionStrings>
            </pre>
            <p>
            will result in two variables being created: <b>myConn.connectionString</b> and <b>myConn.providerName</b>.
            You can reference these variables within your object definitions, just like any other variable.</p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConnectionStringsVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConnectionStringsVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves variable value for the specified variable name.
            </summary>
            <param name="name">
            The name of the variable to resolve.
            </param>
            <returns>
            The variable value if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConnectionStringsVariableSource.InitVariables">
            <summary>
            Initializes properties based on the specified 
            property file locations.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConstructorArgumentValues">
            <summary>
            Holder for constructor argument values for an object.
            </summary>
            <remarks>
            <p>
            Supports values for a specific index or parameter name (case
            insensitive) in the constructor argument list, and generic matches by
            <see cref="P:System.Type.FullName"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <see cref="P:Spring.Objects.Factory.Config.IObjectDefinition.ConstructorArgumentValues"/>
        </member>
        <member name="F:Spring.Objects.Factory.Config.ConstructorArgumentValues.NoIndex">
            <summary>
            Can be used as an argument filler for the
            <see cref="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetArgumentValue(System.Int32,System.String,System.Type,Spring.Collections.ISet)"/>
            overload when one is not looking for an argument by index.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.#ctor(Spring.Objects.Factory.Config.ConstructorArgumentValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            class.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddAll(Spring.Objects.Factory.Config.ConstructorArgumentValues)">
            <summary>
            Copy all given argument values into this object.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(System.Int32,System.Object)">
            <summary>
            Add argument value for the given index in the constructor argument list.
            </summary>
            <param name="index">
            The index in the constructor argument list.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(System.Int32,System.Object,System.String)">
            <summary>
            Add argument value for the given index in the constructor argument list.
            </summary>
            <param name="index">The index in the constructor argument list.</param>
            <param name="value">The argument value.</param>
            <param name="type">
            The <see cref="P:System.Type.FullName"/> of the argument
            <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(System.String,System.Object)">
            <summary>
            Add argument value for the given name in the constructor argument list.
            </summary>
            <param name="name">The name in the constructor argument list.</param>
            <param name="value">The argument value.</param>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="name"/> is <see langword="null"/>
            or is composed wholly of whitespace.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetIndexedArgumentValue(System.Int32,System.Type)">
            <summary>
            Get argument value for the given index in the constructor argument list.
            </summary>
            <param name="index">The index in the constructor argument list.</param>
            <param name="requiredType">
            The required <see cref="T:System.Type"/> of the argument.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetNamedArgumentValue(System.String)">
            <summary>
            Get argument value for the given name in the constructor argument list.
            </summary>
            <param name="name">The name in the constructor argument list.</param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.ContainsNamedArgument(System.String)">
            <summary>
            Does this set of constructor arguments contain a named argument matching the
            supplied <paramref name="argument"/> name?
            </summary>
            <remarks>
            <note>
            The comparison is performed in a case-insensitive fashion.
            </note>
            </remarks>
            <param name="argument">The named argument to look up.</param>
            <returns>
            <see langword="true"/> if this set of constructor arguments
            contains a named argument matching the supplied
            <paramref name="argument"/> name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(System.Object)">
            <summary>
            Add generic argument value to be matched by type.
            </summary>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(System.Object,System.String)">
            <summary>
            Add generic argument value to be matched by type.
            </summary>
            <param name="value">The argument value.</param>
            <param name="type">
            The <see cref="P:System.Type.FullName"/> of the argument
            <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetGenericArgumentValue(System.Type)">
            <summary>
            Look for a generic argument value that matches the given
            <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetGenericArgumentValue(System.Type,Spring.Collections.ISet)">
            <summary>
            Look for a generic argument value that matches the given
            <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <param name="usedValues">
            A <see cref="T:Spring.Collections.ISet"/> of
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            objects that have already been used in the current resolution
            process and should therefore not be returned again; this allows one
            to return the next generic argument match in the case of multiple
            generic argument values of the same type.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetArgumentValue(System.Int32,System.Type)">
            <summary>
            Look for an argument value that either corresponds to the given index
            in the constructor argument list or generically matches by
            <see cref="T:System.Type"/>.
            </summary>
            <param name="index">
            The index in the constructor argument list.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetArgumentValue(System.Int32,System.Type,Spring.Collections.ISet)">
            <summary>
            Look for an argument value that either corresponds to the given index
            in the constructor argument list or generically matches by
            <see cref="T:System.Type"/>.
            </summary>
            <param name="index">
            The index in the constructor argument list.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <param name="usedValues">
            A <see cref="T:Spring.Collections.ISet"/> of
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            objects that have already been used in the current resolution
            process and should therefore not be returned again; this allows one
            to return the next generic argument match in the case of multiple
            generic argument values of the same type.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetArgumentValue(System.String,System.Type)">
            <summary>
            Look for an argument value that either corresponds to the given index
            in the constructor argument list or generically matches by
            <see cref="T:System.Type"/>.
            </summary>
            <param name="name">
            The name of the argument in the constructor argument list. May be
            <see langword="null"/>, in which case generic matching by 
            <see cref="T:System.Type"/> is assumed.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetArgumentValue(System.String,System.Type,Spring.Collections.ISet)">
            <summary>
            Look for an argument value that either corresponds to the given index
            in the constructor argument list or generically matches by
            <see cref="T:System.Type"/>.
            </summary>
            <param name="name">
            The name of the argument in the constructor argument list. May be
            <see langword="null"/>, in which case generic matching by 
            <see cref="T:System.Type"/> is assumed.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <param name="usedValues">
            A <see cref="T:Spring.Collections.ISet"/> of
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            objects that have already been used in the current resolution
            process and should therefore not be returned again; this allows one
            to return the next generic argument match in the case of multiple
            generic argument values of the same type.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetArgumentValue(System.Int32,System.String,System.Type,Spring.Collections.ISet)">
            <summary>
            Look for an argument value that either corresponds to the given index
            in the constructor argument list, or to the named argument, or
            generically matches by <see cref="T:System.Type"/>.
            </summary>
            <param name="index">
            The index of the argument in the constructor argument list. May be
            negative, to denote the fact that we are not looking for an
            argument by index (see
            <see cref="F:Spring.Objects.Factory.Config.ConstructorArgumentValues.NoIndex"/>.
            </param>
            <param name="name">
            The name of the argument in the constructor argument list. May be
            <see langword="null"/>.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <param name="usedValues">
            A <see cref="T:Spring.Collections.ISet"/> of
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            objects that have already been used in the current resolution
            process and should therefore not be returned again; this allows one
            to return the next generic argument match in the case of multiple
            generic argument values of the same type.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.IndexedArgumentValues">
            <summary>
            Return the map of indexed argument values.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> with
            <see cref="T:System.Int32"/> indices as keys and
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>s
            as values.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.NamedArgumentValues">
            <summary>
            Return the map of named argument values.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> with
            <see cref="T:System.String"/> named arguments as keys and
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>s
            as values.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.GenericArgumentValues">
            <summary>
            Return the set of generic argument values.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IList"/> of
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>s.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.ArgumentCount">
            <summary>
            Return the number of arguments held in this instance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.Empty">
            <summary>
            Returns true if this holder does not contain any argument values,
            neither indexed ones nor generic ones.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder">
            <summary>
            Holder for a constructor argument value, with an optional
            <see cref="T:System.Type"/> attribute indicating the target
            <see cref="T:System.Type"/> of the actual constructor argument.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.#ctor(System.Object)">
            <summary>
            Creates a new instance of the ValueHolder class.
            </summary>
            <param name="value">
            The value of the constructor argument.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the ValueHolder class.
            </summary>
            <param name="value">
            The value of the constructor argument.
            </param>
            <param name="typeName">
            The <see cref="P:System.Type.FullName"/> of the argument
            <see cref="T:System.Type"/>. Can also be one of the common
            <see cref="T:System.Type"/> aliases (<c>int</c>, <c>bool</c>,
            <c>float</c>, etc).
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.Value">
            <summary>
            Gets and sets the value for the constructor argument.
            </summary>
            <remarks>
            <p>
            Only necessary for manipulating a registered value, for example in
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>s.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.Type">
            <summary>
            Return the <see cref="P:System.Type.FullName"/> of the constructor
            argument.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.CustomConverterConfigurer">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            implementation that allows for convenient registration of custom
            <see cref="T:System.ComponentModel.TypeConverter"/>s.
            </summary>
            <remarks>
            <note>
            The use of this class is <i>typically</i> not required; the .NET
            mechanism of associating a
            <see cref="T:System.ComponentModel.TypeConverter"/> with a
            <see cref="T:System.Type"/>  via the use of the
            <see cref="T:System.ComponentModel.TypeConverterAttribute"/> is the
            recommended (and standard) way. This class primarily exists to cover
            those cases where third party classes to which one does not have the
            source need to be exposed to the type conversion mechanism.
            </note>
            <p>
            Because the
            <see cref="T:Spring.Objects.Factory.Config.CustomConverterConfigurer"/>
            class implements the
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            interface, instances of this class that have been exposed in the
            scope of an
            <see cref="T:Spring.Context.IApplicationContext"/> will
            <i>automatically</i> be picked up by the application context and made
            available to the IoC container whenever type conversion is required. If
            one is using a
            <see cref="T:Spring.Objects.Factory.Config.CustomConverterConfigurer"/>
            object definition within the scope of an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, no such automatic
            pickup of the
            <see cref="T:Spring.Objects.Factory.Config.CustomConverterConfigurer"/>
            is performed (custom converters will have to be added manually using the
            <see cref="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)"/>
            method). For <i>most</i> application scenarios, one will get better
            mileage using the <see cref="T:Spring.Context.IApplicationContext"/>
            abstraction.
            </p>
            </remarks>
            <example>
            <p>
            The following examples all assume XML based configuration, and use
            inner object definitions to define the custom
            <see cref="T:System.ComponentModel.TypeConverter"/> objects (nominally to
            avoid polluting the object name space, but also because the
            configuration simply reads better that way).
            </p>
            <code escaped="true">
            <object id="customConverterConfigurer" type="Spring.Objects.Factory.Config.CustomConverterConfigurer, Spring.Core">
              <property name="CustomConverters">
                <dictionary>
                  <entry key="System.Date">
                    <object type="MyNamespace.MyCustomDateEditor"/>
                  </entry>
                  <entry key="MyNamespace.MyObject, MyAssembly">
                    <object id="myConverter" type="MyNamespace.MObjectConverter, MyOtherAssembly">
                      <property name="aProperty" value="..."/>
                    </object>
                  </entry>
                </dictionary>
              </property>
            </object>
            </code>
            <p>
            The following example illustrates a complete (albeit naieve) use case
            for this class, including a custom
            <see cref="T:System.ComponentModel.TypeConverter"/> implementation, said
            converters domain class, and the XML configuration that hooks the
            converter in place and makes it available to a Spring.NET container for
            use during object resolution.
            </p>
            <p>
            The domain class is a simple data-only object that contains the data
            required to send an email message (such as the host and user account
            name). A developer would prefer to use a string of the form
            <c>UserName=administrator,Password=r1l0k1l3y,Host=localhost</c> to
            configure the mail settings and just let the container take care of the
            conversion.
            </p>
            <code language="C#">
            namespace ExampleNamespace
            {
            	public sealed class MailSettings
            	{
            		private string _userName;
            		private string _password;
            		private string _host;
            
            		public string Host
            		{
            			get { return _host; }
            			set { _host = value; }
            		}
            
            	 	public string UserName
            		{
            			get { return _userName; }
            			set { _userName = value; }
            		}
            
            		public string Password
            		{
            			get { return _password; }
            			set { _password = value; }
            		}
            	}
            
            	public sealed class MailSettingsConverter : TypeConverter
            	{
            		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            	 	{
            			if (typeof (string) == sourceType)
            			{
            				return true;
            			}
            			return base.CanConvertFrom(context, sourceType);
            		}
            
            		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
            		{
            			string text = value as string;
            			if(text != null) 
            			{
            				MailSettings mailSettings = new MailSettings();
            				string[] tokens = text.Split(',');
            				for (int i = 0; i &lt; tokens.Length; ++i)
            				{
            					string token = tokens[i];
            					string[] settings = token.Split('=');
            					typeof(MailSettings).GetProperty(settings[0])
            						.SetValue(mailSettings, settings[1], null);
            				}
            				return mailSettings;
            			}
            			return base.ConvertFrom(context, culture, value);
            		}
            	}
            	
            	// a very naieve class that uses the MailSettings class...
            	public sealed class ExceptionLogger
            	{
            		private MailSettings _mailSettings;
            		
            		public MailSettings MailSettings {
            		{
            			set { _mailSettings = value; }
            		}
            		
            		public void Log(object value)
            		{
            			Exception ex = value as Exception;
            			if(ex != null) 
            			{
            				// use _mailSettings instance...
            			}
            		}
            	}
            }
            </code>
            <p>
            The attendant XML configuration for the above classes would be...
            </p>
            <code escaped="true">
            <object id="emailingExceptionLogger" type="ExampleNamespace.ExceptionLogger, MyAssembly">
            	<property name="MailSettings" value="UserName=administrator,Password=r1l0k1l3y,Host=localhost"/>
            </object>
            <object id="customConverterConfigurer" type="Spring.Objects.Factory.Config.CustomConverterConfigurer, Spring.Core">
            	<property name="CustomConverters">
            		<dictionary>
            			<entry key="ExampleNamespace.MailSettings, MyAssembly">
            				<object type="ExampleNamespace.MailSettingsConverter, MyAssembly"/>
            			</entry>
            		</dictionary>
            	</property>
            </object>
            </code>
            </example>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            <seealso cref="T:Spring.Context.IApplicationContext"/>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CustomConverterConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Registers any custom converters with the supplied
            <paramref name="factory"/>.
            </summary>
            <param name="factory">
            The object factory to register the converters with.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CustomConverterConfigurer.ResolveConverter(System.Object)">
            <summary>
            Resolves the supplied <paramref name="value"/> into a
            <see cref="T:System.ComponentModel.TypeConverter"/> instance.
            </summary>
            <param name="value">
            The object that is to be resolved into a
            <see cref="T:System.ComponentModel.TypeConverter"/> instance.
            </param>
            <returns>
            A resolved <see cref="T:System.ComponentModel.TypeConverter"/> instance.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the supplied <paramref name="value"/> is <see langword="null"/>,
            or the supplied <paramref name="value"/> cannot be resolved.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.CustomConverterConfigurer.CustomConverters">
            <summary>
            The custom converters to register.
            </summary>
            <remarks>
            <p>
            The <see cref="T:System.Collections.IDictionary"/> uses the type name
            of the class that requires conversion as the key, and an
            <b>instance</b> of the
            <see cref="T:System.ComponentModel.TypeConverter"/> that will effect
            the conversion. Alternatively, the actual
            <see cref="T:System.Type"/> of the class that requires conversion
            can be used as the key.
            </p>
            </remarks>
            <example>
            <p>
            <code language="C#">
            IDictionary converters = new Hashtable();
            converters.Add( "System.Date", new MyCustomDateConverter() );
            // a System.Type instance can also be used as the key...
            converters.Add( typeof(Color), new MyCustomRBGColorConverter() );
            </code>
            </p>
            </example>
        </member>
        <member name="T:Spring.Objects.Factory.Config.DelegateFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            creates delegates.
            </summary>
            <remarks>
            <p>
            Supports the creation of <see cref="T:System.Delegate"/>s for both
            instance and <see langword="static"/> methods.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DelegateFactoryObject.AfterPropertiesSet">
            <summary>
            Callback method called once all factory properties have been set.
            </summary>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/> 
        </member>
        <member name="M:Spring.Objects.Factory.Config.DelegateFactoryObject.CreateInstance">
            <summary>
            Creates the delegate.
            </summary>
            <exception cref="T:System.Exception">
            If an exception occured during object creation.
            </exception>
            <returns>The object returned by this factory.</returns>
            <seealso cref="M:Spring.Objects.Factory.Config.AbstractFactoryObject.CreateInstance"/> 
        </member>
        <member name="P:Spring.Objects.Factory.Config.DelegateFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of <see cref="T:System.Delegate"/>
            created by this factory.
            </summary>
            <remarks>
            <p>
            Returns the <see cref="T:System.Delegate"/> <see cref="T:System.Type"/>
            if accessed prior to the <see cref="M:Spring.Objects.Factory.Config.DelegateFactoryObject.AfterPropertiesSet"/> method
            being called.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DelegateFactoryObject.DelegateType">
            <summary>
            The <see cref="T:System.Type"/> of the <see cref="T:System.Delegate"/>
            created by this factory.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DelegateFactoryObject.MethodName">
            <summary>
            The name of the method that is to be invoked by the created
            delegate.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DelegateFactoryObject.TargetType">
            <summary>
            The target <see cref="T:System.Type"/> if the <see cref="P:Spring.Objects.Factory.Config.DelegateFactoryObject.MethodName"/>
            refers to a <see langword="static"/> method.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DelegateFactoryObject.TargetObject">
            <summary>
            The target object if the <see cref="P:Spring.Objects.Factory.Config.DelegateFactoryObject.MethodName"/>
            refers to an instance method.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.DelegateObjectFactoryConfigurer">
            <summary>
            A generic implementation of an <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>, that delegates post processing to a passed delegate
            </summary>
            <remarks>
            This comes in handy when you want to perform specific tasks on an object factory, e.g. doing special initialization.
            </remarks>
            <example>
            The example below is taken from a unit test. The snippet causes 'someObject' to be registered each time <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/> is called on 
            the context instance:
            <code>
            IConfigurableApplicationContext ctx = new XmlApplicationContext(false, "name", false, null);
            ctx.AddObjectFactoryPostProcessor(new DelegateObjectFactoryConfigurer( of =&gt;
                {
                    of.RegisterSingleton("someObject", someObject);
                }));
            </code>
            </example>
            <author>Erich Eichinger</author>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DelegateObjectFactoryConfigurer.ConfigurationHandler">
            <summary>
            Get or Set the handler to delegate configuration to
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.DependencyDescriptor">
            <summary>
            Descriptor for a specific dependency that is about to be injected.
            Wraps a constructor parameter, a method parameter or a field,
            allowing unified access to their metadata.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DependencyDescriptor.#ctor(Spring.Core.MethodParameter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Config.DependencyDescriptor"/> class for a method or constructor parameter.
            Considers the dependency as 'eager'
            </summary>
            <param name="methodParameter">The MethodParameter to wrap.</param>
            <param name="required">if set to <c>true</c> if the dependency is required.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DependencyDescriptor.#ctor(Spring.Core.MethodParameter,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Config.DependencyDescriptor"/> class for a method or a constructor parameter.
            </summary>
            <param name="methodParameter">The MethodParameter to wrap.</param>
            <param name="required">if set to <c>true</c> the dependency is required.</param>
            <param name="eager">if set to <c>true</c> the dependency is 'eager' in the sense of
            eagerly resolving potential target objects for type matching.</param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DependencyDescriptor.Required">
            <summary>
            Gets a value indicating whether this dependency is required.
            </summary>
            <value><c>true</c> if required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DependencyDescriptor.DependencyType">
            <summary>
            Determine the declared (non-generic) type of the wrapped parameter/field.
            </summary>
            <value>The type of the dependency (never <code>null</code></value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DependencyDescriptor.Eager">
            <summary>
            Gets a value indicating whether this <see cref="T:Spring.Objects.Factory.Config.DependencyDescriptor"/> is eager in the sense of
            eagerly resolving potential target beans for type matching.
            </summary>
            <value><c>true</c> if eager; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DependencyDescriptor.MethodParameter">
            <summary>
            Gets the wrapped MethodParameter, if any.
            </summary>
            <value>The method parameter.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.DictionaryFactoryObject">
            <summary>
            Simple factory for shared <see cref="T:System.Collections.IDictionary"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryFactoryObject.CreateInstance">
            <summary>
            Constructs a new instance of the target dictionary.
            </summary>
            <returns>The new <see cref="T:System.Collections.IDictionary"/> instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DictionaryFactoryObject.SourceDictionary">
            <summary>
            Set the source <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <remarks>
            <p>
            This value will be used to populate the <see cref="T:System.Collections.IDictionary"/>
            returned by this factory.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DictionaryFactoryObject.TargetDictionaryType">
            <summary>
            Set the <see cref="T:System.Type"/> of the <see cref="T:System.Collections.IDictionary"/>
            implementation to use.
            </summary>
            <remarks>
            <p>
            The default is the <see cref="T:System.Collections.Hashtable"/> <see cref="T:System.Type"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If the <c>value</c> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <c>value</c> is an <see langword="abstract"/> <see cref="T:System.Type"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <c>value</c> is an interface.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DictionaryFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of objects created by this factory.
            </summary>
            <value>
            Always returns the <see cref="T:System.Collections.IDictionary"/> <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.DictionaryVariableSource">
            <summary>
            A very simple, hashtable-based implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/>
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.#ctor">
            <summary>
            Creates a new, empty variable source
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.#ctor(System.Boolean)">
            <summary>
            Creates a new, empty and case-insensitive variable source
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.#ctor(System.String[])">
            <summary>
            Create a new variable source from a list of paired string values.
            </summary>
            <remarks>
            <example>
            The example below shows, how the dictionary is filled with { 'key1', 'value1' }, { 'key2', 'value2' } pairs:
            <code>
            new DictionaryVariableSource( new string[] { &quot;key1&quot;, &quot;value1&quot;, &quot;key2&quot;, &quot;value2&quot; } )
            </code>
            </example>
            </remarks>
            <param name="args">the argument list containing pairs, or <c>null</c></param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the DictionaryVariableSource class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.#ctor(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a new variable source, reading values from another dictionary
            and converting them to strings if necessary
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.Add(System.String,System.String)">
            <summary>
            Adds a key/value pair
            </summary>
            <returns>this dictionary. allows for fluent config</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryVariableSource.ResolveVariable(System.String)">
            <summary>
            Performs a variable name lookup
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.EnvironmentVariableMode">
            <summary>
            Specifies how instances of the
            <see cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
            class must apply environment variables when replacing values.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EnvironmentVariableMode.Never">
            <summary>
            Never replace environment variables.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EnvironmentVariableMode.Fallback">
            <summary>
            If properties are not specified via a resource, 
            then resolve using environment variables.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EnvironmentVariableMode.Override">
            <summary>
            Apply environment variables first before applying properties from a
            resource.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.EnvironmentVariableSource">
            <summary>
            Implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that
            resolves variable name against environment variables.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EnvironmentVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EnvironmentVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves variable value for the specified variable name.
            </summary>
            <param name="name">
            The name of the variable to resolve.
            </param>
            <returns>
            The variable value if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.EventValues">
            <summary>
            Holder for event handler values for an object.
            </summary>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EventValues.EmptyHandlers">
            <summary>
            The empty array of <see cref="T:Spring.Objects.IEventHandlerValue"/>s.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.EventValues"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.#ctor(Spring.Objects.Factory.Config.EventValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.EventValues"/> class.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.EventValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.AddAll(Spring.Objects.Factory.Config.EventValues)">
            <summary>
            Copy all given argument values into this object.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.EventValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.AddHandler(Spring.Objects.IEventHandlerValue)">
            <summary>
            Adds the supplied handler to the collection of event handlers.
            </summary>
            <param name="handler">The handler to be added.</param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.EventValues.EventHandlers">
            <summary>
            The mapping of event names to an
            <see cref="T:System.Collections.ICollection"/> of
            <see cref="T:Spring.Objects.IEventHandlerValue"/>s.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.EventValues.Events">
            <summary>
            Gets the <see cref="T:System.Collections.ICollection"/> of events
            that have handlers associated with them.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.EventValues.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Collections.ICollection"/> of
            <see cref="T:Spring.Objects.IEventHandlerValue"/>s for the supplied
            event name.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ExpressionHolder">
            <summary>
            Immutable placeholder class used for the value of a
            <see cref="T:Spring.Objects.PropertyValue"/> object when it's a reference
            to a Spring <see cref="T:Spring.Expressions.IExpression"/> that should be evaluated at runtime.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ExpressionHolder.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ExpressionHolder"/>
            class.
            </summary>
            <param name="expression">The expression to resolve.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ExpressionHolder.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ExpressionHolder.ExpressionString">
            <summary>
            Gets or sets the expression string.  Setting the expression string will cause
            the expression to be parsed.
            </summary>
            <value>The expression string.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ExpressionHolder.Expression">
            <summary>
            Return the expression.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ExpressionHolder.Properties">
            <summary>
            Properties for this expression node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject">
             <summary>
             <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
             retrieves a static or non-static <b>public</b> field value.
             </summary>
             <remarks>
             <p>
             Typically used for retrieving <b>public</b> constants.
             </p>
             </remarks>
             <example>
             <p>
             The following example retrieves the <see cref="F:System.DBNull.Value"/> field value...
             </p>
             <code escaped="true">
             <object id="dbnull" type="Spring.Objects.Factory.Config.FieldRetrievingFactoryObject, Spring.Core">
                 <property name="TargetType" value="System.DBNull"/>
                 <property name="TargetField" value="Value"/>
             </object>
             </code>
             <p>
             The previous example could also have been written using the convenience
             <see cref="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.StaticField"/>
             property, like so...
             </p>
             <code escaped="true">
             <object id="dbnull" type="Spring.Objects.Factory.Config.FieldRetrievingFactoryObject, Spring.Core">
                 <property name="StaticField" value="System.DBNull.Value"/>
             </object>
             </code>
             <p>
             This class also implements the <see cref="T:Spring.Objects.Factory.IObjectNameAware"/>
             interface
             (<see cref="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.ObjectName"/>).
             If the id (or name) of one's
             <see cref="T:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject"/>
             object definition is set to the <see cref="P:System.Type.AssemblyQualifiedName"/>
             of the <see langword="static"/> field to be retrieved, then the id (or
             name) of one's object definition will be used for the name of the
             <see langword="static"/> field lookup. See below for an example of this
             concise style of definition.
             </p>
             <code escaped="true">
             <!-- returns the value of the DBNull.Value field -->
             <object id="System.DBNull.Value" type="Spring.Objects.Factory.Config.FieldRetrievingFactoryObject, Spring.Core"/>
            
             <!-- returns the value of the Type.Delimiter field -->
             <object id="System.Type.Delimiter" type="Spring.Objects.Factory.Config.FieldRetrievingFactoryObject, Spring.Core"/>
             </code>
             <p>
             The usage for retrieving instance fields is similar. No example is shown
             because public instance fields are <i>generally</i> bad practice; but if
             you have some legacy code that exposes public instance fields, or if you
             just really like coding public instance fields, then you can use this
             <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation to
             retrieve such field values.
             </p>
             </example>
             <author>Juergen Hoeller</author>
             <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.IObjectNameAware">
            <summary>
            Interface to be implemented by objects that wish to be aware of their object
            name in an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            Note that most objects will choose to receive references to collaborating
            objects via respective properties.
            </p>
            <p>
            For a list of all object lifecycle methods, see the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> API documentation.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Factory.IObjectNameAware.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <value>
            The name of the object in the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and ApplicationContextAware).
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform initialization only
            possible when all object properties have been set and to throw an
            exception in the event of misconfiguration.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
            <see cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.StaticField">
            <summary>
            The <see cref="P:System.Type.AssemblyQualifiedName"/> of the
            <see langword="static"/> field to be retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <value>
            The name of the object in the factory.
            </value>
            <remarks>
            <p>
            In the context of the
            <see cref="T:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject"/>
            class, the
            <see cref="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.ObjectName"/>
            value will be interepreted as the value of the
            <see cref="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.StaticField"/>
            property if no value has been explicitly assigned to the
            <see cref="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.StaticField"/>
            property. This allows for concise object definitions with just an id or name;
            see the class documentation for
            <see cref="T:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject"/>
            for an example of this style of usage.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.TargetField">
            <summary>
            The name of the field the value of which is to be retrieved.
            </summary>
            <remarks>
            <p>
            If the
            <see cref="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.TargetObject"/>
            has been set (and is not <cref lang="null"/>), then the value of this property
            refers to an instance field name; it otherwise refers to a <see langword="static"/>
            field name.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.TargetObject">
            <summary>
            The object instance on which the field is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.TargetType">
            <summary>
            The <see cref="T:System.Type"/> on which the field is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <cref lang="null"/> if not known in advance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory">
            <summary>
            Extension of the <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            interface to be implemented by object factories that are capable of
            autowiring and expose this functionality for existing object instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.Autowire(System.Type,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Create a new object instance of the given class with the specified
            autowire strategy.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for objects (not applicable to
            autowiring a constructor, thus ignored there).
            </param>
            <returns>The new object instance.</returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.AutowireObjectProperties(System.Object,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Autowire the object properties of the given object instance by name or
            <see cref="T:System.Type"/>.
            </summary>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for the object.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.ApplyObjectPostProcessorsBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <remarks>
            <p>
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.ApplyObjectPostProcessorsAfterInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <remarks>
            <p>
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.ResolveDependency(Spring.Objects.Factory.Config.DependencyDescriptor,System.String,System.Collections.IList)">
            <summary>
             Resolve the specified dependency against the objects defined in this factory.
            </summary>
            <param name="descriptor">The descriptor for the dependency.</param>
            <param name="objectName">Name of the object which declares the present dependency.</param>
            <param name="autowiredObjectNames">A list that all names of autowired object (used for
            resolving the present dependency) are supposed to be added to.</param>
            <returns>the resolved object, or <code>null</code> if none found</returns>
            <exception cref="T:Spring.Objects.ObjectsException">if dependency resolution failed</exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IConfigurableFactoryObject">
            <summary>
            Extension of the <see cref="T:Spring.Objects.Factory.IFactoryObject"/> interface 
            that injects dependencies into the object managed by the factory.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableFactoryObject.ProductTemplate">
            <summary>
            Gets the template object definition that should be used 
            to configure the instance of the object managed by this factory.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory">
            <summary>
            SPI interface to be implemented by most if not all listable object factories.
            </summary>
            <remarks>
            <p>
            Allows for framework-internal plug'n'play, e.g. in
            <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IConfigurableObjectFactory">
            <summary>
            Configuration interface to be implemented by most if not all object
            factories.
            </summary>
            <remarks>
            <p>
            Provides the means to configure an object factory in addition to the
            object factory client methods in the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface.
            </p>
            <p>
            Allows for framework-internal plug'n'play even when needing access to object
            factory configuration methods.
            </p>
            <p>
            When disposed, it will destroy all cached singletons in this factory. Call
            <see cref="M:System.IDisposable.Dispose"/> when you want to shutdown
            the factory.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ISingletonObjectRegistry">
            <summary>
            Interface that defines a registry for shared object instances.
            </summary>
            <remarks>
            Can be implemented by <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            implementations in order to expose their singleton management facility
            in a uniform manner.
            <para>
            The <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectFactory"/> interface extends this interface.
            </para>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)">
            <summary>
            Registers the given existing object as singleton in the object registry,
            under the given object name.
            </summary>
            <remarks>
            <para>
            The given instance is supposed to be fully initialized; the registry
            will not perform any initialization callbacks (in particular, it won't
            call IInitializingObject's <code>AfterPropertiesSet</code> method).
            The given instance will not receive any destruction callbacks
            (like IDisposable's <code>Dispose</code> method) either.
            </para>
            <para>
            If running within a full IObjectFactory: Register an object definition
            instead of an existing instance if your object is supposed to receive
            initialization and/or destruction callbacks.
            </para>
            <para>
            Typically invoked during registry configuration, but can also be used
            for runtime registration of singletons. As a consequence, a registry
            implementation should synchronize singleton access; it will have to do
            this anyway if it supports a BeanFactory's lazy initialization of singletons.
            </para>
            </remarks>
            <param name="objectName">Name of the object.</param>
            <param name="singletonObject">The singleton object.</param>
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            <see cref="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.GetSingleton(System.String)">
            <summary>
            Return the (raw) singleton object registered under the given name.
            </summary>
            <remarks>
            <para>
            Only checks already instantiated singletons; does not return an Object
            for singleton object definitions which have not been instantiated yet.
            </para>
            <para>
            The main purpose of this method is to access manually registered singletons
            <see cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>. Can also be used to access a singleton
            defined by an object definition that already been created, in a raw fashion.
            </para>
            </remarks>
            <param name="objectName">Name of the object to look for.</param>
            <returns>the registered singleton object, or <code>null</code> if none found</returns>
            <see cref="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.ContainsSingleton(System.String)">
            <summary>
            Check if this registry contains a singleton instance with the given name.
            </summary>
            <remarks>
            <para>
            Only checks already instantiated singletons; does not return <code>true</code>
            for singleton bean definitions which have not been instantiated yet.
            </para>
            <para>
            The main purpose of this method is to check manually registered singletons
            <see cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>.  Can also be used to check whether a
            singleton defined by an object definition has already been created.
            </para>
            <para>
            To check whether an object factory contains an object definition with a given name,
            use ListableBeanFactory's <code>ContainsObjectDefinition</code>. Calling both
            <code>ContainsObjectDefinition</code> and <code>ContainsSingleton</code> answers
            whether a specific object factory contains an own object with the given name.
            </para>
            <para>
            Use IObjectFactory's <code>ContainsObject</code> for general checks whether the
            factory knows about an object with a given name (whether manually registered singleton
            instance or created by bean definition), also checking ancestor factories.
            </para>
            </remarks>
            <param name="objectName">Name of the object to look for.</param>
            <returns>
            	<c>true</c> if this bean factory contains a singleton instance with the given name; otherwise, <c>false</c>.
            </returns>
            <see cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>
            <see cref="M:Spring.Objects.Factory.IListableObjectFactory.ContainsObjectDefinition(System.String)"/>
            <see cref="M:Spring.Objects.Factory.IObjectFactory.ContainsObject(System.String)"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ISingletonObjectRegistry.SingletonNames">
            <summary>
            Gets the names of singleton objects registered in this registry.
            </summary>
            <remarks>
            <para>
            Only checks already instantiated singletons; does not return names
            for singleton bean definitions which have not been instantiated yet.
            </para>
            <para>
            The main purpose of this method is to check manually registered singletons
            <see cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>. Can also be used to check which
            singletons defined by an object definition have already been created.
            </para>
            </remarks>
            <value>The list of names as String array (never <code>null</code>).</value>
            <see cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>
            <see cref="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetObjectDefinitionNames"/>
            <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ISingletonObjectRegistry.SingletonCount">
            <summary>
            Gets the number of singleton beans registered in this registry.
            </summary>
            <remarks>
            <para>
            Only checks already instantiated singletons; does not count
            singleton object definitions which have not been instantiated yet.
            </para>
            <para>
            The main purpose of this method is to check manually registered singletons
            <see cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>.  Can also be used to count the number of
            singletons defined by an object definition that have already been created.
            </para>
            </remarks>
            <value>The number of singleton objects.</value>
            <see cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>
            <see cref="P:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ObjectDefinitionCount"/>
            <see cref="P:Spring.Objects.Factory.IListableObjectFactory.ObjectDefinitionCount"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.IgnoreDependencyType(System.Type)">
            <summary>
            Ignore the given dependency type for autowiring.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            <p>
            This will typically be used for dependencies that are resolved
            in other ways, like <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            through <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to be ignored.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.IsCurrentlyInCreation(System.String)">
            <summary>
            Determines whether the specified object name is currently in creation..
            </summary>
            <param name="objectName">Name of the object.</param>
            <returns>
            	<c>true</c> if the specified object name is currently in creation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.AddObjectPostProcessor(Spring.Objects.Factory.Config.IObjectPostProcessor)">
            <summary>
            Add a new <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            that will get applied to objects created by this factory.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            </remarks>
            <param name="processor">
            The <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to register.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterAlias(System.String,System.String)">
            <summary>
            Given an object name, create an alias.
            </summary>
            <remarks>
            <p>
            This is typically used to support names that are illegal within
            XML ids (which are used for object names).
            </p>
            <p>
            Typically invoked during factory configuration, but can also be
            used for runtime registration of aliases. Therefore, a factory
            implementation should synchronize alias access.
            </p>
            </remarks>
            <param name="name">The name of the object.
            </param>
            <param name="theAlias">
            The alias that will behave the same as the object name.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the alias is already in use.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            </remarks>
            <param name="requiredType">
            The required <see cref="T:System.Type"/> of the property.
            </param>
            <param name="converter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectFactory.ParentObjectFactory">
            <summary>
            Set the parent of this object factory.
            </summary>
            <remarks>
            <p>
            Note that the parent shouldn't be changed: it should only be set outside
            a constructor if it isn't available when an object of this class is
            created.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectFactory.ObjectPostProcessorCount">
            <summary>
            Returns the current number of registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </summary>
            <value>
            The current number of registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </value>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(System.String)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(System.String,System.Boolean)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="includeAncestors">Whether to search parent object factories.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Register a new object definition with this registry.
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            and <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </summary>
            <param name="name">
            The name of the object instance to register.
            </param>
            <param name="definition">
            The definition of the object instance to register.
            </param>
            <remarks>
            <p>
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object definition is invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.ConfigureObject(System.Object,System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the supplied <paramref name="definition"/>.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <param name="definition">
            An object definition that should be used to configure object.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.PreInstantiateSingletons">
            <summary>
            Ensure that all non-lazy-init singletons are instantiated, also
            considering <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            Typically invoked at the end of factory setup, if desired.
            </p>
            <p>
            As this is a startup method, it should destroy already created singletons if
            it fails, to avoid dangling resources. In other words, after invocation
            of that method, either all or no singletons at all should be
            instantiated.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If one of the singleton objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.RegisterResolvableDependency(System.Type,System.Object)">
            <summary>
             Register a special dependency type with corresponding autowired value.
            </summary>
            <remarks>
            This is intended for factory/context references that are supposed
            to be autowirable but are not defined as objects in the factory:
            e.g. a dependency of type ApplicationContext resolved to the
            ApplicationContext instance that the object is living in.
            <para>
            Note there are no such default types registered in a plain IObjectFactory,
            not even for the BeanFactory interface itself. 
            </para>
            </remarks>
            <param name="dependencyType">Type of the dependency to register.
            This will typically be a base interface such as IObjectFactory, with extensions of it resolved
            as well if declared as an autowiring dependency (e.g. IListableBeanFactory),
            as long as the given value actually implements the extended interface.
            </param>
            <param name="autowiredValue">The autowired value.  This may also be an
            implementation o the <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface, 
             which allows for lazy resolution of the actual target value.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.IsAutowireCandidate(System.String,Spring.Objects.Factory.Config.DependencyDescriptor)">
            <summary>
            Determines whether the specified object qualifies as an autowire candidate,
            to be injected into other beans which declare a dependency of matching type.
            This method checks ancestor factories as well.
            </summary>
            <param name="objectName">Name of the object to check.</param>
            <param name="descriptor">The descriptor of the dependency to resolve.</param>
            <returns>
            	<c>true</c> if the object should be considered as an autowire candidate; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">if there is no object with the given name.</exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ICustomValueReferenceHolder">
            <summary>
            May be used to store custom value references in object definition properties.
            </summary>
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver"/>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ICustomValueReferenceHolder.Resolve(Spring.Objects.Factory.IObjectFactory,System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.String,System.Object)">
            <summary>
            </summary>
            <param name="objectFactory">
            the object factory holding the given object definition
            </param>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="argumentValue">
            The value of the property that is being resolved.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IDestructionAwareObjectPostProcessor">
            <summary>
            Subinterface of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> that adds
            a before-destruction callback.
            </summary>
            <remarks>
            The typical usage will be to invoke custom destruction callbacks on
            specific object types, matching corresponding initialization callbacks.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IDestructionAwareObjectPostProcessor.PostProcessBeforeDestruction(System.Object,System.String)">
            <summary>
            Apply this
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance before its destruction. Can invoke custom
            destruction callbacks.
            </summary>
            <param name="instance">The new object instance.</param>
            <param name="name">The name of the object.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IManagedCollection">
            <summary>
            Denotes a special placeholder collection that may contain
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>s or
            other placeholder objects that will need to be resolved.
            </summary>
            <remarks>
            <p>
            <c>'A special placeholder collection'</c> means that the elements of this
            collection can be placeholders for objects that will be resolved later by
            a Spring.NET IoC container, i.e. the elements themselves will be
            resolved at runtime by the enclosing IoC container.
            </p>
            <p>
            The core Spring.NET library already provides three implementations of this interface
            straight out of the box; they are...
            </p>
            <list type="bullet">
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.Config.ManagedList"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.Config.ManagedDictionary"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.Config.ManagedSet"/>.
            </description>
            </item>
            </list>
            <p>
            If you have a custom collection class (i.e. a class that either implements the
            <see cref="T:System.Collections.ICollection"/> directly or derives from a class that does)
            that you would like to expose as a special placeholder collection (i.e. one that can
            have <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>s as elements
            that will be resolved at runtime by an appropriate Spring.NET IoC container, just
            implement this interface.
            </p>
            </remarks>
            <example>
            <p>
            Lets say one has a <c>Bag</c> class (i.e. a collection that supports bag style semantics).
            </p>
            <code language="C#">
            using System;
            
            using Spring.Objects.Factory.Support;
            
            namespace MyNamespace
            {
            	public sealed class Bag : ICollection
            	{
            		// ICollection implementation elided for clarity...
            		
            		public void Add(object o)
            		{
            			// implementation elided for clarity...
            		}
            	}
            	
            	public class ManagedBag : Bag, IManagedCollection
            	{
            		public ICollection Resolve(
            			string objectName, RootObjectDefinition definition,
            			string propertyName, ManagedCollectionElementResolver resolver)
            		{
            			Bag newBag = new Bag();
            			string elementName = propertyName + "[bag-element]";
            			foreach(object element in this)
            			{
            				object resolvedElement = resolver(objectName, definition, elementName, element);
            				newBag.Add(resolvedElement);
            			}
            			return newBag;
            		}
            	}
            }
            </code>
            </example>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IManagedCollection.Resolve(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.String,Spring.Objects.Factory.Config.ManagedCollectionElementResolver)">
            <summary>
            Resolves this managed collection at runtime.
            </summary>
            <param name="objectName">
            The name of the top level object that is having the value of one of it's
            collection properties resolved.
            </param>
            <param name="definition">
            The definition of the named top level object.
            </param>
            <param name="propertyName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="resolver">
            The callback that will actually do the donkey work of resolving
            this managed collection.
            </param>
            <returns>A fully resolved collection.</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ManagedCollectionElementResolver">
            <summary>
            Resolves a single element value of a managed collection.
            </summary>
            <remarks>
            <p>
            If the <paramref name="element"/> does not need to be resolved or
            converted to an appropriate <see cref="T:System.Type"/>, the
            <paramref name="element"/> will be returned as-is.
            </p>
            </remarks>
            <param name="name">
            The name of the top level object that is having the value of one of it's
            collection properties resolved.
            </param>
            <param name="definition">
            The definition of the named top level object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="element">
            That element of a managed collection that may need to be resolved
            to a concrete value.
            </param>
            <returns>A fully resolved element.</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IObjectDefinition">
            <summary>
            Describes an object instance, which has property values, constructor
            argument values, and further information supplied by concrete implementations.
            </summary>
            <remarks>
            <p>
            This is just a minimal interface: the main intention is to allow
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            (like PropertyPlaceholderConfigurer) to access and modify property values.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.PropertyValues">
            <summary>
            Return the property values to be applied to a new instance of the object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ConstructorArgumentValues">
            <summary>
            Return the constructor argument values for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.EventHandlerValues">
            <summary>
            Return the event handlers for any events exposed by this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ResourceDescription">
            <summary>
            Return a description of the resource that this object definition
            came from (for the purpose of showing context in case of errors).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.IsTemplate">
            <summary>
            Is this object definition a "template", i.e. not meant to be instantiated
            itself but rather just serving as an object definition for configuration 
            templates used by <see cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>.
            </summary>
            <value>
            <see langword="true"/> if this object definition is a "template".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.IsAbstract">
            <summary>
            Is this object definition "abstract", i.e. not meant to be instantiated
            itself but rather just serving as parent for concrete child object
            definitions.
            </summary>
            <value>
            <see langword="true"/> if this object definition is "abstract".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.IsSingleton">
            <summary>
            Return whether this a <b>Singleton</b>, with a single, shared instance
            returned on all calls.
            </summary>
            <remarks>
            <p>
            If <see langword="false"/>, an object factory will apply the <b>Prototype</b>
            design pattern, with each caller requesting an instance getting an
            independent instance. How this is defined will depend on the
            object factory implementation. <b>Singletons</b> are the commoner type.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.IsLazyInit">
            <summary>
            Is this object lazily initialized?</summary>
            <remarks>
            <p>
            Only applicable to a singleton object.
            </p>
            <p>
            If <see langword="false"/>, it will get instantiated on startup by object factories
            that perform eager initialization of singletons.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ParentName">
            <summary>
            The name of the parent definition of this object definition, if any.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.Scope">
            <summary>
            The target scope for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.Role">
            <summary>
            Get the role hint for this object definition
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
            <value>
            A resolved object <see cref="T:System.Type"/>.
            </value>
            <exception cref="T:System.ApplicationException">
            If the <see cref="T:System.Type"/> of the object definition is not a
            resolved <see cref="T:System.Type"/> or <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectTypeName">
            <summary>
            Returns the <see cref="P:System.Type.FullName"/> of the
            <see cref="T:System.Type"/> of the object definition.
            </summary>
            <remarks>Note that this does not have to be the actual type name used at runtime,
            in case of a child definition overrding/inheriting the the type name from its
            parent.  It can be modifed during object factory post-processing, typically 
            replacing the original class name with a parsed variant of it.
            Hence, do not consider this to be the definitive bean type at runtime
            but rather only use it for parsing purposes at the individual object
            definition level. 
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.AutowireMode">
            <summary>
            The autowire mode as specified in the object definition.
            </summary>
            <remarks>
            <p>
            This determines whether any automagical detection and setting of
            object references will happen. Default is
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.No"/>,
            which means there's no autowire.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.DependsOn">
            <summary>
            The object names that this object depends on.
            </summary>
            <remarks>
            <p>
            The object factory will guarantee that these objects get initialized
            before.
            </p>
            <p>
            Note that dependencies are normally expressed through object properties
            or constructor arguments. This property should just be necessary for
            other kinds of dependencies like statics (*ugh*) or database
            preparation on startup.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.InitMethodName">
            <summary>
            The name of the initializer method.
            </summary>
            <remarks>
            <p>
            The default is <see langword="null"/>, in which case there is no initializer method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.DestroyMethodName">
            <summary>
            Return the name of the destroy method.
            </summary>
            <remarks>
            <p>
            The default is <see langword="null"/>, in which case there is no destroy method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.FactoryMethodName">
            <summary>
            The name of the factory method to use (if any).
            </summary>
            <remarks>
            <p>
            This method will be invoked with constructor arguments, or with no
            arguments if none are specified. The static method will be invoked on
            the specified <see cref="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectType"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.FactoryObjectName">
            <summary>
            The name of the factory object to use (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.IsAutowireCandidate">
            <summary>
            Gets a value indicating whether this instance a candidate for getting autowired into some other
            object.
            </summary>
            <value>
            	<c>true</c> if this instance is autowire candidate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ListFactoryObject">
            <summary>
            Simple factory for shared <see cref="T:System.Collections.IList"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ListFactoryObject.CreateInstance">
            <summary>
            Constructs a new instance of the target dictionary.
            </summary>
            <returns>The new <see cref="T:System.Collections.IList"/> instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ListFactoryObject.SourceList">
            <summary>
            Set the source <see cref="T:System.Collections.IList"/>.
            </summary>
            <remarks>
            <p>
            This value will be used to populate the <see cref="T:System.Collections.IList"/>
            returned by this factory.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ListFactoryObject.TargetListType">
            <summary>
            Set the <see cref="T:System.Type"/> of the <see cref="T:System.Collections.IList"/>
            implementation to use.
            </summary>
            <remarks>
            <p>
            The default is the <see cref="T:System.Collections.ArrayList"/> <see cref="T:System.Type"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ListFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of objects created by this factory.
            </summary>
            <value>
            Always returns the <see cref="T:System.Collections.IList"/> <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.LogFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            creates instances of the <see cref="T:Common.Logging.ILog"/> class.
            </summary>
            <remarks>
            <p>
            Typically used for retrieving shared <see cref="T:Common.Logging.ILog"/>
            instances for common topics (such as the 'DAL', 'BLL', etc). The
            <see cref="P:Spring.Objects.Factory.Config.LogFactoryObject.LogName"/>
            property determines the name of the
            <a href="http://netcommon.sourceforge.net/">Common.Logging</a> logger.  
            </p>
            </remarks>
            <author>Rick Evans</author>
            <seealso cref="M:Common.Logging.LogManager.GetLogger(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.LogFactoryObject.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.LogFactoryObject"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.LogFactoryObject.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.LogFactoryObject"/>
            class.
            </summary>
            <param name="logName">
            The name of the <see cref="T:Common.Logging.ILog"/> instance served up by
            this factory.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="logName"/> is
            <see langword="null"/> or contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.LogFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the object
            managed by this factory.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.LogFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            interfaces).
            </summary>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.LogFactoryObject.LogName">
            <summary>
            The name of the <see cref="T:Common.Logging.ILog"/> instance served up by
            this factory.
            </summary>
            <value>
            The name of the <see cref="T:Common.Logging.ILog"/> instance served up by
            this factory.
            </value>
            <exception cref="T:System.ArgumentNullException">
            If the <see langword="value"/> supplied to the setter is
            <see langword="null"/> or contains only whitespace character(s).
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.LogFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <cref lang="null"/> if not known in advance.
            </summary>
            <seealso cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.LogFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
            <seealso cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ManagedDictionary">
            <summary>
            Tag subclass used to hold a dictionary of managed elements.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.IMergable">
            <summary>
            Interface representing an object whose value set can be merged with that of a parent object.
            </summary>
            <author>Rob Harrop</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.IMergable.Merge(System.Object)">
            <summary>
            Merges the current value set with that of the supplied object.
            </summary>
            <remarks>The supplied object is considered the parent, and values in the 
            callee's value set must override those of the supplied object.
            </remarks>
            <param name="parent">The parent object to merge with</param>
            <returns>The result of the merge operation</returns>
            <exception cref="T:System.ArgumentNullException">If the supplied parent is <code>null</code></exception>
            <exception cref="T:System.InvalidOperationException">If merging is not enabled for this instance,
            (i.e. <code>MergeEnabled</code> equals <code>false</code>.</exception>
        </member>
        <member name="P:Spring.Objects.IMergable.MergeEnabled">
            <summary>
            Gets a value indicating whether this instance is merge enabled for this instance
            </summary>
            <value>
            	<c>true</c> if this instance is merge enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedDictionary.#ctor">
            <summary>
            Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"/> class using the default initial capacity, load factor, hash code provider, and comparer.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable"/> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.
            </summary>
            <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable"/> object can initially contain. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero. </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedDictionary.Resolve(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.String,Spring.Objects.Factory.Config.ManagedCollectionElementResolver)">
            <summary>
            Resolves this managed collection at runtime.
            </summary>
            <param name="objectName">
            The name of the top level object that is having the value of one of it's
            collection properties resolved.
            </param>
            <param name="definition">
            The definition of the named top level object.
            </param>
            <param name="propertyName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="resolver">
            The callback that will actually do the donkey work of resolving
            this managed collection.
            </param>
            <returns>A fully resolved collection.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedDictionary.Merge(System.Object)">
            <summary>
            Merges the current value set with that of the supplied object.
            </summary>
            <remarks>The supplied object is considered the parent, and values in the 
            callee's value set must override those of the supplied object.
            </remarks>
            <param name="parent">The parent object to merge with</param>
            <returns>The result of the merge operation</returns>
            <exception cref="T:System.ArgumentNullException">If the supplied parent is <code>null</code></exception>
            <exception cref="T:System.InvalidOperationException">If merging is not enabled for this instance,
            (i.e. <code>MergeEnabled</code> equals <code>false</code>.</exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedDictionary.KeyTypeName">
            <summary>
            Gets or sets the unresolved name for the <see cref="T:System.Type"/> 
            of the keys of this managed dictionary.
            </summary>
            <value>The unresolved name for the type of the keys of this managed dictionary.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedDictionary.ValueTypeName">
            <summary>
            Gets or sets the unresolved name for the <see cref="T:System.Type"/> 
            of the values of this managed dictionary.
            </summary>
            <value>The unresolved name for the type of the values of this managed dictionary.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedDictionary.MergeEnabled">
            <summary>
            Gets a value indicating whether this instance is merge enabled for this instance
            </summary>
            <value>
            	<c>true</c> if this instance is merge enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ManagedList">
            <summary>
            Tag subclass used to hold a list of managed elements.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedList.#ctor">
            <summary>
            Initializes a new instance of the ManagedList class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedList.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ManagedList class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero. </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedList.Resolve(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.String,Spring.Objects.Factory.Config.ManagedCollectionElementResolver)">
            <summary>
            Resolves this managed collection at runtime.
            </summary>
            <param name="objectName">
            The name of the top level object that is having the value of one of it's
            collection properties resolved.
            </param>
            <param name="definition">
            The definition of the named top level object.
            </param>
            <param name="propertyName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="resolver">
            The callback that will actually do the donkey work of resolving
            this managed collection.
            </param>
            <returns>A fully resolved collection.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedList.Merge(System.Object)">
            <summary>
            Merges the current value set with that of the supplied object.
            </summary>
            <remarks>The supplied object is considered the parent, and values in the 
            callee's value set must override those of the supplied object.
            </remarks>
            <param name="parent">The parent object to merge with</param>
            <returns>The result of the merge operation</returns>
            <exception cref="T:System.ArgumentNullException">If the supplied parent is <code>null</code></exception>
            <exception cref="T:System.InvalidOperationException">If merging is not enabled for this instance,
            (i.e. <code>MergeEnabled</code> equals <code>false</code>.</exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedList.ElementTypeName">
            <summary>
            Gets or sets the unresolved name for the <see cref="T:System.Type"/> 
            of the elements of this managed list.
            </summary>
            <value>The unresolved name for the type of the elements of this managed list.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedList.MergeEnabled">
            <summary>
            Gets a value indicating whether this instance is merge enabled for this instance
            </summary>
            <value>
            	<c>true</c> if this instance is merge enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ManagedNameValueCollection">
            <summary>
            Tag class which represent a Spring-managed <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance that
            supports merging of parent/child definitions.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedNameValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"/> class that is empty, has the default initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedNameValueCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection"/> class that is empty, has the specified initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.
            </summary>
            <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection"/> can contain.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedNameValueCollection.Merge(System.Object)">
            <summary>
            Merges the current value set with that of the supplied object.
            </summary>
            <remarks>The supplied object is considered the parent, and values in the 
            callee's value set must override those of the supplied object.
            </remarks>
            <param name="parent">The parent object to merge with</param>
            <returns>The result of the merge operation</returns>
            <exception cref="T:System.ArgumentNullException">If the supplied parent is <code>null</code></exception>
            <exception cref="T:System.InvalidOperationException">If merging is not enabled for this instance,
            (i.e. <code>MergeEnabled</code> equals <code>false</code>.</exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedNameValueCollection.MergeEnabled">
            <summary>
            Gets a value indicating whether this instance is merge enabled for this instance
            </summary>
            <value>
            	<c>true</c> if this instance is merge enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ManagedSet">
            <summary>
            Tag subclass used to hold a set of managed elements.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedSet.#ctor">
            <summary>
            Creates a new set instance based on either a list or a hash table,
            depending on which will be more efficient based on the data-set
            size.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedSet.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Collections.HybridSet"/> class with a given capacity
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedSet.Resolve(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.String,Spring.Objects.Factory.Config.ManagedCollectionElementResolver)">
            <summary>
            Resolves this managed collection at runtime.
            </summary>
            <param name="objectName">
            The name of the top level object that is having the value of one of it's
            collection properties resolved.
            </param>
            <param name="definition">
            The definition of the named top level object.
            </param>
            <param name="propertyName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="resolver">
            The callback that will actually do the donkey work of resolving
            this managed collection.
            </param>
            <returns>A fully resolved collection.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ManagedSet.Merge(System.Object)">
            <summary>
            Merges the current value set with that of the supplied object.
            </summary>
            <remarks>The supplied object is considered the parent, and values in the 
            callee's value set must override those of the supplied object.
            </remarks>
            <param name="parent">The parent object to merge with</param>
            <returns>The result of the merge operation</returns>
            <exception cref="T:System.ArgumentNullException">If the supplied parent is <code>null</code></exception>
            <exception cref="T:System.InvalidOperationException">If merging is not enabled for this instance,
            (i.e. <code>MergeEnabled</code> equals <code>false</code>.</exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedSet.ElementTypeName">
            <summary>
            Gets or sets the unresolved name for the <see cref="T:System.Type"/> 
            of the elements of this managed set.
            </summary>
            <value>The unresolved name for the type of the elements of this managed set.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ManagedSet.MergeEnabled">
            <summary>
            Gets a value indicating whether this instance is merge enabled for this instance
            </summary>
            <value>
            	<c>true</c> if this instance is merge enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.MethodInvokingFactoryObject">
            <summary>
            An <see cref="T:Spring.Objects.Factory.IFactoryObject"/> that returns a value
            that is the result of a <see langword="static"/> or instance method invocation.
            </summary>
            <remarks>
            <p>
            Note that this class generally is expected to be used for accessing factory methods,
            and as such defaults to operating in singleton mode. The first request to
            <see cref="M:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.GetObject"/>
            by the owning object factory will cause a method invocation, the return
            value of which will be cached for all subsequent requests. The
            <see cref="P:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.IsSingleton"/> property may be set to
            <see langword="false"/>, to cause this factory to invoke the target method each
            time it is asked for an object.
            </p>
            <p>
            A <see langword="static"/> target method may be specified by setting the
            <see cref="P:Spring.Objects.Support.MethodInvoker.TargetMethod"/> property to a string representing
            the <see langword="static"/> method name, with <see cref="P:Spring.Objects.Support.MethodInvoker.TargetType"/> specifying
            the <see cref="T:System.Type"/> that the <see langword="static"/> method is defined on.
            Alternatively, a target instance method may be specified, by setting the
            <see cref="P:Spring.Objects.Support.MethodInvoker.TargetObject"/> property as the target object, and
            the <see cref="P:Spring.Objects.Support.MethodInvoker.TargetMethod"/> property as the name of the
            method to call on that target object. Arguments for the method invocation may be
            specified by setting the <see cref="P:Spring.Objects.Support.MethodInvoker.Arguments"/> property.
            </p>
            <p>
            Another (esoteric) use case for this factory object is when one needs to call a method
            that doesn't return any value (for example, a <see langword="static"/> class method to
            force some sort of initialization to happen)... this use case is not supported by
            factory-methods, since a return value is needed to become the object.
            </p>
            <p>
            <note>
            This class depends on the
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method being called after all properties have been set, as per the
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/> contract. If you are
            using this class outside of a Spring.NET IoC container, you must call one of either
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/> or
            <see cref="M:Spring.Objects.Support.MethodInvoker.Prepare"/> yourself to ready the object's internal
            state, or you will get a nasty <see cref="T:System.NullReferenceException"/>.
            </note>
            </p>
            </remarks>
            <example>
            <p>
            The following example uses an instance of this class to call a <see langword="static"/>
            factory method...
            </p>
            <code escaped="true">
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetType" value="Whatever.MyClassFactory, MyAssembly"/>
              <property name="TargetMethod" value="Instance"/>
              <!-- the ordering of arguments is significant -->
              <property name="Arguments">
            	<list>
            		<value>1st</value>
            		<value>2nd</value>
            		<value>and 3rd arguments</value>
            	</list>
              </property>
            </object>
            </code>
            <p>
            The following example is similar to the preceding example; the only pertinent difference is the fact that
            a number of different objects are passed as arguments, demonstrating that not only simple value types
            are valid as elements of the argument list...
            </p>
            <code language="C#">
            </code>
            <code escaped="true">
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetType" value="Whatever.MyClassFactory, MyAssembly"/>
              <property name="TargetMethod" value="Instance"/>
              <!-- the ordering of arguments is significant -->
              <property name="Arguments">
            	<list>
            		<!-- a primitive type (a string) -->
            		<value>1st</value>
            		<!-- an inner object definition is passed as the second argument -->
            		<object type="Whatever.SomeClass, MyAssembly"/>
            		<!-- a reference to another objects is passed as the third argument -->
            		<ref object="someOtherObject"/>
            		<!-- another list is passed as the fourth argument -->
            		<list>
            			<value>http://www.springframework.net/</value>
            		</list>
            	</list>
              </property>
            </object>
            </code>
            <p>
            Named parameters are also supported... this next example yields the same results as
            the preceding example (that did not use named arguments).
            </p>
            <code escaped="true">
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetObject">
                <object type="Whatever.MyClassFactory, MyAssembly"/>
              </property>
              <property name="TargetMethod" value="Execute"/>
              <!-- the ordering of named arguments is not significant -->
              <property name="NamedArguments">
            	<dictionary>
            		<entry key="argumentName"><value>1st</value></entry>
            		<entry key="finalArgumentName"><value>and 3rd arguments</value></entry>
            		<entry key="anotherArgumentName"><value>2nd</value></entry>
            	</dictionary>
              </property>
            </object>
            </code>
            <p>
            Similarly, the following example uses an instance of this class to call an instance method...
            </p>
            <code escaped="true">
            <object id="myMethodObject" type="Whatever.MyClassFactory, MyAssembly"/>
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetObject">
                <ref local="myMethodObject"/>
              </property>
              <property name="TargetMethod" value="Execute"/>
            </object>
            </code>
            <p>
            The above example could also have been written using an anonymous inner object definition... if the
            object on which the method is to be invoked is not going to be used outside of the factory object
            definition, then this is the preferred idiom because it limits the scope of the object on which the
            method is to be invoked to the surrounding factory object.
            </p>
            <code escaped="true">
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetObject">
                <object type="Whatever.MyClassFactory, MyAssembly"/>
              </property>
              <property name="TargetMethod" value="Execute"/>
            </object>
            </code>
            </example>
            <author>Colin Sampaleanu</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <author>Simon White (.NET)</author>
            <seealso cref="T:Spring.Objects.Support.MethodInvoker"/>
            <seealso cref="T:Spring.Objects.Support.ArgumentConvertingMethodInvoker"/>
        </member>
        <member name="T:Spring.Objects.Support.ArgumentConvertingMethodInvoker">
            <summary>
            Specialisation of the <see cref="T:Spring.Objects.Support.MethodInvoker"/> class that tries
            to convert the given arguments for the actual target method via an
            appropriate <see cref="T:Spring.Objects.IObjectWrapper"/> implementation.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
            <seealso cref="T:Spring.Objects.Support.MethodInvoker"/>
        </member>
        <member name="T:Spring.Objects.Support.MethodInvoker">
            <summary>
            Helper class allowing one to declaratively specify a method call for later invocation.
            </summary>
            <remarks>
            <p>
            Typically not used directly but via its subclasses such as
            <see cref="T:Spring.Objects.Factory.Config.MethodInvokingFactoryObject"/>.
            </p>
            <p>
            Usage: specify either the <see cref="P:Spring.Objects.Support.MethodInvoker.TargetType"/> and 
            <see cref="P:Spring.Objects.Support.MethodInvoker.TargetMethod"/> or the
            <see cref="P:Spring.Objects.Support.MethodInvoker.TargetObject"/> and
            <see cref="P:Spring.Objects.Support.MethodInvoker.TargetMethod"/> properties respectively, and
            (optionally) any arguments to the method. Then call the
            <see cref="M:Spring.Objects.Support.MethodInvoker.Prepare"/> method to prepare the invoker.
            Once prepared, the invoker can be invoked any number of times.
            </p>
            </remarks>
            <example>
            <p>
            The following example uses the <see cref="T:Spring.Objects.Support.MethodInvoker"/> class to invoke the
            <c>ToString()</c> method on the <c>Foo</c> class using a mixture of both named and unnamed
            arguments.
            </p>
            <code language="C#">
            public class Foo 
            {
                public string ToString(string name, int age, string address)
                {
            		return string.Format("{0}, {1} years old, {2}", name, age, address);
                }
                
                public static void Main()
                {
            		Foo foo = new Foo();
            		MethodInvoker invoker = new MethodInvoker();
            		invoker.Arguments = new object [] {"Kaneda", "18 Kaosu Gardens, Nakatani Drive, Okinanawa"};
            		invoker.AddNamedArgument("age", 29);
            		invoker.Prepare();
            		// at this point, the arguments that will be passed to the method invocation
            		// will have been resolved into the following ordered array : {"Kaneda", 29, "18 Kaosu Gardens, Nakatani Drive, Okinanawa"}
            		string details = (string) invoker.Invoke();
            		Console.WriteLine (details);
            		// will print out 'Kaneda, 29 years old, 18 Kaosu Gardens, Nakatani Drive, Okinanawa'
                }
            }
            </code>
            </example>
            <author>Colin Sampaleanu</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Support.MethodInvoker.MethodSearchingFlags">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used to search for
            the method to be invoked.
            </summary>
        </member>
        <member name="F:Spring.Objects.Support.MethodInvoker.Void">
            <summary>
            The value returned from the invocation of a method that returns void.
            </summary>
        </member>
        <member name="F:Spring.Objects.Support.MethodInvoker._methodObject">
            <summary>
            The method that will be invoked.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.MethodInvoker.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.Support.MethodInvoker"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.MethodInvoker.Prepare">
            <summary>
            Prepare the specified method.
            </summary>
            <remarks>
            <p>
            The method can be invoked any number of times afterwards.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If all required properties are not set, or a matching argument could not be found
            for a named argument (typically down to a typo).
            </exception>
            <exception cref="T:System.MissingMethodException">
            If the specified method could not be found.
            </exception>
        </member>
        <member name="M:Spring.Objects.Support.MethodInvoker.FindTheMethodToInvoke">
            <summary>
            Searches for and returns the method that is to be invoked.
            </summary>
            <remarks>
            The return value of this method call will subsequently be returned from the
            <see cref="M:Spring.Objects.Support.MethodInvoker.GetPreparedMethod"/>.
            </remarks>
            <returns>The method that is to be invoked.</returns>
            <exception cref="T:System.MissingMethodException">
            If no method could be found.
            </exception>
            <exception cref="T:System.ArgumentException">
            If more than one method was found.
            </exception>
        </member>
        <member name="M:Spring.Objects.Support.MethodInvoker.AddNamedArgument(System.String,System.Object)">
            <summary>
            Adds the named argument to this instances mapping of argument names to argument values.
            </summary>
            <param name="argumentName">
            The name of an argument on the method that is to be invoked.
            </param>
            <param name="argument">
            The value of the named argument on the method that is to be invoked.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MethodInvoker.GetPreparedMethod">
            <summary>
            Returns the prepared <see cref="T:System.Reflection.MethodInfo"/> object that
            will be invoked.
            </summary>
            <remarks>
            <p>
            A possible use case is to determine the return <see cref="T:System.Type"/> of the method.
            </p>
            </remarks>
            <returns>
            The prepared <see cref="T:System.Reflection.MethodInfo"/> object that
            will be invoked.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.MethodInvoker.Invoke">
            <summary>
            Invoke the specified method.
            </summary>
            <remarks>
            <p>
            The invoker needs to have been prepared beforehand (via a call to the
            <see cref="M:Spring.Objects.Support.MethodInvoker.Prepare"/> method).
            </p>
            </remarks>
            <returns>
            The object returned by the method invocation, or
            <see cref="F:Spring.Objects.Support.MethodInvoker.Void"/> if the method returns void.
            </returns>
            <exception cref="T:Spring.Core.MethodInvocationException">
            If at least one of the arguments passed to this <see cref="T:Spring.Objects.Support.MethodInvoker"/>
            was incompatible with the signature of the invoked method.
            </exception>
        </member>
        <member name="P:Spring.Objects.Support.MethodInvoker.TargetType">
            <summary>
            The target <see cref="T:System.Type"/> on which to call the target method.
            </summary>
            <remarks>
            <p>
            Only necessary when the target method is <see langword="static"/>;
            else, a target object needs to be specified.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Support.MethodInvoker.TargetObject">
            <summary>
            The target object on which to call the target method.
            </summary>
            <remarks>
            <p>
            Only necessary when the target method is not <see langword="static"/>;
            else, a target class is sufficient.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Support.MethodInvoker.TargetMethod">
            <summary>
            The name of the method to be invoked.
            </summary>
            <remarks>
            <p>
            Refers to either a <see langword="static"/> method
            or a non-<see langword="static"/> method, depending on
            whether or not a target object has been set.
            </p>
            </remarks>
            <seealso cref="P:Spring.Objects.Support.MethodInvoker.TargetObject"/>
        </member>
        <member name="P:Spring.Objects.Support.MethodInvoker.Arguments">
            <summary>
            Arguments for the method invocation.
            </summary>
            <remarks>
            <p>
            Ordering <b>is</b> significant... the order of the arguments in this
            property must match the ordering of the various parameters on the target
            method. There does however exist a small possibility for confusion when
            the arguments in this property are supplied in addition to one or more named
            arguments. In this case, each named argument is slotted into the index position
            corresponding to the named argument... once once all named arguments have been
            resolved, the arguments in this property are slotted into any remaining (empty)
            slots in the method parameter list (see the example in the overview of the
            <see cref="T:Spring.Objects.Support.MethodInvoker"/> class if this is not clear).
            </p>
            <p>
            If this property is not set, or the value passed to the setter invocation
            is <see langword="null"/> or a zero-length array, a method with no (un-named) arguments is assumed.
            </p>
            </remarks>
            <seealso cref="P:Spring.Objects.Support.MethodInvoker.NamedArguments"/>
        </member>
        <member name="P:Spring.Objects.Support.MethodInvoker.PreparedArguments">
            <summary>
            The resolved arguments for the method invocation.
            </summary>
            <remarks>
            <note type="caution">
            This property is not set until the target method has been resolved via a call to the
            <see cref="M:Spring.Objects.Support.MethodInvoker.Prepare"/> method). It is a combination of the
            named and plain vanilla arguments properties, and it is this object array that
            will actually be passed to the invocation of the target method.
            </note>
            <p>
            Setting the value of this property to <see langword="null"/> results in basically clearing out any
            previously prepared arguments... another call to the <see cref="M:Spring.Objects.Support.MethodInvoker.Prepare"/>
            method will then be required to prepare the arguments again (or the prepared arguments
            can be set explicitly if so desired).
            </p>
            </remarks>
            <seealso cref="P:Spring.Objects.Support.MethodInvoker.Arguments"/>
            <seealso cref="P:Spring.Objects.Support.MethodInvoker.NamedArguments"/>
        </member>
        <member name="P:Spring.Objects.Support.MethodInvoker.NamedArguments">
            <summary>
            Named arguments for the method invocation.
            </summary>
            <remarks>
            <p>
            The keys of this dictionary are the (<see cref="T:System.String"/>) names of the
            method arguments, and the (<see cref="T:System.Object"/>) values are the actual
            argument values themselves.
            </p>
            <p>
            If this property is not set, or the value passed to the setter invocation
            is a <see langword="null"/> reference, a method with no named arguments is assumed.
            </p>
            </remarks>
            <seealso cref="P:Spring.Objects.Support.MethodInvoker.Arguments"/>
        </member>
        <member name="M:Spring.Objects.Support.ArgumentConvertingMethodInvoker.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.ArgumentConvertingMethodInvoker"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.ArgumentConvertingMethodInvoker.Prepare">
            <summary>
            Prepare the specified method.
            </summary>
            <remarks>
            <p>
            The method can be invoked any number of times afterwards.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If all required properties are not set.
            </exception>
            <exception cref="T:System.MissingMethodException">
            If the specified method could not be found.
            </exception>
        </member>
        <member name="M:Spring.Objects.Support.ArgumentConvertingMethodInvoker.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> of property.
            </param>
            <param name="typeConverter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <remarks>
            <p>
            Returns the return value of the method that is to be invoked.
            </p>
            <p>
            Will return the same value each time if the
            <see cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>
            property value is <see langword="true"/>.
            </p>
            </remarks>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.AfterPropertiesSet">
            <summary>
            Prepares this method invoker.
            </summary>
            <exception cref="T:System.ArgumentException">
            If all required properties are not set.
            </exception>
            <exception cref="T:System.MissingMethodException">
            If the specified method could not be found.
            </exception>
            <seealso cref="M:Spring.Objects.Support.ArgumentConvertingMethodInvoker.Prepare"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.IsSingleton">
            <summary>
            If a singleton should be created, or a new object on each request.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.ObjectType">
            <summary>
            Return the return value <see cref="T:System.Type"/> of the method
            that this factory invokes, or <see langword="null"/> if not
            known in advance.
            </summary>
            <remarks>
            <p>
            If the return value of the method that this factory is to invoke is
            <see langword="void"/>, then the <see cref="T:System.Reflection.Missing"/>
            <see cref="T:System.Type"/> will be returned (in accordance with the
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> contract that
            treats a <see langword="null"/> value as a configuration error).
            </p>
            </remarks>
            <seealso cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder">
            <summary>
            Holder for an <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> with
            name and aliases.
            </summary>
            <remarks>
            <p>
            Recognized by
            <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>
            for inner object definitions. Registered by
            <see cref="T:Spring.Objects.Factory.Xml.ObjectsNamespaceParser"/>,
            which also uses it as general holder for a parsed object definition.
            </p>
            <p>
            Can also be used for programmatic registration of inner object
            definitions. If you don't care about the functionality offered by the
            <see cref="T:Spring.Objects.Factory.IObjectNameAware"/> interface and the like,
            registering <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            or <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/> is good enough.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionHolder.#ctor(Spring.Objects.Factory.Config.IObjectDefinition,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/> class.
            </summary>
            <param name="definition">
            The object definition to be held by this instance.
            </param>
            <param name="name">
            The name of the object definition.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionHolder.#ctor(Spring.Objects.Factory.Config.IObjectDefinition,System.String,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/> class.
            </summary>
            <param name="definition">
            The object definition to be held by this instance.
            </param>
            <param name="name">The name of the object.</param>
            <param name="aliases">
            Any aliases for the supplied <paramref name="definition"/>
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectDefinitionHolder.ObjectDefinition">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> held by this
            instance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectDefinitionHolder.ObjectName">
            <summary>
            The name of the object definition.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectDefinitionHolder.Aliases">
            <summary>
            Any aliases for the object definition.
            </summary>
            <remarks>
            <p>
            Guaranteed to never return <cref lang="null"/>; if the associated
            <see cref="P:Spring.Objects.Factory.Config.ObjectDefinitionHolder.ObjectDefinition"/>
            does not have any aliases associated with it, then an empty
            <see cref="T:System.String"/> array will be returned.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ObjectDefinitionVisitor">
            <summary>
            Visitor class for traversing <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> objects, in particular
            the property values and constructor arguments contained in them resolving
            object metadata values.
            </summary>
            <remarks>
            Used by <see cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/> and <see cref="T:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer"/>
            to parse all string values contained in a ObjectDefinition, resolving any placeholders found.
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.#ctor(Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionVisitor"/> class.
            </summary>
            <param name="resolveHandler">The handler to be called for resolving variables contained in a string.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionVisitor"/> class
            for subclassing
            </summary>
            <remarks>Subclasses should override the <code>ResolveStringValue</code> method</remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitObjectDefinition(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Traverse the given ObjectDefinition object and the MutablePropertyValues
            and ConstructorArgumentValues contained in them.
            </summary>
            <param name="definition">The object definition to traverse.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitObjectTypeName(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Visits the ObjectDefinition property ObjectTypeName, replacing string values using 
            the specified IVariableSource.
            </summary>
            <param name="objectDefinition">The object definition.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitPropertyValues(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Visits the property values of the ObjectDefinition, replacing string values
            using the specified IVariableSource.
            </summary>
            <param name="objectDefinition">The object definition.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitIndexedArgumentValues(System.Collections.IDictionary)">
            <summary>
            Visits the indexed constructor argument values, replacing string values using the
            specified IVariableSource.
            </summary>
            <param name="ias">The indexed argument values.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitNamedArgumentValues(System.Collections.IDictionary)">
            <summary>
            Visits the named constructor argument values, replacing string values using the
            specified IVariableSource.
            </summary>
            <param name="nav">The named argument values.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitGenericArgumentValues(System.Collections.IList)">
            <summary>
            Visits the generic constructor argument values, replacing string values using
            the specified IVariableSource.
            </summary>
            <param name="gav">The genreic argument values.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ConfigureConstructorArgument(Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder)">
            <summary>
            Configures the constructor argument ValueHolder.
            </summary>
            <param name="valueHolder">The vconstructor alue holder.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveValue(System.Object)">
            <summary>
            Resolves the given value taken from an object definition according to its type
            </summary>
            <param name="value">the value to resolve</param>
            <returns>the resolved value</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitManagedList(Spring.Objects.Factory.Config.ManagedList)">
            <summary>
            Visits the ManagedList property ElementTypeName and 
            calls <see cref="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveValue(System.Object)"/> for list element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitManagedSet(Spring.Objects.Factory.Config.ManagedSet)">
            <summary>
            Visits the ManagedSet property ElementTypeName and 
            calls <see cref="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveValue(System.Object)"/> for list element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitManagedDictionary(Spring.Objects.Factory.Config.ManagedDictionary)">
            <summary>
            Visits the ManagedSet properties KeyTypeName and ValueTypeName and 
            calls <see cref="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveValue(System.Object)"/> for dictionary's value element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.VisitNameValueCollection(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Visits the elements of a NameValueCollection and calls
            <see cref="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveValue(System.Object)"/> for value of each element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveStringValue(System.String)">
            <summary>
            calls the <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionVisitor.ResolveHandler"/> to resolve any variables contained in the raw string.
            </summary>
            <param name="rawStringValue">the raw string value containing variable placeholders to be resolved</param>
            <exception cref="T:System.InvalidOperationException">If no <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> has been configured.</exception>
            <returns>the resolved string, having variables being replaced, if any</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject">
            <summary>
            Returns a value that is an
            <see cref="T:Spring.Objects.Factory.IGenericObjectFactory"/> that
            returns an object from an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            The primary motivation of this class is to avoid having a client object
            directly calling the
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            method to get a prototype object out of an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>, which would be a
            violation of the inversion of control principle. With the use of this
            class, the client object can be fed an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> as a property
            that directly returns one target <b>prototype</b> object.
            </p>
            <p>
            The object referred to by the value of the
            <see cref="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.TargetObjectName"/>
            property does not have to be a prototype object, but there is little
            to no point in using this class in conjunction with a singleton object.
            </p>
            </remarks>
            <example>
            <p>
            The following XML configuration snippet illustrates the use of this
            class...
            </p>
            <code escaped="true">
            <objects>
              <!-- prototype object since we have state -->
              <object id="MyService" type="A.B.C.MyService" singleton="false"/>
              
              <object id="MyServiceFactory" type="Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject">
                <property name="TargetObjectName"><idref local="MyService"/></property>
              </object>
              
              <object id="MyClientObject" type="A.B.C.MyClientObject">
                <property name="MyServiceFactory" ref="MyServiceFactory"/>
              </object>
            </objects>
            </code>
            </example>
            <author>Colin Sampaleanu</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.IObjectFactoryAware">
            <summary>
            Interface to be implemented by objects that wish to be aware of their owning
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            For example, objects can look up collaborating objects via the factory.
            </p>
            <p>
            Note that most objects will choose to receive references to collaborating
            objects via respective properties and / or an appropriate constructor.
            </p>
            <p>
            For a list of all object lifecycle methods, see the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> API documentation.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.CreateInstance">
            <summary>
            Returns an instance of the object factory.
            </summary>
            <returns>The object factory.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all supplied object properties.
            </summary>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.AbstractFactoryObject.AfterPropertiesSet"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.TargetObjectName">
            <summary>
            Sets the name of the target object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.ObjectFactory">
            <summary>
            The target factory that will be used to perform the lookup
            of the object referred to by the <see cref="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.TargetObjectName"/>
            property.
            </summary>
            <value>
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (will never be <see langword="null"/>).
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of object created by this factory.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.IGenericObjectFactory">
            <summary>
            Interface defining a factory which can return an object instance
            (possibly shared or independent) when invoked. 
            </summary>
            <remarks>
            This interface is typically used to encapsulate a generic factory 
            which returns a new instance (prototype) on each invocation.
            It is similar to the <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, but
            implementations of the aforementioned interface are normally meant to be defined
            as instances by the user in an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>,
            while implementations of this class are normally meant to be fed as a property to
            other objects; as such, the
            <see cref="M:Spring.Objects.Factory.IGenericObjectFactory.GetObject"/> method
            has different exception handling behavior.
            </remarks>
            <author>Colin Sampaleanu</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.IGenericObjectFactory.GetObject">
            <summary>
            Return an instance (possibly shared or independent)
            of the object managed by this factory.
            </summary>
            <returns>
            An instance of the object (should never be <see langword="null"/>).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.GenericObjectFactory.#ctor(Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject)">
            <summary>
            Creates a new instance of the GenericObjectFactory class.
            </summary>
            <param name="enclosing">
            The enclosing
            <see cref="T:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.GenericObjectFactory.GetObject">
            <summary>
            Returns the object created by the enclosed object factory.
            </summary>
            <returns>The created object.</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject">
            <summary>
            An <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation
            that exposes an arbitrary target object under a different name.
            </summary>
            <remarks>
            <p>
            Usually, the target object will reside in a different object
            definition file, using this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> to link it in
            and expose it under a different name. Effectively, this corresponds
            to an alias for the target object.
            </p>
            <note>
            For XML based object definition files, a <code>&lt;alias&gt;</code>
            tag is available that effectively achieves the same.
            </note>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.IFactoryObject"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject.#ctor">
            <summary>
            Initialize a new default instance
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject.#ctor(System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Initialize this instance with the predefined <paramref name="targetObjectName"/> and <paramref name="objectFactory"/>.
            </summary>
            <param name="targetObjectName"></param>
            <param name="objectFactory"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject.TargetObjectName">
            <summary>
            The name of the target object.
            </summary>
            <remarks>
            <p>
            The target object may potentially be defined in a different object
            definition file.
            </p>
            </remarks>
            <value>The name of the target object.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see langword="null"/> if not known in advance.
            </summary>
            <seealso cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
            <seealso cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectReferenceFactoryObject.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
            <seealso cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ObjectRole">
            <summary>
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.ObjectRole.ROLE_APPLICATION">
            <summary>
            Role hint indicating that a <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> is a major part of the application. Typically corresponds to a user-defined object.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.ObjectRole.ROLE_SUPPORT">
            <summary>
            Role hint indicating that a <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> is a supporting
            part of some larger configuration, typically an outer ComponentDefinition
            <code>SUPPORT</code> objects are considered important enough to be aware
            of when looking more closely at a particular ComponentDefinition,
            but not when looking at the overall configuration of an application.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.ObjectRole.ROLE_INFRASTRUCTURE">
            <summary>
            Role hint indicating that a <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> is providing an
            entirely background role and has no relevance to the end-user. This hint is
            used when registering objects that are completely part of the internal workings
            of a <code>ComponentDefinition</code>.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyFileVariableSource">
            <summary>
            Implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that
            resolves variable name against Java-style property file.
            </summary>
            <seealso cref="T:Spring.Util.Properties"/>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyFileVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyFileVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves variable value for the specified variable name.
            </summary>
            <param name="name">
            The name of the variable to resolve.
            </param>
            <returns>
            The variable value if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyFileVariableSource.InitProperties">
            <summary>
            Initializes properties based on the specified 
            property file locations.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyFileVariableSource.Locations">
            <summary>
            Gets or sets the locations of the property files 
            to read properties from.
            </summary>
            <value>
            The locations of the property files 
            to read properties from.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyFileVariableSource.Location">
            <summary>
            Convinience property. Gets or sets a single location
            to read properties from.
            </summary>
            <value>
            A location to read properties from.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyFileVariableSource.IgnoreMissingResources">
            <summary>
            Sets a value indicating whether to ignore resource locations that do not exist.  This will call 
            the <see cref="T:Spring.Core.IO.IResource"/> Exists property.
            </summary>
            <value>
            	<c>true</c> if one should ignore missing resources; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer">
            <summary>
            Overrides default values in one or more object definitions.
            </summary>
            <remarks>
            <p>
            Instances of this class <b>override</b> already existing values, and is
            thus best suited to replacing defaults. If you need to <i>replace</i>
            placeholder values, consider using the
            <seea cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
            class instead.
            </p>
            <p>
            In contrast to the
            <see cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
            class, the original object definition can have default
            values or no values at all for such object properties. If an overriding
            configuration file does not have an entry for a certain object property,
            the default object value is left as is. Also note that it is not
            immediately obvious to discern which object definitions will be mutated by
            one or more
            <see cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>s
            simply by looking at the object configuration.
            </p>
            <p>
            Each line in a referenced configuration file is expected to take the
            following form...
            </p>
            <code escaped="true">
            	<add key="name.property" value="the override"/>
            </code>
            <p>
            The <c>name.property</c> key refers to the object name and the
            property that is to be overridden; and the value is the overridding
            value that will be inserted into the appropriate object definition's
            named property.
            </p>
            <p>
            Please note that in the case of multiple
            <see cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>s
            that define different values for the same object definition value, the
            <b>last</b> overridden value will win (due to the fact that the values
            supplied by previous
            <see cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>s
            will be overridden).
            </p>
            </remarks>
            <example>
            <p>
            The following XML context definition defines an object that has a number
            of properties, all of which have <b>default</b> values...
            </p>
            <code escaped="true">
            <object id="connStringProvider" type="MyNamespace.OracleConnectionStringProvider, MyAssembly">
            	<property name="dataSource" value="MyOracleDB"/>
            	<property name="userId" value="sa"/>
            	<property name="password" value="g0ly4dk1n"/>
            	<property name="integratedSecurity" value="true"/>
            </object>
            </code>
            <p>
            What follows is a .NET config file snippet for the above example (assuming
            the need to override one of the default values)...
            </p>
            <code escaped="true">
            <name-values>
            	<add key="database.userid" value="test"/>
            	<add key="database.password" value="0bl0m0v"/>
            </name-values>
            </code>
            </example>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Config.PropertyResourceConfigurer"/>
            <seealso cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyResourceConfigurer">
            <summary>
            Allows for the configuration of individual object property values from
            a .NET .config file.
            </summary>
            <remarks>
            <p>
            Useful for custom .NET .config files targetted at system administrators
            that override object properties configured in the application context.
            </p>
            <p>
            Two concrete implementations are provided in the Spring.NET core library:
            <list type="bullet">
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>
            for <c>&lt;add key="placeholderKey" value="..."/&gt;</c> style
            overriding (pushing values from a .NET .config file into object
            definitions).
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
            for replacing "${...}" placeholders (pulling values from a .NET .config
            file into object definitions).
            </description>
            </item>
            </list>
            </p>
            <p>
            Please refer to the API documentation for the concrete implementations
            listed above for example usage.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>
            <seealso cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
        </member>
        <member name="F:Spring.Objects.Factory.Config.PropertyResourceConfigurer.DefaultConfigSectionName">
            <summary>
            The default configuration section name to use if none is explictly supplied. 
            </summary>
            <seealso cref="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.ConfigSections"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.PropertyResourceConfigurer"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its
            standard initialization.
            </summary>
            <param name="factory">
            The object factory used by the application context.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.LoadProperties(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Loads properties from the configuration sections 
            specified in <see cref="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.ConfigSections"/> into <paramref name="properties"/>.
            </summary>
            <param name="properties">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance to be filled with properties.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.ProcessProperties(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Apply the given properties to the supplied
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>.
            </summary>
            <param name="factory">
            The <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>
            used by the application context.
            </param>
            <param name="props">The properties to apply.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occured.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.ValidateConfigSections(System.String[])">
            <summary>
            Validates the supplied <paramref name="configSections"/>.
            </summary>
            <remarks>
            <p>
            Basically, if external locations are specified, ensure that either
            one or a like number of config sections are also specified.
            </p>
            </remarks>
            <param name="configSections">
            The <paramref name="configSections"/> to be validated.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.InitializeWithDefaultProperties(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Simply initializes the supplied <paramref name="properties"/>
            collection with this instances default <see cref="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Properties"/>
            (if any).
            </summary>
            <param name="properties">
            The collection to be so initialized.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.LastLocationOverrides">
            <summary>
            The policy for resolving conflicting property overrides from
            several resources.
            </summary>
            <remarks>
            <p>
            When merging conflicting property overrides from several resources,
            should append an override with the same key be appended to the
            current value, or should the property override from the last resource
            processed override previous values?
            </p>
            <p>
            The default value is <see langword="true"/>; i.e. a property
            override from the last resource to be processed overrides previous
            values.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if the property override from the last resource
            processed overrides previous values.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Order">
            <summary>
            Return the order value of this object, where a higher value means greater in
            terms of sorting.
            </summary>
            <returns>The order value.</returns>
            <seealso cref="P:Spring.Core.IOrdered.Order"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Properties">
            <summary>
            The default properties to be applied.
            </summary>
            <remarks>
            <p>
            These are to be considered defaults, to be overridden by values
            loaded from other resources.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Location">
            <summary>
            The location of the .NET .config file that contains the property
            overrides that are to be applied.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Locations">
            <summary>
            The locations of the .NET .config files containing the property
            overrides that are to be applied.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.ConfigSections">
            <summary>
            The configuration sections to look for within the .config files.
            </summary>
            <seealso cref="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Location"/>
            <seealso cref="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Locations"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.IgnoreResourceNotFound">
            <summary>
            Should a failure to find a .config file be ignored?
            </summary>
            <remarks>
            <p>
            <see langword="true"/> is only appropriate if the .config file is
            completely optional. The default is <see langword="false"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> if a failure to find a .config file is to be
            ignored.
            </value>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyOverrideConfigurer.ProcessProperties(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Apply the given properties to the supplied
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>.
            </summary>
            <param name="factory">
            The <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>
            used by the application context.
            </param>
            <param name="props">The properties to apply.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occured.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyOverrideConfigurer.ProcessKey(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.String,System.String)">
            <summary>
            Process the given key as 'name.property' entry.
            </summary>
            <param name="factory">
            The object factory containing the object definitions that are to be
            processed.
            </param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occurs.
            </exception>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the property was not well formed (i.e. not in the format "name.property").
            </exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyPathFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            evaluates a property path on a given target object.
            </summary>
            <remarks>
            <p>
            The target object can be specified directly or via an object name (see
            example below).
            </p>
            <p>
            Please note that the <see cref="T:Spring.Objects.Factory.Config.PropertyPathFactoryObject"/>
            is an <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation, and as such has
            to comply with the contract of the <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            interface; more specifically, this means that the end result of the property lookup path
            evaluation cannot be <see lang="null"/> (<see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            implementations are not permitted to return <see lang="null"/>). If the resut of a
            property lookup path evaluates to <see lang="null"/>, an exception will be thrown.
            </p>
            </remarks>
            <example>
            <code escaped="true">
            <!-- this is the target object -->
            <object id="foo" type="Whatever.MyClass, MyAssembly" singleton="false">
            	<!-- a System.String typed property -->
            	<property name="name" value="Chinua Achebe"/>
            </object>
            
            <!--
            	will result in "Chinua Achebe", which is the value of the 'name' property of the 'foo' object
            -->
            <object id="consumer" type="Spring.Objects.Factory.Config.PropertyPathFactoryObject, Spring.Core">
            	<property name="targetObject" ref="foo"/>
            	<property name="propertyPath" value="name"/>
            </object>
            
            <!--
            	will result in "Chinua Achebe", which is the value of the 'name' property of the 'foo' object
            -->
            <object id="foo.name" type="Spring.Objects.Factory.Config.PropertyPathFactoryObject, Spring.Core"/>
            
            <!--
            	will result in "Chinua Achebe", which is the value of the 'name' property of the 'foo' object
            -->
            <object id="consumer" type="Spring.Objects.Factory.Config.PropertyPathFactoryObject, Spring.Core">
            	<property name="targetObjectName" value="foo"/>
            	<property name="propertyPath" value="name"/>
            </object>
            
            <!--
            	will result in (the int value) '13', which is the value of the length property of the 'name'
            	property of the 'foo' object.
            	
            	in this case, the first 'part' of the id is taken to be the name of the target object ('foo');
            	the remainder of the name is taken to be the property lookup path
            -->
            <object id="foo.name.length" type="Spring.Objects.Factory.Config.PropertyPathFactoryObject, Spring.Core"/>
            </code>
            </example>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPathFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
            <see cref="M:Spring.Objects.Factory.IFactoryObject.GetObject"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.TargetObject">
            <summary>
            The target object that the property path lookup is to be applied to.
            </summary>
            <remarks>
            <p>
            This would most likely be an inner object, but can of course be
            any object reference.
            </p>
            </remarks>
            <value>
            The target object that the property path lookup is to be applied to.
            </value>
            <seealso cref="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.TargetObjectName"/> 
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.TargetObjectName">
            <summary>
            The (object) name of the target object that the property path lookup
            is to be applied to.
            </summary>
            <remarks>
            <p>
            Please note that any leading or trailing whitespace <b>will</b> be
            trimmed from this name prior to resolution. The implication of this is that
            one cannot use the <see cref="T:Spring.Objects.Factory.Config.PropertyPathFactoryObject"/>
            class in conjunction with object names that start or end with whitespace.
            </p>
            </remarks>
            <value>
            The (object) name of the target object that the property path lookup
            is to be applied to.
            </value>
            <seealso cref="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.TargetObject"/> 
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.PropertyPath">
            <summary>
            The property (lookup) path to be applied to the target object.
            </summary>
            <remarks>
            <p>
            Please note that any leading or trailing whitespace <b>will</b> be
            trimmed from this path prior to resolution. Whitespace is not a valid
            identifier for property names (in part or whole) in CLS-based languages,
            so this is a not unreasonable action. Please also note that whitespace
            that is embedded within the property path will be left as-is (which may
            or may not result in an error being thrown, depending on the context of
            the whitespace).
            </p>
            </remarks>
            <example>
            <p>
            Examples of such property lookup paths can be seen below; note that
            property lookup paths can be nested to an arbitrary level.
            </p>
            <code escaped="true">
            name.length
            accountManager.account['the key'].name
            accounts[0].name
            </code>
            </example>
            <value>
            The property (lookup) path to be applied to the target object.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.ResultType">
            <summary>
            The 'expected' <see cref="T:System.Type"/> of the result from evaluating the
            property path.
            </summary>
            <remarks>
            <p>
            This is not necessary for directly specified target objects, or
            singleton target objects, where the <see cref="T:System.Type"/> can
            be determined via reflection. Just specify this in case of a
            prototype target, provided that you need matching by type (for
            example, for autowiring).
            </p>
            <p>
            It is permissable to set the value of this property to
            <see lang="null"/> (which in any case is the default value).
            </p>
            </remarks>
            <value>
            The 'expected' <see cref="T:System.Type"/> of the result from evaluating the
            property path.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see langword="null"/> if not known in advance.
            </summary>
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
            <see cref="P:Spring.Objects.Factory.IFactoryObject.IsSingleton"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <remarks>
            <p>
            The object name of this
            <see cref="T:Spring.Objects.Factory.Config.PropertyPathFactoryObject"/>
            will be interpreted as "objectName.property" pattern, if neither the
            <see cref="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.TargetObjectName"/>
            <see cref="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.TargetObject"/>
            have been supplied (set).
            </p>
            <p>
            This allows for concise object definitions with just an id or name.
            </p>
            </remarks>
            <value>
            The name of the object in the factory.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPathFactoryObject.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <exception cref="T:Spring.Objects.Factory.IInitializingObject">
            In case of initialization errors.
            </exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer">
            <summary>
            Resolves placeholder values in one or more object definitions.
            </summary>
            <remarks>
            <p>
            The default placeholder syntax follows the NAnt style: <c>${...}</c>.
            Instances of this class can be configured in the same way as any other
            object in a Spring.NET container, and so custom placeholder prefix
            and suffix values can be set via the <see cref="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.PlaceholderPrefix"/>
            and <see cref="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.PlaceholderSuffix"/> properties.
            </p>
            <example>
            <p>
            The following example XML context definition defines an object that has
            a number of placeholders. The placeholders can easily be distinguished
            by the presence of the <c>${}</c> characters.
            </p>
            <code escaped="true">
            <object id="connStringProvider" type="MyNamespace.OracleConnectionStringProvider, MyAssembly">
            	<property name="dataSource" value="${database.datasource}"/>
            	<property name="userId" value="${database.userid}"/>
            	<property name="password" value="${database.password}"/>
            	<property name="integratedSecurity" value="${database.integratedsecurity}"/>
            </object>
            </code>
            <p>
            The associated XML configuration file for the above example containing the
            values for the placeholders would contain a snippet such as ..
            </p>
            <code escaped="true">
            <name-values>
            	<add key="database.datasource" value="MyOracleDB"/>
            	<add key="database.userid" value="sa"/>
            	<add key="database.password" value="g0ly4dk1n"/>
            	<add key="database.integratedsecurity" value="true"/>
            </name-values>
            </code>
            <p>
            The preceding XML snippet listing the various property keys and their
            associated values needs to be inserted into the .NET config file of
            your application (or Web.config file for your ASP.NET web application,
            as the case may be), like so...
            </p>
            <code escaped="true">
            <name-values>
            	<add key="database.datasource" value="MyOracleDB"/>
            	<add key="database.userid" value="sa"/>
            	<add key="database.password" value="g0ly4dk1n"/>
            	<add key="database.integratedsecurity" value="true"/>
            </name-values>
            </code>
            </example>
            <p>
            <see cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
            checks simple property values, lists, dictionaries, sets, constructor
            values, object type name, and object names in
            runtime object references (
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>).
            Furthermore, placeholder values can also cross-reference other
            placeholders, in the manner of the following example where the
            <c>rootPath</c> property is cross-referenced by the <c>subPath</c>
            property.
            </p>
            <example>
            <code escaped="true">
            <name-values>
            	<add key="rootPath" value="myrootdir"/>
            	<add key="subPath" value="${rootPath}/subdir"/>
            </name-values>
            </code>
            </example>
            <p>
            In contrast to the
            <see cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>
            class, this configurer only permits the replacement of explicit
            placeholders in object definitions. Therefore, the original definition
            cannot specify any default values for its object properties, and the
            placeholder configuration file is expected to contain an entry for each
            defined placeholder. That is, if an object definition contains a
            placeholder <c>${foo}</c>, there should be an associated
            <c>&lt;add key="foo" value="..."/&gt;</c> entry in the
            referenced placeholder configuration file. Default property values
            can be defined via the inherited
            <see cref="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Properties"/>
            collection to overcome any perceived limitation of this feature.
            </p>
            <p>
            If a configurer cannot resolve a placeholder, and the value of the
            <see cref="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.IgnoreUnresolvablePlaceholders"/>
            property is currently set to <see langword="false"/>, an
            <see cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException"/>
            will be thrown. If you want to resolve properties from multiple configuration
            resources, simply specify multiple resources via the
            <see cref="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Locations"/>
            property. Finally, please note that you can also define multiple
            <see cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/>
            instances, each with their own custom placeholder syntax.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Config.PropertyResourceConfigurer"/>
            <seealso cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>
        </member>
        <member name="F:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.DefaultPlaceholderPrefix">
            <summary>
            The default placeholder prefix.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.DefaultPlaceholderSuffix">
            <summary>
            The default placeholder suffix.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.#ctor">
            <summary>
            Initializes the new instance
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ProcessProperties(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Apply the given properties to the supplied
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>.
            </summary>
            <param name="factory">
            The <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>
            used by the application context.
            </param>
            <param name="props">The properties to apply.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occured.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseString(System.Collections.Specialized.NameValueCollection,System.String,Spring.Collections.ISet)">
            <summary>
            Parse values recursively to be able to resolve cross-references between
            placeholder values.
            </summary>
            <param name="properties">
            The map of constructor arguments / property values.
            </param>
            <param name="strVal">The string to be resolved.</param>
            <param name="visitedPlaceholders">The placeholders that have already been visited
            during the current resolution attempt (used to detect circular references
            between placeholders). Only non-null if we're parsing a nested placeholder.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occurs.
            </exception>
            <returns>The resolved string.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ResolvePlaceholder(System.String,System.Collections.Specialized.NameValueCollection,Spring.Objects.Factory.Config.EnvironmentVariableMode)">
            <summary>
            Resolve the given placeholder using the given name value collection,
            performing an environment variables check according to the given mode.
            </summary>
            <remarks>
            <p>
            The default implementation delegates to 
            <see cref="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ResolvePlaceholder(System.String,System.Collections.Specialized.NameValueCollection)"/>
            before/afer the environment variable check. Subclasses can override
            this for custom resolution strategies, including customized points
            for the environment properties check.
            </p>
            </remarks>
            <param name="placeholder">The placeholder to resolve</param>
            <param name="props">
            The merged name value collection of this configurer.
            </param>
            <param name="mode">The environment variable mode.</param>
            <returns>
            The resolved value or <see langword="null"/> if none.
            </returns>
            <seelso cref="T:Spring.Objects.Factory.Config.EnvironmentVariableMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ResolvePlaceholder(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Resolve the given placeholder using the given name value collection.
            </summary>
            <remarks>
            <p>
            This (the default) implementation simply looks up the value of the
            supplied <paramref name="placeholder"/> key.
            </p>
            <p>
            Subclasses can override this for customized placeholder-to-key
            mappings or custom resolution strategies, possibly just using the
            given name value collection as fallback.
            </p>
            </remarks>
            <param name="placeholder">The placeholder to resolve.</param>
            <param name="props">
            The merged name value collection of this configurer.
            </param>
            <returns>The resolved value.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.PlaceholderPrefix">
            <summary>
            The placeholder prefix (the default is <c>${</c>).
            </summary>
            <seealso cref="F:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.DefaultPlaceholderPrefix"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.PlaceholderSuffix">
            <summary>
            The placeholder suffix (the default is <c>}</c>)
            </summary>
            <seealso cref="F:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.DefaultPlaceholderSuffix"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.IgnoreUnresolvablePlaceholders">
            <summary>
            Indicates whether unresolved placeholders should be ignored.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.EnvironmentVariableMode">
            <summary>
            Controls how environment variables will be used to 
            replace property placeholders.
            </summary>
            <remarks>
            <p>
            See the overview of the
            <see cref="T:Spring.Objects.Factory.Config.EnvironmentVariableMode"/>
            enumeration for the available options.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            retrieves a <see lang="static"/> or non-static <b>public</b> property value.
            </summary>
            <remarks>
            <p>
            Typically used for retrieving <b>public</b> property values.
            </p>
            </remarks>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and ApplicationContextAware).
            </summary>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.CreateInstance">
            <summary>
            Template method that subclasses must override to construct the object
            returned by this factory.
            </summary>
            <exception cref="T:System.Exception">
            If an exception occured during object creation.
            </exception>
            <returns>The object returned by this factory.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.StaticProperty">
            <summary>
            The <see cref="P:System.Type.AssemblyQualifiedName"/> of the static property
            to be retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.Arguments">
            <summary>
            Arguments for the property invocation.
            </summary>
            <remarks>
            <p>
            If this property is not set, or the value passed to the setter invocation
            is a null or zero-length array, a property with no arguments is assumed.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.TargetProperty">
            <summary>
            The name of the property the value of which is to be retrieved.
            </summary>
            <remarks>
            <p>
            Refers to either a <see lang="static"/> property or a non-static property,
            depending on a target object being set.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.TargetObject">
            <summary>
            The object instance on which the property is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.TargetType">
            <summary>
            The <see cref="T:System.Type"/> on which the property is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see lang="null"/> if not known in advance.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.RegistryVariableSource">
            <summary>
            Implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that
            resolves variable name against registry key.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.RegistryVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.RegistryVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves variable value for the specified variable name.
            </summary>
            <param name="name">
            The name of the variable to resolve.
            </param>
            <remarks>
            This implementation resolves REG_SZ as well as REG_MULTI_SZ values. In case of a REG_MULTI_SZ value,
            strings are concatenated to a comma-separated list following <see cref="M:System.Collections.Specialized.NameValueCollection.Get(System.String)"/>
            </remarks>
            <returns>
            The variable value if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.RegistryVariableSource.Key">
            <summary>
            Gets or sets the registry key to obtain variable values from.
            </summary>
            <value>
            The registry key to obtain variable values from.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ResourceHandlerConfigurer">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            implementation that allows for convenient registration of custom
            IResource implementations.
            </summary>
            <remarks>
            <p>
            Because the <see cref="T:Spring.Objects.Factory.Config.ResourceHandlerConfigurer"/>
            class implements the
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            interface, instances of this class that have been exposed in the
            scope of an
            <see cref="T:Spring.Context.IApplicationContext"/> will
            <i>automatically</i> be picked up by the application context and made
            available to the IoC container whenever resolution of IResources is required. 
            </p>
            </remarks>
            <author>Mark Pollack</author>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            <seealso cref="T:Spring.Context.IApplicationContext"/>	
        </member>
        <member name="M:Spring.Objects.Factory.Config.ResourceHandlerConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Registers custom IResource implementations.  The supplied
            <paramref name="factory"/> is not used since IResourse implementations
            are registered with a global <see cref="T:Spring.Core.IO.ResourceHandlerRegistry"/>
            </summary>
            <param name="factory">
            The object factory.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ResourceHandlerConfigurer.ResourceHandlers">
            <summary>
            The IResource implementations, i.e. resource handlers, to register.
            </summary>
            <remarks>
            <p>
            The <see cref="T:System.Collections.IDictionary"/> has the
            contains the resource protocol name as the key and type as the value.
            The key name can either be a string or an object, in which case
            ToString() will be used to obtain the string name.
            The value can be the fully qualified name of the IResource 
            implementation, a string, or
            an actual <see cref="T:System.Type"/> of the IResource class
            
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ResourceManagerFactoryObject">
            <summary>
            A convenience class to create a
            <see cref="T:System.Resources.ResourceManager"/> given the resource base
            name and assembly name.
            </summary>
            <remarks>
            <p>
            This is currently the preferred way of injecting resources into view
            tier components (such as Windows Forms GUIs and ASP.NET ASPX pages).
            A GUI component (typically a Windows Form) is injected with
            an <see cref="T:System.Resources.ResourceManager"/> instance, and can
            then proceed to use the various <c>GetXxx()</c> methods on the
            <see cref="T:System.Resources.ResourceManager"/> to retrieve images,
            strings, custom resources, etc.
            </p>
            </remarks>
            <author>Mark Pollack</author>
            <seealso cref="M:Spring.Objects.Factory.Config.AbstractFactoryObject.GetObject"/>
            <seealso cref="M:Spring.Objects.Factory.Config.AbstractFactoryObject.CreateInstance"/>
            <seealso cref="T:System.Resources.ResourceManager"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.CreateInstance">
            <summary>
            Creates a <see cref="T:System.Resources.ResourceManager"/>.
            </summary>
            <exception cref="T:System.Exception">
            If an exception occured during object creation.
            </exception>
            <returns>The object returned by this factory.</returns>
            <seealso cref="M:Spring.Objects.Factory.Config.AbstractFactoryObject.GetObject"/>
            <seealso cref="M:Spring.Objects.Factory.Config.AbstractFactoryObject.CreateInstance"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            interfaces).
            </summary>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.BaseName">
            <summary>
            The root name of the resources.
            </summary>
            <remarks>
            <p>
            For example, the root name for the resource file named
            "MyResource.en-US.resources" is "MyResource".
            </p>
            <note>
            The namespace is also prefixed before the resource file name.
            </note>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.AssemblyName">
            <summary>
            The string representation of the assembly that contains the resource.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Resources.ResourceManager"/> <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.RuntimeObjectReference">
            <summary>
            Immutable placeholder class used for the value of a
            <see cref="T:Spring.Objects.PropertyValue"/> object when it's a reference
            to another object in this factory to be resolved at runtime.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.RuntimeObjectReference.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>
            class.
            </summary>
            <remarks>
            <p>
            This does <b>not</b> mark this object as being a reference to
            another object in any parent factory.
            </p>
            </remarks>
            <param name="objectName">The name of the target object.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.RuntimeObjectReference.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>
            class.
            </summary>
            <remarks>
            <p>
            This variant constructor allows a client to specifiy whether or not
            this object is a reference to another object in a parent factory.
            </p>
            </remarks>
            <param name="objectName">The name of the target object.</param>
            <param name="isToParent">
            Whether this object is an explicit reference to an object in a
            parent factory.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.RuntimeObjectReference.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.RuntimeObjectReference.ObjectName">
            <summary>
            Return the target object name.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.RuntimeObjectReference.IsToParent">
            <summary>
            Is this is an explicit reference to an object in the parent
            factory?
            </summary>
            <value>
            <see langword="true"/> if this is an explicit reference to an
            object in the parent factory.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.SetFactoryObject">
            <summary>
            Simple factory object for shared <see cref="T:Spring.Collections.ISet"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SetFactoryObject.CreateInstance">
            <summary>
            Constructs a new instance of the target set.
            </summary>
            <returns>The new <see cref="T:Spring.Collections.ISet"/> instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SetFactoryObject.SourceSet">
            <summary>
            Set the source <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <remarks>
            <p>
            This value will be used to populate the <see cref="T:Spring.Collections.ISet"/>
            returned by this factory.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SetFactoryObject.TargetSetType">
            <summary>
            Set the <see cref="T:System.Type"/> of the <see cref="T:Spring.Collections.ISet"/>
            implementation to use.
            </summary>
            <remarks>
            <p>
            The default is the <see cref="T:Spring.Collections.HybridSet"/> <see cref="T:System.Type"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SetFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of objects created by this factory.
            </summary>
            <value>
            Always returns the <see cref="T:Spring.Collections.ISet"/> <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.SharedStateAwareProcessor">
            <summary>
            Configure all ISharedStateAware objects, delegating concrete handling to the list of <see cref="P:Spring.Objects.Factory.Config.SharedStateAwareProcessor.SharedStateFactories"/>.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SharedStateAwareProcessor.#ctor">
            <summary>
            Creates a new empty instance.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SharedStateAwareProcessor.#ctor(Spring.Objects.ISharedStateFactory[],System.Int32)">
            <summary>
            Creates a new preconfigured instance.
            </summary>
            <param name="sharedStateFactories"></param>
            <param name="order">priority value affecting order of invocation of this processor. See <see cref="T:Spring.Core.IOrdered"/> interface.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SharedStateAwareProcessor.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Iterates over configured list of <see cref="T:Spring.Objects.ISharedStateFactory"/>s until 
            the first provider is found that<br/>
            a) true == provider.CanProvideState( instance, name )<br/>
            b) null != provider.GetSharedState( instance, name )<br/>
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SharedStateAwareProcessor.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            A NoOp for this processor
            </summary>
            <param name="instance">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            the original <paramref name="instance"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SharedStateAwareProcessor.Order">
            <summary>
            Return the order value of this object, where a higher value means greater in
            terms of sorting.
            </summary>
            <remarks>
            <p>
            Normally starting with 0 or 1, with <see cref="F:System.Int32.MaxValue"/> indicating
            greatest. Same order values will result in arbitrary positions for the affected
            objects.
            </p>
            <p>
            Higher value can be interpreted as lower priority, consequently the first object
            has highest priority.
            </p>
            </remarks>
            <returns>The order value.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SharedStateAwareProcessor.SharedStateFactories">
            <summary>
            Get/Set the (already ordererd!) list of <see cref="T:Spring.Objects.ISharedStateFactory"/> instances.
            </summary>
            <remarks>
            If this list is not set, the containing object factory will automatically 
            be scanned for <see cref="T:Spring.Objects.ISharedStateFactory"/> instances.
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Config.SpecialFolderVariableSource">
            <summary>
            Implementation of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that
            resolves variable name against special folders (as defined by
            <see cref="T:System.Environment.SpecialFolder"/> enumeration).
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SpecialFolderVariableSource.CanResolveVariable(System.String)">
            <summary>
            Before requesting a variable resolution, a client should
            ask, whether the source can resolve a particular variable name.
            </summary>
            <param name="name">the name of the variable to resolve</param>
            <returns><c>true</c> if the variable can be resolved, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SpecialFolderVariableSource.ResolveVariable(System.String)">
            <summary>
            Resolves specified special folder to its full path.
            </summary>
            <param name="name">
            The name of the special folder to resolve. Should be one of the values
            defined by the <see cref="T:System.Environment.SpecialFolder"/> enumeration.
            </param>
            <returns>
            The folder path if able to resolve, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.TypeAliasConfigurer">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            implementation that allows for convenient registration of custom
            type aliases.
            </summary>
            <remarks>
            Type aliases can be used instead of fully qualified type names anywhere
            a type name is expected in a Spring.NET configuration file.
            <p>
            Because the <see cref="T:Spring.Objects.Factory.Config.TypeAliasConfigurer"/>
            class implements the
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            interface, instances of this class that have been exposed in the
            scope of an
            <see cref="T:Spring.Context.IApplicationContext"/> will
            <i>automatically</i> be picked up by the application context and made
            available to the IoC container whenever resolution of type aliases is required. 
            </p>
            </remarks>
            <author>Mark Pollack</author>
            <seealso cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            <seealso cref="T:Spring.Context.IApplicationContext"/>	
        </member>
        <member name="M:Spring.Objects.Factory.Config.TypeAliasConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Registers any type aliases.  The supplied
            <paramref name="factory"/> is not used since type aliases
            are registered with a global <see cref="T:Spring.Core.TypeResolution.TypeRegistry"/>
            </summary>
            <param name="factory">
            The object factory.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.TypeAliasConfigurer.TypeAliases">
            <summary>
            The type aliases to register.
            </summary>
            <remarks>
            <p>
            The <see cref="T:System.Collections.IDictionary"/> has the
            contains the alias name as the key and type as the value.
            The key name can either be a string or an object, in which case
            ToString() will be used to obtain the string name.
            the value can be the fully qualified name of the type as a string or
            an actual <see cref="T:System.Type"/> of the class that 
            being aliased.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Config.TypedStringValue">
            <summary>
            Holder for a typed <see cref="T:System.String"/> value.
            </summary>
            <remarks>
            <p>
            Can be added to object definitions to explicitly specify
            a target type for a <see cref="T:System.String"/> value,
            for example for collection
            elements.
            </p>
            <p>
            This holder just stores the <see cref="T:System.String"/> value and the target
            <see cref="T:System.Type"/>. The actual conversion will be performed by
            the surrounding object factory.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.TypedStringValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.TypedStringValue"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.TypedStringValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Config.TypedStringValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.TypedStringValue.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.TypedStringValue"/>
            class.
            </summary>
            <param name="value">
            The value that is to be converted.
            </param>
            <param name="targetType">
            The <see cref="T:System.Type"/> to convert to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="targetType"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.TypedStringValue.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.TypedStringValue"/>
            class.
            </summary>
            <param name="value">
            The value that is to be converted.
            </param>
            <param name="targetTypeName">
            The unresolved type to convert to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="targetTypeName"/> is a 
            <see langword="null"/> or an empty string.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.TypedStringValue.ResolveTargetType">
            <summary>
            Determine the type to convert to, resolving it from a specified type name if necessary.
            </summary>
            <returns>The resolved type to convert to.</returns>    
        </member>
        <member name="P:Spring.Objects.Factory.Config.TypedStringValue.Value">
            <summary>
            The value that is to be converted. 
            </summary>
            <remarks>
            <p>
            Obviously if the
            <see cref="P:Spring.Objects.Factory.Config.TypedStringValue.TargetType"/>
            is the <see cref="T:System.String"/> <see cref="T:System.Type"/>, no conversion
            will actually be performed.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.TypedStringValue.TargetType">
            <summary>
            The <see cref="T:System.Type"/> to convert to.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the setter is supplied with a <see langword="null"/> value.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.TypedStringValue.TargetTypeName">
            <summary>
            The unresolved type to convert to.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the setter is supplied with a <see langword="null"/> value or an empty string.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.TypedStringValue.HasTargetType">
            <summary>
            Gets a value indicating whether this instance has target type.
            </summary>
            <value>
            	<c>true</c> if this instance has target type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.VariableAccessor">
            <summary>
            Provides methods for type-safe accessing <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/>s.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.#ctor(Spring.Objects.Factory.Config.IVariableSource)">
            <summary>
            Initialize a new instance of an <see cref="T:Spring.Objects.Factory.Config.VariableAccessor"/>
            </summary>
            <param name="variableSource">The underlying <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> to read values from.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetFloat(System.String,System.Single)">
            <summary>
            Returns a <see cref="T:System.Single"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Single"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetFloat(System.String,System.Single,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Single"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Single"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetDouble(System.String,System.Double)">
            <summary>
            Returns a <see cref="T:System.Double"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Double"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetDouble(System.String,System.Double,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Double"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Double"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetDecimal(System.String,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Decimal"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Decimal"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetDecimal(System.String,System.Decimal,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Decimal"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Decimal"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetInt64(System.String,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Int64"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Int64"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetInt64(System.String,System.Int64,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Int64"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Int64"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetUInt64(System.String,System.UInt64)">
            <summary>
            Returns a <see cref="T:System.UInt64"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.UInt64"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetUInt64(System.String,System.UInt64,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.UInt64"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.UInt64"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetInt32(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Int32"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Int32"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetInt32(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Int32"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Int32"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetUInt32(System.String,System.UInt32)">
            <summary>
            Returns a <see cref="T:System.UInt32"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.UInt32"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetUInt32(System.String,System.UInt32,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.UInt32"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.UInt32"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetInt16(System.String,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Int16"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Int16"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetInt16(System.String,System.Int16,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Int16"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Int16"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetUInt16(System.String,System.UInt16)">
            <summary>
            Returns a <see cref="T:System.Int16"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Int16"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetUInt16(System.String,System.UInt16,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Int16"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Int16"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetByte(System.String,System.Byte)">
            <summary>
            Returns a <see cref="T:System.Byte"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Byte"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetByte(System.String,System.Byte,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Byte"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Byte"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetGuid(System.String,System.Guid)">
            <summary>
            Returns a <see cref="T:System.Guid"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Guid"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetGuid(System.String,System.Guid,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Guid"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Guid"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="format">The expected format of the variable's value</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.DateTime"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetDateTime(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="format">The expected format of the variable's value</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.DateTime"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetChar(System.String,System.Char)">
            <summary>
            Returns a <see cref="T:System.Char"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Char"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetChar(System.String,System.Char,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Char"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Char"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetBoolean(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            A <see cref="T:System.Boolean"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetBoolean(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            A <see cref="T:System.Boolean"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetEnum(System.String,System.Enum)">
            <summary>
            Returns an <see cref="T:System.Enum"/> of <paramref name="defaultValue"/>'s type that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <returns>
            An <see cref="T:System.Enum"/> of <paramref name="defaultValue"/>'s type that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetEnum(System.String,System.Enum,System.Boolean)">
            <summary>
            Returns an <see cref="T:System.Enum"/> of <paramref name="defaultValue"/>'s type that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.</param>
            <param name="throwOnInvalidValue">
            If <c>false</c>, suppresses exceptions if the result 
            of <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed
            and returns <paramref name="defaultValue"/> instead.</param>
            <returns>
            An <see cref="T:System.Enum"/> of <paramref name="defaultValue"/>'s type that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> cannot be parsed.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariableAccessor.GetString(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that contains the value of the specified variable.
            </summary>
            <param name="name">The name of the variable to be read.</param>
            <param name="defaultValue">The value to be returned if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <see lang="null"/> or <see cref="F:System.String.Empty"/>.</param>
            <returns>
            A <see cref="T:System.String"/> that contains the value of the specified variable 
            or <paramref name="defaultValue"/>, if <see cref="M:Spring.Objects.Factory.Config.IVariableSource.ResolveVariable(System.String)"/> returns <c>null</c>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer">
            <summary>
            Resolves placeholder values in one or more object definitions
            </summary>
            <remarks>
            The placeholder syntax follows the NAnt style: <c>${...}</c>.
            Placeholders values are resolved against a list of 
            <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/>s.  In case of multiple definitions
            for the same property placeholder name, the first one in the 
            list is used.
            <para>Variable substitution is performed on simple property values, 
            lists, dictionaries, sets, constructor
            values, object type name, and object names in
            runtime object references (
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>).</para>
            <para>Furthermore, placeholder values can also cross-reference other
            placeholders, in the manner of the following example where the
            <c>rootPath</c> property is cross-referenced by the <c>subPath</c>
            property.
            </para>
            <example>
            <code escaped="true">
            <name-values>
            	<add key="rootPath" value="myrootdir"/>
            	<add key="subPath" value="${rootPath}/subdir"/>
            </name-values>
            </code>
            </example>
            <para>If a configurer cannot resolve a placeholder, and the value of the
            <see cref="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.IgnoreUnresolvablePlaceholders"/>
            property is currently set to <see langword="false"/>, an
            <see cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException"/>
            will be thrown. </para>
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.DefaultPlaceholderPrefix">
            <summary>
            The default placeholder prefix.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.DefaultPlaceholderSuffix">
            <summary>
            The default placeholder suffix.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.#ctor">
            <summary>
            Create a new instance without any variable sources
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.#ctor(Spring.Objects.Factory.Config.IVariableSource)">
            <summary>
            Create a new instance and initialize with the given variable source
            </summary>
            <param name="variableSource"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.#ctor(System.Collections.IList)">
            <summary>
            Create a new instance and initialize with the given list of variable sources
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its
            standard initialization.
            </summary>
            <param name="factory">The object factory used by the application context.</param>
            <remarks>
            <p>
            All object definitions will have been loaded, but no objects will have
            been instantiated yet. This allows for overriding or adding properties
            even to eager-initializing objects.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.ProcessProperties(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Apply the property replacement using the specified <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/>s for all
            object in the supplied
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>.
            </summary>
            <param name="factory">
            The <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>
            used by the application context.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occured.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.VariableSources">
            <summary>
            Sets the list of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/>s that will be used to resolve placeholder names.
            </summary>
            <value>A list of <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/>s.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.VariableSource">
            <summary>
            Sets <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> that will be used to resolve placeholder names.
            </summary>
            <value>A <see cref="T:Spring.Objects.Factory.Config.IVariableSource"/> instance.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.PlaceholderPrefix">
            <summary>
            The placeholder prefix (the default is <c>${</c>).
            </summary>
            <seealso cref="F:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.DefaultPlaceholderPrefix"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.PlaceholderSuffix">
            <summary>
            The placeholder suffix (the default is <c>}</c>)
            </summary>
            <seealso cref="F:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.DefaultPlaceholderSuffix"/>
        </member>
        <member name="P:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.IgnoreUnresolvablePlaceholders">
            <summary>
            Indicates whether unresolved placeholders should be ignored.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.VariablePlaceholderConfigurer.Order">
            <summary>
            Return the order value of this object, where a higher value means greater in
            terms of sorting.
            </summary>
            <returns>The order value.</returns>
            <seealso cref="P:Spring.Core.IOrdered.Order"/>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.Location.#ctor(Spring.Core.IO.IResource,System.Object)">
            <summary>
            Initializes a new instance of the Location class.
            </summary>
            <param name="resource"></param>
            <param name="source"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.Location.#ctor(Spring.Core.IO.IResource)">
            <summary>
            Initializes a new instance of the Location class.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            <summary>
            Thrown when an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            encounters an internal error, and its definitions are invalid.
            </summary>
            <remarks>
            <p>
            An example of a situation when this exception would be thrown is
            in the case of an XML document containing object definitions being
            malformed.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource that the object definition came from
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException"/> class.
            </summary>
            <param name="resourceDescription">
            The description of the resource that the object definition came from
            </param>
            <param name="msg">The detail message (used as exception message as-is)</param>
            <param name="cause">The root cause. (may be <code>null</code></param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(Spring.Core.IO.IResource,System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="resourceLocation">
            The resource location (e.g. an XML object definition file) associated
            with the offending object definition.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(Spring.Core.IO.IResource,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="resourceLocation">
            The resource location (e.g. an XML object definition file) associated
            with the offending object definition.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource that the object definition came from
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="F:Spring.Objects.Factory.ObjectDefinitionStoreException._resourceDescription">
            <summary>
            The description of the resource associated with the object
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.ObjectDefinitionStoreException._objectName">
            <summary>
            The name of the object that trigger the exception.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectDefinitionStoreException.ObjectName">
            <summary>
            The name of the object that triggered the exception (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectDefinitionStoreException.ResourceDescription">
            <summary>
            The description of the resource associated with the object (if any).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(Spring.Objects.Factory.Parsing.Problem)">
            <summary>
            Initializes a new instance of the ObjectDefinitionParsingException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor">
            <summary>
            Creates a new instance of the ObjectDefinitionParsingException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionParsingException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionParsingException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource that the object definition came from
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException"></see> class.
            </summary>
            <param name="resourceDescription">
            The description of the resource that the object definition came from
            </param>
            <param name="msg">The detail message (used as exception message as-is)</param>
            <param name="cause">The root cause. (may be <code>null</code></param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(Spring.Core.IO.IResource,System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionParsingException class.
            </summary>
            <param name="resourceLocation">
            The resource location (e.g. an XML object definition file) associated
            with the offending object definition.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(Spring.Core.IO.IResource,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionParsingException class.
            </summary>
            <param name="resourceLocation">
            The resource location (e.g. an XML object definition file) associated
            with the offending object definition.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionParsingException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource that the object definition came from
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ObjectDefinitionParsingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionParsingException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.Problem.#ctor(System.String,Spring.Objects.Factory.Parsing.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Parsing.Problem"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.Problem.#ctor(System.String,Spring.Objects.Factory.Parsing.Location,System.Exception)">
            <summary>
            Initializes a new instance of the Problem class.
            </summary>
            <param name="message"></param>
            <param name="location"></param>
            <param name="rootCause"></param>
        </member>
        <member name="T:Spring.Objects.Factory.Parsing.ReaderContext">
            <summary>
            Context that gets passed along an object definition reading process,
            encapsulating all relevant configuraiton as well as state.
            </summary>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Parsing.ReaderContext.#ctor(Spring.Core.IO.IResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Parsing.ReaderContext"/> class.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="P:Spring.Objects.Factory.Parsing.ReaderContext.Resource">
            <summary>
            Gets the resource.
            </summary>
            <value>The resource.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory">
            <summary>
            Abstract <see cref="T:Spring.Objects.Factory.IObjectFactory"/> superclass
            that implements default object creation.
            </summary>
            <remarks>
            <p>
            Provides object creation, initialization and wiring, supporting
            autowiring and constructor resolution. Handles runtime object
            references, managed collections, and object destruction.
            </p>
            <p>
            The main template method to be implemented by subclasses is
            <see cref="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.FindMatchingObjects(System.Type)"/>,
            used for autowiring by type. Note that this class does not implement object
            definition registry capabilities
            (<see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
            does).
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractObjectFactory">
            <summary>
            Abstract superclass for <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            implementations.
            </summary>
            <remarks>
            <p>
            This class provides singleton / prototype determination, singleton caching,
            object definition aliasing, <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            handling, and object definition merging for child object definitions.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.CURRENTLY_IN_CREATION">
            <summary>
            Marker object to be temporarily registered in the singleton cache,
            while instantiating an object (in order to be able to detect circular references).
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.EMPTYOBJECT">
            <summary>
            Used as value in hashtable that keeps track of singleton names currently in the
            process of being created.  Would not be necessary if we created a case insensitive implementation of
            ISet.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.log">
            <summary>
            The <see cref="T:Common.Logging.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.factoryObjectProductCache">
            <summary>
            Cache of singleton objects created by <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s: FactoryObject name -&gt; product
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/> class.
            </summary>
            <remarks>
            <p>
            This constructor implicitly creates an
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/>
            that treats the names of objects in this factory in a case-sensitive fashion.
            </p>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
            <param name="caseSensitive">
            <see lang="true"/> if the names of objects in this factory are to be treated in a
            case-sensitive fashion.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.#ctor(System.Boolean,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
            <param name="caseSensitive">
            <see lang="true"/> if the names of objects in this factory are to be treated in a
            case-sensitive fashion.
            </param>
            <param name="parentFactory">
            Any parent object factory; may be <see lang="null"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ApplyObjectPropertyValues(System.Object,System.String)">
            <summary>
            Apply the property values of the object definition with the supplied
            <paramref name="name"/> to the supplied <paramref name="instance"/>.
            </summary>
            <remarks>
            <p>
            The object definition can either define a fully self-contained object,
            reusing it's property values, or just property values meant to be used
            for existing object instances.
            </p>
            </remarks>
            <param name="instance">
            The existing object that the property values for the named object will
            be applied to.
            </param>
            <param name="name">
            The name of the object definition associated with the property values that are
            to be applied.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ApplyObjectPropertyValues(System.Object,System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Apply the property values of the object definition with the supplied
            <paramref name="name"/> to the supplied <paramref name="instance"/>.
            </summary>
            <remarks>
            <p>
            The object definition can either define a fully self-contained object,
            reusing it's property values, or just property values meant to be used
            for existing object instances.
            </p>
            </remarks>
            <param name="instance">
            The existing object that the property values for the named object will
            be applied to.
            </param>
            <param name="name">
            The name of the object definition associated with the property values that are
            to be applied.
            </param>
            <param name="definition">
            An object definition that should be used to apply property values.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.InstantiateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Create an object instance for the given object definition.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="definition">
            The object definition for the object that is to be instantiated.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-<see langword="null"/> arguments value
            in any other case.
            </param>
            <param name="allowEagerCaching">
            Whether eager caching of singletons is allowed... typically true for
            singlton objects, but never true for inner object definitions.
            </param>
            <param name="suppressConfigure">
            Create instance only - suppress injecting dependencies yet.
            </param>
            <returns>
            A new instance of the object.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <remarks>
            <p>
            The object definition will already have been merged with the parent
            definition in case of a child definition.
            </p>
            <p>
            All the other methods in this class invoke this method, although objects
            may be cached after being instantiated by this method. All object
            instantiation within this class is performed by this method.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroyObject(System.String,System.Object)">
            <summary>
            Destroy the target object.
            </summary>
            <remarks>
            <p>
            Must destroy objects that depend on the given object before the object itself,
            nor throw an exception.
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="target">
            The target object instance to destroyed.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Does this object factory contain an object definition with the
            supplied <paramref name="name"/>?
            </summary>
            <remarks>
            <p>
            Does not consider any hierarchy this factory may participate in.
            Invoked by
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsObject(System.String)"/>
            when no cached singleton instance is found.
            </p>
            </remarks>
            <param name="name">
            The name of the object to look for.
            </param>
            <returns>
            <see lang="true"/> if this object factory contains an object
            definition with the supplied <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.AddSingleton(System.String,System.Object)">
            <summary>
            Adds the supplied <paramref name="singleton"/> (object) to this factory's
            singleton cache.
            </summary>
            <remarks>
            <p>
            To be called for eager registration of singletons, e.g. to be able to
            resolve circular references.
            </p>
            <note>
            If a singleton has already been registered under the same name as
            the supplied <paramref name="name"/>, then the old singleton will
            be replaced.
            </note>
            </remarks>
            <param name="name">The name of the object.</param>
            <param name="singleton">The singleton object.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="name"/> argument is <see langword="null"/>
            or consists wholly of whitespace characters; or if the
            <paramref name="singleton"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.TransformedObjectName(System.String)">
            <summary>
            Return the object name, stripping out the factory dereference prefix if
            necessary, and resolving aliases to canonical names.
            </summary>
            <param name="name">
            The transformed name of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.OriginalObjectName(System.String)">
            <summary>
            Ensures, that the given name is prefixed with <see cref="F:Spring.Objects.Factory.ObjectFactoryUtils.FactoryObjectPrefix"/> 
            if it incidentially already starts with this prefix. This avoids troubles when dereferencing 
            the object name during <see cref="M:Spring.Objects.Factory.ObjectFactoryUtils.TransformedObjectName(System.String)"/>
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsAlias(System.String)">
            <summary>
            Determines whether the specified name is defined as an alias as opposed
            to the name of an actual object definition.
            </summary>
            <param name="name">The object name to check.</param>
            <returns>
            	<c>true</c> if the specified name is alias; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(System.String,System.Boolean)">
            <summary>
            Return a <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>,
            even by traversing parent if the parameter is a child definition.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="includingAncestors">
            Are ancestors to be included in the merge?
            </param>
            <remarks>
            <p>
            Will ask the parent object factory if not found in this instance.
            </p>
            </remarks>
            <returns>
            A merged <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            with overridden properties.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Return a <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>,
            even by traversing parent if the parameter is a child definition.
            </summary>
            <returns>
            A merged <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            with overridden properties.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.CreateRootObjectDefinition(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Creates the root object definition.
            </summary>
            <param name="templateDefinition">The template definition to base root definition on.</param>
            <returns>Root object definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Register a new object definition with this registry.
            </summary>
            <param name="name">
            The name of the object instance to register.
            </param>
            <param name="objectDefinition">
            The definition of the object instance to register.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object definition is invalid.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectDefinition(System.String)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectDefinition(System.String,System.Boolean)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="includeAncestors">Whether to search parent object factories.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetTypeForFactoryObject(Spring.Objects.Factory.IFactoryObject)">
            <summary>
            Gets the type for the given FactoryObject.
            </summary>
            <param name="factoryObject">The factory object instance to check.</param>
            <returns>the FactoryObject's object type</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetTypeForFactoryObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Gets the object type for the given FactoryObject definition, as far as possible.
            Only called if there is no singleton instance registered for the target object already.
            </summary>
            <remarks>
            The default implementation creates the FactoryObject via <code>GetObject</code>
            to call its <code>ObjectType</code> property. Subclasses are encouraged to optimize
            this, typically by just instantiating the FactoryObject but not populating it yet,
            trying whether its <code>ObjectType</code> property already returns a type.
            If no type found, a full FactoryObject creation as performed by this implementation
            should be used as fallback.
            </remarks>
            <param name="objectName">Name of the object.</param>
            <param name="mod">The merged object definition for the object.</param>
            <returns>The type for the object if determinable, or <code>null</code> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.PredictObjectType(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Predict the eventual object type (of the processed object instance) for the
            specified object.
            </summary>
            <remarks>
            Does not need to handle FactoryObjects specifically, since it is only
            supposed to operate on the raw object type.
            This implementation is simplistic in that it is not able to
            handle factory methods and InstantiationAwareBeanPostProcessors.
            It only predicts the object type correctly for a standard object.
            To be overridden in subclasses, applying more sophisticated type detection.
            </remarks>
            <param name="objectName">Name of the object.</param>
            <param name="mod">The merged object definition to determine the type for. May be <c>null</c></param>
            <returns>The type of the object, or <code>null</code> if not predictable</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForInstance(System.String,System.Object)">
            <summary>
            Get the object for the given object instance, either the object
            instance itself or its created object in case of an
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>.
            </summary>
            <param name="name">
            The name that may include the factory dereference prefix.
            </param>
            <param name="instance">The object instance.</param>
            <returns>
            The singleton instance of the object.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForInstance(System.Object,System.String,System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Get the object for the given object instance, either the object
            instance itself or its created object in case of an
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>.
            </summary>
            <param name="instance">The object instance.</param>
            <param name="name">
            The name that may include the factory dereference prefix (=the requested name).
            </param>
            <param name="canonicalName">
            The canonical object name
            </param>
            <param name="rod">the merged object definition</param>
            <returns>
            The singleton instance of the object.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectFromFactoryObject(Spring.Objects.Factory.IFactoryObject,System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Obtain an object to expose from the given IFactoryObject.
            </summary>
            <param name="factory">The IFactoryObject instance.</param>
            <param name="objectName">Name of the object.</param>
            <param name="rod">The merged object definition.</param>
            <returns>The object obtained from the IFactoryObject</returns>
            <exception cref="T:Spring.Objects.Factory.ObjectCreationException">If IFactoryObject object creation failed.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.PostProcessObjectFromFactoryObject(System.Object,System.String)">
            <summary>
            Post-process the given object that has been obtained from the FactoryObject.
            The resulting object will be exposed for object references.
            </summary>
            <remarks>The default implementation simply returns the given object
            as-is.  Subclasses may override this, for example, to apply
            post-processors.</remarks>
            <param name="instance">The instance obtained from the IFactoryObject.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The object instance to expose</returns>
            <exception cref="T:Spring.Objects.ObjectsException">if any post-processing failed.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetFactoryObject(System.String)">
            <summary>
            Convenience method to pull an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            from this factory.
            </summary>
            <param name="objectName">
            The name of the factory object to be retrieved. If this name is not a valid
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> name, it will be converted
            into one.
            </param>
            <returns>
            The <see cref="T:Spring.Objects.Factory.IFactoryObject"/> associated with the
            supplied <paramref name="objectName"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsFactoryDereference(System.String)">
            <summary>
            Is the supplied <paramref name="name"/> a factory object dereference?
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsObjectTypeMatch(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Type)">
            <summary>
            Determines whether the type of the given object definition matches the
            specified target type.
            </summary>
            <remarks>Allows for lazy load of the actual object type, provided that the
            type match can be determined otherwise.
            <para>The default implementation simply delegates to the standard
            <code>ResolveObjectType</code> method.  Subclasses may override this to use
            a differnt strategy.</para>
            </remarks>
            <param name="objectName">Name of the object (for error handling purposes).</param>
            <param name="rod">The merged object definition to determine the type for.</param>
            <param name="targetType">Type to match against (never null).</param>
            <returns>
            	<c>true</c> if object definition matches tye specified target type; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Spring.Core.CannotLoadObjectTypeException">if we failed to load the type.</exception>"
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ResolveObjectType(Spring.Objects.Factory.Support.RootObjectDefinition,System.String)">
            <summary>
            Resolves the type of the object for the specified object definition resolving
            an object type name to a Type (if necessary) and storing the resolved Type
            in the object definition for further use.
            </summary>
            <param name="rod">The merged object definition to dertermine the type for.</param>
            <param name="objectName">Name of the object (for error handling purposes).</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsFactoryObject(System.String)">
            <summary>
            Is the object (definition) with the supplied <paramref name="name"/> an
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>?
            </summary>
            <param name="name">The name of the object to be checked.</param>
            <returns>
            <see lang="true"/> the object (definition) with the supplied
            <paramref name="name"/> an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>?
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RemoveSingleton(System.String)">
            <summary>
            Remove the object identified by the supplied <paramref name="name"/>
            from this factory's singleton cache.
            </summary>
            <param name="name">
            The name of the object that is to be removed from the singleton
            cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="name"/> argument is <see langword="null"/> or
            consists wholly of whitespace characters.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames(System.Type)">
            <summary>
            Return the names of objects in the singleton cache that match the given
            object type (including subclasses).
            </summary>
            <param name="type">
            The class or interface to match, or <see langword="null"/> for all object names.
            </param>
            <remarks>
            <p>
            Will <i>not</i> consider <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s
            as the type of their created objects is not known before instantiation.
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>
            The names of objects in the singleton cache that match the given
            object type (including subclasses), or an empty array if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsTypeMatch(System.String,System.Type)">
            <summary>
            Determines whether the object with the given name matches the specified type.
            </summary>
            <remarks>More specifically, check whether a GetObject call for the given name
            would return an object that is assignable to the specified target type.
            Translates aliases back to the corresponding canonical bean name.
            Will ask the parent factory if the bean cannot be found in this factory instance.
            </remarks>
            <param name="name">The name of the object to query.</param>
            <param name="targetType">Type of the target to match against.</param>
            <returns>
            	<c>true</c> if the object type matches; otherwise, <c>false</c>
            if it doesn't match or cannot be determined yet.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">Ff there is no object with the given name
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetType(System.String)">
            <summary>
            Determines the <see cref="T:System.Type"/> of the object with the
            supplied <paramref name="name"/>.
            </summary>
            <remarks>
            <p>
            More specifically, checks the <see cref="T:System.Type"/> of object that
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> would return.
            For an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, returns the
            <see cref="T:System.Type"/> of object that the
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </p>
            <p>
            Please note that (prototype) objects created via a factory method or
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> objects are handled
            slightly differently, in that we <b>don't</b> want to needlessly create
            instances of such objects just to determine the <see cref="T:System.Type"/>
            of object that they create.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>
            The <see cref="T:System.Type"/> of the object or <see langword="null"/>
            if not determinable.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetTypeForFactoryMethod(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Determines the <see cref="T:System.Type"/> of the object defined
            by the supplied object <paramref name="definition"/>. 
            </summary>
            <remarks>
            <p>
            This, the default, implementation returns <see lang="null"/>
            to indicate that the type cannot be determined. Subclasses are
            encouraged to try to determine the actual return
            <see cref="T:System.Type"/> here, matching their strategy of resolving
            factory methods in the
            <code>Spring.Objects.Factory.Support.AbstractObjectFactory.CreateObject</code>
            implementation.
            </p>
            </remarks>
            <param name="objectName">
            The name associated with the supplied object <paramref name="definition"/>.
            </param>
            <param name="definition">
            The <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            that the <see cref="T:System.Type"/> is to be determined for. 
            </param>
            <returns>
            The <see cref="T:System.Type"/> of the object defined by the supplied
            object <paramref name="definition"/>; or <see lang="null"/> if the
            <see cref="T:System.Type"/> cannot be determined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames">
            <summary>
            Returns the names of the objects in the singleton cache.
            </summary>
            <remarks>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>The names of the objects in the singleton cache.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonCount">
            <summary>
            Returns the number of objects in the singleton cache.
            </summary>
            <remarks>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>The number of objects in the singleton cache.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroySingleton(System.String)">
            <summary>
            Destroys the named singleton object.
            </summary>
            <remarks>
            <p>
            Delegates to
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroyObject(System.String,System.Object)"/>
            if a corresponding singleton instance is found.
            </p>
            </remarks>
            <param name="name">
            The name of the singleton object that is to be destroyed.
            </param>
            <seealso cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroyObject(System.String,System.Object)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.CheckMergedObjectDefinition(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,System.Type,System.Object[])">
            <summary>
            Check the supplied merged object definition for any possible
            validation errors.
            </summary>
            <param name="mergedObjectDefinition">
            The object definition to be checked for validation errors.
            </param>
            <param name="objectName">
            The name of the object associated with the supplied object definition.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of object validation errors.
            </exception>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.parentObjectFactory">
            <summary>
            Parent object factory, for object inheritance support
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.ignoreDependencyTypes">
            <summary>
            Dependency types to ignore on dependency check and autowire, as Set of
            Type objects: for example, string.  Default is none.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.objectPostProcessors">
            <summary>
            ObjectPostProcessors to apply in CreateObject
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.hasInstantiationAwareBeanPostProcessors">
            <summary>
            Indicates whether any IInstantiationAwareBeanPostProcessors have been registered
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.hasDestructionAwareBeanPostProcessors">
            <summary>
            Indicates whether any IDestructionAwareBeanPostProcessors have been registered 
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.registeredSingletons">
            <summary>
            Set of registered singletons, containing the bean names in registration order 
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.disposableInnerObjects">
            <summary>
            Set that holds all inner objects created by this factory that implement the IDisposable
            interface, to be destroyed on call to Dispose.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsLocalObject(System.String)">
            <summary>
            Determines whether the local object factory contains a bean of the given name,
            ignoring object defined in ancestor contexts.
            This is an alternative to <code>ContainsObject</code>, ignoring an object
            of the given name from an ancestor object factory.
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>
            	<c>true</c> if objects with the specified name is defined in the local factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <see cref="M:Spring.Objects.Factory.IObjectFactory.IsSingleton(System.String)"/> 
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsPrototype(System.String)">
            <summary>
            Determines whether the specified object name is prototype.  That is, will GetObject
            always return independent instances?
            </summary>
            <param name="name">The name of the object to query</param>
            <returns>
            	<c>true</c> if the specified object name will always deliver independent instances; otherwise, <c>false</c>.
            </returns>
            <remarks>This method returning false does not clearly indicate a singleton object.
            It indicated non-independent instances, which may correspond to a scoped object as
            well.  use the IsSingleton property to explicitly check for a shared
            singleton instance.
            <para>Translates aliases back to the corresponding canonical object name.  Will ask the
            parent factory if the object can not be found in this factory instance.
            </para>
            </remarks>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">if there is no object with the given name.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsObject(System.String)">
            <summary>
            Does this object factory or one of its parent factories contain an object with the given name?
            </summary>
            <remarks>
            This method scans the object factory hierarchy starting with the current factory instance upwards. 
            Use <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsLocalObject(System.String)"/> if you want to explicitely check just this object factory instance.
            </remarks>
            <see cref="M:Spring.Objects.Factory.IObjectFactory.ContainsObject(System.String)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetAliases(System.String)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.CreateObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an unconfigured(!) instance (possibly shared or independent) of the given object name.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.CreateObject(System.String,System.Type,System.Object[])"/>
            <remarks>
             This method will only <b>instantiate</b> the requested object. It does <b>NOT</b> inject any dependencies!
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String,System.Type)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. If there is no factory method and the
            arguments are not null, then match the argument values by type and
            call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(System.String,System.Type,System.Object[],System.Boolean)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name, 
            optionally injecting dependencies.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <param name="suppressConfigure">whether to inject dependencies or not.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.CreateObject(System.String,System.Type,System.Object[])"/>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type,System.Object[])"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.EnsureObjectIsOfRequiredType(System.String,System.Object,System.Type)">
            <summary>
            Checks, if the passed instance is of the required type.
            </summary>
            <param name="name">the name of the object</param>
            <param name="instance">the actual instance</param>
            <param name="requiredType">the type contract the given instance must adhere.</param>
            <returns>the object instance passed in via <paramref name="instance"/>(for more fluent usage)</returns>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            if <paramref name="instance"/> is null or not assignable to <paramref name="requiredType"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.CreateAndCacheSingletonInstance(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Creates a singleton instance for the specified object name and definition.
            </summary>
            <param name="objectName">
            The object name (will be used as the key in the singleton cache key).
            </param>
            <param name="objectDefinition">The object definition.</param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. If there is no factory method and the
            arguments are not null, then match the argument values by type and
            call the object's constructor.
            </param>
            <returns>The created object instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ConfigureObject(System.Object,System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the supplied <paramref name="definition"/>.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.Dispose">
            <summary>
            Destroy all cached singletons in this factory.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IgnoreDependencyType(System.Type)">
            <summary>
            Ignore the given dependency type for autowiring
            </summary>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.IgnoreDependencyType(System.Type)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsCurrentlyInCreation(System.String)">
            <summary>
            Determines whether the specified object name is currently in creation..
            </summary>
            <param name="objectName">Name of the object.</param>
            <returns>
            	<c>true</c> if the specified object name is currently in creation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.AddObjectPostProcessor(Spring.Objects.Factory.Config.IObjectPostProcessor)">
            <summary>
            Add a new <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            that will get applied to objects created by this factory.
            </summary>
            <param name="objectPostProcessor">
            The <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to register.
            </param>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.AddObjectPostProcessor(Spring.Objects.Factory.Config.IObjectPostProcessor)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(System.String,System.String)">
            <summary>
            Given an object name, create an alias.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterAlias(System.String,System.String)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(System.String,System.Object)">
            <summary>
            Register the given existing object as singleton in the object factory,
            under the given object name.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.RegisterSingleton(System.String,System.Object)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsSingleton(System.String)">
            <summary>
            Does this object factory contains a singleton instance with the
            supplied <paramref name="name"/>?
            </summary>
            <seealso cref="M:Spring.Objects.Factory.Config.ISingletonObjectRegistry.ContainsSingleton(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingleton(System.String)">
            <summary>
            Tries to find a cached object for the specified name. 
            </summary>
            <param name="objectName">Teh object name to look for.</param>
            <returns>The cached object if found, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsObjectNameInUse(System.String)">
            <summary>
            Determines whether the given object name is already in use within this factory,
            i.e. whether there is a local object or alias registered under this name or
            an inner object created with this name.
            </summary>
            <param name="objectName">Name of the object to check.</param>
            <returns>
            	<c>true</c> if is object name in use; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonLockFor(System.String)">
            <summary>
            Gets the singleton lock for a given object name.
            </summary>
            <param name="objectName">Name of the object.</param>
            <returns>lock object</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.IsCaseSensitive">
            <summary>
            Returns, whether this factory treats object names case sensitive or not.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.ObjectPostProcessors">
            <summary>
            Gets the <see cref="T:Spring.Collections.ISet"/> of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            that will be applied to objects created by this factory.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.IgnoredDependencyTypes">
            <summary>
            Gets the set of classes that will be ignored for autowiring.
            </summary>
            <remarks>
            <p>
            The elements of this <see cref="T:Spring.Collections.ISet"/> are
            <see cref="T:System.Type"/>s.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.HasInstantiationAwareBeanPostProcessors">
            <summary>
            Returns, whether this object factory instance contains <see cref="T:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor"/> objects.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.HasDestructionAwareBeanPostProcessors">
            <summary>
            Returns, whether this object factory instance contains <see cref="T:Spring.Objects.Factory.Config.IDestructionAwareObjectPostProcessor"/> objects.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.TemporarySingletonPlaceHolder">
            <summary>
            Gets the temporary object that is placed 
            into the singleton cache during object resolution.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.DisposableInnerObjects">
            <summary>
            Set that holds all inner objects created by this factory that implement the IDisposable
            interface, to be destroyed on call to Dispose.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.ParentObjectFactory">
            <summary>
            The parent object factory, or <see langword="null"/> if there is none.
            </summary>
            <value>
            The parent object factory, or <see langword="null"/> if there is none.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.Item(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>.
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.ObjectPostProcessorCount">
            <summary>
            Returns the current number of registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </summary>
            <value>
            The current number of registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </value>
            <seealso cref="P:Spring.Objects.Factory.Config.IConfigurableObjectFactory.ObjectPostProcessorCount"/>.
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.SingletonNames">
            <summary>
            Gets the names of singleton objects registered in this registry.
            </summary>
            <value>The list of names as String array (never <code>null</code>).</value>
            <remarks>
            	<para>
            Only checks already instantiated singletons; does not return names
            for singleton bean definitions which have not been instantiated yet.
            </para>
            	<para>
            The main purpose of this method is to check manually registered singletons
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(System.String,System.Object)"/>. Can also be used to check which
            singletons defined by an object definition have already been created.
            </para>
            </remarks>
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(System.String,System.Object)"/>
            <see cref="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetObjectDefinitionNames"/>
            <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.SingletonCount">
            <summary>
            Gets the number of singleton beans registered in this registry.
            </summary>
            <value>The number of singleton objects.</value>
            <remarks>
            	<para>
            Only checks already instantiated singletons; does not count
            singleton object definitions which have not been instantiated yet.
            </para>
            	<para>
            The main purpose of this method is to check manually registered singletons
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(System.String,System.Object)"/>.  Can also be used to count the number of
            singletons defined by an object definition that have already been created.
            </para>
            </remarks>
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(System.String,System.Object)"/>
            <see cref="P:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ObjectDefinitionCount"/>
            <see cref="P:Spring.Objects.Factory.IListableObjectFactory.ObjectDefinitionCount"/>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractObjectFactory.ObjectOrderComparator">
            <summary>
            Makes a distinction between sort order and object identity. 
            This is important when used with <see cref="T:Spring.Collections.ISet"/>, since most
            implementations assume Order == Identity
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ObjectOrderComparator.CompareEqualOrder(System.Object,System.Object)">
            <summary>
            Handle the case when both objects have equal sort order priority. By default returns 0, 
            but may be overriden for handling special cases.
            </summary>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns>
            -1 if first object is less then second, 1 if it is greater, or 0 if they are equal.
            </returns>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.MethodResolutionFlags">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used during the invocation and
            searching for of methods.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.log">
            <summary>
            The <see cref="T:Common.Logging.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
            <param name="caseSensitive">Flag specifying whether to make this object factory case sensitive or not.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.#ctor(System.Boolean,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
            <param name="caseSensitive">Flag specifying whether to make this object factory case sensitive or not.</param>
            <param name="parentFactory">The parent object factory, or <see langword="null"/> if none.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PredictObjectType(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Predict the eventual object type (of the processed object instance) for the
            specified object.
            </summary>
            <param name="objectName">Name of the object.</param>
            <param name="mod">The merged object definition to determine the type for. May be <c>null</c></param>
            <returns>
            The type of the object, or <code>null</code> if not predictable
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.GetTypeForFactoryMethod(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Determines the <see cref="T:System.Type"/> of the object defined
            by the supplied object <paramref name="definition"/>. 
            </summary>
            <param name="objectName">
            The name associated with the supplied object <paramref name="definition"/>.
            </param>
            <param name="definition">
            The <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            that the <see cref="T:System.Type"/> is to be determined for. 
            </param>
            <returns>
            The <see cref="T:System.Type"/> of the object defined by the supplied
            object <paramref name="definition"/>; or <see lang="null"/> if the
            <see cref="T:System.Type"/> cannot be determined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPropertyValues(System.Object,System.String)">
            <summary>
            Apply the property values of the object definition with the supplied
            <paramref name="name"/> to the supplied <paramref name="instance"/>.
            </summary>
            <param name="instance">
            The existing object that the property values for the named object will
            be applied to.
            </param>
            <param name="name">
            The name of the object definition associated with the property values that are
            to be applied.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPropertyValues(System.Object,System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Apply the property values of the object definition with the supplied
            <paramref name="name"/> to the supplied <paramref name="instance"/>.
            </summary>
            <param name="instance">
            The existing object that the property values for the named object will
            be applied to.
            </param>
            <param name="name">
            The name of the object definition associated with the property values that are
            to be applied.
            </param>
            <param name="definition">
            An object definition that should be used to apply property values.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPostProcessorsBeforeInstantiation(System.Type,System.String)">
            <summary>
            Apply any
            <see cref="T:Spring.Objects.Factory.Config.IInstantiationAwareObjectPostProcessor"/>s.
            </summary>
            <remarks>
            <p>
            The returned instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="objectType">
            The <see cref="T:System.Type"/> of the object that is to be
            instantiated.
            </param>
            <param name="objectName">
            The name of the object that is to be instantiated.
            </param>
            <returns>
            An instance to use in place of the original instance.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyPropertyValues(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.IPropertyValues)">
            <summary>
            Apply the given property values, resolving any runtime references
            to other objects in this object factory.
            </summary>
            <param name="name">
            The object name passed for better exception information.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
            <param name="properties">
            The new property values.
            </param>
            <remarks>
            <p>
            Must use deep copy, so that we don't permanently modify this property.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateValueResolver">
            <summary>
            Create the value resolver strategy to use for resolving raw property values
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.UnsatisfiedNonSimpleProperties(Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper)">
            <summary>
            Return an array of object-type property names that are unsatisfied.
            </summary>
            <remarks>
            <p>
            These are probably unsatisfied references to other objects in the
            factory. Does not include simple properties like primitives or
            <see cref="T:System.String"/>s.
            </p>
            </remarks>
            <returns>
            An array of object-type property names that are unsatisfied.
            </returns>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.Dispose">
            <summary>
            Destroy all cached singletons in this factory.
            </summary>
            <remarks>
            <p>
            To be called on shutdown of a factory.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PopulateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper)">
            <summary>
            Populate the object instance in the given
            <see cref="T:Spring.Objects.IObjectWrapper"/> with the property values from the
            object definition.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.WireEvents(System.String,Spring.Objects.Factory.Support.IConfigurableObjectDefinition,Spring.Objects.IObjectWrapper)">
            <summary>
            Wires up any exposed events in the object instance in the given
            <see cref="T:Spring.Objects.IObjectWrapper"/> with any event handler
            values from the <paramref name="definition"/>.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireByName(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.MutablePropertyValues)">
            <summary>
            Fills in any missing property values with references to
            other objects in this factory if autowire is set to
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByName"/>.
            </summary>
            <param name="name">
            The object name to be autowired by <see cref="T:System.Type"/>.
            </param>
            <param name="definition">
            The definition of the named object to update through autowiring.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object (and
            from which we can rip out information concerning the object).
            </param>
            <param name="properties">
            The property values to register wired objects with.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireByType(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.MutablePropertyValues)">
            <summary>
            Defines "autowire by type" (object properties by type) behavior.
            </summary>
            <remarks>
            <p>
            This is like PicoContainer default, in which there must be exactly one object
            of the property type in the object factory. This makes object factories simple
            to configure for small namespaces, but doesn't work as well as standard Spring
            behavior for bigger applications.
            </p>
            </remarks>
            <param name="name">
            The object name to be autowired by <see cref="T:System.Type"/>.
            </param>
            <param name="definition">
            The definition of the named object to update through autowiring.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object (and
            from which we can rip out information concerning the object).
            </param>
            <param name="properties">
            The property values to register wired objects with.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.IgnoreDependencyInterface(System.Type)">
            <summary>
            Ignore the given dependency type for autowiring
            </summary>
            <remarks>
            This will typically be used by application contexts to register
            dependencies that are resolved in other ways, like IOjbectFactory through
            IObjectFactoryAware or IApplicationContext through IApplicationContextAware.
            By default, IObjectFactoryAware and IObjectName interfaces are ignored.
            For further types to ignore, invoke this method for each type.
            </remarks>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.IgnoreDependencyType(System.Type)"/>.
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Create an object instance for the given object definition.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="definition">
            The object definition for the object that is to be instantiated.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-<see langword="null"/> arguments value
            in any other case.
            </param>
            <param name="allowEagerCaching">
            Whether eager caching of singletons is allowed... typically true for
            singlton objects, but never true for inner object definitions.
            </param>
            <param name="suppressConfigure">
            Suppress injecting dependencies yet.
            </param>
            <returns>
            A new instance of the object.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <remarks>
            <p>
            The object definition will already have been merged with the parent
            definition in case of a child definition.
            </p>
            <p>
            All the other methods in this class invoke this method, although objects
            may be cached after being instantiated by this method. All object
            instantiation within this class is performed by this method.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AddEagerlyCachedSingleton(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.Object)">
            <summary>
            Add the created, but yet unpopulated singleton to the singleton cache
            to be able to resolve circular references
            </summary>
            <param name="objectName">the name of the object to add to the cache.</param>
            <param name="objectDefinition">the definition used to create and populated the object.</param>
            <param name="rawSingletonInstance">the raw object instance.</param>
            <remarks>
            Derived classes may override this method to select the right cache based on the object definition.
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.RemoveEagerlyCachedSingleton(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Remove the specified singleton from the singleton cache that has 
            been added before by a call to <see cref="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AddEagerlyCachedSingleton(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.Object)"/>
            </summary>
            <param name="objectName">the name of the object to remove from the cache.</param>
            <param name="objectDefinition">the definition used to create and populated the object.</param>
            <remarks>
            Derived classes may override this method to select the right cache based on the object definition.
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Creates an <see cref="T:Spring.Objects.IObjectWrapper"/> instance from the <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> passed in <paramref name="objectDefinition"/>
            using constructor <paramref name="arguments"/>
            </summary>
            <param name="objectName">The name of the object to create - used for error messages.</param>
            <param name="objectDefinition">The <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> describing the object to be created.</param>
            <param name="arguments">optional arguments to pass to the constructor</param>
            <returns>An <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the already instantiated object</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Instantiates the given object using its default constructor
            </summary>
            <param name="objectName">Name of the object.</param>
            <param name="definition">The definition.</param>
            <returns>IObjectWrapper for the new instance</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DetermineConstructorsFromObjectPostProcessors(System.Type,System.String)">
            <summary>
            Determines candidate constructors to use for the given object, checking all registered
            <see cref="T:Spring.Objects.Factory.Config.SmartInstantiationAwareObjectPostProcessor"/>
            </summary>
            <param name="objectType">Raw type of the object.</param>
            <param name="objectName">Name of the object.</param>
            <returns>the candidate constructors, or <code>null</code> if none specified</returns>
            <exception cref="T:Spring.Objects.ObjectsException">In case of errors</exception>
            <seealso cref="M:Spring.Objects.Factory.Config.SmartInstantiationAwareObjectPostProcessor.DetermineCandidateConstructors(System.Type,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateUsingFactoryMethod(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Instantiate an object instance using a named factory method.
            </summary>
            <remarks>
            <p>
            The method may be static, if the <paramref name="definition"/>
            parameter specifies a class, rather than a
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instance, or an
            instance variable on a factory object itself configured using Dependency
            Injection.
            </p>
            <p>
            Implementation requires iterating over the static or instance methods
            with the name specified in the supplied <paramref name="definition"/>
            (the method may be overloaded) and trying to match with the parameters.
            We don't have the types attached to constructor args, so trial and error
            is the only way to go here.
            </p>
            </remarks>
            <param name="name">
            The name associated with the supplied <paramref name="definition"/>.
            </param>
            <param name="definition">
            The definition describing the instance that is to be instantiated.
            </param>
            <param name="arguments">
            Any arguments to the factory method that is to be invoked.
            </param>
            <returns>
            The result of the factory method invocation (the instance).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireConstructor(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Reflection.ConstructorInfo[],System.Object[])">
            <summary>
            "autowire constructor" (with constructor arguments by type) behaviour.
            </summary>
            <param name="name">The name of the object to autowire by type.</param>
            <param name="definition">The object definition to update through autowiring.</param>
            <param name="ctors">The chosen candidate constructors.</param>
            <param name="explicitArgs">The argument values passed in programmatically via the GetObject method,
            or <code>null</code> if none (-&gt; use constructor argument values from object definition)</param>
            <returns>
            An <see cref="T:Spring.Objects.IObjectWrapper"/> for the new instance.
            </returns>
            <remarks>
            <para>
            Also applied if explicit constructor argument values are specified,
            matching all remaining arguments with objects from the object factory.
            </para>
            <para>
            This corresponds to constructor injection: in this mode, a Spring.NET
            object factory is able to host components that expect constructor-based
            dependency resolution.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DependencyCheck(System.String,Spring.Objects.Factory.Support.IConfigurableObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.IPropertyValues)">
            <summary>
            Perform a dependency check that all properties exposed have been set, if desired.
            </summary>
            <remarks>
            <p>
            Dependency checks can be objects (collaborating objects), simple (primitives
            and <see cref="T:System.String"/>), or all (both).
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
            <param name="properties">
            The property values to be checked.
            </param>
            <exception cref="T:Spring.Objects.Factory.UnsatisfiedDependencyException">
            If all of the checked dependencies were not satisfied.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.FilterPropertyInfoForDependencyCheck(Spring.Objects.IObjectWrapper)">
            <summary>
            Extract a filtered set of PropertyInfos from the given IObjectWrapper, excluding
            ignored dependency types.
            </summary>
            <param name="wrapper">The object wrapper the object was created with.</param>
            <returns>The filtered PropertyInfos</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.IsExcludedFromDependencyCheck(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether the given bean property is excluded from dependency checks.
            This implementation excludes properties whose type matches an ignored dependency type
            or which are defined by an ignored dependency interface.
            </summary>
            <seealso cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IgnoreDependencyType(System.Type)"/>
            <seealso cref="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.IgnoreDependencyInterface(System.Type)"/>
            <param name="property">the <see cref="T:System.Reflection.PropertyInfo"/> of the object property</param>
            <returns>whether the object property is excluded</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InvokeInitMethods(System.Object,System.String,Spring.Objects.Factory.Support.IConfigurableObjectDefinition)">
            <summary>
            Give an object a chance to react now all its properties are set,
            and a chance to know about its owning object factory (this object).
            </summary>
            <remarks>
            <p>
            This means checking whether the object implements
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/> and  / or
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>, and invoking the
            necessary callback(s) if it does.
            </p>
            <p>
            Custom init methods are resolved in a <b>case-insensitive</b> manner.
            </p>
            </remarks>
            <param name="target">
            The new object instance we may need to initialise.
            </param>
            <param name="name">
            The name the object has in the factory. Used for logging output.
            </param>
            <param name="definition">
            The definition of the target object instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InvokeCustomDestroyMethod(System.String,System.Object,System.String)">
            <summary>
            Invoke the specified custom destroy method on the given object.
            </summary>
            <remarks>
            <p>
            This implementation invokes a no-arg method if found, else checking
            for a method with a single boolean argument (passing in "true",
            assuming a "force" parameter), else logging an error.
            </p>
            <p>
            Can be overridden in subclasses for custom resolution of destroy
            methods with arguments.
            </p>
            <p>
            Custom destroy methods are resolved in a <b>case-insensitive</b> manner.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DestroyObject(System.String,System.Object)">
            <summary>
            Destroy the target object.
            </summary>
            <remarks>
            <p>
            Must destroy objects that depend on the given object before the object itself.
            Should not throw any exceptions.
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="target">
            The target object instance to destroyed.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DestroyDependantObjects(System.String)">
            <summary>
            Destroys all of the objects registered as dependant on the 
            object (definition) identified by the supplied <paramref name="name"/>. 
            </summary>
            <param name="name">
            The name of the root object (definition) that is itself being destroyed.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveReference(Spring.Objects.Factory.Support.IConfigurableObjectDefinition,System.String,System.String,Spring.Objects.Factory.Config.RuntimeObjectReference)">
            <summary>
            Resolve a reference to another object in the factory.
            </summary>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="reference">
            The runtime reference containing the value of the property.
            </param>
            <returns>A reference to another object in the factory.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.FindMatchingObjects(System.Type)">
            <summary>
            Find object instances that match the required <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <p>
            Called by autowiring. If a subclass cannot obtain information about object
            names by <see cref="T:System.Type"/>, a corresponding exception should be thrown.
            </p>
            </remarks>
            <param name="requiredType">
            The <see cref="T:System.Type"/> of the objects to look up.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> of object names and object
            instances that match the required <see cref="T:System.Type"/>, or
            <see langword="null"/> if none are found.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.GetDependingObjectNames(System.String)">
            <summary>
            Return the names of the objects that depend on the given object.
            Called by DestroyObject, to be able to destroy depending objects first.
            </summary>
            <param name="name">
            The name of the object to find depending objects for.
            </param>
            <returns>
            The array of names of depending objects, or the empty string array if none.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ConfigureObject(System.Object,System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the supplied <paramref name="definition"/>.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <param name="definition">
            An object definition that should be used to configure object.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ConfigureObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper)">
            <summary>
            Configures object instance by injecting dependencies, satisfying Spring lifecycle
            interfaces and applying object post-processors.
            </summary>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <param name="definition">
            An object definition that should be used to configure object.
            </param>
            <param name="wrapper">
            A wrapped object instance that is to be so configured.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PostProcessObjectFromFactoryObject(System.Object,System.String)">
            <summary>
            Applies the <code>PostProcessAfterInitialization</code> callback of all
            registered IObjectPostProcessors, giving them a chance to post-process
            the object obtained from IFactoryObjects (for example, to auto-proxy them)
            </summary>
            <param name="instance">The instance obtained from the IFactoryObject.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The object instance to expose</returns>
            <exception cref="T:Spring.Objects.ObjectsException">if any post-processing failed.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.Autowire(System.Type,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Create a new object instance of the given class with the specified
            autowire strategy.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for objects (not applicable to
            autowiring a constructor, thus ignored there).
            </param>
            <returns>The new object instance.</returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireObjectProperties(System.Object,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Autowire the object properties of the given object instance by name or
            <see cref="T:System.Type"/>.
            </summary>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for the object.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="autowireMode"/> is not one of the
            <seealso cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByName"/> or
            <seealso cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByType"/>
            values.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPostProcessorsBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPostProcessorsAfterInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveDependency(Spring.Objects.Factory.Config.DependencyDescriptor,System.String,System.Collections.IList)">
            <summary>
            Resolve the specified dependency against the objects defined in this factory.
            </summary>
            <param name="descriptor">The descriptor for the dependency.</param>
            <param name="objectName">Name of the object which declares the present dependency.</param>
            <param name="autowiredObjectNames">A list that all names of autowired object (used for
            resolving the present dependency) are supposed to be added to.</param>
            <returns>
            the resolved object, or <code>null</code> if none found
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">if dependency resolution failed</exception>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.filteredPropertyDescriptorsCache">
            <summary>
            Cache of filtered PropertyInfos: object Type -> PropertyInfo array 
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ignoredDependencyInterfaces">
            <summary>
            Dependency interfaces to ignore on dependency check and autowire, as Set of
            Class objects. By default, only the IObjectFactoryAware and IObjectNameAware 
            interfaces are ignored.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiationStrategy">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Support.IInstantiationStrategy"/>
            implementation to be used to instantiate managed objects.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractMethodReplacer">
            <summary>
            An <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            implementation that provides some convenience support for
            derived classes.
            </summary>
            <remarks>
            <p>
            This class is reserved for internal use within the framework; it is
            not intended to be used by application developers using Spring.NET.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IMethodReplacer">
            <summary>
            Permits the (re)implementation of an arbitrary method on a Spring.NET
            IoC container managed object.
            </summary>
            <remarks>
            <p>
            Encapsulates the notion of the Method-Injection form of Dependency
            Injection.
            </p>
            <p>
            Methods that are dependency injected with implementations of this
            interface may be (but need not be) <see lang="abstract"/>, in which
            case the container will create a concrete subclass of the
            <see lang="abstract"/> class prior to instantiation.
            </p>
            <p>
            Do <b>not</b> use this mechanism as a means of AOP. See the reference
            manual for examples of appropriate usages of this interface.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IMethodReplacer.Implement(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Reimplement the supplied <paramref name="method"/>.
            </summary>
            <param name="target">
            The instance whose <paramref name="method"/> is to be
            (re)implemented.
            </param>
            <param name="method">
            The method that is to be (re)implemented.
            </param>
            <param name="arguments">The target method's arguments.</param>
            <returns>
            The result of the (re)implementation of the method call.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractMethodReplacer.#ctor(Spring.Objects.Factory.Support.IConfigurableObjectDefinition,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:System.ArgumentNullException"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see lang="abstract"/> class, and as such has no
            publicly visible constructors.
            </p>
            </remarks>
            <param name="objectDefinition">
            The object definition that is the target of the method replacement.
            </param>
            <param name="objectFactory">
            The enclosing IoC container with which the above
            <paramref name="objectDefinition"/> is associated.
            </param>
            <exception cref="T:Spring.Objects.Factory.Support.AbstractMethodReplacer">
            If either of the supplied arguments is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractMethodReplacer.Implement(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Is <see lang="abstract"/>; derived classes must supply an implementation.
            </summary>
            <param name="target">
            The instance whose <paramref name="method"/> is to be
            (re)implemented.
            </param>
            <param name="method">
            The method that is to be (re)implemented.
            </param>
            <param name="arguments">The target method's arguments.</param>
            <returns>The result of the object lookup.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractMethodReplacer.GetOverride(System.Reflection.MethodInfo)">
            <summary>
            Helper method for subclasses to retrieve the appropriate
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/> for the
            supplied <paramref name="method"/>.  
            </summary>
            <param name="method">
            The <see cref="T:System.Reflection.MethodInfo"/> to use to retrieve
            the appropriate
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>.
            </param>
            <returns>
            The appropriate
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractMethodReplacer.GetObject(System.String)">
            <summary>
            Helper method for subclasses to lookup an object from an enclosing
            IoC container.
            </summary>
            <param name="objectName">
            The name of the object that is to be looked up.
            </param>
            <returns>
            The named object.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractObjectDefinition">
            <summary>
            Common base class for object definitions, factoring out common
            functionality from
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IConfigurableObjectDefinition">
            <summary>
            Describes a configurable object instance, which has property values,
            constructor argument values, and further information supplied by concrete
            implementations.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.PropertyValues">
            <summary>
            Return the property values to be applied to a new instance of the object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.ConstructorArgumentValues">
            <summary>
            Return the constructor argument values for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.MethodOverrides">
            <summary>
            The method overrides (if any) for this object.
            </summary>
            <value>
            The method overrides (if any) for this object; may be an
            empty collection but is guaranteed not to be
            <see langword="null"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.EventHandlerValues">
            <summary>
            Return the event handlers for any events exposed by this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.Role">
            <summary>
            Get or set the role hint for this object definition
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.ResourceDescription">
            <summary>
            Return a description of the resource that this object definition
            came from (for the purpose of showing context in case of errors).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.IsAbstract">
            <summary>
            Is this object definition "abstract", i.e. not meant to be instantiated
            itself but rather just serving as parent for concrete child object
            definitions.
            </summary>
            <value>
            <see langword="true"/> if this object definition is "abstract".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.ObjectType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
            <value>
            A resolved object <see cref="T:System.Type"/>.
            </value>
            <exception cref="T:System.ApplicationException">
            If the <see cref="T:System.Type"/> of the object definition is not a
            resolved <see cref="T:System.Type"/> or <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.ObjectTypeName">
            <summary>
            Returns the <see cref="P:System.Type.FullName"/> of the
            <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.IsSingleton">
            <summary>
            Return whether this a <b>Singleton</b>, with a single, shared instance
            returned on all calls.
            </summary>
            <remarks>
            <p>
            If <see langword="false"/>, an object factory will apply the <b>Prototype</b>
            design pattern, with each caller requesting an instance getting an
            independent instance. How this is defined will depend on the
            object factory implementation. <b>Singletons</b> are the commoner type.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.IsLazyInit">
            <summary>
            Is this object lazily initialized?</summary>
            <remarks>
            <p>
            Only applicable to a singleton object.
            </p>
            <p>
            If <see langword="false"/>, it will get instantiated on startup by object factories
            that perform eager initialization of singletons.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.AutowireMode">
            <summary>
            The autowire mode as specified in the object definition.
            </summary>
            <remarks>
            <p>
            This determines whether any automagical detection and setting of
            object references will happen. Default is
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.No"/>,
            which means there's no autowire.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.DependencyCheck">
            <summary>
            The dependency check code.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.DependsOn">
            <summary>
            The object names that this object depends on.
            </summary>
            <remarks>
            <p>
            The object factory will guarantee that these objects get initialized
            before.
            </p>
            <p>
            Note that dependencies are normally expressed through object properties
            or constructor arguments. This property should just be necessary for
            other kinds of dependencies like statics (*ugh*) or database
            preparation on startup.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.InitMethodName">
            <summary>
            The name of the initializer method.
            </summary>
            <remarks>
            <p>
            The default is <see langword="null"/>, in which case there is no initializer method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.DestroyMethodName">
            <summary>
            Return the name of the destroy method.
            </summary>
            <remarks>
            <p>
            The default is <see langword="null"/>, in which case there is no destroy method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.FactoryMethodName">
            <summary>
            The name of the factory method to use (if any).
            </summary>
            <remarks>
            <p>
            This method will be invoked with constructor arguments, or with no
            arguments if none are specified. The static method will be invoked on
            the specified <see cref="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectType"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.FactoryObjectName">
            <summary>
            The name of the factory object to use (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IConfigurableObjectDefinition.IsAutowireCandidate">
            <summary>
            Gets or sets a value indicating whether this instance a candidate for getting autowired into some other
            object.
            </summary>
            <value>
            	<c>true</c> if this instance is autowire candidate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.#ctor(Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.#ctor(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            class.
            </summary>
            <param name="other">
            The object definition used to initialise the member fields of this
            instance.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.ResolveObjectType">
            <summary>
            Resolves the type of the object, resolving it from a specified
            object type name if necessary. 
            </summary>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.Validate">
            <summary>
            Validate this object definition.
            </summary>
            <exception cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            In the case of a validation failure.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.PrepareMethodOverrides">
            <summary>
            Validates all <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.MethodOverrides"/> 
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.PrepareMethodOverride(Spring.Objects.Factory.Support.MethodOverride)">
            <summary>
            Validate the supplied <paramref name="methodOverride"/>.
            </summary>
            <param name="methodOverride">
            The <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>
            to be validated.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.OverrideFrom(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Override settings in this object definition from the supplied
            <paramref name="other"/> object definition.
            </summary>
            <param name="other">
            The object definition used to override the member fields of this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>. 
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>. 
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ParentName">
            <summary>
            The name of the parent definition of this object definition, if any.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.PropertyValues">
            <summary>
            The property values that are to be applied to the object
            upon creation.
            </summary>
            <remarks>
            <p>
            Setting the value of this property to <see langword="null"/>
            will merely result in a new (and empty)
            <see cref="T:Spring.Objects.MutablePropertyValues"/>
            collection being assigned to the property value.
            </p>
            </remarks>
            <value>
            The property values (if any) for this object; may be an
            empty collection but is guaranteed not to be
            <see langword="null"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasMethodOverrides">
            <summary>
            Does this definition have any
            <see cref="T:Spring.Objects.Factory.Support.MethodOverrides"/>?
            </summary>
            <value>
            <see langword="true"/> if this definition has at least one
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ConstructorArgumentValues">
            <summary>
            The constructor argument values for this object.
            </summary>
            <remarks>
            <p>
            Setting the value of this property to <see langword="null"/>
            will merely result in a new (and empty)
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            collection being assigned.
            </p>
            </remarks>
            <value>
            The constructor argument values (if any) for this object; may be an
            empty collection but is guaranteed not to be
            <see langword="null"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.EventHandlerValues">
            <summary>
            The event handler values for this object.
            </summary>
            <remarks>
            <p>
            Setting the value of this property to <see langword="null"/>
            will merely result in a new (and empty)
            <see cref="T:Spring.Objects.Factory.Config.EventValues"/>
            collection being assigned.
            </p>
            </remarks>
            <value>
            The event handler values (if any) for this object; may be an
            empty collection but is guaranteed not to be
            <see langword="null"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.MethodOverrides">
            <summary>
            The method overrides (if any) for this object.
            </summary>
            <remarks>
            <p>
            Setting the value of this property to <see langword="null"/>
            will merely result in a new (and empty)
            <see cref="T:Spring.Objects.Factory.Support.MethodOverrides"/>
            collection being assigned to the property value.
            </p>
            </remarks>
            <value>
            The method overrides (if any) for this object; may be an
            empty collection but is guaranteed not to be
            <see langword="null"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.Scope">
            <summary>
            The name of the target scope for the object.
            Defaults to "singleton", ootb alternative is "prototype". Extended object factories
            might support further scopes.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.Role">
            <summary>
            Get or set the role hint for this object definition
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsSingleton">
            <summary>
            Is this definition a <b>singleton</b>, with
            a single, shared instance returned on all calls to an enclosing
            container (typically an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> or
            <see cref="T:Spring.Context.IApplicationContext"/>).
            </summary>
            <remarks>
            <p>
            If <see langword="false"/>, an object factory will apply the
            <b>prototype</b> design pattern, with each caller requesting an
            instance getting an independent instance. How this is defined
            will depend on the object factory implementation. <b>singletons</b>
            are the commoner type.
            </p>
            </remarks>
            <seealso cref="T:Spring.Objects.Factory.IObjectFactory"/>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsPrototype">
            <summary>
            Gets a value indicating whether this instance is prototype, with an independent instance
            returned for each call.
            </summary>
            <value>
            	<c>true</c> if this instance is prototype; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsLazyInit">
            <summary>
            Is this object lazily initialized?</summary>
            <remarks>
            <p>
            Only applicable to a singleton object.
            </p>
            <p>
            If <see langword="false"/>, it will get instantiated on startup
            by object factories that perform eager initialization of
            singletons.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsTemplate">
            <summary>
            Is this object definition a "template", i.e. not meant to be instantiated
            itself but rather just serving as an object definition for configuration 
            templates used by <see cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>.
            </summary>
            <value>
            <see langword="true"/> if this object definition is a "template".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsAbstract">
            <summary>
            Is this object definition "abstract", i.e. not meant to be
            instantiated itself but rather just serving as a parent for concrete
            child object definitions.
            </summary>
            <value>
            <see langword="true"/> if this object definition is "abstract".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
            <value>
            A resolved object <see cref="T:System.Type"/>.
            </value>
            <exception cref="T:System.ApplicationException">
            If the <see cref="T:System.Type"/> of the object definition is not a
            resolved <see cref="T:System.Type"/> or <see langword="null"/>.
            </exception>
            <seealso cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasObjectType"/>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasObjectType">
            <summary>
            Is the <see cref="T:System.Type"/> of the object definition a resolved
            <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectTypeName">
            <summary>
            Returns the <see cref="P:System.Type.FullName"/> of the
            <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ResourceDescription">
            <summary>
            A description of the resource that this object definition
            came from (for the purpose of showing context in case of errors).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.AutowireMode">
            <summary>
            The autowire mode as specified in the object definition.
            </summary>
            <remarks>
            <p>
            This determines whether any automagical detection and setting of
            object references will happen. The default is
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.No"/>,
            which means that no autowiring will be performed.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ResolvedAutowireMode">
            <summary>
            Gets the resolved autowire mode.
            </summary>
            <remarks>
            <p>
            This resolves
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.AutoDetect"/>
            to one of 
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.Constructor"/>
            or
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByType"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DependencyCheck">
            <summary>
            The dependency checking mode.
            </summary>
            <remarks>
            <p>
            The default is
            <see cref="F:Spring.Objects.Factory.Support.DependencyCheckingMode.None"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DependsOn">
            <summary>
            The object names that this object depends on.
            </summary>
            <remarks>
            <p>
            The object factory will guarantee that these objects get initialized
            before this object definition.
            </p>
            <note>
            Dependencies are normally expressed through object properties
            or constructor arguments. This property should just be necessary for
            other kinds of dependencies such as statics (*ugh*) or database
            preparation on startup.
            </note>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsAutowireCandidate">
            <summary>
            Gets or sets a value indicating whether this instance a candidate for getting autowired into some other
            object.
            </summary>
            <value>
            	<c>true</c> if this instance is autowire candidate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.InitMethodName">
            <summary>
            The name of the initializer method.
            </summary>
            <remarks>
            <p>
            The default value is the <see cref="F:System.String.Empty"/> constant,
            in which case there is no initializer method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DestroyMethodName">
            <summary>
            Return the name of the destroy method.
            </summary>
            <remarks>
            <p>
            The default value is the <see cref="F:System.String.Empty"/> constant,
            in which case there is no destroy method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.FactoryMethodName">
            <summary>
            The name of the factory method to use (if any).
            </summary>
            <remarks>
            <p>
            This method will be invoked with constructor arguments, or with no
            arguments if none are specified. The <see langword="static"/>
            method will be invoked on the specified
            <see cref="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectType"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.FactoryObjectName">
            <summary>
            The name of the factory object to use (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasConstructorArgumentValues">
            <summary>
            Does this object definition have any constructor argument values?
            </summary>
            <value>
            <see langword="true"/> if his object definition has at least one
            element in it's
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ConstructorArgumentValues"/>
            property.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader">
            <summary>
            Abstract base class for object definition readers.
            </summary>
            <remarks>
            <p>
            Provides common properties like the object registry to work on.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IObjectDefinitionReader">
            <summary>
            Simple interface for object definition readers.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions found
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource[])">
            <summary>
            Load object definitions from the supplied <paramref name="resources"/>.
            </summary>
            <param name="resources">
            The resources for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions found
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionReader.LoadObjectDefinitions(System.String)">
            <summary>
            Loads the object definitions from the specified resource location.
            </summary>
            <param name="location">The resource location, to be loaded with the 
            IResourceLoader location .</param>
            <returns>
            The number of object definitions found        
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionReader.LoadObjectDefinitions(System.String[])">
            <summary>
            Loads the object definitions from the specified resource locations.
            </summary>
            <param name="locations">The the resource locations to be loaded with the
            IResourceLoader of this object definition reader.</param>
            <returns>
            The number of object definitions found        
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionReader.Registry">
            <summary>
            Gets the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionReader.Domain">
            <summary>
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionReader.ObjectNameGenerator">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Support.IObjectNameGenerator"/> to use for anonymous
            objects (wihtout explicit object name specified).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionReader.ResourceLoader">
            <summary>
            Gets the resource loader to use for resource locations.
            </summary>
            <remarks>There is also a <see cref="M:Spring.Objects.Factory.Support.IObjectDefinitionReader.LoadObjectDefinitions(System.String)"/> method
            available for loading object definitions from a resource location.  This is
            a convenience to avoid explicit ResourceLoader handling.</remarks>
            <value>The resource loader.</value>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.log">
            <summary>
            The <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader"/>
            class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry,System.AppDomain)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader"/>
            class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <param name="domain">
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource[])">
            <summary>
            Load object definitions from the supplied <paramref name="resources"/>.
            </summary>
            <param name="resources">
            The resources for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions found
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(System.String)">
            <summary>
            Loads the object definitions from the specified resource location.
            </summary>
            <param name="location">The resource location, to be loaded with the 
            IResourceLoader location .</param>
            <returns>
            The number of object definitions found        
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(System.String[])">
            <summary>
            Loads the object definitions from the specified resource locations.
            </summary>
            <param name="locations">The the resource locations to be loaded with the
            IResourceLoader of this object definition reader.</param>
            <returns>
            The number of object definitions found        
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.Registry">
            <summary>
            Gets the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.ObjectNameGenerator">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Support.IObjectNameGenerator"/> to use for anonymous
            objects (wihtout explicit object name specified).
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.Domain">
            <summary>
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.ResourceLoader">
            <summary>
            Gets or sets the resource loader to use for resource locations.
            </summary>
            <value>The resource loader.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AutowireUtils">
            <summary>
            Utility class that contains various methods useful for the implementation of
            autowire-capable object factories.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.#ctor">
            <summary>
            Creates a new instance of the AutowireUtils class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.GetConstructors(Spring.Objects.Factory.Config.IObjectDefinition,System.Int32)">
            <summary>
            Gets those <see cref="T:System.Reflection.ConstructorInfo"/>s
            that are applicable for autowiring the supplied <paramref name="definition"/>.
            </summary>
            <param name="definition">
            The <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>
            (definition) that is being autowired by constructor.
            </param>
            <param name="minimumArgumentCount">
            The absolute minimum number of arguments that any returned constructor
            must have. If this parameter is equal to zero (0), then all constructors
            are valid (regardless of their argument count), including any default
            constructor.
            </param>
            <returns>
            Those <see cref="T:System.Reflection.ConstructorInfo"/>s
            that are applicable for autowiring the supplied <paramref name="definition"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.GetTypeDifferenceWeightOld(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Determine a weight that represents the class hierarchy difference between types and
            arguments.
            </summary>
            <remarks>
            <p>
            A direct match, i.e. type MyInteger -&gt; arg of class MyInteger, does not increase
            the result - all direct matches means weight zero (0). A match between the argument type
            <see cref="T:System.Object"/> and a MyInteger instance argument would increase the weight by
            1, due to the superclass (<see cref="T:System.Object"/>) being one (1) steps up in the
            class hierarchy being the last one that still matches the required type.
            </p>
            <p>
            Therefore, with an argument of type <see cref="T:System.Collections.Hashtable"/>, a
            constructor taking a <see cref="T:System.Collections.Hashtable"/> argument would be
            preferred to a constructor taking an <see cref="T:System.Collections.IDictionary"/> argument
            which would be preferred to a constructor taking an
            <see cref="T:System.Collections.ICollection"/> argument which would in turn be preferred
            to a constructor taking an <see cref="T:System.Object"/> argument.
            </p>
            <p>
            All argument weights get accumulated.
            </p>
            </remarks>
            <param name="argTypes">
            The argument <see cref="T:System.Type"/>s to match.
            </param>
            <param name="args">The arguments to match.</param>
            <returns>The accumulated weight for all arguments.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.GetTypeDifferenceWeight(System.Type[],System.Object[])">
            <summary>
            Algorithm that judges the match between the declared parameter types of a candidate method
            and a specific list of arguments that this method is supposed to be invoked with.
            </summary>
            <remarks>
            Determines a weight that represents the class hierarchy difference between types and
            arguments.  The following a an example based on the Java class hierarchy for Integer.    
            A direct match, i.e. type Integer -> arg of class Integer, does not increase
            the result - all direct matches means weight 0. A match between type Object and arg of
            class Integer would increase the weight by 2, due to the superclass 2 steps up in the
            hierarchy (i.e. Object) being the last one that still matches the required type Object.
            Type Number and class Integer would increase the weight by 1 accordingly, due to the
            superclass 1 step up the hierarchy (i.e. Number) still matching the required type Number.
            Therefore, with an arg of type Integer, a constructor (Integer) would be preferred to a
            constructor (Number) which would in turn be preferred to a constructor (Object).
            All argument weights get accumulated.
            </remarks>
            <param name="paramTypes">The param types.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.IsExcludedFromDependencyCheck(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the given object property is excluded from dependency checks.
            </summary>
            <param name="pi">The PropertyInfo of the object property.</param>
            <returns>
            	<c>true</c> if is excluded from dependency check; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.SortConstructors(System.Reflection.ConstructorInfo[])">
            <summary>
            Sorts the supplied <paramref name="constructors"/>, preferring
            public constructors and "greedy" ones (that have lots of arguments).
            </summary>
            <remarks>
            <p>
            The result will contain public constructors first, with a decreasing number
            of arguments, then non-public constructors, again with a decreasing number
            of arguments.
            </p>
            </remarks>
            <param name="constructors">
            The <see cref="T:System.Reflection.ConstructorInfo"/> array to be sorted.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.IsSetterDefinedInInterface(System.Reflection.PropertyInfo,Spring.Collections.ISet)">
            <summary>
            Determines whether the setter property is defined in any of the given interfaces.
            </summary>
            <param name="propertyInfo">The PropertyInfo of the object property</param>
            <param name="interfaces">The ISet of interfaces.</param>
            <returns>
            	<c>true</c> if setter property is defined in interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.CreateAutowireCandidateResolver">
            <summary>
            Creates the autowire candidate resolver.
            </summary>
            <returns>A SimpleAutowireCandidateResolver</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.GetUnsatisfiedDependencies(System.Reflection.PropertyInfo[],Spring.Objects.IPropertyValues,Spring.Objects.Factory.Support.DependencyCheckingMode)">
            <summary>
            Returns the list of <paramref name="propertyInfos"/> that are not satisfied by <paramref name="properties"/>.
            </summary>
            <returns>the filtered list. Is never <c>null</c></returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ChildObjectDefinition">
            <summary>
            Object definition for definitions that inherit settings from their
            parent (object definition).
            </summary>
            <remarks>
            <p>
            Will use the <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectType"/>
            of the parent object definition if none is specified, but can also
            override it. In the latter case, the child's
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectType"/>
            must be compatible with the parent, i.e. accept the parent's property values
            and constructor argument values (if any).
            </p>
            <p>
            A <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/> will
            inherit all of the <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>,
            <see cref="T:Spring.Objects.IPropertyValues"/>, and
            <see cref="T:Spring.Objects.Factory.Config.EventValues"/> from it's parent
            object definition, with the option to add new values. If the
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.InitMethodName"/>,
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DestroyMethodName"/>,
            and / or <see langword="static"/>
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.FactoryMethodName"/>
            properties are specified, they will override the corresponding parent settings.
            </p>
            <p>
            The remaining settings will <i>always</i> be taken from the child definition:
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DependsOn"/>,
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.AutowireMode"/>,
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DependencyCheck"/>,
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsSingleton"/>,
            and
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsLazyInit"/>
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,System.Type,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="type">
            The class of the object to instantiate.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="typeName">
            The <see cref="P:System.Type.AssemblyQualifiedName"/> of the object to
            instantiate.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.Validate">
            <summary>
            Validate this object definition.
            </summary>
            <remarks>
            <p>
            A common cause of validation failures is a missing value for the
            <see cref="P:Spring.Objects.Factory.Support.ChildObjectDefinition.ParentName"/>
            property; <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/> by
            their very nature <b>require</b> that the
            <see cref="P:Spring.Objects.Factory.Support.ChildObjectDefinition.ParentName"/>
            be set.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            In the case of a validation failure.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ChildObjectDefinition.ParentName">
            <summary>
            The name of the parent object definition.
            </summary>
            <remarks>
            This value is <b>required</b>.
            </remarks>
            <value>
            The name of the parent object definition.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ConstructorResolver">
            <summary>
            Helper class for resolving constructors and factory methods.  
            Performs constructor resolution through argument matching.
            </summary>
            <remarks>
            Operates on a <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/> and an <see cref="T:Spring.Objects.Factory.Support.IInstantiationStrategy"/>.
            Used by <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ConstructorResolver.#ctor(Spring.Objects.Factory.Support.AbstractObjectFactory,Spring.Objects.Factory.Config.IAutowireCapableObjectFactory,Spring.Objects.Factory.Support.IInstantiationStrategy,Spring.Objects.Factory.Support.ObjectDefinitionValueResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Support.ConstructorResolver"/> class for the given factory
            and instantiation strategy.
            </summary>
            <param name="objectFactory">The object factory to work with.</param>
            <param name="autowireFactory">The object factory as IAutowireCapableObjectFactory.</param>
            <param name="instantiationStrategy">The instantiation strategy for creating objects.</param>
            <param name="valueResolver">the resolver to resolve property value placeholders if any</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Reflection.ConstructorInfo[],System.Object[])">
            <summary>
            "autowire constructor" (with constructor arguments by type) behavior.  
            Also applied if explicit constructor argument values are specified,
            matching all remaining arguments with objects from the object factory.
            </summary>
            <para>
            This corresponds to constructor injection: In this mode, a Spring
            object factory is able to host components that expect constructor-based
            dependency resolution.
            </para>
            <param name="objectName">Name of the object.</param>
            <param name="rod">The merged object definition for the object.</param>
            <param name="chosenCtors">The chosen chosen candidate constructors (or <code>null</code> if none).</param>
            <param name="explicitArgs">The explicit argument values passed in programmatically via the getBean method,
            or <code>null</code> if none (-> use constructor argument values from object definition)</param>
            <returns>An IObjectWrapper for the new instance</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ConstructorResolver.GetConstructorInstantiationInfo(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Reflection.ConstructorInfo[],System.Object[])">
            <summary>
            Gets the constructor instantiation info given the object definition.
            </summary>
            <param name="objectName">Name of the object.</param>
            <param name="rod">The RootObjectDefinition</param>
            <param name="chosenCtors">The explicitly chosen ctors.</param>
            <param name="explicitArgs">The explicit chose ctor args.</param>
            <returns>A ConstructorInstantiationInfo containg the specified constructor in the RootObjectDefinition or
            one based on type matching.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ConstructorResolver.InstantiateUsingFactoryMethod(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Instantiate an object instance using a named factory method.
            </summary>
            <remarks>
            <p>
            The method may be static, if the <paramref name="definition"/>
            parameter specifies a class, rather than a
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instance, or an
            instance variable on a factory object itself configured using Dependency
            Injection.
            </p>
            <p>
            Implementation requires iterating over the static or instance methods
            with the name specified in the supplied <paramref name="definition"/>
            (the method may be overloaded) and trying to match with the parameters.
            We don't have the types attached to constructor args, so trial and error
            is the only way to go here.
            </p>
            </remarks>
            <param name="name">
            The name associated with the supplied <paramref name="definition"/>.
            </param>
            <param name="definition">
            The definition describing the instance that is to be instantiated.
            </param>
            <param name="arguments">
            Any arguments to the factory method that is to be invoked.
            </param>
            <returns>
            The result of the factory method invocation (the instance).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ConstructorResolver.CreateArgumentArray(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.ObjectWrapper,System.Type[],System.Reflection.MethodBase,System.Boolean,Spring.Objects.Factory.Support.UnsatisfiedDependencyExceptionData@)">
            <summary>
            Create an array of arguments to invoke a constructor or static factory method,
            given the resolved constructor arguments values.
            </summary>
            <remarks>When return value is null the out parameter UnsatisfiedDependencyExceptionData will contain
            information for use in throwing a UnsatisfiedDependencyException by the caller.  This avoids using
            exceptions for flow control as in the original implementation.</remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ConstructorResolver.ResolveConstructorArguments(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.ObjectWrapper,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.Factory.Config.ConstructorArgumentValues)">
            <summary>
            Resolves the <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            of the supplied <paramref name="definition"/>.
            </summary>
            <param name="objectName">The name of the object that is being resolved by this factory.</param>
            <param name="definition">The rod.</param>
            <param name="wrapper">The wrapper.</param>
            <param name="cargs">The cargs.</param>
            <param name="resolvedValues">Where the resolved constructor arguments will be placed.</param>
            <returns>
            The minimum number of arguments that any constructor for the supplied
            <paramref name="definition"/> must have.
            </returns>
            <remarks>
            	<p>
            'Resolve' can be taken to mean that all of the <paramref name="definition"/>s
            constructor arguments is resolved into a concrete object that can be plugged
            into one of the <paramref name="definition"/>s constructors. Runtime object
            references to other objects in this (or a parent) factory are resolved,
            type conversion is performed, etc.
            </p>
            	<p>
            These resolved values are plugged into the supplied
            <paramref name="resolvedValues"/> object, because we wouldn't want to touch
            the <paramref name="definition"/>s constructor arguments in case it (or any of
            its constructor arguments) is a prototype object definition.
            </p>
            	<p>
            This method is also used for handling invocations of static factory methods.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ConstructorResolver.FindMethods(System.String,System.Int32,System.Boolean,System.Type)">
            <summary>
            Returns an array of all of those
            <see cref="T:System.Reflection.MethodInfo">methods</see> exposed on the
            <paramref name="searchType"/> that match the supplied criteria.
            </summary>
            <param name="methodName">
            Methods that have this name (can be in the form of a regular expression).
            </param>
            <param name="expectedArgumentCount">
            Methods that have exactly this many arguments.
            </param>
            <param name="isStatic">
            Methods that are static / instance.
            </param>
            <param name="searchType">
            The <see cref="T:System.Type"/> on which the methods (if any) are to be found.
            </param>
            <returns>
            An array of all of those
            <see cref="T:System.Reflection.MethodInfo">methods</see> exposed on the
            <paramref name="searchType"/> that match the supplied criteria.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory">
            <summary>
            Concrete implementation of the
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/> and
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            interfaces.
            </summary>
            <remarks>
            <p>
            This class is a full-fledged object factory based on object definitions
            that is usable straight out of the box.
            </p>
            <p>
            Can be used as an object factory in and of itself, or as a superclass
            for custom object factory implementations. Note that readers for
            specific object definition formats are typically implemented separately
            rather than as object factory subclasses.
            </p>
            <p>
            For an alternative implementation of the
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/> interface,
            have a look at the
            <see cref="T:Spring.Objects.Factory.Support.StaticListableObjectFactory"/>
            class, which manages existing object instances rather than creating new
            ones based on object definitions.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> class.
            </summary>
            <param name="caseSensitive">Flag specifying whether to make this object factory case sensitive or not.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.#ctor(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> class.
            </summary>
            <param name="parentFactory">The parent object factory.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.#ctor(System.Boolean,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> class.
            </summary>
            <param name="caseSensitive">Flag specifying whether to make this object factory case sensitive or not.</param>
            <param name="parentFactory">The parent object factory.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.FindMatchingObjects(System.Type)">
            <summary>
            Find object instances that match the <paramref name="requiredType"/>.
            </summary>
            <remarks>
            <p>
            Called by autowiring. If a subclass cannot obtain information about object
            names by <see cref="T:System.Type"/>, a corresponding exception should be thrown.
            </p>
            </remarks>
            <param name="requiredType">
            The type of the objects to look up.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> of object names and object
            instances that match the <paramref name="requiredType"/>, or
            <see langword="null"/> if none is found.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetDependingObjectNames(System.String)">
            <summary>
            Return the names of the objects that depend on the given object.
            </summary>
            <remarks>
            <p>
            Called by the
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroyObject(System.String,System.Object)"/>
            so that dependant objects are able to be disposed of first.
            </p>
            </remarks>
            <param name="objectName">
            The name of the object to find depending objects for.
            </param>
            <returns>
            The array of names of depending objects, or the empty string array if none.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.IsObjectTypeMatch(System.String,System.Type)">
            <summary>
            Check whether the specified object matches the supplied <paramref name="type"/>.
            </summary>
            <param name="objectName">The name of the object to check.</param>
            <param name="type">
            The <see cref="T:System.Type"/> to check for.
            </param>
            <returns>
            <see langword="true"/> if the object matches the supplied <paramref name="type"/>,
            or if the supplied <paramref name="type"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory.log">
            <summary>
            The <see cref="T:Common.Logging.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory.allowObjectDefinitionOverriding">
            <summary>
            Whether to allow re-registration of a different definition with the
            same name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory.objectDefinitionMap">
            <summary>
            The mapping of object definition objects, keyed by object name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory.objectDefinitionNames">
            <summary>
            List of object definition names, in registration order.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory.autowireCandidateResolver">
            <summary>
            Resolver to use for checking if an object definition is an autowire candidate
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory.resolvableDependencies">
            <summary>
            IDictionary from dependency type to corresponding autowired value 
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this registry contains a object definition with the given
            name.
            </summary>
            <param name="name">
            The name of the object to look for.
            </param>
            <returns>
            <see langword="true"/> if this object factory contains an object
            definition with the given name.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ContainsObjectDefinition(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Register a new object definition with this registry.
            </summary>
            <param name="name">
            The name of the object instance to register.
            </param>
            <param name="objectDefinition">
            The definition of the object instance to register.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object definition is invalid.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.PreInstantiateSingletons">
            <summary>
            Ensure that all non-lazy-init singletons are instantiated, also
            considering <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <exception cref="T:Spring.Objects.ObjectsException">
            If one of the singleton objects could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.PreInstantiateSingletons"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterResolvableDependency(System.Type,System.Object)">
            <summary>
            Register a special dependency type with corresponding autowired value.
            </summary>
            <param name="dependencyType">Type of the dependency to register.
            This will typically be a base interface such as IObjectFactory, with extensions of it resolved
            as well if declared as an autowiring dependency (e.g. IListableBeanFactory),
            as long as the given value actually implements the extended interface.</param>
            <param name="autowiredValue">The autowired value.  This may also be an
            implementation o the <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface,
            which allows for lazy resolution of the actual target value.</param>
            <remarks>
            This is intended for factory/context references that are supposed
            to be autowirable but are not defined as objects in the factory:
            e.g. a dependency of type ApplicationContext resolved to the
            ApplicationContext instance that the object is living in.
            <para>
            Note there are no such default types registered in a plain IObjectFactory,
            not even for the IObjectFactory interface itself.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectDefinition(System.String)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>, 
            or <c>null</c>, if specified object definitions does not exist.
            </returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/> is <c>null</c> or empty string.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectDefinition(System.String,System.Boolean)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="includeAncestors">Whether to search parent object factories.</param>
            <returns>
            The registered <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>, 
            or <c>null</c>, if specified object definitions does not exist.
            </returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/> is <c>null</c> or empty string.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this factory.
            </summary>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectDefinitionNames(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectNamesForType(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectNamesForType(System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectNamesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectNamesForType(System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses).
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any of the objects could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.DoGetObjectNamesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses).
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includeNonSingletons">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="allowEagerInit">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any of the objects could not be created.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.RequiresEagerInitForType(System.String)">
            <summary>
            Check whether the specified bean would need to be eagerly initialized
            in order to determine its type.
            </summary>
            <param name="factoryObjectName">a factory-bean reference that the bean definition defines a factory method for</param>
            <returns>whether eager initialization is necessary</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.IsFactoryObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Check whether the given bean is defined as a <see cref="T:Spring.Objects.Factory.IFactoryObject"/>. 
            </summary>
            <param name="objectName">the name of the object</param>
            <param name="rod">the corresponding object definition</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.ResolveDependency(Spring.Objects.Factory.Config.DependencyDescriptor,System.String,System.Collections.IList)">
            <summary>
            Resolve the specified dependency against the objects defined in this factory.
            </summary>
            <param name="descriptor">The descriptor for the dependency.</param>
            <param name="objectName">Name of the object which declares the present dependency.</param>
            <param name="autowiredObjectNames">A list that all names of autowired object (used for
            resolving the present dependency) are supposed to be added to.</param>
            <returns>
            the resolved object, or <code>null</code> if none found
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">if dependency resolution failed</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.RaiseNoSuchObjectDefinitionException(System.Type,System.String,Spring.Objects.Factory.Config.DependencyDescriptor)">
            <summary>
            Raises the no such object definition exception for an unresolvable dependency
            </summary>
            <param name="type">The type.</param>
            <param name="dependencyDescription">The dependency description.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.IsAutowireCandidate(System.String,Spring.Objects.Factory.Config.DependencyDescriptor)">
            <summary>
            Determines whether the specified object qualifies as an autowire candidate,
            to be injected into other beans which declare a dependency of matching type.
            This method checks ancestor factories as well.
            </summary>
            <param name="objectName">Name of the object to check.</param>
            <param name="descriptor">The descriptor of the dependency to resolve.</param>
            <returns>
            	<c>true</c> if the object should be considered as an autowire candidate; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">if there is no object with the given name.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.IsAutowireCandidate(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.Factory.Config.DependencyDescriptor)">
            <summary>
            Determine whether the specified object definition qualifies as an autowire candidate,
            to be injected into other beans which declare a dependency of matching type.
            </summary>
            <param name="objectName">Name of the object definition to check.</param>
            <param name="rod">The merged object definiton to check.</param>
            <param name="descriptor">The descriptor of the dependency to resolve.</param>
            <returns>
            	<c>true</c> if the object should be considered as an autowire candidate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.DefaultListableObjectFactory.AllowObjectDefinitionOverriding">
            <summary>
            Should object definitions registered under the same name as an
            existing object definition be allowed?
            </summary>
            <remarks>
            <p>
            If <see langword="true"/>, then the new object definition will
            replace (override) the existing object definition. If
            <see langword="false"/>, an exception will be thrown when
            an attempt is made to register an object definition under the same
            name as an already existing object definition.
            </p>
            <p>
            The default is <see langword="true"/>.
            </p>
            </remarks>
            <value>
            <see langword="true"/> is the registration of an object definition
            under the same name as an existing object definition is allowed.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.DefaultListableObjectFactory.AutowireCandidateResolver">
            <summary>
            Get or set custom autowire candidate resolver for this IObjectFactory to use
            when deciding whether a bean definition should be considered as a
            candidate for autowiring.  Never <code>null</code>
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.DefaultListableObjectFactory.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in this registry.
            </summary>
            <value>
            The number of objects defined in this registry.
            </value>
            <seealso cref="P:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ObjectDefinitionCount"/>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DefaultObjectDefinitionFactory">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionFactory"/>
            interface.
            </summary>
            <remarks>
            <p>
            Does <b>not</b> support per <see cref="T:System.AppDomain"/>
            <see cref="T:System.Type"/> loading.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IObjectDefinitionFactory">
            <summary>
            Central interface for factories that can create
            <see cref="T:Spring.Objects.Factory.Support.IConfigurableObjectDefinition"/>
            instances.
            </summary>
            <remarks>
            <p>
            Allows for replaceable object definition factories using the Strategy
            pattern.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionFactory.CreateObjectDefinition(System.String,System.String,System.AppDomain)">
            <summary>
            Factory style method for getting concrete
            <see cref="T:Spring.Objects.Factory.Support.IConfigurableObjectDefinition"/>
            instances.
            </summary>
            <param name="typeName">
            The FullName of the <see cref="T:System.Type"/> of the defined object.
            </param>
            <param name="parent">The name of the parent object definition (if any).</param>
            <param name="domain">
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.  It can be null to register the
            object class just by name.
            </param>
            <returns>
            An
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultObjectDefinitionFactory.CreateObjectDefinition(System.String,System.String,System.AppDomain)">
            <summary>
            Factory style method for getting concrete
            <see cref="T:Spring.Objects.Factory.Support.IConfigurableObjectDefinition"/>
            instances.
            </summary>
            /// <remarks>If no parent is specified, a RootObjectDefinition is created, otherwise a 
            ChildObjectDefinition.</remarks>
            <param name="typeName">The <see cref="T:System.Type"/> of the defined object.</param>
            <param name="parent">The name of the parent object definition (if any).</param>
            <param name="domain">The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.</param>
            <returns>
            An
            <see cref="T:Spring.Objects.Factory.Support.IConfigurableObjectDefinition"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DefaultObjectNameGenerator">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.Factory.Support.IObjectNameGenerator"/> interface, deleagting to
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils"/>'s GenerateObjectName.
            </summary>
            <remarks>Note that this implementation is only able to handle
            <see cref="T:Spring.Objects.Factory.Support.IConfigurableObjectDefinition"/> subclasses such as
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IObjectNameGenerator">
            <summary>
            Strategy interface for generating object names for object definitions
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectNameGenerator.GenerateObjectName(Spring.Objects.Factory.Config.IObjectDefinition,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Generates an object name for the given object definition.
            </summary>
            <param name="definition">The object definition to generate a name for.</param>
            <param name="registry">The object definitions registry that the given definition is
            supposed to be registerd with</param>
            <returns>the generated object name</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultObjectNameGenerator.GenerateObjectName(Spring.Objects.Factory.Config.IObjectDefinition,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Generates an object name for the given object definition.
            </summary>
            <param name="definition">The object definition to generate a name for.</param>
            <param name="registry">The object definitions registry that the given definition is
            supposed to be registerd with</param>
            <returns>the generated object name</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DelegatingMethodReplacer">
            <summary>
            An <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            implementation that delegates to an
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/> that is
            obtained as the result of a lookup in an associated IoC container.
            </summary>
            <remarks>
            <p>
            This class is reserved for internal use within the framework; it is
            not intended to be used by application developers using Spring.NET.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DelegatingMethodReplacer.#ctor(Spring.Objects.Factory.Support.IConfigurableObjectDefinition,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:System.ArgumentNullException"/>
            class.
            </summary>
            <param name="objectDefinition">
            The object definition that is the target of the method replacement.
            </param>
            <param name="objectFactory">
            The enclosing IoC container with which the above
            <paramref name="objectDefinition"/> is associated.
            </param>
            <exception cref="T:Spring.Objects.Factory.Support.DelegatingMethodReplacer">
            If either of the supplied arguments is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DelegatingMethodReplacer.Implement(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Reimplements the supplied <paramref name="method"/> by delegating to
            another <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            looked up in an enclosing IoC container.
            </summary>
            <param name="target">
            The instance whose <paramref name="method"/> is to be
            (re)implemented.
            </param>
            <param name="method">
            The method that is to be (re)implemented.
            </param>
            <param name="arguments">The target method's arguments.</param>
            <returns>
            The result of the delegated call to the looked up
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DependencyCheckingMode">
            <summary>
            The various modes of dependency checking.
            </summary>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.None">
            <summary>
            DO not do any dependency checking.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.Objects">
            <summary>
            Check object references.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.Simple">
            <summary>
            Just check primitive (string, int, etc) values.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.All">
            <summary>
            Check everything.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.GenericObjectDefinition">
            <summary>
            GenericObjectDefinition is a one-stop shop for standard object definition purposes.
            Like any object definition, it allows for specifying a class plus optionally
            constructor argument values and property values. Additionally, deriving from a
            parent bean definition can be flexibly configured through the "parentName" property.
            </summary>
            <remarks>In general, use this <see cref="T:Spring.Objects.Factory.Support.GenericObjectDefinition"/> class for the purpose of
            registering user-visible object definitions (which a post-processor might operate on,
            potentially even reconfiguring the parent name). 
            Use <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>/<see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            where parent/child relationships happen to be pre-determined.
            </remarks>
            <seealso cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            <seealso cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            <author>Juergen Hoeller</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.GenericObjectDefinition.#ctor">
            <summary>
            Creates a new <see cref="T:Spring.Objects.Factory.Support.GenericObjectDefinition"/> to be configured through its
            object properties and configuration methods.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.GenericObjectDefinition.#ctor(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Creates a new <see cref="T:Spring.Objects.Factory.Support.GenericObjectDefinition"/> as deep copy of the given
            object definition.
            </summary>
            <param name="original">the original object definition to copy from</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.GenericObjectDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this 
            <see cref="T:Spring.Objects.Factory.Support.GenericObjectDefinition"/> for debugging purposes.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.GenericObjectDefinition.ParentName">
            <summary>
            The name of the parent object definition.
            </summary>
            <remarks>
            This value is <b>required</b>.
            </remarks>
            <value>
            The name of the parent object definition.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IAutowireCandidateResolver">
            <summary>
            Strategy interface for determining whether a specific object definition
            qualifies as an autowire candidate for a specific dependency.
            </summary>
            <author>Mark Fisher</author>
            <author>Juergen hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IAutowireCandidateResolver.IsAutowireCandidate(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Config.DependencyDescriptor)">
            <summary>
            Determines whether the given object definition qualifies as an 
            autowire candidate for the given dependency.
            </summary>
            <param name="odHolder">The object definition including object name and aliases.</param>
            <param name="descriptor">The descriptor for the target method parameter or field.</param>
            <returns>
            	<c>true</c> if the object definition qualifies as autowire candidate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IInstantiationStrategy">
            <summary>
            Responsible for creating instances corresponding to a
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="constructor">
            The <see cref="T:System.Reflection.ConstructorInfo"/> to be used to instantiate
            the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="constructor"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="factoryMethod">
            The <see cref="T:System.Reflection.MethodInfo"/> to be used to get the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="factoryMethod"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.LookupMethodOverride">
            <summary>
            Represents an override of a method that looks up an object in the same IoC context.
            </summary>
            <remarks>
            <p>
            Methods eligible for lookup override must not have arguments.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.MethodOverride">
            <summary>
            Represents the override of a method on a managed object by the IoC container.
            </summary>
            <remarks>
            <p>
            Note that the override mechanism is <i>not</i> intended as a generic means of
            inserting crosscutting code: use AOP for that.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverride.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no
            public constructors.
            </p>
            </remarks>
            <param name="methodName">
            The name of the method that is to be overridden.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="methodName"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverride.Matches(System.Reflection.MethodInfo)">
            <summary>
            Does this <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>
            match the supplied <paramref name="method"/>?
            </summary>
            <remarks>
            <p>
            By 'match' one means does this particular
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>
            instance apply to the supplied <paramref name="method"/>?
            </p>
            <p>
            This allows for argument list checking as well as method name checking.
            </p>
            </remarks>
            <param name="method">The method to be checked.</param>
            <returns>
            <see lang="true"/> if this override matches the supplied
            <paramref name="method"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.MethodOverride.MethodName">
            <summary>
            The name of the method that is to be overridden.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.MethodOverride.IsOverloaded">
            <summary>
            Is the method that is ot be injected
            (<see cref="P:Spring.Objects.Factory.Support.MethodOverride.MethodName"/>)
            to be considered as overloaded?
            </summary>
            <remarks>
            <p>
            If <see lang="true"/> (the default), then argument type matching
            will be performed (because one would not want to override the wrong
            method).
            </p>
            <p>
            Setting the value of this property to <see lang="false"/> can be used
            to optimize runtime performance (ever so slightly).
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.LookupMethodOverride.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.LookupMethodOverride"/> class.
            </summary>
            <remarks>
            <p>
            Methods eligible for lookup override must not have arguments.
            </p>
            </remarks>
            <param name="methodName">
            The name of the method that is to be overridden.
            </param>
            <param name="objectName">
            The name of the object in the current IoC context that the
            dependency injected method must return.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either of the supplied arguments is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.LookupMethodOverride.Matches(System.Reflection.MethodInfo)">
            <summary>
            Does this <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>
            match the supplied <paramref name="method"/>?
            </summary>
            <param name="method">The method to be checked.</param>
            <returns>
            <see lang="true"/> if this override matches the supplied <paramref name="method"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="method"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.LookupMethodOverride.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.LookupMethodOverride.ObjectName">
            <summary>
            The name of the object in the current IoC context that the
            dependency injected method must return.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.LookupMethodReplacer">
            <summary>
            An <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            implementation that simply returns the result of a lookup in an
            associated IoC container.
            </summary>
            <remarks>
            <p>
            This class is Spring.NET's implementation of Dependency Lookup via
            Method Injection.
            </p>
            <p>
            This class is reserved for internal use within the framework; it is
            not intended to be used by application developers using Spring.NET.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.LookupMethodReplacer.#ctor(Spring.Objects.Factory.Support.IConfigurableObjectDefinition,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.Factory.Support.LookupMethodReplacer"/>
            class.
            </summary>
            <param name="objectDefinition">
            The object definition that is the target of the method replacement.
            </param>
            <param name="objectFactory">
            The enclosing IoC container with which the above
            <paramref name="objectDefinition"/> is associated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either of the supplied arguments is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.LookupMethodReplacer.Implement(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Reimplements the supplied <paramref name="method"/> by returning the
            result of an object lookup in an enclosing IoC container.
            </summary>
            <param name="target">
            The instance whose <paramref name="method"/> is to be
            (re)implemented.
            </param>
            <param name="method">
            The method that is to be (re)implemented.
            </param>
            <param name="arguments">The target method's arguments.</param>
            <returns>
            The result of the object lookup.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy">
            <summary>
            An <see cref="T:Spring.Objects.Factory.Support.IInstantiationStrategy"/>
            implementation that supports method injection.
            </summary>
            <remarks>
            <p>
            Classes that want to take advantage of method injection must meet some
            stringent criteria. Every method that is to be method injected
            <b>must</b> be defined as either <see lang="virtual"/> or
            <see lang="abstract"/>. An <see cref="T:Spring.Objects.ObjectsException"/>
            will be thrown if these criteria are not met.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.SimpleInstantiationStrategy">
            <summary>
            Simple object instantiation strategy for use in
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> implementations.
            </summary>
            <remarks>
            <p>
            Does not support method injection, although it provides hooks for subclasses
            to override to add method injection support, for example by overriding methods.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy"/> 
        </member>
        <member name="F:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.log">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.GetZeroArgConstructorInfo(System.Type)">
            <summary>
            Gets the zero arg ConstructorInfo object, if the type offers such functionality.
            </summary>
            <param name="type">The type.</param>
            <returns>Zero argument ConstructorInfo</returns>
            <exception cref="T:Spring.Util.FatalReflectionException">
            If the type does not have a zero-arg constructor.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="constructor">
            The <see cref="T:System.Reflection.ConstructorInfo"/> to be used to instantiate
            the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="constructor"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="factoryMethod">
            The <see cref="T:System.Reflection.MethodInfo"/> to be used to get the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="factoryMethod"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>,
            injecting methods as appropriate.
            </summary>
            <remarks>
            <p>
            The default implementation of this method is to throw a
            <see cref="T:System.InvalidOperationException"/>.
            </p>
            <p>
            Derived classes can override this method if they can instantiate an object
            with the Method Injection specified in the supplied
            <paramref name="definition"/>. Instantiation should use a no-arg constructor.
            </p>
            </remarks>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="objectName">
            The name associated with the object definition. The name can be a
            <see lang="null"/> or zero length string if we're autowiring an object that
            doesn't belong to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>,
            injecting methods as appropriate.
            </summary>
            <remarks>
            <p>
            The default implementation of this method is to throw a
            <see cref="T:System.InvalidOperationException"/>.
            </p>
            <p>
            Derived classes can override this method if they can instantiate an object
            with the Method Injection specified in the supplied
            <paramref name="definition"/>. Instantiation should use the supplied
            <paramref name="constructor"/> and attendant <paramref name="arguments"/>.
            </p>
            </remarks>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="objectName">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="constructor">
            The <see cref="T:System.Reflection.ConstructorInfo"/> to be used to instantiate
            the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="constructor"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="F:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.DYNAMIC_ASSEMBLY_NAME">
            <summary>
            The name of the dynamic assembly that holds dynamically created code
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.typeCache">
            <summary>
            A cache of generated <see cref="T:System.Type"/> instances, keyed on
            the object name for which the <see cref="T:System.Type"/> was generated.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>,
            injecting methods as appropriate.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="objectName">
            The name associated with the object definition. The name can be the
            <see lang="null"/> or zero length string if we're autowiring an
            object that doesn't belong to the supplied
            <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)"/> 
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>,
            injecting methods as appropriate.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="objectName">
            The name associated with the object definition. The name can be the
            <see lang="null"/> or zero length string if we're autowiring an
            object that doesn't belong to the supplied
            <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="constructor">
            The <see cref="T:System.Reflection.ConstructorInfo"/> to be used to instantiate
            the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="constructor"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])"/> 
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.DoInstantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Type[],System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>,
            injecting methods as appropriate.
            </summary>
            <remarks>
            <p>
            This method dynamically generates a subclass that supports method
            injection for the supplied <paramref name="definition"/>. It then
            instantiates an new instance of said type using the constructor
            identified by the supplied <paramref name="ctorParameterTypes"/>,
            passing the supplied <paramref name="arguments"/> to said
            constructor. It then manually injects (generic) method replacement
            and method lookup instances (of <see cref="T:System.Type"/>
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>) into
            the new instance: those methods that are 'method-injected' will
            then delegate to the approriate
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            instance to effect the actual method injection.
            </p>
            </remarks>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="objectName">
            The name associated with the object definition. The name can be the
            <see lang="null"/> or zero length string if we're autowiring an
            object that doesn't belong to the supplied
            <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="ctorParameterTypes">
            The parameter <see cref="T:System.Type"/>s to use to find the
            appropriate constructor to invoke.
            </param>
            <param name="arguments">
            The aguments that are to be passed to the appropriate constructor
            when the object is being instantiated.
            </param>
            <returns>
            A new instance of the <see cref="T:System.Type"/> defined by the
            supplied <paramref name="definition"/>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder">
            <summary>
            A <see cref="T:System.Type"/> factory that generates subclasses of those
            classes that have been configured for the Method-Injection form of
            Dependency Injection.
            </summary>
            <remarks>
            <p>
            This class is designed as for <c>one-shot</c> usage; i.e. it must
            be used to generate <i>exactly</i> one method injected subclass and
            then discarded (it maintains state in instance fields).
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.MethodReplacementPropertyName">
            <summary>
            The name of the generated <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            property (for method replacement).
            </summary>
            <remarks>
            <p>
            Exists so that clients of this class can use this name to set properties reflectively
            on the dynamically generated subclass.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.MethodLookupPropertyName">
            <summary>
            The name of the generated <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            property (for method lookup).
            </summary>
            <remarks>
            <p>
            Exists so that clients of this class can use this name to set properties reflectively
            on the dynamically generated subclass.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.#ctor(System.Reflection.Emit.ModuleBuilder,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder"/> class.
            </summary>
            <param name="module">
            The <see cref="T:System.Reflection.Emit.ModuleBuilder"/> in which
            the generated <see cref="T:System.Type"/> is to be defined.
            </param>
            <param name="objectDefinition">
            The object definition that is the target of the method injection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either of the supplied arguments is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.BuildType">
            <summary>
            Builds a <see cref="T:System.Type"/> suitable for Method-Injection. 
            </summary>
            <returns>
            A <see cref="T:System.Type"/> suitable for Method-Injection. 
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.DefineMethods(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Defines overrides for those methods that are configured with an appropriate
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>.
            </summary>
            <param name="typeBuilder">
            The overarching <see cref="T:System.Reflection.Emit.TypeBuilder"/> that is defining
            the generated <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.DefineReplacedMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Override the supplied <paramref name="method"/> with the logic
            encapsulated by the
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            defined by the supplied <paramref name="field"/>.
            </summary>
            <param name="typeBuilder">
            The builder for the subclass that is being generated.
            </param>
            <param name="method">
            The method on the superclass that is to be overridden.
            </param>
            <param name="field">
            The field defining the
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            that the overridden method will delegate to to do the 'actual'
            method injection logic.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.SetupTheReturnValueIfAny(System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the MSIL for actually returning a return value if the
            supplied <paramref name="returnValue"/> is not
            <see lang="null"/>.
            </summary>
            <param name="returnValue">
            The definition of the return value; if <see lang="null"/>, it
            means that no return value is to required (a <c>void</c>
            return type).
            </param>
            <param name="il">
            The <see cref="T:System.Reflection.Emit.ILGenerator"/> to emit
            the MSIL to.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.DefineReturnValueIfAny(System.Reflection.MethodInfo,System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the MSIL for a return value if the supplied
            <paramref name="method"/> returns a value.
            </summary>
            <param name="method">
            The method to be checked.
            </param>
            <param name="il">
            The <see cref="T:System.Reflection.Emit.ILGenerator"/> to emit
            the MSIL to.
            </param>
            <returns>
            The return value, or <see lang="null"/> if the method does not
            return a value (has a <c>void</c> return type).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.PushArguments(System.Reflection.ParameterInfo[],System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes (sets up) the arguments for a call to the
            <see cref="M:Spring.Objects.Factory.Support.IMethodReplacer.Implement(System.Object,System.Reflection.MethodInfo,System.Object[])"/>
            method of an appropriate
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>.
            </summary>
            <param name="methodParameters">
            The parameters to the <i>original</i> method (will be bundled
            up into a generic <c>object[]</c> and passed as the third
            argument to the
            <see cref="M:Spring.Objects.Factory.Support.IMethodReplacer.Implement(System.Object,System.Reflection.MethodInfo,System.Object[])"/>
            invocation.
            </param>
            <param name="il">
            The <see cref="T:System.Reflection.Emit.ILGenerator"/> to emit
            the MSIL to.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy.MethodInjectingTypeBuilder.DefineWritePropertyForMethodReplacement(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Simply generates the IL for a write only property for the
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/> <see cref="T:System.Type"/>. 
            </summary>
            <param name="typeBuilder">
            The <see cref="T:System.Type"/> in which the property is defined.
            </param>
            <param name="propertyName">
            The name of the (to be) generated property.
            </param>
            <param name="field">
            The (instance) field that the property is to 'set'.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.Support.MethodOverrides">
            <summary>
            A collection (with set semantics) of method overrides, determining which, if any,
            methods on a managed object the Spring.NET IoC container will override at runtime.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.MethodOverrides"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.#ctor(Spring.Objects.Factory.Support.MethodOverrides)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.MethodOverrides"/> class.
            </summary>
            <remarks>
            <p>
            Deep copy constructoe.
            </p>
            </remarks>
            <param name="other">
            The instance supplying initial overrides for this new instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.AddAll(Spring.Objects.Factory.Support.MethodOverrides)">
            <summary>
            Copy all given method overrides into this object.
            </summary>
            <param name="other">
            The overrides to be copied into this object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.Add(Spring.Objects.Factory.Support.MethodOverride)">
            <summary>
            Adds the supplied <paramref name="theOverride"/> to the overrides contained
            within this instance.
            </summary>
            <param name="theOverride">
            The <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/> to be
            added.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.AddOverloadedMethodName(System.String)">
            <summary>
            Adds the supplied <paramref name="methodName"/> to the overloaded method names
            contained within this instance.
            </summary>
            <param name="methodName">
            The overloaded method name to be added.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.IsOverloadedMethodName(System.String)">
            <summary>
            Returns true if the supplied <paramref name="methodName"/> is present within
            the overloaded method names contained within this instance.
            </summary>
            <param name="methodName">
            The overloaded method name to be checked.
            </param>
            <returns>
            True if the supplied <paramref name="methodName"/> is present within
            the overloaded method names contained within this instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.GetOverride(System.Reflection.MethodInfo)">
            <summary>
            Return the override for the given method, if any.
            </summary>
            <param name="method">
            The method to check for overrides for.
            </param>
            <returns>
            the override for the given method, if any.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate
            through a collection.
            </summary>
            <remarks>
            <p>
            The returned <see cref="T:System.Collections.IEnumerator"/> is the
            <see cref="T:System.Collections.IEnumerator"/> exposed by the
            <see cref="P:Spring.Objects.Factory.Support.MethodOverrides.Overrides"/>
            property.
            </p>
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can iterate through a
            collection.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.MethodOverrides.Overrides">
            <summary>
            The collection of method overrides.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.MethodOverrides.IsEmpty">
            <summary>
            Returns true if this instance contains no overrides.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectDefinitionBuilder">
            <summary>
            Programmatic means of constructing a <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> using the builder pattern.  Intended primarily
            for use when implementing custom namespace parsers.
            </summary>
            <remarks>Set methods are used instead of properties, so that chaining of methods can be used to create
            'one-liner'definitions that set multiple properties at one.</remarks>
            <author>Rod Johnson</author>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionBuilder"/> class, private
            to force use of factory methods.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.GenericObjectDefinition">
            <summary>
            Creates a new <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionBuilder"/> used to construct a <see cref="T:Spring.Objects.Factory.Support.GenericObjectDefinition"/>.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.GenericObjectDefinition(System.Type)">
            <summary>
            Creates a new <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionBuilder"/> used to construct a <see cref="T:Spring.Objects.Factory.Support.GenericObjectDefinition"/>.
            </summary>
            <param name="objectType">the <see cref="T:System.Type"/> of the object that the definition is being created for</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.GenericObjectDefinition(System.String)">
            <summary>
            Creates a new <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionBuilder"/> used to construct a <see cref="T:Spring.Objects.Factory.Support.GenericObjectDefinition"/>.
            </summary>
            <param name="objectTypeName">the name of the <see cref="T:System.Type"/> of the object that the definition is being created for</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.RootObjectDefinition(Spring.Objects.Factory.Support.IObjectDefinitionFactory,System.String)">
            <summary>
            Create a new <code>ObjectDefinitionBuilder</code> used to construct a root object definition.
            </summary>
            <param name="objectDefinitionFactory">The object definition factory.</param>
            <param name="objectTypeName">The type name of the object.</param>
            <returns>A new <code>ObjectDefinitionBuilder</code> instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.RootObjectDefinition(Spring.Objects.Factory.Support.IObjectDefinitionFactory,System.String,System.String)">
            <summary>
            Create a new <code>ObjectDefinitionBuilder</code> used to construct a root object definition.
            </summary>
            <param name="objectDefinitionFactory">The object definition factory.</param>
            <param name="objectTypeName">Name of the object type.</param>
            <param name="factoryMethodName">Name of the factory method.</param>
            <returns>A new <code>ObjectDefinitionBuilder</code> instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.RootObjectDefinition(Spring.Objects.Factory.Support.IObjectDefinitionFactory,System.Type)">
            <summary>
            Create a new <code>ObjectDefinitionBuilder</code> used to construct a root object definition.
            </summary>
            <param name="objectDefinitionFactory">The object definition factory.</param>
            <param name="objectType">Type of the object.</param>
            <returns>A new <code>ObjectDefinitionBuilder</code> instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.RootObjectDefinition(Spring.Objects.Factory.Support.IObjectDefinitionFactory,System.Type,System.String)">
            <summary>
            Create a new <code>ObjectDefinitionBuilder</code> used to construct a root object definition.
            </summary>
            <param name="objectDefinitionFactory">The object definition factory.</param>
            <param name="objectType">Type of the object.</param>
            <param name="factoryMethodName">Name of the factory method.</param>
            <returns>A new <code>ObjectDefinitionBuilder</code> instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.ChildObjectDefinition(Spring.Objects.Factory.Support.IObjectDefinitionFactory,System.String)">
            <summary>
            Create a new <code>ObjectDefinitionBuilder</code> used to construct a child object definition..
            </summary>
            <param name="objectDefinitionFactory">The object definition factory.</param>
            <param name="parentObjectName">Name of the parent object.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.AddPropertyValue(System.String,System.Object)">
            <summary>
            Adds the property value under the given name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.AddPropertyReference(System.String,System.String)">
            <summary>
            Adds a reference to the specified object name under the property specified.
            </summary>
            <param name="name">The name.</param>
            <param name="objectName">Name of the object.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.AddConstructorArg(System.Object)">
            <summary>
            Adds an index constructor arg value.  The current index is tracked internally and all addtions are
            at the present point
            </summary>
            <param name="value">The constructor arg value.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.AddConstructorArgReference(System.String)">
            <summary>
            Adds a reference to the named object as a constructor argument.
            </summary>
            <param name="objectName">Name of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetFactoryMethod(System.String)">
            <summary>
            Sets the name of the factory method to use for this definition.
            </summary>
            <param name="factoryMethod">The factory method.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetFactoryObject(System.String,System.String)">
            <summary>
            Sets the name of the factory object to use for this definition.
            </summary>
            <param name="factoryObject">The factory object.</param>
            <param name="factoryMethod">The factory method.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetSingleton(System.Boolean)">
            <summary>
            Sets whether or not this definition describes a singleton object.
            </summary>
            <param name="singleton">if set to <c>true</c> [singleton].</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetAbstract(System.Boolean)">
            <summary>
            Sets whether objects or not this definition is abstract.
            </summary>
            <param name="flag">if set to <c>true</c> [flag].</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetLazyInit(System.Boolean)">
            <summary>
            Sets whether objects for this definition should be lazily initialized or not.
            </summary>
            <param name="lazy">if set to <c>true</c> [lazy].</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetAutowireMode(Spring.Objects.Factory.Config.AutoWiringMode)">
            <summary>
            Sets the autowire mode for this definition.
            </summary>
            <param name="autowireMode">The autowire mode.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetDependencyCheck(Spring.Objects.Factory.Support.DependencyCheckingMode)">
            <summary>
            Sets the dependency check mode for this definition.
            </summary>
            <param name="dependencyCheck">The dependency check.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetDestroyMethodName(System.String)">
            <summary>
            Sets the name of the destroy method for this definition.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetInitMethodName(System.String)">
            <summary>
            Sets the name of the init method for this definition.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.SetResourceDescription(System.String)">
            <summary>
            Sets the resource description for this definition.
            </summary>
            <param name="resourceDescription">The resource description.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.AddDependsOn(System.String)">
            <summary>
            Adds the specified object name to the list of objects that this definition depends on.
            </summary>
            <param name="objectName">Name of the object.</param>
            <returns>The current <code>ObjectDefinitionBuilder</code>.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.RawObjectDefinition">
            <summary>
            Gets the current object definition in its raw (unvalidated) form.
            </summary>
            <value>The raw object definition.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ObjectDefinitionBuilder.ObjectDefinition">
            <summary>
            Validate and gets the object definition.
            </summary>
            <value>The object definition.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils">
            <summary>
            Utility methods that are useful for
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionReader"/>
            implementations.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Xml.ObjectsNamespaceParser"/>
        </member>
        <member name="F:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.GENERATED_OBJECT_NAME_SEPARATOR">
            <summary>
            The string used as a separator in the generation of synthetic id's
            for those object definitions explicitly that aren't assigned one.
            </summary>
            <remarks>
            <p>
            If a <see cref="T:System.Type"/>  name or parent object definition
            name is not unique, "#1", "#2" etc will be appended, until such
            time that the name becomes unique.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.RegisterObjectDefinition(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Registers the supplied <paramref name="objectDefinition"/> with the
            supplied <paramref name="registry"/>.
            </summary>
            <remarks>
            <p>
            This is a convenience method that registers the
            <see cref="P:Spring.Objects.Factory.Config.ObjectDefinitionHolder.ObjectDefinition"/>
            of the supplied <paramref name="objectDefinition"/> under the 
            <see cref="P:Spring.Objects.Factory.Config.ObjectDefinitionHolder.ObjectName"/>
            property value of said <paramref name="objectDefinition"/>. If the
            supplied <paramref name="objectDefinition"/> has any
            <see cref="P:Spring.Objects.Factory.Config.ObjectDefinitionHolder.Aliases"/>,
            then those aliases will also be registered with the supplied
            <paramref name="registry"/>.
            </p>
            </remarks>
            <param name="objectDefinition">
            The object definition holder containing the
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> that
            is to be registered.
            </param>
            <param name="registry">
            The registry that the supplied <paramref name="objectDefinition"/>
            is to be registered with.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either of the supplied arguments is <see langword="null"/>.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the <paramref name="objectDefinition"/> could not be registered
            with the <paramref name="registry"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.GenerateObjectName(Spring.Objects.Factory.Support.IConfigurableObjectDefinition,Spring.Objects.Factory.Support.IObjectDefinitionRegistry,System.Boolean)">
            <summary>
            Generates an object definition name for the supplied
            <paramref name="objectDefinition"/> that is guaranteed to be unique
            within the scope of the supplied <paramref name="registry"/>.
            </summary>
            <param name="objectDefinition">The <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>
            that requires a generated name.</param>
            <param name="registry">The
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            that the supplied <paramref name="objectDefinition"/> is to be
            registered with (needed so that the uniqueness of any generated
            name can be guaranteed).</param>
            <param name="isInnerObject">if set to <c>true</c> if the given object
            definition will be registed as an inner object or as a top level objener objects
            verses top level objects.</param>
            <returns>
            An object definition name for the supplied
            <paramref name="objectDefinition"/> that is guaranteed to be unique
            within the scope of the supplied <paramref name="registry"/> and
            never <cref lang="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If either of the <paramref name="objectDefinition"/> or
            <paramref name="registry"/> arguments is <see langword="null"/>.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            If a unique name cannot be generated.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.GenerateObjectName(Spring.Objects.Factory.Support.IConfigurableObjectDefinition,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Generates the name of the object for a top-level object definition unique within the given object factory.
            </summary>
            <param name="definition">The object definition to generate an object name for.</param>
            <param name="registry">The registry to check for existing names.</param>
            <returns>The generated object name</returns>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">if no unique name can be generated for the given
            object definition</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.CreateEventHandlerValue(System.String,System.String)">
            <summary>
            Factory method for getting concrete
            <see cref="T:Spring.Objects.IEventHandlerValue"/> instances.
            </summary>
            <param name="methodName">
            The name of the event handler method. This may be straight text, a regular
            expression, <see langword="null"/>, or empty.
            </param>
            <param name="eventName">
            The name of the event being wired. This too may be straight text, a regular
            expression, <see langword="null"/>, or empty.
            </param>
            <returns>
            A concrete <see cref="T:Spring.Objects.IEventHandlerValue"/>
            instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            <summary>
            Thrown when the validation of an object definition failed.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException"/>
            class.
            </summary>
            <param name="message">The detail message.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException"/>
            class.
            </summary>
            <param name="message">
            The detail message.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectDefinitionValidationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver">
            <summary>
            Helper class for use in object factory implementations,
            resolving values contained in object definition objects
            into the actual values applied to the target object instance.
            </summary>
            <remarks>
            Used by <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.#ctor(Spring.Objects.Factory.Support.AbstractObjectFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver"/> class.
            </summary>
            <param name="objectFactory">The object factory.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.String,System.Object)">
            <summary>
            Given a property value, return a value, resolving any references to other
            objects in the factory if necessary.
            </summary>
            <remarks>
            <p>
            The value could be :
            <list type="bullet">
            <item>
            <p>
            An <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>,
            which leads to the creation of a corresponding new object instance.
            Singleton flags and names of such "inner objects" are always ignored: inner objects
            are anonymous prototypes.
            </p>
            </item>
            <item>
            <p>
            A <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>, which must
            be resolved.
            </p>
            </item>
            <item>
            <p>
            An <see cref="T:Spring.Objects.Factory.Config.IManagedCollection"/>. This is a
            special placeholder collection that may contain
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>s or
            collections that will need to be resolved.
            </p>
            </item>
            <item>
            <p>
            An ordinary object or <see langword="null"/>, in which case it's left alone.
            </p>
            </item>
            </list>
            </p>
            </remarks>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="argumentValue">
            The value of the property that is being resolved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolvePropertyValue(System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.String,System.Object)">
            <summary>
            TODO
            </summary>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="argumentValue">
            The value of the property that is being resolved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveTargetType(Spring.Objects.Factory.Config.TypedStringValue)">
            <summary>
            Resolve the target type of the passed <see cref="T:Spring.Objects.Factory.Config.TypedStringValue"/>.
            </summary>
            <param name="value">The <see cref="T:Spring.Objects.Factory.Config.TypedStringValue"/> who's target type is to be resolved</param>
            <returns>The resolved target type, if any. <see lang="null"/> otherwise.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveInnerObjectDefinition(System.String,System.String,System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.Boolean)">
            <summary>
            Resolves an inner object definition.
            </summary>
            <param name="name">
            The name of the object that surrounds this inner object definition.
            </param>
            <param name="innerObjectName">
            The name of the inner object definition... note: this is a synthetic
            name assigned by the factory (since it makes no sense for inner object
            definitions to have names).
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="definition">
            The definition of the inner object that is to be resolved.
            </param>
            <param name="singletonOwner">
            <see langword="true"/> if the owner of the property is a singleton.
            </param>
            <returns>
            The resolved object as defined by the inner object definition.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.AdaptInnerObjectName(System.String)">
            <summary>
            Checks the given bean name whether it is unique. If not already unique,
            a counter is added, increasing the counter until the name is unique.
            </summary>
            <param name="innerObjectName">Original Name of the inner object.</param>
            <returns>The Adapted name for the inner object</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveReference(Spring.Objects.Factory.Config.IObjectDefinition,System.String,System.String,Spring.Objects.Factory.Config.RuntimeObjectReference)">
            <summary>
            Resolve a reference to another object in the factory.
            </summary>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="reference">
            The runtime reference containing the value of the property.
            </param>
            <returns>A reference to another object in the factory.</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectScope">
            <summary>
            The possible object scope values.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Objects.Factory.Support.ObjectScope.Singleton">
            <summary>
             
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.ObjectScope.Application">
            <summary>
            Application scope.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.ObjectScope.Session">
            <summary>
            Session scope.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.ObjectScope.Request">
            <summary>
            Request scope.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.ObjectScope.Prototype">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.ObjectScope.Default">
            <summary>
            Default scope (currently
            <see cref="F:Spring.Objects.Factory.Support.ObjectScope.Application"/>).
            </summary>
            <seealso cref="F:Spring.Objects.Factory.Support.ObjectScope.Application"/>
        </member>
        <member name="T:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader">
            <summary>
            Object definition reader for a simple properties format.
            </summary>
            <remarks>
            Provides object definition registration methods for
            <see cref="T:System.Collections.IDictionary"/> and
            <see cref="T:System.Resources.ResourceSet"/> instances. Typically applied to a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>.
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.TrueValue">
            <summary>
            Value of a T/F attribute that represents true.
            Anything else represents false. Case seNsItive.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.Separator">
            <summary>
            Separator between object name and property name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.ClassKey">
            <summary>
            Prefix for the class property of a root object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.SingletonKey">
            <summary>
            Special string added to distinguish if the object will be
            a singleton.
            </summary>
            <remarks>
            <p>
            Default is true.
            </p>
            </remarks>
            <example>
            <p>
            owner.(singleton)=true
            </p>
            </example>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.LazyInitKey">
            <summary>
            Special string added to distinguish if the object will be
            lazily initialised.
            </summary>
            <remarks>
            <p>
            Default is false.
            </p>
            </remarks>
            <example>
            <p>
            owner.(lazy-init)=true
            </p>
            </example>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.ParentKey">
            <summary>
            Reserved "property" to indicate the parent of a child object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RefSuffix">
            <summary>
            Property suffix for references to other objects in the current
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>: e.g.
            owner.dog(ref)=fido.
            </summary>
            <remarks>
            <p>
            Whether this is a reference to a singleton or a prototype
            will depend on the definition of the target object.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RefPrefix">
            <summary>
            Prefix before values referencing other objects.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader"/>
            class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource,System.String)">
            <summary>
            Load object definitions from the specified properties file.
            </summary>
            <param name="resource">
            The resource descriptor for the properties file.
            </param>
            <param name="prefix">
            The match or filter for object definition names, e.g. 'objects.'
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">in case of loading or parsing errors</exception>
            <returns>the number of object definitions found</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Resources.ResourceSet)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Resources.ResourceSet"/>, using all property keys (i.e.
            not filtering by prefix).
            </summary>
            <param name="rs">
            The <see cref="T:System.Resources.ResourceSet"/> containing object definitions.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Resources.ResourceSet,System.String)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Resources.ResourceSet"/>.
            </summary>
            <remarks>
            <p>
            Similar syntax as for an <see cref="T:System.Collections.IDictionary"/>.
            This method is useful to enable standard .NET internationalization support.
            </p>
            </remarks>
            <param name="rs">
            The <see cref="T:System.Resources.ResourceSet"/> containing object definitions.
            </param>
            <param name="prefix">
            The match or filter for object definition names, e.g. 'objects.'
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.IDictionary)">
            <summary>
            Register object definitions contained in an
            <see cref="T:System.Collections.IDictionary"/>, using all property keys
            (i.e. not filtering by prefix).
            </summary>
            <param name="id">
            The <see cref="T:System.Collections.IDictionary"/> containing object definitions.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Registers object definitions contained in an <see cref="T:System.Collections.Specialized.NameValueCollection"/> 
            using all property keys ( i.e. not filtering by prefix )
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing 
            object definitions.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.IDictionary,System.String)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <remarks>
            <p>
            Ignores ineligible properties.
            </p>
            </remarks>
            <param name="id">IDictionary name -&gt; property (String or Object). Property values
            will be strings if coming from a Properties file etc. Property names
            (keys) must be strings. Type keys must be strings.
            </param>
            <param name="prefix">
            The match or filter within the keys in the map: e.g. 'objects.'
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions found.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <remarks>
            <p>
            Ignores ineligible properties.
            </p>
            </remarks>
            <param name="id">IDictionary name -&gt; property (String or Object). Property values
            will be strings if coming from a Properties file etc. Property names
            (keys) must be strings. Type keys must be strings.
            </param>
            <param name="prefix">
            The match or filter within the keys in the map: e.g. 'objects.'
            </param>
            <param name="resourceDescription">
            The description of the resource that the
            <see cref="T:System.Collections.IDictionary"/> came from (for logging purposes).
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions found.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinition(System.String,System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Get all property values, given a prefix (which will be stripped)
            and add the object they define to the factory with the given name
            </summary>
            <param name="name">The name of the object to define.</param>
            <param name="id">
            The <see cref="T:System.Collections.IDictionary"/> containing string pairs.
            </param>
            <param name="prefix">The prefix of each entry, which will be stripped.</param>
            <param name="resourceDescription">
            The description of the resource that the
            <see cref="T:System.Collections.IDictionary"/> came from (for logging purposes).
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.DefaultParentObject">
            <summary>
            Name of default parent object
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.ObjectDefinitionFactory">
            <summary>
            Gets or sets object definition factory to use.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.RootObjectDefinition">
            <summary>
            A plain-vanilla object definition.
            </summary>
            <remarks>
            <p>
            This is the most common type of object definition;
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> instances
            do not derive from a parent
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>, and usually
            (but not always - see below) have an
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectType"/>
            and (optionally) some
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/> and
            <see cref="T:Spring.Objects.IPropertyValues"/>.
            </p>
            <p>
            Note that <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            instances do not have to specify an
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectType"/> :
            This can be useful for deriving
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/> instances
            from such definitions, each with it's own
            <see cref="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectType"/>,
            inheriting common property values and other settings from the parent.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <seealso cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="singleton">
            <see langword="true"/> if this object definition defines a singleton object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton, providing property values and constructor arguments.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.Factory.Config.AutoWiringMode)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton using the supplied
            <see cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="autowireMode">
            The autowiring mode.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton using the supplied
            <see cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="autowireMode">
            The autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for objects (not
            applicable to autowiring a constructor, thus ignored there)
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            with the given singleton status, providing property values.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.MutablePropertyValues,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            with the given singleton status, providing property values.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
            <param name="singleton">
            <see langword="true"/> if this object definition defines a singleton object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton, providing property values and constructor arguments.
            </summary>
            <remarks>
            <p>
            Takes an object class name to avoid eager loading of the object class.
            </p>
            </remarks>
            <param name="typeName">
            The assembly qualified <see cref="P:System.Type.FullName"/> of the object to instantiate.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class.
            </summary>
            <remarks>
            <p>
            Deep copy constructor.
            </p>
            </remarks>
            <param name="other">
            The definition that is to be copied.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.Validate">
            <summary>
            Validate this object definition.
            </summary>
            <exception cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            In the case of a validation failure.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.RootObjectDefinition.ParentName">
            <summary>
            Is always <c>null</c> for a <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>.
            </summary>
            <remarks>
            It is safe to request this property's value. Setting any other value than <c>null</c> will 
            raise an <see cref="T:System.ArgumentException"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">Raised on any attempt to set a non-null value on this property.</exception>
        </member>
        <member name="T:Spring.Objects.Factory.Support.SimpleAutowireCandidateResolver">
            <summary>
            A <see cref="T:Spring.Objects.Factory.Support.IAutowireCandidateResolver"/> implementation to use that checks
            the object definitions only (no attributes)
            </summary>
            <author>Mark Fisher</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleAutowireCandidateResolver.IsAutowireCandidate(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Config.DependencyDescriptor)">
            <summary>
            Determines whether the given object definition qualifies as an
            autowire candidate for the given dependency.
            </summary>
            <param name="odHolder">The object definition including object name and aliases.</param>
            <param name="descriptor">The descriptor for the target method parameter or field.</param>
            <returns>
            	<c>true</c> if the object definition qualifies as autowire candidate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.StaticListableObjectFactory">
            <summary>
            Static factory that permits the registration of existing singleton instances.
            </summary>
            <remarks>
            <p>
            Does not have support for prototype objects, aliases, and post startup object
            configuration.
            </p>
            <p>
            Serves as a simple example implementation of the <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/>
            interface, that manages existing object instances as opposed to creating new ones
            based on object definitions.
            </p>
            <p>
            The <see cref="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ConfigureObject(System.Object,System.String)"/>
            method is not supported by this class; this class deals exclusively with
            existing singleton instances, thus the methods mentioned previously make little sense in this context.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Support.StaticListableObjectFactory.objects">
            <summary>
            Map from object name to object instance.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.CreateObject(System.String,System.Type,System.Object[])">
            <summary>
            This method is not supported by <see cref="T:Spring.Objects.Factory.Support.StaticListableObjectFactory"/>.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObject(System.String)">
            <summary>
            Return an instance of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:System.NotSupportedException">
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableFactoryObject"/> is not currently supported.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObject(System.String,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. If there is no factory method and the
            arguments are not null, then match the argument values by type and
            call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a <see lang="static"/> factory method. If there is no factory method and the
            supplied <paramref name="arguments"/> array is not <see lang="null"/>, then
            match the argument values by type and call the object's constructor.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObject(System.String,System.Type)">
            <summary>
            Return an instance of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <returns>The instance of the object.</returns>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ContainsObject(System.String)">
            <summary>
            Does this object factory contain an object with the given name?
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>True if an object with the given name is defined.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <remarks>
            <p>
            That is, will <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            or <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
            always return the same object?
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if the named object is a singleton.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.IsPrototype(System.String)">
            <summary>
            Determines whether the specified object name is prototype.  That is, will GetObject
            always return independent instances?
            </summary>
            <remarks>This method returning false does not clearly indicate a singleton object.
            It indicated non-independent instances, which may correspond to a scoped object as 
            well.  use the IsSingleton property to explicitly check for a shared 
            singleton instance.
            <para>Translates aliases back to the corresponding canonical object name.  Will ask the
            parent factory if the object can not be found in this factory instance.
            </para>
            </remarks>
            
            <param name="name">The name of the object to query</param>
            <returns>
            	<c>true</c> if the specified object name will always deliver independent instances; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">if there is no object with the given name.</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetType(System.String)">
            <summary>
            Determine the type of the object with the given name.
            </summary>
            <remarks>
            <p>
            More specifically, checks the type of object that
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> would return.
            For an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, returns the type
            of object that the <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>
            The <see cref="T:System.Type"/> of the object or <see langword="null"/> if
            not determinable.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.IsTypeMatch(System.String,System.Type)">
            <summary>
            Determines whether the object with the given name matches the specified type.
            </summary>
            <param name="name">The name of the object to query.</param>
            <param name="targetType">Type of the target to match against.</param>
            <returns>
            	<c>true</c> if the object type matches; otherwise, <c>false</c>
            if it doesn't match or cannot be determined yet.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">Ff there is no object with the given name
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <param name="name">The object name to check for aliases.</param>
            <returns>The aliases, or an empty array if none.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectDefinition(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Always, as object definitions are not supported by this <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            implementation.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectDefinition(System.String,System.Boolean)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="includeAncestors">Whether to search parent object factories.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this factory.
            </summary>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectDefinitionNames(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or
            <see langword="null"/> for all object names.
            </param>
            <remarks>
            <p>
            Will not consider <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            as the type of their created objects is not known before instantiation.
            </p>
            </remarks>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectNamesForType(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or
            <see langword="null"/> for all object names.
            </param>
            <remarks>
            <p>
            Does consider objects created by <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            or rather it considers the type of objects created by
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> (which means that
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s will be instantiated).
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectNamesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <remarks>
            <p>
            Since this implementation of the
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/>
            interface does not support the notion of ptototype objects, the
            <paramref name="includePrototypes"/> parameter is ignored.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or <see langword="null"/>
            for all object names.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s). Ignored.
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectNamesForType(System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Tests whether this object factory contains an object definition for the
            specified object name.
            </summary>
            <param name="name">The object name to query.</param>
            <returns>
            <b>True</b> if an object defintion is contained within this object factory.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            This version of the <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
            method matches all kinds of object definitions, be they singletons, prototypes, or
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s. Typically, the results
            of this method call will be the same as a call to
            <code>IListableObjectFactory.GetObjectsOfType(type,true,true)</code> .
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.AddObject(System.String,System.Object)">
            <summary>
            Add a new singleton object.
            </summary>
            <param name="name">
            The name to be associated with the object name.
            </param>
            <param name="instance">The singleton object.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <exception cref="T:System.NotSupportedException">
            This feature is not currently supported.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ConfigureObject(System.Object,System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the supplied <paramref name="definition"/>.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <param name="definition">
            An object definition that should be used to configure object.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.Dispose">
            <summary>
            Defines a method to release allocated unmanaged resources.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.StaticListableObjectFactory.IsCaseSensitive">
            <summary>
            Determine whether this object factory treats object names case-sensitive or not.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.StaticListableObjectFactory.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the factory.
            </summary>
            <value>
            The number of objects defined in the factory.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.StaticListableObjectFactory.Item(System.String)">
            <summary>
            Return an instance of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser">
            <summary>
            Abstract <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> implementation providing
            a number of convenience methods and a
            <see cref="M:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ParseInternal(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)"/> template method
            that subclasses must override to provide the actual parsing logic.
            </summary>
            <remarks>
            Use this <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> implementation when you want
            to parse some arbitrarily complex XML into one or more
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> ObjectDefinitions. If you just want to parse some
            XML into a single <code>IObjectDefinition</code>, you may wish to consider
            the simpler convenience extensions of this class, namely
            <see cref="T:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser"/> and
            <see cref="T:Spring.Objects.Factory.Xml.AbstractSimpleObjectDefinitionParser"/>
            </remarks>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser">
            <summary>
            Interface used to handle custom, top-level tags.
            </summary>
            <remarks>Implementations are free to turn the metadata in the custom tag into as
            many <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> as required.
            </remarks>
            <author>Rob Harrop</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.IObjectDefinitionParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlElement and register the resulting
            ObjectDefinitions with the <see cref="P:Spring.Objects.Factory.Xml.ParserContext.Registry"/> IObjectDefinitionRegistry
            embedded in the supplied <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/>
            </summary>
            <remarks>
            <p>
            This method is never invoked if the parser is namespace aware
            and was called to process the root node.
            </p>
            </remarks>
            <param name="element">
            The element to be parsed.
            </param>
            <param name="parserContext">
            TThe object encapsulating the current state of the parsing process. 
            Provides access to a IObjectDefinitionRegistry
            </param>
            <returns>
            The primary object definition.
            </returns>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ID_ATTRIBUTE">
            <summary>
            Constant for the ID attribute
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlElement and register the resulting
            ObjectDefinitions with the <see cref="P:Spring.Objects.Factory.Xml.ParserContext.Registry"/> IObjectDefinitionRegistry
            embedded in the supplied <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/>
            </summary>
            <param name="element">The element to be parsed.</param>
            <param name="parserContext">TThe object encapsulating the current state of the parsing process.
            Provides access to a IObjectDefinitionRegistry</param>
            <returns>The primary object definition.</returns>
            <remarks>
            	<p>
            This method is never invoked if the parser is namespace aware
            and was called to process the root node.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ResolveId(System.Xml.XmlElement,Spring.Objects.Factory.Support.AbstractObjectDefinition,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Resolves the ID for the supplied <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </summary>
            <remarks>
            When using <see cref="P:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ShouldGenerateId"/> generation, a name is generated automatically.
            Otherwise, the ID is extracted from the "id" attribute, potentially with a
            <see cref="P:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ShouldGenerateIdAsFallback"/> fallback to a generated id.
            </remarks>
            <param name="element">The element that the object definition has been built from.</param>
            <param name="definition">The object definition to be registered.</param>
            <param name="parserContext">The the object encapsulating the current state of the parsing process;
            provides access to a <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/> </param>
            <returns>the resolved id</returns>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            if no unique name could be generated for the given object definition
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.RegisterObjectDefinition(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Registers the supplied <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/> with the supplied
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>.
            </summary>
            <remarks>Subclasses can override this method to control whether or not the supplied
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/> is actually even registered, or to
            register even more objects.
            <para>
            The default implementation registers the supplied <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/>
            with the supplied <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/> only if the <code>IsNested</code>
            parameter is <code>false</code>, because one typically does not want inner objects
            to be registered as top level objects.
            </para>
            </remarks>
            
            <param name="definition">The object definition to be registered.</param>
            <param name="registry">The registry that the bean is to be registered with.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.GetAttributeValue(System.Xml.XmlElement,System.String)">
            <summary>
            Returns the value of the element's attribute or <c>null</c>, if the attribute is not specified.
            </summary>
            <remarks>
            This is a helper for bypassing the behavior of <see cref="M:System.Xml.XmlElement.GetAttribute(System.String)"/> 
            to return <see cref="F:System.String.Empty"/> if the attribute does not exist.
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.GetAttributeValue(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Returns the value of the element's attribute or <paramref name="defaultValue"/>, 
            if the attribute is not specified.
            </summary>
            <remarks>
            This is a helper for bypassing the behavior of <see cref="M:System.Xml.XmlElement.GetAttribute(System.String)"/> 
            to return <see cref="F:System.String.Empty"/> if the attribute does not exist.
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ParseInternal(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Central template method to actually parse the supplied XmlElement 
            into one or more IObjectDefinitions.
            </summary>
            <param name="element">The element that is to be parsed into one or more <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>s</param>
            <param name="parserContext">The the object encapsulating the current state of the parsing process;
            provides access to a <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/> </param>
            <returns>The primary IObjectDefinition resulting from the parsing of the supplied XmlElement</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ShouldGenerateId">
            <summary>
            Gets a value indicating whether an ID should be generated instead of read 
            from the passed in XmlElement.
            </summary>
            <remarks>Note that this flag is about always generating an ID; the parser
            won't even check for an "id" attribute in this case.
            </remarks>
            <value><c>true</c> if should generate id; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.AbstractObjectDefinitionParser.ShouldGenerateIdAsFallback">
            <summary>
            Gets a value indicating whether an ID should be generated instead if the
            passed in XmlElement does not specify an "id" attribute explicitly.
            </summary>
            <remarks>Disabled by default; subclasses can override this to enable ID generation
            as fallback: The parser will first check for an "id" attribute in this case,
            only falling back to a generated ID if no value was specified.</remarks>
            <value>
            	<c>true</c> if should generate id if no value was specified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.AbstractSimpleObjectDefinitionParser">
             <summary>
             Convenient base class for when there exists a one-to-one mapping
             between attribute names on the element that is to be parsed and
             the property names on the Type being configured. 
             </summary>
             <remarks>
            
             </remarks>
             <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser">
            <summary>
            Base Type for those <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> implementations that
            need to parse and define just a single IObjectDefinition.
            </summary>
            <remarks>
            Extend this parser Type when you want to create a single object definition
            from an arbitrarily complex XML element. You may wish to consider extending
            the <see cref="T:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser"/> when you want to create a
            single Object definition from a relatively simple custom XML element.
            <para>The resulting ObjectDefinition will be automatically registered
            with the ObjectDefinitionRegistry.  Your job simply is to parse the
            custom XML element into a single ObjectDefinition</para>
            </remarks>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser.ParseInternal(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Central template method to actually parse the supplied XmlElement
            into one or more IObjectDefinitions.
            </summary>
            <param name="element">The element that is to be parsed into one or more <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>s</param>
            <param name="parserContext">The the object encapsulating the current state of the parsing process;
            provides access to a <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/></param>
            <returns>
            The primary IObjectDefinition resulting from the parsing of the supplied XmlElement
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser.GetParentName(System.Xml.XmlElement)">
            <summary>
            Determine the name for the parent of the currently parsed object,
            in case of the current object being defined as a child object.
            The default implementation returns <c>null</c>
            indicating a root object definition.
            </summary>
            <param name="element"></param>
            <returns>the name of the parent object for the currently parsed object.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser.GetObjectType(System.Xml.XmlElement)">
            <summary>
            Gets the type of the object corresponding to the supplied XmlElement.
            </summary>
            <remarks>Note that, for application classes, it is generally preferable to override
            <code>GetObjectTypeName</code> instad, in order to avoid a direct
            dependence on the object implementation class.  The ObjectDefinitionParser
            and its IXmlObjectDefinitionParser (namespace parser) can be used within an
            IDE add-in then, even if the application classses are not available in the add-ins
            AppDomain.
            </remarks>
            <param name="element">The element.</param>
            <returns>The Type of the class that is being defined via parsing the supplied
            Element.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser.GetObjectTypeName(System.Xml.XmlElement)">
            <summary>
            Gets the name of the object type name (FullName) corresponding to the supplied XmlElement.
            </summary>
            <param name="element">The element.</param>
            <returns>The type name of the object that is being defined via parsing the supplied
            XmlElement.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser.DoParse(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext,Spring.Objects.Factory.Support.ObjectDefinitionBuilder)">
            <summary>
            Parse the supplied XmlElement and populate the supplied ObjectDefinitionBuilder as required.
            </summary>
            <remarks>The default implementation delegates to the <code>DoParse</code> version without 
            ParameterContext argument.</remarks>
            <param name="element">The element.</param>
            <param name="parserContext">The parser context.</param>
            <param name="builder">The builder used to define the <code>IObjectDefinition</code>.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.AbstractSingleObjectDefinitionParser.DoParse(System.Xml.XmlElement,Spring.Objects.Factory.Support.ObjectDefinitionBuilder)">
            <summary>
            Parse the supplied XmlElement and populate the supplied ObjectDefinitionBuilder as required. 
            </summary>
            <remarks>The default implementation does nothing.</remarks>
            <param name="element">The element.</param>
            <param name="builder">The builder used to define the <code>IObjectDefinition</code>.</param>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.DefaultNamespaceHandlerResolver">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.Factory.Xml.INamespaceParserResolver"/> interface.
            Resolves namespace URIs to implementation types based on mappings.
            </summary>
            <author>Erich Eichinger</author>
            <seealso cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/>
            <seealso cref="T:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader"/>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.INamespaceParserResolver">
            <summary>
            Used by <see cref="T:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader"/> to locate
            <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/> implementations for a particular namespace URI.
            </summary>
            <remarks>TODO (EE): clarify naming of INamespaceParser (SPR/NET) vs. INamespaceHandler (SPR/Java), thus internal for now</remarks>
            <author>Erich Eichinger</author>
            <seealso cref="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.NamespaceParserResolver"/>
            <seealso cref="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.CreateDefaultNamespaceParserResolver"/>
            <seealso cref="P:Spring.Objects.Factory.Xml.XmlReaderContext.NamespaceParserResolver"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.INamespaceParserResolver.Resolve(System.String)">
            <summary>
            Lookup a <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/> for the given namespace URI.
            </summary>
            <param name="namespaceUri">the namespace URI</param>
            <returns>the located namespace handler or <c>null</c></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultNamespaceHandlerResolver.Resolve(System.String)">
            <summary>
            Resolve the namespace URI and return the corresponding <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/>
            implementation.
            </summary>
            <param name="namespaceUri">the namespace URI to get the matching parser for.</param>
            <returns>the matching parser or <c>null</c></returns>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader">
            <summary>
            XML resource reader. 
            </summary>
            <remarks>
            <p>
            Navigates through an XML resource and invokes parsers registered
            with the <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry"/>.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.IObjectDefinitionDocumentReader">
            <summary>
            SPI for parsing an XML document that contains Spring object definitions.
            Used by <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> for actually parsing a DOM
            document.
            </summary>
            <remarks>Instantiated per document to parse:  Implementations can hold state in
            instance variables during the execution of the <code>RegisterObjectDefinitions</code>
            method, for example global settings that are defined for all object definitions
            in the document.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rob Harrop</author>
            <author>Mark Pollack (.NET)</author>
            
        </member>
        <member name="M:Spring.Objects.Factory.Xml.IObjectDefinitionDocumentReader.RegisterObjectDefinitions(System.Xml.XmlDocument,Spring.Objects.Factory.Xml.XmlReaderContext)">
            <summary>
            Read object definitions from the given DOM element, and register
            them with the given object registry.
            </summary>
            <param name="doc">The DOM element containing object definitions, usually the
            root (document) element.</param>
            <param name="readerContext">The current context of the reader.  Includes 
            the resource being parsed</param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of parsing errors.
            </exception>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.log">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.#ctor">
            <summary>
            Creates a new instance of the DefaultObjectDefinitionDocumentReader class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.RegisterObjectDefinitions(System.Xml.XmlDocument,Spring.Objects.Factory.Xml.XmlReaderContext)">
            <summary>
            Read object definitions from the given DOM element, and register
            them with the given object registry.
            </summary>
            <param name="doc">The DOM element containing object definitions, usually the
            root (document) element.</param>
            <param name="readerContext">The current context of the reader.  Includes
            the resource being parsed</param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.ParseObjectDefinitions(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper)">
            <summary>
            Parses object definitions starting at the given <see cref="T:System.Xml.XmlElement"/> 
            using the passed <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper"/>.
            </summary>
            <param name="root">The root element to start parsing from.</param>
            <param name="helper">The <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper"/> instance to use.</param>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            in case an error happens during parsing and registering object definitions
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.ProcessAlias(System.Xml.XmlElement)">
            <summary>
            Process an alias element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.ProcessObjectDefinition(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper)">
            <summary>
            Process the object element
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.ImportObjectDefinitionResource(System.Xml.XmlElement)">
            <summary>
            Loads external XML object definitions from the resource described by the supplied
            <paramref name="resource"/>.
            </summary>
            <param name="resource">The XML element describing the resource.</param>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            If the resource could not be imported.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.ParseAlias(System.Xml.XmlElement,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Parses the given alias element, registering the alias with the registry.
            </summary>
            <param name="aliasElement">The alias element.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.RegisterObjectDefinition(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper)">
            <summary>
            Parse an object definition and register it with the object factory..
            </summary>
            <param name="element">The element containing the object definition.</param>
            <param name="helper">The helper.</param>
            <seealso cref="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.RegisterObjectDefinition(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.PostProcessXml(System.Xml.XmlElement)">
            <summary>
            <para>
            Allow the XML to be extensible by processing any custom element types last,
            after we finished processing the objct definitions. This method is a natural
            extension point for any other custom post-processing of the XML.
            </para><para>
            The default implementation is empty. Subclasses can override this method to
            convert custom elements into standard Spring object definitions, for example.
            Implementors have access to the parser's object definition reader and the
            underlying XML resource, through the corresponding properties.
            </para>
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.PreProcessXml(System.Xml.XmlElement)">
            <summary>
            Allow the XML to be extensible by processing any custom element types first,
            before we start to process the object definitions.
            </summary>
            <remarks>This method is a natural
            extension point for any other custom pre-processing of the XML.
            <p>The default implementation is empty. Subclasses can override this method to
            convert custom elements into standard Spring object definitions, for example.
            Implementors have access to the parser's object definition reader and the
            underlying XML resource, through the corresponding properties.
            </p>
            </remarks>
            <param name="root">The root element of the XML document.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.CreateHelper(Spring.Objects.Factory.Xml.XmlReaderContext,System.Xml.XmlElement)">
            <summary>
            Creates an <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper"/> instance for the given <paramref name="readerContext"/> and <paramref name="root"/> element.
            </summary>
            <param name="readerContext">the <see cref="T:Spring.Objects.Factory.Xml.XmlReaderContext"/> to create the <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper"/> </param>
            <param name="root">the root <see cref="T:System.Xml.XmlElement"/> to start reading from</param>
            <returns>a new <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper"/> instance</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader.ReaderContext">
            <summary>
            Gets the reader context.
            </summary>
            <value>The reader context.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.DocumentDefaultsDefinition">
            <summary>
            Simple class that holds the defaults specified at the <code>&lt;objects&gt;</code> 
            level in a standard Spring XML object definition document:
            <code>default-lazy-init</code>, <code>default-autowire</code>, etc.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.DocumentDefaultsDefinition.Autowire">
            <summary>
            Gets or sets the autowire setting for the document that's currently parsed.
            </summary>
            <value>The autowire.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.DocumentDefaultsDefinition.DependencyCheck">
            <summary>
            Gets or sets the dependency-check setting for the document that's currently parsed
            </summary>
            <value>The dependency check.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.DocumentDefaultsDefinition.LazyInit">
            <summary>
            Gets or sets the lazy-init flag for the document that's currently parsed.
            </summary>
            <value>The lazy init.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.DocumentDefaultsDefinition.Merge">
            <summary>
            Gets or sets the merge setting for the document that's currently parsed.
            </summary>
            <value>The merge.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.INamespaceParser">
            <summary>
            Strategy interface for parsing XML object definitions. Equivalent to Spring/Java's <c>NamespaceHandler</c> interface.
            </summary>
            <remarks>
            <p>
            Used by <see cref="T:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader"/>
            for actually parsing a DOM document or
            <see cref="T:System.Xml.XmlElement"/> fragment.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <author>Sandu Turcan (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.INamespaceParser.Init">
            <summary>
            Invoked by <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry"/> after construction but before any
            elements have been parsed.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.INamespaceParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified element and register any resulting
            IObjectDefinitions with the IObjectDefinitionRegistry that is
            embedded in the supplied ParserContext.
            </summary>
            <remarks>
            Implementations should return the primary IObjectDefinition
            that results from the parse phase if they wish to used nested
            inside (for example) a <code>&lt;property&gt;</code> tag.
            <para>Implementations may return null if they will not
            be used in a nested scenario.
            </para>
            </remarks>
            <param name="element">The element to be parsed into one or more IObjectDefinitions</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>
            The primary IObjectDefinition (can be null as explained above)
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.INamespaceParser.Decorate(System.Xml.XmlNode,Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlNode and decorate the supplied ObjectDefinitionHolder,
            returning the decorated definition.
            </summary>
            <remarks>The XmlNode may either be an XmlAttribute or an XmlElement, depending on
            whether a custom attribute or element is being parsed.
            <para>Implementations may choose to return a completely new definition,
            which will replace the original definition in the resulting IApplicationContext/IObjectFactory.
            </para>
            <para>The supplied ParserContext can be used to register any additional objects needed to support
            the main definition.</para>
            </remarks>
            <param name="node">The source element or attribute that is to be parsed.</param>
            <param name="definition">The current object definition.</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>The decorated definition (to be registered in the IApplicationContext/IObjectFactory),
            or simply the original object definition if no decoration is required.  A null value is strickly
            speaking invalid, but will leniently treated like the case where the original object definition
            gets returned.</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.NamespaceParserAttribute">
            <summary>
            Attribute that should be used to specify the default namespace
            and schema location for a custom namespace parser.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserAttribute"/>.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.Namespace">
            <summary>
            Gets or sets the default namespace for the configuration parser.
            </summary>
            <value>
            The default namespace for the configuration parser.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.SchemaLocation">
            <summary>
            Gets or sets the default schema location for the configuration parser.
            </summary>
            <value>
            The default schema location for the configuration parser.
            </value>
            <remarks>
            If the <see cref="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.SchemaLocationAssemblyHint"/>  property is set, the <see cref="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.SchemaLocation"/> will always resolve to an assembly-resource 
            and the set <see cref="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.SchemaLocation"/> will be interpreted relative to this assembly.
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.SchemaLocationAssemblyHint">
            <summary>
            Gets or sets a type from the assembly containing the schema
            </summary>
            <remarks>
            If this property is set, the <see cref="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.SchemaLocation"/> will always resolve to an assembly-resource 
            and the <see cref="P:Spring.Objects.Factory.Xml.NamespaceParserAttribute.SchemaLocation"/> will be interpreted relative to this assembly.
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry">
            <summary>
            Provides a resolution mechanism for configuration parsers.
            </summary>
            <remarks>
            <p>
            The <see cref="T:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader"/> uses this registry
            class to find the parser handling a specific namespace.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.NamespaceParserRegistry.ConfigParsersSectionName">
            <summary>
            Name of the .Net config section that contains definitions 
            for custom config parsers.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.#cctor">
            <summary>
            Creates a new instance of the NamespaceParserRegistry class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.Reset">
            <summary>
            Reset the list of registered parsers to "factory"-setting
            </summary>
            <remarks>use for unit tests only</remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.RegisterWellknownNamespaceParserType(System.String)">
            <summary>
            Registers the <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/> type for wellknown namespaces
            </summary>
            <returns><c>true</c> if the parser could be registered, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.GetAssemblySchemaLocation(System.Type,System.String)">
            <summary>
            Constructs a "assembly://..." qualified schemaLocation url using the given type
            to obtain the assembly name.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.GetParser(System.String)">
            <summary>
            Returns a parser for the given namespace.
            </summary>
            <param name="namespaceURI">
            The namespace for which to lookup the parser implementation.
            </param>
            <returns>
            A parser for a given <paramref name="namespaceURI"/>, or
            <see langword="null"/> if no parser was found.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.GetSchemas">
            <summary>
            Returns a schema collection containing validation schemas for all registered parsers.
            </summary>
            <returns>
            A schema collection containing validation schemas for all registered parsers.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.RegisterParser(System.Type)">
            <summary>
            Pegisters parser, using default namespace and schema location
            as defined by the <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserAttribute"/>.
            </summary>
            <param name="parserType">
            The <see cref="T:System.Type"/> of the parser that will be activated
            when an element in its default namespace is encountered.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="parserType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.RegisterParser(System.Type,System.String,System.String)">
            <summary>
            Associates a parser with a namespace.
            </summary>
            <remarks>
            <note>
            Parsers registered with the same <paramref name="namespaceUri"/> as that
            of a parser that has previously been registered will overwrite the existing
            parser.
            </note>
            </remarks>
            <param name="parserType">
            The <see cref="T:System.Type"/> of the parser that will be activated
            when the attendant <paramref name="namespaceUri"/> is
            encountered.
            </param>
            <param name="namespaceUri">
            The namespace with which to associate instance of the parser.
            </param>
            <param name="schemaLocation">
            The location of the XML schema that should be used for validation 
            of the XML elements that belong to the specified namespace 
            (can be any valid Spring.NET resource URI).
            </param>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="parserType"/> is not a <see cref="T:System.Type"/>
            that implements the <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/>
            interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="parserType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.RegisterParser(Spring.Objects.Factory.Xml.INamespaceParser)">
            <summary>
            Pegisters parser, using default namespace and schema location
            as defined by the <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserAttribute"/>.
            </summary>
            <param name="parser">
            The parser instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="parser"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.RegisterParser(Spring.Objects.Factory.Xml.INamespaceParser,System.String,System.String)">
            <summary>
            Associates a parser with a namespace.
            </summary>
            <remarks>
            <note>
            Parsers registered with the same <paramref name="namespaceUri"/> as that
            of a parser that has previously been registered will overwrite the existing
            parser.
            </note>
            </remarks>
            <param name="namespaceUri">
            The namespace with which to associate instance of the parser.
            </param>
            <param name="parser">
            The parser instance.
            </param>
            <param name="schemaLocation">
            The location of the XML schema that should be used for validation 
            of the XML elements that belong to the specified namespace 
            (can be any valid Spring.NET resource URI).
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="parser"/> is <see langword="null"/>, or if 
            <paramref name="namespaceUri"/> is not specified and parser class
            does not have default value defined using <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserAttribute"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.RegisterSchema(System.String,System.String)">
            <summary>
            Register a schema as well-known
            </summary>
            <param name="namespaceUri"></param>
            <param name="schemaLocation"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserRegistry.GetDefaults(System.Type)">
            <summary>
            Returns default values for the parser namespace and schema location as 
            defined by the <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserAttribute"/>.
            </summary>
            <param name="parserType">
            A type of the parser.
            </param>
            <returns>
            A <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserAttribute"/> instance containing
            default values for the parser namsepace and schema location
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry.XmlResourceUrlResolver">
            <summary>
            Resolves xml entities by using the <see cref="T:Spring.Core.IO.IResourceLoader"/> infrastructure.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry.ObjectDefinitionParserNamespaceParser">
            <summary>
            Adapts the <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> interface to <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/>.
            Only for smooth transition between 1.x and 2.0 style namespace handling, will be dropped for 2.0
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.NamespaceParserSupport">
            <summary>
            Support class for implementing custom namespace parsers.
            </summary>
            <remarks>Parsing of individual elements is done via a ObjectDefintionParser.
            Provides the RegisterObjectDefinitionParser for registering a ObjectDefintionParser
            to handle a specific element.</remarks>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserSupport.Init">
            <summary>
            Invoked by <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry"/> after construction but before any
            elements have been parsed.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserSupport.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses an element under the root node, typically
            an object definition or import statement.
            </summary>
            <param name="element">
            The element to be parsed.
            </param>
            <param name="parserContext">
            The parser context.
            </param>
            <returns>
            The number of object defintions created from this element.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserSupport.Decorate(System.Xml.XmlNode,Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlNode and decorate the supplied ObjectDefinitionHolder,
            returning the decorated definition.
            </summary>
            <remarks>The XmlNode may either be an XmlAttribute or an XmlElement, depending on
            whether a custom attribute or element is being parsed.
            <para>Implementations may choose to return a completely new definition,
            which will replace the original definition in the resulting IApplicationContext/IObjectFactory.
            </para>
            <para>The supplied ParserContext can be used to register any additional objects needed to support
            the main definition.</para>
            </remarks>
            <param name="node">The source element or attribute that is to be parsed.</param>
            <param name="definition">The current object definition.</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>The decorated definition (to be registered in the IApplicationContext/IObjectFactory),
            or simply the original object definition if no decoration is required.  A null value is strickly
            speaking invalid, but will leniently treated like the case where the original object definition
            gets returned.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.NamespaceParserSupport.RegisterObjectDefinitionParser(System.String,Spring.Objects.Factory.Xml.IObjectDefinitionParser)">
            <summary>
            Register the specified <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> for the given <paramref name="elementName"/>
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.ObjectDefinitionConstants">
            <summary>
            Constants defining the structure and values associated with the
            Spring.NET XML object definition format.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.TrueValue">
            <summary>
            Value of a boolean attribute that represents
            <see langword="true"/>.
            </summary>
            <remarks>
            <p>
            Anything else represents <see langword="false"/>.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DefaultValue">
            <summary>
            Signifies that a default value is to be applied.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ImportElement">
            <summary>
            Defines an external XML object definition resource.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ImportResourceAttribute">
            <summary>
            Specifies the relative path to an external XML object definition
            resource.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AliasElement">
            <summary>
            Defines an alias for an object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AliasAttribute">
            <summary>
            Specifies the alias of an object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DefaultLazyInitAttribute">
            <summary>
            Specifies the default lazy initialization mode.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DefaultDependencyCheckAttribute">
            <summary>
            Specifies the default dependency checking mode.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DefaultAutowireAttribute">
            <summary>
            Specifies the default autowire mode.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DefaultMergeAttribute">
            <summary>
            Specifies the default collection merge mode.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ObjectElement">
            <summary>
            Defines a single named object.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DescriptionElement">
            <summary>
            Element containing informative text describing the purpose of the
            enclosing element.
            </summary>
            <remarks>
            <p>
            Always optional.
            </p>
            <p>
            Used primarily for user documentation of XML object definition
            documents.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.TypeAttribute">
            <summary>
            Specifies a <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <p>
            Does not have to be fully assembly qualified, but it is recommended
            that the <see cref="T:System.Type"/> names of one's objects are
            specified explicitly.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ParentAttribute">
            <summary>
            The name or alias of the parent object definition that a child
            object definition inherits from.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.IdAttribute">
            <summary>
            Objects can be identified by an id, to enable reference checking.
            </summary>
            <remarks>
            <p>
            There are constraints on a valid XML id: if you want to reference
            your object in .NET code using a name that's illegal as an XML id,
            use the optional <c>"name"</c> attribute
            (<see cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.NameAttribute"/>).
            If neither given, the objects <see cref="T:System.Type"/> name is
            used as id.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.NameAttribute">
            <summary>
            Can be used to create one or more aliases illegal in an id.
            </summary>
            <remarks>
            <p>
            Multiple aliases can be separated by any number of spaces,
            semicolons, or commas
            (<see cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ObjectNameDelimiters"/>).
            </p>
            <p>
            Always optional.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.SingletonAttribute">
            <summary>
            Is this object a "singleton" (one shared instance, which will
            be returned by all calls to
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> with the id), or a
            "prototype" (independent instance resulting from each call to
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>).
            </summary>
            <remarks>
            <p>
            Singletons are most commonly used, and are ideal for multi-threaded
            service objects.
            </p>
            </remarks>
            <seealso cref="T:Spring.Objects.Factory.IObjectFactory"/>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ScopeAttribute">
            <summary>
            Controls object scope. Only applicable to ASP.NET web applications.
            </summary>
            <remarks>
            <p>
            Scope can be defined as either application, session or request. It
            defines when "singleton" instances are initialized, but has no
            effect on prototype definitions.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DependsOnAttribute">
            <summary>
            The names of the objects that this object depends on being
            initialized.
            </summary>
            <remarks>
            <p>
            The object factory will guarantee that these objects
            get initialized before this object definition.
            </p>
            <note>
            Dependencies are normally expressed through object properties or
            constructor arguments. This property should just be necessary for
            other kinds of dependencies such as statics (*ugh*) or database
            preparation on startup.
            </note>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.InitMethodAttribute">
            <summary>
            Optional attribute for the name of the custom initialization method
            to invoke after setting object properties.
            </summary>
            <remarks>
            <p>
            The method <b>must</b> have no arguments.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DestroyMethodAttribute">
            <summary>
            Optional attribute for the name of the custom destroy method to
            invoke on object factory shutdown.
            </summary>
            <remarks>
            <p>
            Valid destroy methods have either of the following signatures...
            <list type="bullet">
            <item><c>void MethodName()</c></item>
            <item><c>void MethodName(bool force)</c></item>
            </list>
            </p>
            <note>
            Only invoked on singleton objects!
            </note>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ConstructorArgElement">
            <summary>
            A constructor argument : the constructor-arg tag can have an
            optional type attribute, to specify the exact type of the
            constructor argument
            </summary>
            <remarks>
            <p>
            Only needed  to avoid ambiguities, e.g. in case of 2 single
            argument constructors that can both be converted from a
            <see cref="T:System.String"/>.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.IndexAttribute">
            <summary>
            The constructor-arg tag can have an optional index attribute,
            to specify the exact index in the constructor argument list.
            </summary>
            <remarks>
            <p>
            Only needed to avoid ambiguities, e.g. in case of 2 arguments of
            the same type.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ArgumentNameAttribute">
            <summary>
            The constructor-arg tag can have an optional named parameter
            attribute, to specify a named parameter in the constructor
            argument list.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AbstractAttribute">
            <summary>
            Is this object "abstract", i.e. not meant to be instantiated itself
            but rather just serving as parent for concrete child object
            definitions?
            </summary>
            <remarks>
            <p>
            Default is <see langword="false"/>. Specify <see langword="true"/>
            to tell the object factory to not try to instantiate that
            particular object in any case.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.PropertyElement">
            <summary>
            A property definition : object definitions can have zero or more
            properties.
            </summary>
            <remarks>
            <p>
            Spring.NET supports primitives, references to other objects in the
            same or related factories, lists, dictionaries, and name value
            collections.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.RefElement">
            <summary>
            A reference to another managed object or static
            <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.IdRefElement">
            <summary>
            ID refs must specify a name of the target object.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ObjectRefAttribute">
            <summary>
            A reference to the name of another managed object in the same
            context.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.LocalRefAttribute">
            <summary>
            A reference to the name of another managed object in the same
            context.
            </summary>
            <remarks>
            <p>
            Local references, using the "local" attribute, have to use object
            ids; they can be checked by a parser, thus should be preferred for
            references within the same object factory XML file.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.FactoryObjectAttribute">
            <summary>
            Alternative to type attribute for factory-method usage.
            </summary>
            <remarks>
            <p>
            If this is specified, no type attribute should be used. This should
            be set to the name of an object in the current or ancestor
            factories that contains the relevant factory method. This allows
            the factory itself to be configured using Dependency Injection, and
            an instance (rather than static) method to be used.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.FactoryMethodAttribute">
            <summary>
            Optional attribute specifying the name of a factory method to use
            to create this object.
            </summary>
            <remarks>
            <p>
            Use constructor-arg elements to specify arguments to the factory
            method, if it takes arguments. Autowiring does <b>not</b> apply to
            factory methods.
            </p>
            <p>
            If the "type" attribute is present, the factory method will be a
            static method on the type specified by the "type" attribute on
            this object definition. Often this will be the same type as that
            of the constructed object - for example, when the factory method
            is used as an alternative to a constructor. However, it may be on
            a different type. In that case, the created object will *not* be
            of the type specified in the "type" attribute. This is analogous
            to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> behaviour.
            </p>
            <p>
            If the "factory-object" attribute is present, the "type" attribute
            is not used, and the factory method will be an instance method on
            the object returned from a
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            call with the specified object name. The factory object may be
            defined as a singleton or a prototype.
            </p>
            <p>
            The factory method can have any number of arguments. Use indexed
            constructor-arg elements in conjunction with the factory-method
            attribute.
            </p>
            <p>
            Setter Injection can be used in conjunction with a factory method.
            Method Injection cannot, as the factory method returns an instance,
            which will be used when the container creates the object.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ListElement">
            <summary>
            A list can contain multiple inner object, ref, collection, or
            value elements.
            </summary>
            <remarks>
            <p>
            Lists are untyped, pending generics support, although references
            will be strongly typed.
            </p>
            <p>
            A list can also map to an array type. The necessary conversion is
            automatically performed by the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/>.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.SetElement">
            <summary>
            A set can contain multiple inner object, ref, collection, or value
            elements.
            </summary>
            <remarks>
            <p>
            Sets are untyped, pending generics support, although references
            will be strongly typed.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DictionaryElement">
            <summary>
            A Spring.NET map is a mapping from a string key to object (a .NET
            <see cref="T:System.Collections.IDictionary"/>).
            </summary>
            <remarks>
            <p>
            Dictionaries may be empty.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.KeyAttribute">
            <summary>
            A lookup key (for a dictionary or name / value collection).
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.KeyElement">
            <summary>
            A lookup key (for a dictionary or name / value collection).
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ValueAttribute">
            <summary>
            Contains a string representation of a value.
            </summary>
            <remarks>
            <p>
            This is used by name-value, ctor argument, and property elements.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DelimitersAttribute">
            <summary>
            Contains delimiters that should be used to split delimited string values.
            </summary>
            <remarks>
            <p>
            This is used by name-value element.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.RefAttribute">
            <summary>
            A reference to another objects.
            </summary>
            <remarks>
            <p>
            Used as a convenience shortcut on property and constructor-arg
            elements to refer to other objects.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ExpressionAttribute">
            <summary>
            Contains a string representation of an expression.
            </summary>
            <remarks>
            <p>
            This is used by ctor argument and property elements.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.EntryElement">
            <summary>
            A map entry can be an inner object, ref, collection, or value.
            </summary>
            <remarks>
            <p>
            The name of the property is given by the "key" attribute.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ValueElement">
            <summary>
            Contains a string representation of a property value.
            </summary>
            <remarks>
            <p>
            The property may be a string, or may be converted to the
            required <see cref="T:System.Type"/> using the
            <see cref="T:System.ComponentModel.TypeConverter"/> 
            machinery. This makes it possible for application developers to
            write custom <see cref="T:System.ComponentModel.TypeConverter"/>
            implementations that can convert strings to objects.
            </p>
            <note>
            This is recommended for simple objects only. Configure more complex
            objects by setting properties to references to other objects.
            </note>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ExpressionElement">
            <summary>
            Contains a string representation of an expression.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.NullElement">
            <summary>
            Denotes <see langword="null"/>  value.
            </summary>
            <remarks>
            <p>
            Necessary because an empty "value" tag will resolve to an empty
            <see cref="T:System.String"/>, which will not be resolved to
            <see langword="null"/> value unless a special
            <see cref="T:System.ComponentModel.TypeConverter"/> does so.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.NameValuesElement">
            <summary>
            'name-values' elements differ from dictionary elements in that
            values must be strings.
            </summary>
            <remarks>
            <p>
            May be empty.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AddElement">
            <summary>
            Element content is the string value of the property.
            </summary>
            <remarks>
            <p>
            The "key" attribute is the name of the property.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.LazyInitAttribute">
            <summary>
            The lazy initialization mode for an individual object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DependencyCheckAttribute">
            <summary>
            The dependency checking mode for an individual object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ListenerElement">
            <summary>
            Defines a subscription to one or more events published by one or
            more event sources.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ListenerMethodAttribute">
            <summary>
            The name of an event handling method.
            </summary>
            <remarks>
            <p>
            Defaults to <c>On${event}</c>.
            <b>Note : this default will probably change before the first 1.0
            release.</b>
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ListenerEventAttribute">
            <summary>
            The name of an event.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AutowireAttribute">
            <summary>
            The autowiring mode for an individual object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DictionaryKeyRefShortcutAttribute">
            <summary>
            Shortcut alternative to specifying a key element in a
            dictionary entry element with <c>&lt;ref object="..."/&gt;</c>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DictionaryValueRefShortcutAttribute">
            <summary>
            Shortcut alternative to specifying a value element in a
            dictionary entry element with <c>&lt;ref object="..."/&gt;</c>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.MergeAttribute">
            <summary>
            Specify if the collection values should be merged with the parent.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ObjectNameDelimiters">
            <summary>
            The string of characters that delimit object names.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.LookupMethodElement">
            <summary>
            A lookup method causes the IoC container to override a given method and return
            the object with the name given in the attendant <c>object</c> attribute.
            </summary>
            <remarks>
            <p>
            This is a form of Method Injection.
            </p>
            <p>
            It's particularly useful as an alternative to implementing the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/> interface,
            in order to be able to make
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            calls for non-singleton instances at runtime. In this case, Method Injection
            is a less invasive alternative.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.LookupMethodNameAttribute">
            <summary>
            The name of a lookup method. This method <b>must</b> take no arguments.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.LookupMethodObjectNameAttribute">
            <summary>
            The name of the object in the IoC container that the lookup method
            must resolve to.
            </summary>
            <remarks>
            <p>
            Often this object will be a prototype, in which case the lookup method
            will return a distinct instance on every invocation. This is useful
            for single-threaded objects.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodElement">
            <summary>
            A replaced method causes the IoC container to override a given method
            with an (arbitrary) implementation at runtime.
            </summary>
            <remarks>
            <p>
            This (again) is a form of Method Injection.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodNameAttribute">
            <summary>
            Name of the method whose implementation should be replaced by the
            IoC container.
            </summary>
            <remarks>
            <p>
            If this method is not overloaded, there's no need to use arg-type 
            subelements.
            </p>
            <p>
            If this method is overloaded, <c>arg-type</c> subelements must be
            used for all override definitions for the method.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodReplacerNameAttribute">
            <summary>
            The object name of an implementation of the
            <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/> interface.
            </summary>
            <remarks>
            <p>
            This may be a singleton or prototype. If it's a prototype, a new
            instance will be used for each method replacement. Singleton usage
            is the norm.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodArgumentTypeElement">
            <summary>
            Subelement of <c>replaced-method</c> identifying an argument for a
            replaced method in the event of method overloading.
            </summary>
            <seealso cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodReplacerNameAttribute"/> 
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodArgumentTypeMatchAttribute">
            <summary>
            Specification of the <see cref="T:System.Type"/> of an overloaded method
            argument as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
            <p>
            For convenience, this may be a substring of the FQN. E.g. all the following would match
            <see cref="T:System.String"/>:
            </p>
            <p>
            <list type="bullet">
            <item>
            <description>System.String</description>
            </item>
            <item>
            <description>string</description>
            </item>
            <item>
            <description>str</description>
            </item>
            </list>
            </p>
            </remarks>
            <seealso cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodArgumentTypeElement"/> 
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DependencyCheckAllAttributeValue">
            <summary>
            Check everything.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DependencyCheckSimpleAttributeValue">
            <summary>
            Just check primitive (string, int, etc) values.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.DependencyCheckObjectsAttributeValue">
            <summary>
            Check object references.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AutowireByNameValue">
            <summary>
            Autowire by name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AutowireByTypeValue">
            <summary>
            Autowire by <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AutowireConstructorValue">
            <summary>
            Autowiring by constructor.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.AutowireAutoDetectValue">
            <summary>
            The autowiring strategy is to be determined by introspection
            of the object's <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionConstants"/>
            class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper">
            <summary>
            Stateful class used to parse XML object definitions.
            </summary>
            <remarks>Not all parsing code has been refactored into this class. See 
            BeanDefinitionParserDelegate in Java for how this class should evolve.</remarks>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.log">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.#ctor(Spring.Objects.Factory.Xml.XmlReaderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper"/> class.
            </summary>
            <param name="readerContext">The reader context.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.#ctor(Spring.Objects.Factory.Xml.XmlReaderContext,System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper"/> class.
            </summary>
            <param name="readerContext">The reader context.</param>
            <param name="root">The root element of the definition document to parse</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.InitDefaults(System.Xml.XmlElement)">
            <summary>
            Initialize the default lazy-init, dependency check, and autowire settings.
            </summary>
            <param name="root">The root element</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.IsDefaultNamespace(System.String)">
            <summary>
            Determines whether the Spring object namespace is equal to the the specified namespace URI.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <returns>
            	<c>true</c> if is the default Spring namespace; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.DecorateObjectDefinitionIfRequired(System.Xml.XmlElement,Spring.Objects.Factory.Config.ObjectDefinitionHolder)">
            <summary>
            Decorates the object definition if required.
            </summary>
            <param name="element">The element.</param>
            <param name="holder">The holder.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.ParseObjectDefinitionElement(System.Xml.XmlElement)">
            <summary>
            Parse a standard object definition into a
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/>,
            including object name and aliases.
            </summary>
            <param name="element">The element containing the object definition.</param>
            <returns>
            The parsed object definition wrapped within an
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/>
            instance.
            </returns>
            <remarks>
            <para>
            Object elements specify their canonical name via the "id" attribute
            and their aliases as a delimited "name" attribute.
            </para>
            <para>
            If no "id" is specified, uses the first name in the "name" attribute
            as the canonical name, registering all others as aliases.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.ParseObjectDefinitionElement(System.Xml.XmlElement,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Parse a standard object definition into a
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/>,
            including object name and aliases.
            </summary>
            <param name="element">The element containing the object definition.</param>
            <param name="containingDefinition">The containing object definition if <paramref name="element"/> is a nested element.</param>
            <returns>
            The parsed object definition wrapped within an
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/>
            instance.
            </returns>
            <remarks>
            <para>
            Object elements specify their canonical name via the "id" attribute
            and their aliases as a delimited "name" attribute.
            </para>
            <para>
            If no "id" is specified, uses the first name in the "name" attribute
            as the canonical name, registering all others as aliases.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.CreateObjectDefinitionHolder(System.Xml.XmlElement,Spring.Objects.Factory.Support.IConfigurableObjectDefinition,System.String,System.String[])">
            <summary>
            Create an <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/> instance from the given <paramref name="definition"/> and <paramref name="objectName"/>.
            </summary>
            <remarks>
            This method may be used as a last resort to post-process an object definition before it gets added to the registry.
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.PostProcessObjectNameAndAliases(System.String,System.Collections.ArrayList,System.Xml.XmlElement,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Allows deriving classes to post process the name and aliases for the current element. By default
            does nothing and returns the unmodified <paramref name="objectName"/>.
            </summary>
            <remarks>
            The <paramref name="aliases"/> list passed in may be modified by an implementation of this method to reflect special needs.
            </remarks>
            <param name="objectName">the object name obtained by the default algorithm from 'id' and 'name' attributes so far.</param>
            <param name="aliases">the object aliases obtained by the default algorithm from 'name' attribute so far.</param>
            <param name="element">the currently processed element.</param>
            <param name="containingDefinition">the containing object definition, may be <c>null</c></param>
            <returns>the new object name to be used.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.CheckNameUniqueness(System.String,System.Collections.ArrayList,System.Xml.XmlElement)">
            <summary>
            Validate that the specified object name and aliases have not been used already.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.ParseCustomElement(System.Xml.XmlElement)">
            <summary>
            Parses an element in a custom namespace.
            </summary>
            <param name="ele"></param>
            <returns>the parsed object definition or null if not supported by the corresponding parser.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.ParseCustomElement(System.Xml.XmlElement,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Parses an element in a custom namespace.
            </summary>
            <param name="ele"></param>
            <param name="containingDefinition">if a nested element, the containing object definition</param>
            <returns>the parsed object definition or null if not supported by the corresponding parser.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.GetObjectNames(System.String)">
            <summary>
            Given a string containing delimited object names, returns
            a string array split on the object name delimeter.
            </summary>
            <param name="value">
            The string containing delimited object names.
            </param>
            <returns>
            A string array split on the object name delimeter.
            </returns>
            <seealso cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ObjectNameDelimiters"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.IsTrueStringValue(System.String)">
            <summary>
            Determines whether the string represents a 'true' boolean value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if is 'true' string value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.CreateRootObjectDefinitionBuilder(System.String)">
            <summary>
            Convenience method to create a builder for a root object definition.
            </summary>
            <param name="objectTypeName">Name of the object type.</param>
            <returns>A builder for a root object definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.CreateRootObjectDefinitionBuilder(System.Type)">
            <summary>
            Convenience method to create a builder for a root object definition.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>a builder for a root object definition</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.GetAttributeValue(System.Xml.XmlElement,System.String)">
            <summary>
            Returns the value of the element's attribute or <c>null</c>, if the attribute is not specified.
            </summary>
            <remarks>
            This is a helper for bypassing the behavior of <see cref="M:System.Xml.XmlElement.GetAttribute(System.String)"/> 
            to return <see cref="F:System.String.Empty"/> if the attribute does not exist.
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.GetAttributeValue(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Returns the value of the element's attribute or <paramref name="defaultValue"/>, 
            if the attribute is not specified.
            </summary>
            <remarks>
            This is a helper for bypassing the behavior of <see cref="M:System.Xml.XmlElement.GetAttribute(System.String)"/> 
            to return <see cref="F:System.String.Empty"/> if the attribute does not exist.
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.Error(System.String,System.Xml.XmlElement)">
            <summary>
            Report a parser error.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.Defaults">
            <summary>
            Gets the defaults definition object, or <code>null</code> if the 
            default have not yet been initialized.
            </summary>
            <value>The defaults.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper.ReaderContext">
            <summary>
            Gets the reader context.
            </summary>
            <value>The reader context.</value>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.ObjectFactorySectionHandler">
            <summary>
            Creates an <see cref="T:Spring.Objects.Factory.IObjectFactory"/> instance
            populated with the object definitions supplied in the configuration
            section. 
            </summary>
            <remarks>
            <p>
            Applications will typically want to use an
            <see cref="T:Spring.Context.IApplicationContext"/>, and instantiate it
            via the use of the <see cref="T:Spring.Context.Support.ContextHandler"/>
            class (which is similar in functionality to this class). This class is
            provided for those times when only an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> is required.
            </p>
            <para>Creates an instance of the class XmlObjectFactory</para>
            </remarks>
            <example>
            <p>
            
            </p>
            </example>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectFactorySectionHandler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.Factory.Xml.ObjectFactorySectionHandler"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectFactorySectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            instance populated with the object definitions supplied in the
            configuration section.
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent configuration
            section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is <see langword="null"/>.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            A <see cref="T:Spring.Objects.Factory.IObjectFactory"/> instance
            populated with the object definitions supplied in the configuration
            section.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.ObjectsNamespaceParser">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/> interface.
            </summary>
            <remarks>
            <p>
            Parses object definitions according to the standard Spring.NET schema.
            </p>
            <p>
            This schema is <b>typically</b> located at
            <a href="http://www.springframework.net/xsd/spring-objects.xsd">http://www.springframework.net/xsd/spring-objects.xsd</a>.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.Namespace">
            <summary>
            The namespace URI for the standard Spring.NET object definition schema.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.log">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.Init">
            <summary>
            Invoked by <see cref="T:Spring.Objects.Factory.Xml.NamespaceParserRegistry"/> after construction but before any
            elements have been parsed.
            </summary>
            <remarks>This is a NoOp</remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlElement and register the resulting
            ObjectDefinitions with the <see cref="P:Spring.Objects.Factory.Xml.ParserContext.Registry"/> IObjectDefinitionRegistry
            embedded in the supplied <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/>
            </summary>
            <param name="element">The element to be parsed.</param>
            <param name="parserContext">TThe object encapsulating the current state of the parsing process.
            Provides access to a IObjectDefinitionRegistry</param>
            <returns>The primary object definition.</returns>
            <remarks>
            	<p>
            This method is never invoked if the parser is namespace aware
            and was called to process the root node.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseInternal(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified element and register any resulting
            IObjectDefinitions with the IObjectDefinitionRegistry that is
            embedded in the supplied ParserContext.
            </summary>
            <param name="element">The element to be parsed into one or more IObjectDefinitions</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>
            The primary IObjectDefinition (can be null as explained above)
            </returns>
            <remarks>
            Implementations should return the primary IObjectDefinition
            that results from the parse phase if they wish to used nested
            inside (for example) a <code>&lt;property&gt;</code> tag.
            <para>Implementations may return null if they will not
            be used in a nested scenario.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.Decorate(System.Xml.XmlNode,Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlNode and decorate the supplied ObjectDefinitionHolder,
            returning the decorated definition.
            </summary>
            <remarks>The XmlNode may either be an XmlAttribute or an XmlElement, depending on
            whether a custom attribute or element is being parsed.
            <para>Implementations may choose to return a completely new definition,
            which will replace the original definition in the resulting IApplicationContext/IObjectFactory.
            </para>
            <para>The supplied ParserContext can be used to register any additional objects needed to support
            the main definition.</para>
            </remarks>
            <param name="node">The source element or attribute that is to be parsed.</param>
            <param name="definition">The current object definition.</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>The decorated definition (to be registered in the IApplicationContext/IObjectFactory),
            or simply the original object definition if no decoration is required.  A null value is strickly
            speaking invalid, but will leniently treated like the case where the original object definition
            gets returned.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ImportObjectDefinitionResource(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Loads external XML object definitions from the resource described by the supplied
            <paramref name="resource"/>.
            </summary>
            <param name="resource">The XML element describing the resource.</param>
            <param name="parserContext">The parser context.</param>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            If the resource could not be imported.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseEventListenerDefinition(System.String,Spring.Objects.Factory.Config.EventValues,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>Parses an event listener definition.</summary>
            <param name="name">
            The name associated with the object that the event handler is being defined on.
            </param>
            <param name="events">The events being populated.</param>
            <param name="element">
            The element containing the event listener definition.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseObjectDefinition(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse an object definition and register it with the object factory..
            </summary>
            <param name="element">The element containing the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <seealso cref="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.RegisterObjectDefinition(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseAndRegisterObjectDefinition(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse an object definition and register it with the object factory..
            </summary>
            <param name="element">The element containing the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <seealso cref="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.RegisterObjectDefinition(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.RegisterObjectDefinition(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse an object definition and register it with the object factory..
            </summary>
            <param name="element">The element containing the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <seealso cref="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.RegisterObjectDefinition(Spring.Objects.Factory.Config.ObjectDefinitionHolder,Spring.Objects.Factory.Support.IObjectDefinitionRegistry)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseObjectDefinitionElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext,System.Boolean)">
            <summary>
            Parse a standard object definition into a
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/>,
            including object name and aliases.
            </summary>
            <param name="element">The element containing the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <param name="nestedDefinition">if set to <c>true</c> if we are processing an inner
            object definition.</param>
            <returns>
            The object (definition) wrapped within an
            <see cref="T:Spring.Objects.Factory.Config.ObjectDefinitionHolder"/>
            instance.
            </returns>
            <remarks>
            	<p>
            Object elements specify their canonical name via the "id" attribute
            and their aliases as a delimited "name" attribute.
            </p>
            	<p>
            If no "id" is specified, uses the first name in the "name" attribute
            as the canonical name, registering all others as aliases.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.CalculateId(System.Xml.XmlElement,System.Collections.ArrayList)">
            <summary>
            Calculates an id for an object definition.
            </summary>
            <remarks>
            <p>
            Called when an object definition has not been explicitly defined
            with an id.
            </p>
            </remarks>
            <param name="element">
            The element containing the object definition.
            </param>
            <param name="aliases">
            The list of names defined for the object; may be <see lang="null"/>
            or even empty.
            </param>
            <returns>
            A calculated object definition id.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseObjectDefinitionElement(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse a standard object definition.
            </summary>
            <param name="element">The element containing the object definition.</param>
            <param name="id">The id of the object definition.</param>
            <param name="parserContext">parsing state holder</param>
            <returns>The object (definition).</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseMethodOverrideSubElements(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse method override argument subelements of the given object element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseLookupMethodElement(System.String,Spring.Objects.Factory.Support.MethodOverrides,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse <see cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.LookupMethodElement"/> element and add parsed element to <paramref name="overrides"/>
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseReplacedMethodElement(System.String,Spring.Objects.Factory.Support.MethodOverrides,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse <see cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ReplacedMethodElement"/> element and add parsed element to <paramref name="overrides"/>
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseConstructorArgSubElements(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse constructor argument subelements of the given object element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseEventHandlerSubElements(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse event handler subelements of the given object element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParsePropertyElements(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse property value subelements of the given object element.
            </summary>
            <param name="name">
            The name of the object (definition) associated with the property element (s)
            </param>
            <param name="element">
            The element containing the top level object definition.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
            <returns>
            The property (s) associated with the object (definition).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseConstructorArgElement(System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse a constructor-arg element.
            </summary>
            <param name="name">
            The name of the object (definition) associated with the ctor arg.
            </param>
            <param name="arguments">
            The list of constructor args associated with the object (definition).
            </param>
            <param name="element">
            The name of the element containing the ctor arg definition.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParsePropertyElement(System.String,Spring.Objects.MutablePropertyValues,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse a property element.
            </summary>
            <param name="name">
            The name of the object (definition) associated with the property.
            </param>
            <param name="properties">
            The list of properties associated with the object (definition).
            </param>
            <param name="element">
            The name of the element containing the property definition.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParsePropertyValue(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Get the value of a property element (may be a list).</summary>
            <remarks>
            <p>
            Please note that even though this method is named Get<b>Property</b>Value,
            it is called by both the property and constructor argument element
            handlers.
            </p>
            </remarks>
            <param name="element">The property element.</param>
            <param name="name">
            The name of the object associated with the property.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParsePropertySubElement(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse a value, ref or collection subelement of a property element.
            </summary>
            <param name="element">
            Subelement of property element; we don't know which yet.
            </param>
            <param name="name">
            The name of the object (definition) associated with the top level property.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseListElement(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Gets a list definition.
            </summary>
            <param name="collectionEle">
            The element describing the list definition.
            </param>
            <param name="name">
            The name of the object (definition) associated with the list definition.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
            <returns>The list definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseSetElement(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Gets a set definition.
            </summary>
            <param name="collectionEle">
            The element describing the set definition.
            </param>
            <param name="name">
            The name of the object (definition) associated with the set definition.
            </param>
            <param name="parserContext">
            The namespace-aware parser.
            </param>
            <returns>The set definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseDictionaryElement(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Gets a dictionary definition.
            </summary>
            <param name="mapEle">The element describing the dictionary definition.</param>
            <param name="name">The name of the object (definition) associated with the dictionary definition.</param>
            <param name="parserContext">The namespace-aware parser.</param>
            <returns>The dictionary definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.SelectNodes(System.Xml.XmlElement,System.String)">
            <summary>
            Selects sub-elements with a given
            <paramref name="childElementName">name</paramref>.
            </summary>
            <remarks>
            <p>
            Uses a namespace manager if necessary.
            </p>
            </remarks>
            <param name="element">
            The element to be searched in.
            </param>
            <param name="childElementName">
            The name of the child nodes to look for.
            </param>
            <returns>
            The child <see cref="T:System.Xml.XmlNode"/>s of the supplied
            <paramref name="element"/> with the supplied
            <paramref name="childElementName"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.SelectSingleNode(System.Xml.XmlElement,System.String)">
            <summary>
            Selects a single sub-element with a given
            <paramref name="childElementName">name</paramref>.
            </summary>
            <remarks>
            <p>
            Uses a namespace manager if necessary.
            </p>
            </remarks>
            <param name="element">
            The element to be searched in.
            </param>
            <param name="childElementName">
            The name of the child node to look for.
            </param>
            <returns>
            The first child <see cref="T:System.Xml.XmlNode"/> of the supplied
            <paramref name="element"/> with the supplied
            <paramref name="childElementName"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseNameValueCollectionElement(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Gets a name value collection mapping definition.
            </summary>
            <param name="nameValueEle">
            The element describing the name value collection mapping definition.
            </param>
            <param name="name">
            The name of the object (definition) associated with the
            name value collection mapping definition.
            </param>
            <param name="parserContext">the context carrying parsing state information</param>
            <returns>The name value collection definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.ParseTextValueElement(System.Xml.XmlElement,System.String)">
            <summary>
            Returns the text of the supplied <paramref name="element"/>,
            or the empty string value if said <paramref name="element"/> is empty.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="element"/> is <see langword="null"/>,
            then the empty string value will be returned.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.GetDependencyCheck(System.String)">
            <summary>
            Strips the dependency check value out of the supplied string.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="value"/> is an invalid dependency
            checking mode, the invalid value will be logged and this method will
            return the <see cref="F:Spring.Objects.Factory.Support.DependencyCheckingMode.None"/> value.
            No exception will be raised.
            </p>
            </remarks>
            <param name="value">
            The string containing the dependency check value.
            </param>
            <returns>The dependency check value.</returns>
            <seealso cref="T:Spring.Objects.Factory.Support.DependencyCheckingMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.GetAutowireMode(System.String)">
            <summary>
            Strips the autowiring mode out of the supplied string.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="value"/> is an invalid autowiring mode,
            the invalid value will be logged and this method will return the
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.No"/> value. No exception will be raised.
            </p>
            </remarks>
            <param name="value">
            The string containing the autowiring mode definition.
            </param>
            <returns>The autowiring mode.</returns>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsNamespaceParser.GetObjectNames(System.String)">
            <summary>
            Given a string containing delimited object names, returns
            a string array split on the object name delimeter.
            </summary>
            <param name="value">
            The string containing delimited object names.
            </param>
            <returns>
            A string array split on the object name delimeter.
            </returns>
            <seealso cref="F:Spring.Objects.Factory.Xml.ObjectDefinitionConstants.ObjectNameDelimiters"/>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.ParserContext">
            <summary>
            Context that gets passed along an object definition parsing process, encapsulating
            all relevant configuraiton as well as state.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ParserContext.#ctor(Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/> class.
            </summary>
            <param name="parserHelper">The parser helper.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ParserContext.#ctor(Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/> class.
            </summary>
            <param name="parserHelper">The parser helper.</param>
            <param name="containingObjectDefinition">The containing object definition.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ParserContext.#ctor(Spring.Objects.Factory.Xml.XmlReaderContext,Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/> class.
            </summary>
            <param name="readerContext">The reader context.</param>
            <param name="parserHelper">The parser helper.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ParserContext.#ctor(Spring.Objects.Factory.Xml.XmlReaderContext,Spring.Objects.Factory.Xml.ObjectDefinitionParserHelper,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/> class.
            </summary>
            <param name="readerContext">The reader context.</param>
            <param name="parserHelper">The parser helper.</param>
            <param name="containingObjectDefinition">The containing object definition.</param>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ParserContext.ReaderContext">
            <summary>
            Gets the reader context.
            </summary>
            <value>The reader context.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ParserContext.Registry">
            <summary>
            Gets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ParserContext.ParserHelper">
            <summary>
            Gets the parser helper.
            </summary>
            <value>The parser helper.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ParserContext.ContainingObjectDefinition">
            <summary>
            Gets the containing object definition.
            </summary>
            <value>The containing object definition.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ParserContext.IsNested">
            <summary>
            Gets a value indicating whether this instance is nested.
            </summary>
            <value><c>true</c> if this instance is nested; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.ParserContext.IsDefaultLazyInit">
            <summary>
            Gets a value indicating whether this instance is default lazy init.
            </summary>
            <value>
            	<c>true</c> if this instance is default lazy init; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ReplacedMethodOverride">
            <summary>
            Represents the replacement of a method on a managed object by the IoC
            container.
            </summary>
            <remarks>
            <p>
            Note that this mechanism is <i>not</i> intended as a generic means of
            inserting crosscutting code: use AOP for that.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ReplacedMethodOverride.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ReplacedMethodOverride"/> class.
            </summary>
            <param name="methodName">
            The name of the method that is to be overridden.
            </param>
            <param name="methodReplacerObjectName">
            The object name of the <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            instance in the surrounding IoC container. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either of the supplied arguments is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ReplacedMethodOverride.AddTypeIdentifier(System.String)">
            <summary>
            Add a fragment of a <see cref="T:System.Type"/> instance's <see cref="P:System.Type.FullName"/>
            such as <c>'Exception</c> or <c>System.Excep</c> to identify an argument
            <see cref="T:System.Type"/> for a dependency injected method.
            </summary>
            <param name="identifier">
            A (sub) string of a <see cref="T:System.Type"/> instance's <see cref="P:System.Type.FullName"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="identifier"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
            <seeaso cref="M:Spring.Objects.Factory.Support.MethodOverride.Matches(System.Reflection.MethodInfo)"/> 
        </member>
        <member name="M:Spring.Objects.Factory.Support.ReplacedMethodOverride.Matches(System.Reflection.MethodInfo)">
            <summary>
            Does this <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/>
            match the supplied <paramref name="method"/>?
            </summary>
            <param name="method">The method to be checked.</param>
            <returns>
            <see lang="true"/> if this override matches the supplied <paramref name="method"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="method"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ReplacedMethodOverride.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ReplacedMethodOverride.MethodReplacerObjectName">
            <summary>
            The object name of the <see cref="T:Spring.Objects.Factory.Support.IMethodReplacer"/>
            instance in the surrounding IoC container. 
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader">
            <summary>
            Object definition reader for Spring's default XML object definition format.
            </summary>
            <remarks>
            <p>
            Typically applied to a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> instance.
            </p>
            <p>
            This class registers each object definition with the given object factory superclass,
            and relies on the latter's implementation of the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/> interface.
            </p>
            <p>
            It supports singletons, prototypes, and references to either of these kinds of object.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry,System.Xml.XmlResolver)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <param name="resolver">
            The <see cref="T:System.Xml.XmlResolver"/>to be used for parsing.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry,System.Xml.XmlResolver,Spring.Objects.Factory.Support.IObjectDefinitionFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <param name="resolver">
            The <see cref="T:System.Xml.XmlResolver"/>to be used for parsing.
            </param>
            <param name="objectDefinitionFactory">the <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionFactory"/> to use for creating new <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>s</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied XML <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The XML resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.DoLoadObjectDefinitions(System.IO.Stream,Spring.Core.IO.IResource)">
            <summary>
            Actually load object definitions from the specified XML file.
            </summary>
            <param name="stream">The input stream to read from.</param>
            <param name="resource">The resource for the XML data.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.HandleValidation(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Validation callback for a validating XML reader.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Any data pertinent to the event.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.RegisterObjectDefinitions(System.Xml.XmlDocument,Spring.Core.IO.IResource)">
            <summary>
            Register the object definitions contained in the given DOM document.
            </summary>
            <param name="doc">The DOM document.</param>
            <param name="resource">
            The original resource from where the <see cref="T:System.Xml.XmlDocument"/>
            was read.
            </param>
            <returns>
            The number of object definitions that were registered.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.CreateObjectDefinitionDocumentReader">
            <summary>
            Creates the <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionDocumentReader"/> to use for actually
            reading object definitions from an XML document.
            </summary>
            <remarks>Default implementation instantiates the specified <see cref="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.DocumentReaderType"/> 
            or <see cref="T:Spring.Objects.Factory.Xml.DefaultObjectDefinitionDocumentReader"/> if no reader type is specified.</remarks>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.CreateReaderContext(Spring.Core.IO.IResource)">
            <summary>
            Creates the <see cref="T:Spring.Objects.Factory.Xml.XmlReaderContext"/> to be passed along 
            during the object definition reading process.
            </summary>
            <param name="resource">The underlying <see cref="T:Spring.Core.IO.IResource"/> that is currently processed.</param>
            <returns>A new <see cref="T:Spring.Objects.Factory.Xml.XmlReaderContext"/></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.CreateDefaultNamespaceParserResolver">
            <summary>
            Create a <see cref="T:Spring.Objects.Factory.Xml.INamespaceParserResolver"/> instance for handling custom namespaces.
            </summary>
            <remarks>
            TODO (EE): make protected virtual, see remarks on <see cref="T:Spring.Objects.Factory.Xml.INamespaceParserResolver"/>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.Resolver">
            <summary>
            The <see cref="T:System.Xml.XmlResolver"/>to be used for parsing.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.DocumentReaderType">
            <summary>
            Sets the IObjectDefinitionDocumentReader implementation to use, responsible for
            the actual reading of the XML object definition document.stype of the document reader.
            </summary>
            <value>The type of the document reader.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.NamespaceParserResolver">
            <summary>
            Specify a <see cref="T:Spring.Objects.Factory.Xml.INamespaceParserResolver"/> to use. If none is specified a default
            instance will be created by <see cref="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.CreateDefaultNamespaceParserResolver"/>
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.ObjectDefinitionFactory">
            <summary>
            Specify a <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionFactory"/> for creating instances of <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.RetryParseException">
            <summary>
            For retrying the parse process
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlObjectFactory">
            <summary>
            Convenience extension of
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
            that reads object definitions from an XML document or element.
            </summary>
            <remarks>
            <p>
            Delegates to
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>
            underneath; effectively equivalent to using a
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> for a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>.
            </p>
            <note>
            <i>objects</i> doesn't need to be the root element of
            the XML document: this class will parse all object definition elements in the
            XML stream.
            </note>
            <p>
            This class registers each object definition with the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
            superclass, and relies on the latter's implementation of the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface. It supports
            singletons, prototypes and references to either of these kinds of object.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectFactory.#ctor(Spring.Core.IO.IResource)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.Factory.Xml.XmlObjectFactory"/> class,
            with the given resource, which must be parsable using DOM.
            </summary>
            <param name="resource">
            The XML resource to load object definitions from.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectFactory.#ctor(Spring.Core.IO.IResource,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.Factory.Xml.XmlObjectFactory"/> class,
            with the given resource, which must be parsable using DOM.
            </summary>
            <param name="resource">
            The XML resource to load object definitions from.
            </param>
            <param name="caseSensitive">Flag specifying whether to make this object factory case sensitive or not.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectFactory.#ctor(Spring.Core.IO.IResource,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.Factory.Xml.XmlObjectFactory"/> class,
            with the given resource, which must be parsable using DOM, and the
            given parent factory.
            </summary>
            <param name="resource">
            The XML resource to load object definitions from.
            </param>
            <param name="parentFactory">The parent object factory (may be <see langword="null"/>).</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectFactory.#ctor(Spring.Core.IO.IResource,System.Boolean,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.Factory.Xml.XmlObjectFactory"/> class,
            with the given resource, which must be parsable using DOM, and the
            given parent factory.
            </summary>
            <param name="resource">
            The XML resource to load object definitions from.
            </param>
            <param name="caseSensitive">Flag specifying whether to make this object factory case sensitive or not.</param>
            <param name="parentFactory">The parent object factory (may be <see langword="null"/>).</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectFactory.ObjectDefinitionReader">
            <summary>
            Gets object definition reader to use.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlReaderContext">
            <summary>
            Extension of <see cref="T:Spring.Objects.Factory.Parsing.ReaderContext"/> specific to use with an XmlObjectDefinitionReader.
            Provides access to <see cref="P:Spring.Objects.Factory.Xml.XmlReaderContext.NamespaceParserResolver"/> configured in <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.XmlReaderContext.MaxXmlErrorFragmentLength">
            <summary>
            The maximum length of any XML fragment displayed in the error message
            reporting.
            </summary>
            <remarks>
            <p>
            Hopefully this will display enough context so that a user
            can pinpoint the cause of the error.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlReaderContext.#ctor(Spring.Core.IO.IResource,Spring.Objects.Factory.Support.IObjectDefinitionReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.XmlReaderContext"/> class.
            </summary>
            <param name="resource">The resource.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlReaderContext.#ctor(Spring.Core.IO.IResource,Spring.Objects.Factory.Support.IObjectDefinitionReader,Spring.Objects.Factory.Support.IObjectDefinitionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.Xml.XmlReaderContext"/> class.
            </summary>
            <param name="resource">The resource.</param>
            <param name="reader">The reader.</param>
            <param name="objectDefinitionFactory">The factory to use for creating new <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> instances.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlReaderContext.GenerateObjectName(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Generates the name of the object.
            </summary>
            <param name="objectDefinition">The object definition.</param>
            <returns>the generated object name</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlReaderContext.RegisterWithGeneratedName(Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Registers the name of the with generated.
            </summary>
            <param name="objectDefinition">The object definition.</param>
            <returns>the generated object name</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlReaderContext.ReportException(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Reports a parse error by loading a
            <see cref="T:Spring.Objects.ObjectsException"/> with helpful contextual
            information and throwing said exception.
            </summary>
            <remarks>
            <p>
            Derived classes can of course override this method in order to implement
            validators capable of displaying a full list of errors found in the
            definition.
            </p>
            </remarks>
            <param name="node">
            The node that triggered the parse error.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            <b>Always</b> throws an instance of this exception class, that will
            contain helpful contextual infomation about the parse error.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Xml.XmlReaderContext.ReportException(System.Xml.XmlNode,System.String,System.String,System.Exception)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlReaderContext.ReportException(System.Xml.XmlNode,System.String,System.String,System.Exception)">
            <summary>
            Reports a parse error by loading a
            <see cref="T:Spring.Objects.ObjectsException"/> with helpful contextual
            information and throwing said exception.
            </summary>
            <remarks>
            <p>
            Derived classes can of course override this method in order to implement
            validators capable of displaying a full list of errors found in the
            definition.
            </p>
            </remarks>
            <param name="node">
            The node that triggered the parse error.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the error.
            </param>
            <param name="cause">
            The root cause of the parse error (if any - may be <see langword="null"/>).
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            <b>Always</b> throws an instance of this exception class, that will
            contain helpful contextual infomation about the parse error.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlReaderContext.ReportFatalException(System.Xml.XmlNode,System.String)">
            <summary>
            This method can be overwritten in order to implement validators
            capable of displaying a full list of errors found in the definition.
            </summary>
            <param name="node">
            The node that triggered the parse error.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlReaderContext.Reader">
            <summary>
            Gets the reader.
            </summary>
            <value>The reader.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlReaderContext.ResourceLoader">
            <summary>
            Gets the resource loader.
            </summary>
            <value>The resource loader.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlReaderContext.Registry">
            <summary>
            Gets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlReaderContext.ObjectDefinitionFactory">
            <summary>
            Gets or sets the object definition factory.
            </summary>
            <value>The object definition factory.</value>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlReaderContext.NamespaceParserResolver">
            <summary>
            Get the <see cref="T:Spring.Objects.Factory.Xml.INamespaceParserResolver"/> instance to lookup parsers for custom namespaces.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.FactoryObjectNotInitializedException">
            <summary>
            Exception thrown if an
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> is not fully
            initialized, for example if it is involved in a circular reference.
            </summary>
            <remarks>
            <p>
            This is usually indicated by any of the variants of the
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            method returning <see langword="null"/>.
            </p>
            <p>
            A circular reference with an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            cannot be solved by eagerly caching singleton instances (as is the
            case with normal objects. The reason is that every
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> needs to be fully
            initialized before it can return the created object, while only specific
            normal objects need to be initialized - that is, if a collaborating object
            actually invokes them on initialization instead of just storing the reference.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectCreationException">
            <summary>
            Thrown when an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            encounters an error when attempting to create an object from an object
            definition.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCreationException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectCreationException.ObjectName">
            <summary>
            The name of the object that triggered the exception (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectCreationException.ResourceDescription">
            <summary>
            The description of the resource associated with the object (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectCreationException.Message">
            <summary>
            Describes the creation failure trace of this exception.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectNotInitializedException.#ctor">
            <summary>
            Creates a new instance of the
            FactoryObjectNotInitializedException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectNotInitializedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the FactoryObjectNotInitializedException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the FactoryObjectNotInitializedException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectNotInitializedException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the
            FactoryObjectCircularReferenceException class.
            </summary>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the FactoryObjectCircularReferenceException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            <summary>
            Exception thrown when an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            is asked for an object instance name for which it cannot find a definition.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException"/> class.
            </summary>
            <param name="name">
            Name of the missing object.
            </param>
            <param name="message">
            A further, detailed message describing the problem.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException"/> class.
            </summary>
            <param name="type">The required type of the object.</param>
            <param name="dependencyDescription">A description of the originating dependency.</param>
            <param name="message">A message describing the problem.</param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the missing object.
            </param>
            <param name="message">
            A further, detailed message describing the problem.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.NoSuchObjectDefinitionException.ObjectType">
            <summary>
            Return the required <see cref="T:System.Type"/> of object, if it was a
            lookup by <see cref="T:System.Type"/> that failed.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.NoSuchObjectDefinitionException.ObjectName">
            <summary>
            Return the name of the missing object, if it was a lookup by name that
            failed.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException">
            <summary>
            Thrown in case of a reference to an object that is currently in creation.
            </summary>
            <remarks>
            <p>
            Typically happens when constructor autowiring matches the currently
            constructed object.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
        </member>
        <member name="F:Spring.Objects.Factory.ObjectCurrentlyInCreationException.DEFAULTMESSAGE">
            <summary>
            The default error message text to be used, if none is specified.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException"/> class.
            </summary>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException"/> class.
            </summary>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException"/> class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException"/> class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="objectName">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectCurrentlyInCreationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectDefinitionException">
            <summary>
            Exception thrown when an <see cref="T:Spring.Objects.Factory.Xml.INamespaceParser"/>
            encounters an error when attempting to parse an object
            definition.
            </summary>
            <author>Federico Spinazzi (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
            <param name="name">
            The value of the xml <code>class</code> attribute thet can be resolved
            as a type
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectDefinitionException.Message">
            <summary>
            The message about the exception.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectFactoryUtils">
            <summary>
            Convenience methods operating on object factories, returning object instances,
            names, or counts.
            </summary>
            <remarks>
            <p>
            The nesting hierarchy of an object factory is taken into account by the various methods
            exposed by this class.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.ObjectFactoryUtils.FactoryObjectPrefix">
            <summary>
            Used to dereference an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            and distinguish it from managed objects <i>created by</i> the factory.
            </summary>
            <remarks>
            <p>
            For example, if the managed object identified as <code>foo</code> is a
            factory, getting <code>&amp;foo</code> will return the factory, not the
            instance returned by the factory.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.ObjectFactoryUtils.GENERATED_OBJECT_NAME_SEPARATOR">
            <summary>
            The string used as a separator in the generation of synthetic id's
            for those object definitions explicitly that aren't assigned one.
            </summary>
            <remarks>
            <p>
            If a <see cref="T:System.Type"/>  name or parent object definition
            name is not unique, "#1", "#2" etc will be appended, until such
            time that the name becomes unique.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectFactoryUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.CountObjectsIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory)">
            <summary>
            Count all object definitions in any hierarchy in which this
            factory participates.
            </summary>
            <remarks>
            <p>
            Includes counts of ancestor object factories.
            </p>
            <p>
            Objects that are "overridden" (specified in a descendant factory
            with the same name) are counted only once.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <returns>
            The count of objects including those defined in ancestor factories.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectNamesIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory)">
            <summary>
            Return all object names in the factory, including ancestor factories.
            </summary>
            <param name="factory">The object factory.</param>
            <returns>The array of object names, or an empty array if none.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectNamesForTypeIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Get all object names for the given type, including those defined in ancestor
            factories.
            </summary>
            <remarks>
            <p>
            Will return unique names in case of overridden object definitions.
            </p>
            <p>
            Does consider objects created by <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s 
            if <paramref name="includeFactoryObjects"/> is set to true, 
            which means that <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s will get initialized.
            </p>
            </remarks>
            <param name="factory">
            If this isn't also an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>,
            this method will return the same as it's own
            <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/>
            method.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/> that objects must match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons
            (also applies to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances
            too or just normal objects.
            </param>
            <returns>
            The array of object names, or an empty array if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectNamesForTypeIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type)">
            <summary>
            Get all object names for the given type, including those defined in ancestor
            factories.
            </summary>
            <remarks>
            <p>
            Will return unique names in case of overridden object definitions.
            </p>
            <p>
            Does consider objects created by <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            or rather it considers the type of objects created by
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> (which means that
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s will be instantiated).
            </p>
            </remarks>
            <param name="factory">
            If this isn't also an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>,
            this method will return the same as it's own
            <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/>
            method.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/> that objects must match.
            </param>
            <returns>
            The array of object names, or an empty array if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectsOfTypeIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return all objects of the given type or subtypes, also picking up objects
            defined in ancestor object factories if the current object factory is an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            The return list will only contain objects of this type.
            Useful convenience method when we don't care about object names.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons
            (also applies to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances
            too or just normal objects.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
            <returns>
            The <see cref="T:System.Collections.IDictionary"/> of object instances, or an
            empty <see cref="T:System.Collections.IDictionary"/> if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectOfTypeIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return a single object of the given type or subtypes, also picking up objects defined
            in ancestor object factories if the current object factory is an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            Useful convenience method when we expect a single object and don't care
            about the object name.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons
            (also applies to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances
            too or just normal objects.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If more than one instance of an object was found.
            </exception>
            <returns>
            A single object of the given type or subtypes.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectOfType(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return a single object of the given type or subtypes, not looking in
            ancestor factories.
            </summary>
            <remarks>
            <p>
            Useful convenience method when we expect a single object and don't care
            about the object name.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons
            (also applies to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances
            too or just normal objects.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If not exactly one instance of an object was found.
            </exception>
            <returns>
            A single object of the given type or subtypes.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectOfType(Spring.Objects.Factory.IListableObjectFactory,System.Type)">
            <summary>
            Return a single object of the given type or subtypes, not looking in
            ancestor factories.
            </summary>
            <remarks>
            <p>
            Useful convenience method when we expect a single object and don't care
            about the object name.
            This version of <c>ObjectOfType</c> automatically includes prototypes and
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If not exactly one instance of an object was found.
            </exception>
            <returns>
            A single object of the given type or subtypes.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.TransformedObjectName(System.String)">
            <summary>
            Return the object name, stripping out the factory dereference prefix if necessary.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>The object name sans any factory dereference prefix.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.BuildFactoryObjectName(System.String)">
            <summary>
            Given an (object) name, builds a corresponding factory object name such that
            the return value can be used as a lookup name for a factory object.
            </summary>
            <param name="objectName">
            The name to be used to build the resulting factory object name.
            </param>
            <returns>
            The <paramref name="objectName"/> transformed into its factory object name
            equivalent.
            </returns>
            <seealso cref="M:Spring.Objects.Factory.ObjectFactoryUtils.TransformedObjectName(System.String)"/>
            <seealso cref="F:Spring.Objects.Factory.ObjectFactoryUtils.FactoryObjectPrefix"/>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.IsFactoryDereference(System.String)">
            <summary>
            Is the supplied <paramref name="name"/> a factory dereference?
            </summary>
            <remarks>
            <p>
            That is, does the supplied <paramref name="name"/> begin with
            the
            <see cref="F:Spring.Objects.Factory.ObjectFactoryUtils.FactoryObjectPrefix"/>?
            </p>
            </remarks>
            <param name="name">The name to check.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="name"/> is a
            factory dereference; <see langword="false"/> if not, or the
            aupplied <paramref name="name"/> is <see langword="null"/> or
            consists solely of the
            <see cref="F:Spring.Objects.Factory.ObjectFactoryUtils.FactoryObjectPrefix"/>
            value.
            </returns>
            <seealso cref="F:Spring.Objects.Factory.ObjectFactoryUtils.FactoryObjectPrefix"/>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectInitializationException">
            <summary>
            Exception that an object implementation is suggested to throw if its own
            factory-aware initialization code fails.
            <see cref="T:Spring.Objects.ObjectsException"/> thrown by object factory methods
            themselves should simply be propagated as-is.
            </summary>
            <remarks>
            <p>
            Note that non-factory-aware initialization methods like AfterPropertiesSet ()
            or a custom "init-method" can throw any exception.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectIsNotAFactoryException">
            <summary>
            Thrown in response to an attempt to lookup a factory object, and
            the object identified by the lookup key is not a factory.
            </summary>
            <remarks>
            <p>
            An object is a factory if it implements (either directly or indirectly
            via inheritance) the <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            interface.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            <summary>
            Thrown when an object doesn't match the required <see cref="T:System.Type"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="name">
            Name of the object requested.
            </param>
            <param name="requiredType">
            The required <see cref="T:System.Type"/> of the actual object
            instance that was retrieved.
            </param>
            <param name="actualInstance">
            The instance actually returned, whose class did not match the
            expected <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.ActualType">
            <summary>
            The actual <see cref="T:System.Type"/> of the actual object
            instance that was retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.RequiredType">
            <summary>
            The required <see cref="T:System.Type"/> of the actual object
            instance that was retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.ActualInstance">
            <summary>
            The instance actually returned, whose class did not match the
            expected <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.ObjectName">
            <summary>
            The name of the object requested.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsNotAFactoryException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsNotAFactoryException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsNotAFactoryException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsNotAFactoryException"/> class.
            </summary>
            <param name="name">
            The name of the object that was being retrieved from the factory.
            </param>
            <param name="actualInstance">
            The object instance that was retrieved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsNotAFactoryException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.UnsatisfiedDependencyException">
            <summary>
            Exception thrown when an object depends on other objects or simple properties
            that were not specified in the object factory definition, although dependency
            checking was enabled.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String,System.String,System.Int32,System.Type,System.String)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="name">
            The name of the object that has the unsatisfied dependency.
            </param>
            <param name="argumentIndex">
            The constructor argument index at which the dependency is
            unsatisfied.
            </param>
            <param name="argumentType">
            The <see cref="T:System.Type"/> of the constructor argument at
            which the dependency is unsatisfied.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="name">
            The name of the object that has the unsatisfied dependency.
            </param>
            <param name="propertyName">
            The name identifying the property on which the dependency is
            unsatisfied.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Support.AbstractEventHandlerValue">
            <summary>
            Base class implementation for classes that describe an event handler.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="T:Spring.Objects.IEventHandlerValue">
            <summary>
            Describes an event handler.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.IEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the
            supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a
            <see cref="T:System.Type"/>, etc).
            </param>
        </member>
        <member name="P:Spring.Objects.IEventHandlerValue.Source">
            <summary>
            The source of the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.IEventHandlerValue.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.IEventHandlerValue.EventName">
            <summary>
            The name of the event that is being wired up.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractEventHandlerValue"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the
            supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a
            <see cref="T:System.Type"/>, etc).
            </param>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.ToString">
            <summary>
            Returns a stringified representation of this object.
            </summary>
            <returns>A stringified representation of this object.</returns>
        </member>
        <member name="P:Spring.Objects.Support.AbstractEventHandlerValue.Source">
            <summary>
            The source of the event (may be unresolved, as in the case
            of a <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>
            value).
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AbstractEventHandlerValue.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AbstractEventHandlerValue.EventName">
            <summary>
            The name of the event that is being wired up.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.AbstractSharedStateFactory">
            <summary>
            Convenience base class for <see cref="T:Spring.Objects.ISharedStateFactory"/> implementations.
            </summary>
        </member>
        <member name="T:Spring.Objects.ISharedStateFactory">
            <summary>
            Abstracts the state sharing strategy used 
            by <see cref="T:Spring.Objects.Factory.Config.SharedStateAwareProcessor"/>
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Objects.ISharedStateFactory.CanProvideState(System.Object,System.String)">
            <summary>
            Indicate, whether the given instance can be served by this factory
            </summary>
            <param name="instance">the instance to serve state</param>
            <param name="name">the name of the instance</param>
            <returns>
            a boolean value indicating, whether state can
            be served for the given instance or not.
            </returns>
        </member>
        <member name="M:Spring.Objects.ISharedStateFactory.GetSharedStateFor(System.Object,System.String)">
            <summary>
            Returns the shared state for the given instance.
            </summary>
            <param name="instance">the instance to obtain shared state for.</param>
            <param name="name">the name of this instance</param>
            <returns>a dictionary containing shared state for <paramref name="instance"/> or null.</returns>
        </member>
        <member name="M:Spring.Objects.Support.AbstractSharedStateFactory.GetSharedStateFor(System.Object,System.String)">
            <summary>
            Gets a dictionary acc. to the type of <paramref name="instance"/>.
            If no dictionary is found, create it according to <see cref="P:Spring.Objects.Support.AbstractSharedStateFactory.CaseSensitiveState"/>
            </summary>
            <param name="instance">the instance to obtain shared state for</param>
            <param name="name">the name of the instance.</param>
            <returns>
            A dictionary containing the <paramref name="instance"/>'s state, 
            or null if no state can be served by this provider.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.AbstractSharedStateFactory.CreateSharedStateDictionary(System.Object)">
            <summary>
            Creates a dictionary to hold the shared state identified by <paramref name="key"/>.
            </summary>
            <param name="key">a key to create the dictionary for.</param>
            <returns>a dictionary according to <paramref name="key"/> and <see cref="P:Spring.Objects.Support.AbstractSharedStateFactory.CaseSensitiveState"/>.</returns>
        </member>
        <member name="M:Spring.Objects.Support.AbstractSharedStateFactory.CanProvideState(System.Object,System.String)">
            <summary>
            Indicate, whether the given instance will be served by this provider
            </summary>
            <param name="instance">the instance to serve state</param>
            <param name="name">the name of the instance</param>
            <returns>
            a boolean value indicating, whether state shall 
            be resolved for the given instance or not.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.AbstractSharedStateFactory.GetKey(System.Object,System.String)">
            <summary>
            Create the key used for obtaining the state dictionary for <paramref name="instance"/>.
            </summary>
            <param name="instance">the instance to create the key for</param>
            <param name="name">the name of the instance.</param>
            <returns>
            the key identifying the state dictionary to be used for <paramref name="instance"/>
            or null, if this state manager doesn't serve the given instance.
            </returns>
            <remarks>
            <para>
            Implementations may choose to return null from this method to indicate, 
            that they won't serve state for the given instance.
            </para>
            <para>
            <b>Note:</b>Keys returned by this method are always treated case-sensitive!
            </para>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Support.AbstractSharedStateFactory.CaseSensitiveState">
            <summary>
            Create shared state dictionaries case-sensitive or case-insensitive?
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AbstractSharedStateFactory.Order">
            <summary>
            A number indicating the priority of this <see cref="T:Spring.Objects.Support.AbstractSharedStateFactory"/> (<see cref="T:Spring.Core.IOrdered"/> for more).
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.AbstractWiringEventHandlerValue">
            <summary>
            Base class for all <see cref="T:Spring.Objects.IEventHandlerValue"/>
            implemenations that actually perform event wiring.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractWiringEventHandlerValue"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractWiringEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the
            supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a
            <see cref="T:System.Type"/>, etc).
            </param>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.GetHandler(System.Object,System.Reflection.EventInfo)">
            <summary>
            Gets the event handler.
            </summary>
            <param name="instance">
            The instance that is registering for the event notification.
            </param>
            <param name="info">
            Event metadata about the event.
            </param>
            <returns>
            The event handler.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.ResolveHandlerMethod(System.Type,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Resolves the method metadata that describes the method that is to be used
            as the argument to a delegate constructor.
            </summary>
            <param name="handlerType">
            The <see cref="T:System.Type"/> exposing the method.
            </param>
            <param name="delegateType">
            The <see cref="T:System.Type"/> of the delegate (e.g. System.EventHandler).
            </param>
            <param name="flags">
            The custom binding flags to use when searching for the method.
            </param>
            <returns>The method metadata.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the method could not be found.
            </exception>
        </member>
        <member name="T:Spring.Objects.Support.AutoWiringEventHandlerValue">
            <summary>
            Describes an <see cref="T:Spring.Objects.IEventHandlerValue"/> implementation
            that autowires events to handler methods.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AutoWiringEventHandlerValue"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a <see cref="T:System.Type"/>,
            etc).
            </param>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer">
            <summary>
            Performs the matching up of handler methods to one or more source events.
            </summary>
            <remarks>
            <p>
            This class merely marshals the matching of handler methods to the events exposed
            by an event source, and then delegates to a concrete
            <see cref="T:Spring.Objects.IEventHandlerValue"/> implementation (such as
            <see cref="T:Spring.Objects.Support.InstanceEventHandlerValue"/> or
            <see cref="T:Spring.Objects.Support.StaticEventHandlerValue"/>) to do the heavy lifting of
            actually wiring a handler method to an event.
            </p>
            <p>
            Note : the order in which handler's are wired up to events is non-deterministic.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer"/> class.
            </summary>
            <param name="source">
            The object exposing the event (s) being wired up.
            </param>
            <param name="eventName">
            The name of the event that is being wired up.
            </param>
            <param name="handler">
            The object exposing the method (s) being wired to the event.
            </param>
            <param name="methodName">
            The name of the method that is going to handle the event.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.Wire">
            <summary>
            Wires up events on the source to methods exposed on the handler.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.WireEvent(System.Reflection.EventInfo)">
            <summary>
            Wires up the supplied event to any handler methods that match the event
            signature.
            </summary>
            <param name="theEvent">The event being wired up.</param>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.GetMethodNameCustomisedForEvent(System.String)">
            <summary>
            Only replaces the <b>first</b> occurrence of the placeholder.
            </summary>
            <param name="eventName">The event whose name is going to be used.</param>
            <returns>
            The method name customised for the name of the supplied event.
            </returns>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.Source">
            <summary>
            The object exposing the event (s) being wired up.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.Handler">
            <summary>
            The object exposing the method (s) being wired to an event source.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.HandlerType">
            <summary>
            The <see cref="T:System.Type"/> of the object that is handling any events.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.EventName">
            <summary>
            The name of the event that is being wired up.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.ByTypeSharedStateFactory">
            <summary>
            Serves shared state on a by-type basis.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.ByTypeSharedStateFactory.#ctor">
            <summary>
            Creates a new instance matching all types by default.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.ByTypeSharedStateFactory.#ctor(System.Type[])">
            <summary>
            Creates a new instance matching only specified list of types.
            </summary>
            <param name="typeFilter">the list of types to serve.</param>
        </member>
        <member name="M:Spring.Objects.Support.ByTypeSharedStateFactory.CanProvideState(System.Object,System.String)">
            <summary>
            Indicate, whether the given instance will be served by this provider
            </summary>
            <param name="instance">the instance to serve state</param>
            <param name="name">the name of the instance</param>
            <returns>
            a boolean value indicating, whether state shall 
            be resolved for the given instance or not.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.ByTypeSharedStateFactory.GetKey(System.Object,System.String)">
            <summary>
            Returns the <see cref="T:System.Type"/> for the given <paramref name="instance"/>.
            </summary>
            <param name="instance">the instance to obtain the key for.</param>
            <param name="name">the name of the instance (ignored by this provider)</param>
            <returns>instance.GetType() if it matches the <see cref="P:Spring.Objects.Support.ByTypeSharedStateFactory.TypeFilter"/> list. Null otherwise.</returns>
            <remarks>
            This method will only be called if <see cref="M:Spring.Objects.Support.ByTypeSharedStateFactory.CanProvideState(System.Object,System.String)"/> returned true previously.
            </remarks>
        </member>
        <member name="P:Spring.Objects.Support.ByTypeSharedStateFactory.TypeFilter">
            <summary>
            Limit object types to be served by this state manager.
            </summary>
            <remarks>
            Only objects assignable to one of the types in this list 
            will be served state by this manager.
            </remarks>
        </member>
        <member name="T:Spring.Objects.Support.InstanceEventHandlerValue">
            <summary>
            Describes an event handler for an object instance.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Support.InstanceEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.InstanceEventHandlerValue"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.InstanceEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.InstanceEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.InstanceEventHandlerValue.GetHandler(System.Object,System.Reflection.EventInfo)">
            <summary>
            Gets the event handler.
            </summary>
            <param name="instance">
            The instance that is registering for the event notification.
            </param>
            <param name="info">
            Event metadata about the event.
            </param>
            <returns>
            The event handler.
            </returns>
        </member>
        <member name="T:Spring.Objects.Support.ISortDefinition">
            <summary>
            Definition for sorting object instances by a property.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Support.ISortDefinition.Property">
            <summary>
            The name of the property to sort by.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.ISortDefinition.IgnoreCase">
            <summary>
            Whether upper and lower case in string values should be ignored.
            </summary>
            <value>
            True if the sorting should be performed in a case-insensitive fashion.
            </value>
        </member>
        <member name="P:Spring.Objects.Support.ISortDefinition.Ascending">
            <summary>
            If the sorting should be ascending or descending.
            </summary>
            <value>
            True if the sorting should be in the ascending order.
            </value>
        </member>
        <member name="T:Spring.Objects.Support.MutableSortDefinition">
            <summary>
            Mutable implementation of the
            <see cref="T:Spring.Objects.Support.ISortDefinition"/> interface that
            supports toggling the ascending value on setting the same property again.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Jean-Pierre Pawlak</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor(Spring.Objects.Support.ISortDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class using
            the specified <see cref="T:Spring.Objects.Support.ISortDefinition"/>.
            </summary>
            <param name="source">
            The <see cref="T:Spring.Objects.Support.ISortDefinition"/> to use
            as a source for initial property values.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class.
            </summary>
            <param name="name">
            The name of the property to sort by.
            </param>
            <param name="ignoreCase">
            Whether upper and lower case in string values should be ignored.
            </param>
            <param name="ascending">
            Whether or not the sorting should be ascending or descending.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class.
            </summary>
            <param name="toggleAscendingOnSameProperty">
            Whether or not the
            <see cref="P:Spring.Objects.Support.MutableSortDefinition.Ascending"/>
            property should be toggled if the same name is set on the
            <see cref="P:Spring.Objects.Support.MutableSortDefinition.Property"/>
            property.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.Equals(System.Object)">
            <summary>
            Overrides the default <see cref="M:System.Object.Equals(System.Object)"/> method
            </summary>
            <param name="obj">
            The object to test against this instance for equality.
            </param>
            <returns>
            True if the supplied <paramref name="obj"/> is equal to this instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.GetHashCode">
            <summary>
            Overrides the default <see cref="M:System.Object.GetHashCode"/> method.
            </summary>
            <returns>The hashcode for this instance.</returns>
        </member>
        <member name="P:Spring.Objects.Support.MutableSortDefinition.Property">
            <summary>
            The name of the property to sort by.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.MutableSortDefinition.IgnoreCase">
            <summary>
            Whether upper and lower case in string values should be ignored.
            </summary>
            <value>
            True if the sorting should be performed in a case-insensitive fashion.
            </value>
        </member>
        <member name="P:Spring.Objects.Support.MutableSortDefinition.Ascending">
            <summary>
            If the sorting should be ascending or descending.
            </summary>
            <value>
            True if the sorting should be in the ascending order.
            </value>
        </member>
        <member name="T:Spring.Objects.Support.PropertyComparator">
            <summary>
            Performs a comparison of two objects, using the specified object property via
            an <see cref="T:Spring.Objects.IObjectWrapper"/>.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Jean-Pierre Pawlak</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.#ctor(Spring.Objects.Support.ISortDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.PropertyComparator"/> class.
            </summary>
            <param name="definition">
            The <see cref="T:Spring.Objects.Support.ISortDefinition"/> to use for any
            sorting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="definition"/> is <cref lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less
            than, equal to or greater than the other.
            </summary>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns><see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/></returns>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.GetPropertyValue(System.Object)">
            <summary>
            Get the <see cref="T:Spring.Objects.Support.ISortDefinition"/>'s property
            value for the given object.
            </summary>
            <param name="obj">The object to get the property value for.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.Sort(System.Collections.IList,Spring.Objects.Support.ISortDefinition)">
            <summary>
            Sort the given <see cref="T:System.Collections.IList"/> according to the
            given sort definition.
            </summary>
            <param name="source">
            The <see cref="T:System.Collections.IList"/> to be sorted.
            </param>
            <param name="sortDefinition">The parameters to sort by.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of a missing property name.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="sortDefinition"/> is <cref lang="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Objects.Support.PropertyComparator.SortDefinition">
            <summary>
            Gets the <see cref="T:Spring.Objects.Support.ISortDefinition"/> to
            use for any sorting.
            </summary>
            <value>
            The <see cref="T:Spring.Objects.Support.ISortDefinition"/> to	use for
            any sorting.
            </value>
        </member>
        <member name="T:Spring.Objects.Support.StaticEventHandlerValue">
            <summary>
            Describes an event handler for a static class method.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Objects.Support.StaticEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.StaticEventHandlerValue"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.StaticEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.StaticEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.StaticEventHandlerValue.GetHandler(System.Object,System.Reflection.EventInfo)">
            <summary>
            Gets the event handler.
            </summary>
            <param name="instance">
            The instance that is registering for the event notification.
            </param>
            <param name="info">
            Event metadata about the event.
            </param>
            <returns>
            The event handler.
            </returns>
        </member>
        <member name="T:Spring.Objects.IObjectWrapper">
            <summary> 
            The central interface of Spring.NET's low-level object infrastructure.
            </summary>
            <remarks>
            <p>
            Typically not directly used by application code but rather implicitly
            via an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>.
            </p>
            <p>
            Implementing classes have the ability to get and set property values
            (individually or in bulk), get property descriptors and query the
            readability and writability of properties.
            </p>
            <p>
            This interface supports <b>nested properties</b> enabling the setting
            of properties on subproperties to an unlimited depth.
            </p>
            <p>
            If a property update causes an exception, a
            <see cref="T:Spring.Core.PropertyAccessException"/> will be thrown. Bulk
            updates continue after exceptions are encountered, throwing an exception
            wrapping <b>all</b> exceptions encountered during the update.
            </p>
            <p>
            <see cref="T:Spring.Objects.IObjectWrapper"/> implementations can be used
            repeatedly, with their "target" or wrapped object changed.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.GetPropertyValue(System.String)">
            <summary>Get the value of a property.</summary>
            <param name="theProperty">
            The name of the property to get the value of. May be nested.
            </param>
            <returns>The value of the property.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            if the property isn't readable, or if the getting the value throws
            an exception.
            </exception>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.GetPropertyInfo(System.String)">
            <summary>
            Get the <see cref="T:System.Reflection.PropertyInfo"/> for a particular
            property.
            </summary>
            <param name="theProperty">
            The property to be retrieved.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the particular
            property.
            </returns>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.GetPropertyType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> for a particular property.
            </summary>
            <param name="theProperty">
            The property the <see cref="T:System.Type"/> of which is to be retrieved.
            </param>
            <returns>
            The <see cref="T:System.Type"/> for a particular property..
            </returns>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.GetPropertyInfos">
            <summary>
            Get all of the <see cref="T:System.Reflection.PropertyInfo"/> instances for
            all of the properties of the wrapped object.
            </summary>
            <returns>
            An array of <see cref="T:System.Reflection.PropertyInfo"/> instances.
            </returns>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)">
            <summary>
            Set a property value.
            </summary>
            <remarks>
            <p>
            <b>This is the preferred way to update an individual property.</b>
            </p>
            </remarks>
            <param name="propertyValue">The new property value.</param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValue(System.String,System.Object)">
            <summary>
            Set a property value.
            </summary>
            <remarks>
            <p>
            This method is provided for convenience only. The
            <see cref="M:Spring.Objects.IObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)"/>
            method is more powerful.
            </p>
            </remarks>
            <param name="theProperty">
            The name of the property to set value of.
            </param>
            <param name="propertyValue">The new property value.</param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues)">
            <summary>Set a number of property values in bulk.</summary>
            <remarks>
            <p>
            This is the preferred way to perform a bulk update.
            </p>
            <p>
            Note that performing a bulk update differs from performing a single update,
            in that an implementation of this class will continue to update properties
            if a <b>recoverable</b> error (such as a vetoed property change or a type
            mismatch, but <b>not</b> an invalid property name or the like) is
            encountered, throwing a
            <see cref="T:Spring.Objects.PropertyAccessExceptionsException"/> containing
            all the individual errors. This exception can be examined later to see all
            binding errors. Properties that were successfully updated stay changed.
            </p>
            <p>
            Does not allow the setting of unknown fields. Equivalent to
            <see cref="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)"/>
            with an argument of <c>false</c> for the second parameter.
            </p>
            </remarks>
            <param name="values">
            The collection of <see cref="T:Spring.Objects.PropertyValue"/> instances to
            set on the wrapped object.
            </param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)">
            <summary>
            Set a number of property values in bulk with full control over behavior.
            </summary>
            <remarks>
            <p>
            Note that performing a bulk update differs from performing a single update,
            in that an implementation of this class will continue to update properties
            if a <b>recoverable</b> error (such as a vetoed property change or a type
            mismatch, but <b>not</b> an invalid property name or the like) is
            encountered, throwing a
            <see cref="T:Spring.Objects.PropertyAccessExceptionsException"/> containing
            all the individual errors. This exception can be examined later to see all
            binding errors. Properties that were successfully updated stay changed.
            </p>
            <p>Does not allow the setting of unknown fields.
            </p>
            </remarks>
            <param name="values">
            The <see cref="T:Spring.Objects.IPropertyValues"/> to set on the target object
            </param>
            <param name="ignoreUnknown">
            Should we ignore unknown values (not found in the object!?)
            </param>
        </member>
        <member name="P:Spring.Objects.IObjectWrapper.WrappedInstance">
            <summary>
            The object wrapped by the wrapper (cannot be <see lang="null"/>).
            </summary>
            <remarks>
            <p>
            Implementations are required to allow the type of the wrapped 
            object to change.
            </p>
            </remarks>
            <returns>The object wrapped by this wrapper.</returns>
        </member>
        <member name="P:Spring.Objects.IObjectWrapper.WrappedType">
            <summary>
            Convenience method to return the <see cref="T:System.Type"/>
            of the wrapped object.
            </summary>
            <returns>The <see cref="T:System.Type"/> of the wrapped object.</returns>
        </member>
        <member name="T:Spring.Objects.IPropertyValues">
            <summary>
            A collection style container for <see cref="T:Spring.Objects.PropertyValue"/>
            instances.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET) </author>
        </member>
        <member name="M:Spring.Objects.IPropertyValues.GetPropertyValue(System.String)">
            <summary>
            Return the <see cref="T:Spring.Objects.PropertyValue"/> instance with the
            given name.
            </summary>
            <param name="propertyName">The name to search for.</param>
            <returns>the <see cref="T:Spring.Objects.PropertyValue"/>, or null if a 
            the <see cref="T:Spring.Objects.PropertyValue"/> with the supplied
            <paramref name="propertyName"/> did not exist in this collection.
            </returns>
        </member>
        <member name="M:Spring.Objects.IPropertyValues.Contains(System.String)">
            <summary>
            Is there a <see cref="T:Spring.Objects.PropertyValue"/> instance for this
            property name?
            </summary>
            <param name="propertyName">The name to search for.</param>
            <returns>
            True if there is a <see cref="T:Spring.Objects.PropertyValue"/> instance for
            the supplied <paramref name="propertyName"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.IPropertyValues.ChangesSince(Spring.Objects.IPropertyValues)">
            <summary>
            Return the difference (changes, additions, but not removals) of
            property values between the supplied argument and the values
            contained in the collection.
            </summary>
            <remarks>
            <p>
            Subclasses should also override <c>Equals</c>.
            </p>
            </remarks>
            <param name="old">The old property values.</param>
            <returns>
            An <see cref="T:Spring.Objects.IPropertyValues"/> containing any changes, or
            an empty <see cref="T:Spring.Objects.IPropertyValues"/> instance if there were
            no changes.
            </returns>
        </member>
        <member name="P:Spring.Objects.IPropertyValues.PropertyValues">
            <summary>
            Return an array of the <see cref="T:Spring.Objects.PropertyValue"/> objects
            held in this object.</summary>
            <returns>
            An array of the <see cref="T:Spring.Objects.PropertyValue"/> objects held
            in this object.
            </returns>
        </member>
        <member name="T:Spring.Objects.ISharedStateAware">
            <summary>
            This interface should be implemented by classes that want to 
            have access to the shared state.
            </summary>
            <remarks>
            <p>
            Shared state is very useful if you have data that needs to be shared by all instances
            of e.g. the same webform (or other <c>IHttpHandler</c>s). 
            </p>
            <p>
            For example, <c>Spring.Web.UI.Page</c> class implements this interface, which allows  
            each page derived from it to cache localizalization resources and parsed data binding 
            expressions only once and then reuse the cached values, regardless of how many instances 
            of the page are created.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.ISharedStateAware.SharedState">
            <summary>
            Gets or sets the <see cref="T:System.Collections.IDictionary"/> that should be used
            to store shared state for this instance.
            </summary>
        </member>
        <member name="T:Spring.Objects.MutablePropertyValues">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.IPropertyValues"/>
            interface.
            </summary>
            <remarks>
            <p>
            Allows simple manipulation of properties, and provides constructors to
            support deep copy and construction from a number of collection types such as
            <see cref="T:System.Collections.IDictionary"/> and
            <see cref="T:System.Collections.IList"/>.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.MutablePropertyValues.propertyValuesList">
            <summary>
            The list of <see cref="T:Spring.Objects.PropertyValue"/> objects.
            </summary>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.MutablePropertyValues"/>
            class.
            </summary>
            <remarks>
            <p>
            The returned instance is initially empty...
            <see cref="T:Spring.Objects.PropertyValue"/>s can be added with the various
            overloaded <see cref="M:Spring.Objects.MutablePropertyValues.Add(Spring.Objects.PropertyValue)"/>,
            <see cref="M:Spring.Objects.MutablePropertyValues.Add(System.String,System.Object)"/>,
            <see cref="M:Spring.Objects.MutablePropertyValues.AddAll(System.Collections.IDictionary)"/>,
            and <see cref="M:Spring.Objects.MutablePropertyValues.AddAll(System.Collections.IList)"/>
            methods.
            </p>
            </remarks>
            <seealso cref="M:Spring.Objects.MutablePropertyValues.Add(Spring.Objects.PropertyValue)"/>
            <seealso cref="M:Spring.Objects.MutablePropertyValues.Add(System.String,System.Object)"/>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.#ctor(Spring.Objects.IPropertyValues)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.MutablePropertyValues"/>
            class.
            </summary>
            <remarks>
            <p>
            Deep copy constructor. Guarantees <see cref="T:Spring.Objects.PropertyValue"/>
            references are independent, although it can't deep copy objects currently
            referenced by individual <see cref="T:Spring.Objects.PropertyValue"/> objects.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.MutablePropertyValues"/>
            class.
            </summary>
            <param name="map">
            The <see cref="T:System.Collections.IDictionary"/> with property values
            keyed by property name, which must be a <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Add(System.String,System.Object)">
            <summary>
            Overloaded version of <c>Add</c> that takes a property name and a property value.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="propertyValue">
            The value of the property.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Add(Spring.Objects.PropertyValue)">
            <summary>
            Add the supplied <see cref="T:Spring.Objects.PropertyValue"/> object,
            replacing any existing one for the respective property.
            </summary>
            <param name="pv">
            The <see cref="T:Spring.Objects.PropertyValue"/> object to add.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.MergeIfRequired(Spring.Objects.PropertyValue,Spring.Objects.PropertyValue)">
            <summary>
            Merges the value of the supplied 'new' <see cref="T:Spring.Objects.PropertyValue"/> with that of
            the current <see cref="T:Spring.Objects.PropertyValue"/> if merging is supported and enabled.
            </summary>
            <see cref="T:Spring.Objects.IMergable"/>
            <param name="newPv">The new pv.</param>
            <param name="currentPv">The current pv.</param>
            <returns>The possibly merged PropertyValue</returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.AddAll(System.Collections.IDictionary)">
            <summary>
            Add all property values from the given
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="map">
            The map of property values, the keys of which must be
            <see cref="T:System.String"/>s.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.AddAll(System.Collections.IList)">
            <summary>
            Add all property values from the given
            <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="values">
            The list of <see cref="T:Spring.Objects.PropertyValue"/>s to be added.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Remove(Spring.Objects.PropertyValue)">
            <summary>
            Remove the given <see cref="T:Spring.Objects.PropertyValue"/>, if contained.
            </summary>
            <param name="pv">
            The <see cref="T:Spring.Objects.PropertyValue"/> to remove.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Remove(System.String)">
            <summary>
            Removes the named <see cref="T:Spring.Objects.PropertyValue"/>, if contained.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.SetPropertyValueAt(Spring.Objects.PropertyValue,System.Int32)">
            <summary>
            Modify a <see cref="T:Spring.Objects.PropertyValue"/> object held in this object. Indexed from 0.
            </summary>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.GetPropertyValue(System.String)">
            <summary>
            Return the property value given the name.
            </summary>
            <remarks>
            The property name is checked in a <c>case-insensitive</c> fashion.
            </remarks>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            The property value.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Contains(System.String)">
            <summary>
            Does the container of properties contain one of this name.
            </summary>
            <param name="propertyName">The name of the property to search for.</param>
            <returns>
            True if the property is contained in this collection, false otherwise.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.ChangesSince(Spring.Objects.IPropertyValues)">
            <summary>
            Return the difference (changes, additions, but not removals) of
            property values between the supplied argument and the values
            contained in the collection.
            </summary>
            <param name="old">Another property values collection.</param>
            <returns>
            The collection of property values that are different than the supplied one.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate
            through a collection.
            </summary>
            <remarks>
            <p>
            The returned <see cref="T:System.Collections.IEnumerator"/> is the
            <see cref="T:System.Collections.IEnumerator"/> exposed by the
            <see cref="P:Spring.Objects.MutablePropertyValues.PropertyValues"/>
            property.
            </p>
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can iterate through a
            collection.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.ToString">
            <summary>
            Convert the object to a string representation.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
        </member>
        <member name="P:Spring.Objects.MutablePropertyValues.PropertyValues">
            <summary>
            Property to retrieve the array of property values.
            </summary>
        </member>
        <member name="T:Spring.Objects.ObjectWrapper">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.IObjectWrapper"/>
            interface that should be sufficient for all normal uses.
            </summary>
            <remarks>
            <p>
            <see cref="T:Spring.Objects.ObjectWrapper"/> will convert
            <see cref="T:System.Collections.IList"/> and array
            values to the corresponding target arrays, if necessary. Custom
            <see cref="T:System.ComponentModel.TypeConverter"/>s that deal with
            <see cref="T:System.Collections.IList"/>s or arrays can be written against a
            comma delimited <see cref="T:System.String"/> as <see cref="T:System.String"/>
            arrays are converted in such a format if the array itself is not assignable.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller </author>
            <author>Jean-Pierre Pawlak</author>
            <author>Mark Pollack (.NET)</author>
            <author>Aleksandar Seovic(.NET)</author>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper.wrappedObject">
            <summary>The wrapped object.</summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper.log">
            <summary>
            The ILog instance for this class. We'll create a lot of these objects,
            so we don't want a new instance every time.
            </summary>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.ObjectWrapper"/> class.
            </summary>
            <remarks>
            <p>
            The wrapped target instance will need to be set afterwards.
            </p>
            </remarks>
            <seealso cref="P:Spring.Objects.ObjectWrapper.WrappedInstance"/>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.ObjectWrapper"/> class.
            </summary>
            <param name="instance">
            The object wrapped by this <see cref="T:Spring.Objects.ObjectWrapper"/>.
            </param>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the supplied <paramref name="instance"/> is <see lang="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.ObjectWrapper"/> class,
            instantiating a new instance of the specified <see cref="T:System.Type"/> and using
            it as the <see cref="P:Spring.Objects.ObjectWrapper.WrappedInstance"/>.
            </summary>
            <remarks>
            <p>
            Please note that the <see cref="T:System.Type"/> passed as the
            <paramref name="type"/> argument must have a no-argument constructor.
            If it does not, an exception will be thrown when this class attempts
            to instantiate the supplied <paramref name="type"/> using it's
            (non-existent) constructor.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to instantiate and wrap.
            </param>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the <paramref name="type"/> is <see langword="null"/>, or if the
            invocation of the <paramref name="type"/>s default (no-arg) constructor
            fails (due to invalid arguments, insufficient permissions, etc).
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyValue(System.String)">
            <summary>Gets the value of a property.</summary>
            <param name="propertyName">
            The name of the property to get the value of.
            </param>
            <returns>The value of the property.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If there is no such property, if the property isn't readable, or
            if getting the property value throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyValue(Spring.Expressions.IExpression)">
            <summary>Gets the value of a property.</summary>
            <param name="propertyExpression">
            The property expression that should be used to retrieve the property value.
            </param>
            <returns>The value of the property.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If there is no such property, if the property isn't readable, or
            if getting the property value throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValue(System.String,System.Object)">
            <summary>
            Sets a property value.
            </summary>
            <remarks>
            <p>
            This method is provided for convenience only. The
            <see cref="M:Spring.Objects.ObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)"/>
            method is more powerful.
            </p>
            </remarks>
            <param name="propertyName">
            The name of the property to set value of.
            </param>
            <param name="val">The new value.</param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValue(Spring.Expressions.IExpression,System.Object)">
            <summary>
            Sets a property value.
            </summary>
            <param name="propertyExpression">
            The property expression that should be used to set the property value.
            </param>
            <param name="val">The new value.</param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)">
            <summary>
            Sets a property value.
            </summary>
            <remarks>
            <p>
            <b>This is the preferred way to update an individual property.</b>
            </p>
            </remarks>
            <param name="pv">
            The object containing new property value.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues)">
            <summary>Set a number of property values in bulk.</summary>
            <remarks>
            <p>
            Does not allow unknown fields. Equivalent to
            <see cref="M:Spring.Objects.ObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)"/>
            with <see langword="null"/> and <cref lang="false"/> for
            arguments.
            </p>
            </remarks>
            <param name="pvs">
            The <see cref="T:Spring.Objects.IPropertyValues"/> to set on the target
            object.
            </param>
            <exception cref="T:Spring.Core.NotWritablePropertyException">
            If an error is encountered while setting a property.
            </exception>
            <exception cref="T:Spring.Objects.PropertyAccessExceptionsException">
            On a <see cref="T:System.Type"/> mismatch while setting a property, insufficient permissions, etc.
            </exception>
            <seealso cref="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)"/>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)">
            <summary>
            Perform a bulk update with full control over behavior.
            </summary>
            <remarks>
            <p>
            This method may throw a reflection-based exception, if there is a critical
            failure such as no matching field... less serious exceptions will be accumulated
            and thrown as a single <see cref="T:Spring.Objects.PropertyAccessExceptionsException"/>.
            </p>
            </remarks>
            <param name="propertyValues">
            The <see cref="T:Spring.Objects.PropertyValue"/>s to set on the target object.
            </param>
            <param name="ignoreUnknown">
            Should we ignore unknown values (not found in the object!?).
            </param>
            <exception cref="T:Spring.Core.NotWritablePropertyException">
            If an error is encountered while setting a property (only thrown if the
            <paramref name="ignoreUnknown"/> parameter is set to <see langword="false"/>).
            </exception>
            <exception cref="T:Spring.Objects.PropertyAccessExceptionsException">
            On a <see cref="T:System.Type"/> mismatch while setting a property, insufficient permissions, etc.
            </exception>
            <seealso cref="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)"/>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyInfo(System.String)">
            <summary>
            Returns PropertyInfo for the specified property
            </summary>
            <param name="propertyName">The name of the property to search for.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> for the specified property.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">If <see cref="T:System.Reflection.PropertyInfo"/> cannot be determined.</exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> for a particular property.
            </summary>
            <param name="propertyName">
            The property the <see cref="T:System.Type"/> of which is to be retrieved.
            </param>
            <returns>
            The <see cref="T:System.Type"/> for a particular property..
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyOrFieldInfo(System.String)">
            <summary>
            Returns MemberInfo for the specified property or field
            </summary>
            <param name="propertyOrFieldName">The name of the property or field to search for.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> for the specified property or field.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">If <paramref name="propertyOrFieldName"/> does not resolve to a property or field.</exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyInfos">
            <summary>
            Get the properties of the wrapped object.
            </summary>
            <returns>
            An array of <see cref="T:System.Reflection.PropertyInfo"/>s.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.ToString">
            <summary>
            This method is expensive! Only call for diagnostics and debugging reasons,
            not in production.
            </summary>
            <returns>
            A string describing the state of this object.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyExpression(System.String)">
            <summary>
            Attempts to parse property expression first and falls back to full expression
            if that fails. Performance optimization.
            </summary>
            <param name="propertyName">Property expression to parse.</param>
            <returns>Parsed proeprty expression.</returns>
        </member>
        <member name="P:Spring.Objects.ObjectWrapper.WrappedInstance">
            <summary>
            The object wrapped by this <see cref="T:Spring.Objects.ObjectWrapper"/>.
            </summary>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the object cannot be changed; or an attempt is made to set the
            value of this property to <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Objects.ObjectWrapper.WrappedType">
            <summary>
            Convenience method to return the <see cref="T:System.Type"/> of the wrapped object.
            </summary>
            <remarks>
            <p>
            Do <b>not</b> use this (convenience) method prior to setting the
            <see cref="P:Spring.Objects.ObjectWrapper.WrappedInstance"/> property.
            </p>
            </remarks>
            <returns>
            The <see cref="T:System.Type"/> of the wrapped object.
            </returns>
            <exception cref="T:System.NullReferenceException">
            If the <see cref="P:Spring.Objects.ObjectWrapper.WrappedInstance"/> property
            is <see lang="null"/>.
            </exception>
        </member>
        <member name="P:Spring.Objects.ObjectWrapper.PropertyDescriptors">
            <summary>
            Return the collection of property descriptors.
            </summary>
        </member>
        <member name="T:Spring.Objects.PropertyAccessExceptionsException">
            <summary>
            Combined exception, composed of individual binding
            <see cref="T:Spring.Core.PropertyAccessException"/>s.
            </summary>
            <remarks>
            <p>
            An object of this class is created at the beginning of the binding
            process, and errors added to it as necessary.
            </p>
            <p>
            The binding process continues when it encounters application-level
            <see cref="T:Spring.Core.PropertyAccessException"/>s, applying those changes
            that can be applied and storing rejected changes in an instance of this class.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(System.String)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(Spring.Objects.IObjectWrapper,Spring.Core.PropertyAccessException[])">
            <summary>
            Create new empty PropertyAccessExceptionsException.
            We'll add errors to it as we attempt to bind properties.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="F:Spring.Objects.PropertyAccessExceptionsException._objectWrapper">
            <summary>
            The IObjectWrapper wrapping the target object at the root of the exception.
            </summary>
        </member>
        <member name="F:Spring.Objects.PropertyAccessExceptionsException._propertyAccessExceptions">
            <summary>The list of PropertyAccessException objects.</summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(System.String)">
            <summary>
            Return the <see cref="T:Spring.Core.PropertyAccessException"/>
            for the supplied <paramref name="propertyName"/>, or <see langword="null"/>
            if there isn't one.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.ToString">
            <summary>
            Describe the number of exceptions contained in this container class.
            </summary>
            <returns>A description of the instance contents.</returns>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.ObjectWrapper">
            <summary>
            Return the <see cref="T:Spring.Objects.IObjectWrapper"/> that generated
            this exception.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.BindObject">
            <summary>
            Return the object we're binding to.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.ExceptionCount">
            <summary>
            If this returns zero (0), no errors were encountered during binding.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.PropertyAccessExceptions">
            <summary>
            Return an array of the <see cref="T:Spring.Core.PropertyAccessException"/>s
            stored in this object.
            </summary>
            <remarks>
            <p>
            Will return the empty array (not <see langword="null"/>) if there were no errors.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.Message">
            <summary>
            Describe the group of exceptions. 
            </summary>
        </member>
        <member name="T:Spring.Objects.PropertyValue">
            <summary>
            Holds information and value for an individual property.
            </summary>
            <remarks>
            <p>
            Using an object here, rather than just storing all properties in a
            map keyed by property name, allows for more flexibility, and the
            ability to handle indexed properties in a special way if necessary.
            </p>
            <p>
            Note that the value doesn't need to be the final required
            <see cref="T:System.Type"/>: an
            <see cref="T:Spring.Objects.IObjectWrapper"/> implementation must
            handle any necessary conversion, as this object doesn't know anything
            about the objects it will be applied to.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="val">
            The value of the property (possibly before type conversion).
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Objects.PropertyValue.#ctor(System.String,System.Object,Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="val">
            The value of the property (possibly before type conversion).
            </param>
            <param name="expression">Pre-parsed property name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="name"/> or <paramref name="name"/> 
            is <see langword="null"/>, or if the name contains only whitespace characters.
            </exception>
        </member>
        <member name="M:Spring.Objects.PropertyValue.ToString">
            <summary>
            Print a string representation of the property.
            </summary>
            <returns>A string representation of the property.</returns>
        </member>
        <member name="M:Spring.Objects.PropertyValue.Equals(System.Object)">
            <summary>
            Determines whether the supplied <see cref="T:System.Object"/>
            is equal to the current <see cref="T:Spring.Objects.PropertyValue"/>.  
            </summary>
            <param name="other">The other instance.</param>
            <returns>
            <see langword="true"/> if they are equal in content.
            </returns>
        </member>
        <member name="M:Spring.Objects.PropertyValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use
            in hashing algorithms and data structures like a hash table. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Spring.Objects.PropertyValue"/>.  
            </returns>
        </member>
        <member name="P:Spring.Objects.PropertyValue.Name">
            <summary>The name of the property.</summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Spring.Objects.PropertyValue.Expression">
            <summary>
            Parsed property expression.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyValue.Value">
            <summary>
            Return the value of the property.
            </summary>
            <remarks>
            <p>
            Note that type conversion will <i>not</i> have occurred here.
            It is the responsibility of the
            <see cref="T:Spring.Objects.IObjectWrapper"/> implementation to
            perform type conversion.
            </p>
            </remarks>
            <value>The (possibly unresolved) value of the property.</value>
        </member>
        <member name="T:Spring.Pool.Support.SimplePool">
            <summary>
            A simple pool implementation
            </summary>
            <remarks>
            <p>
            Based on the implementation found in Concurrent Programming in Java,
            2nd ed., by <a href="http://gee.cs.oswego.edu/dl/">Doug Lea</a>.
            </p>
            </remarks>
            <author>Doug Lea</author>
            <author>Federico Spinazzi</author>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Pool.IObjectPool">
            <summary>
            A simple pooling interface for managing and monitoring a pool
            of objects.  
            </summary>
            <remarks>
            <p>
            Based on the Jakarta Commons Pool API.
            </p>
            </remarks>
            <author>Federico Spinazzi</author>
            <seealso cref="T:Spring.Pool.IPoolableObjectFactory"/>
        </member>
        <member name="M:Spring.Pool.IObjectPool.BorrowObject">
            <summary>
            Obtain an instance from the pool.
            </summary>
            <remarks>
            <p>
            By contract, clients <b>must</b> return the borrowed 
            instance using <see cref="M:Spring.Pool.IObjectPool.ReturnObject(System.Object)"/>
            or a related method as defined in an implementation or
            sub-interface.
            </p>
            </remarks>
            <returns>An instance from the pool.</returns>
            <exception cref="T:Spring.Pool.PoolException">
            In case the pool is unusable.
            </exception>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)"/>
        </member>
        <member name="M:Spring.Pool.IObjectPool.ReturnObject(System.Object)">
            <summary>
            Return an instance to the pool.
            </summary>
            <remarks>
            <p>
            By contract, the object <b>must</b> have been obtained using 
            <see cref="M:Spring.Pool.IObjectPool.BorrowObject"/>
            or a related method as defined in an implementation or sub-interface.
            </p>
            </remarks>
            <param name="target">The instance to be returned to the pool.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)"/>
        </member>
        <member name="M:Spring.Pool.IObjectPool.AddObject">
            <summary>
            Create an object using the factory set by
            the <see cref="P:Spring.Pool.IObjectPool.PoolableObjectFactory"/> property
            or other implementation dependent mechanism
            and place it into the pool. 
            </summary>
            <remarks>
            <p>
            This is an optional operation. AddObject is useful for "pre-loading" a 
            pool with idle objects.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
        </member>
        <member name="M:Spring.Pool.IObjectPool.Close">
            <summary>
            Close the pool and free any resources associated with it.
            </summary>
        </member>
        <member name="M:Spring.Pool.IObjectPool.Clear">
            <summary>
            Clear objects sitting idle in the pool, releasing any
            associated resources.
            </summary>
            <remarks>
            <p>
            This is an optional operation.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
        </member>
        <member name="P:Spring.Pool.IObjectPool.NumActive">
            <summary>
            Gets the number of instances currently borrowed from the pool. 
            </summary>
            <remarks>
            <p>
            This is an optional operation.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>       
        </member>
        <member name="P:Spring.Pool.IObjectPool.NumIdle">
            <summary>
            Gets the number of instances currently idle in the pool.
            </summary>
            <remarks>
            <p>
            This is an optional operation.
            </p>
            <p>
            This may be considered an <i>approximation</i> of the number of objects
            that can be borrowed without creating any new instances.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
        </member>
        <member name="P:Spring.Pool.IObjectPool.PoolableObjectFactory">
            <summary>
            Set the factory used to create new instances.
            </summary>
            <remarks>
            <p>
            This is an optional operation.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
        </member>
        <member name="F:Spring.Pool.Support.SimplePool.available">
            <summary>
            Set of permits
            </summary>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.#ctor(Spring.Pool.IPoolableObjectFactory,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Pool.Support.SimplePool"/>
            class.
            </summary>
            <param name="factory">
            The factory used to instantiate and manage the lifecycle of pooled objects.
            </param>
            <param name="size">The initial size of the pool.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="factory"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="size"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.BorrowObject">
            <summary>
            Obtain an instance from the pool.
            </summary>
            <exception cref="T:Spring.Pool.PoolException">
            In case the pool is unusable.
            </exception>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)"/>
            <seealso cref="M:Spring.Pool.IObjectPool.BorrowObject"/>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.ReturnObject(System.Object)">
            <summary>
            Return an instance to the pool.
            </summary>
            <param name="target">The instance to be returned to the pool.</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)"/>
            <seealso cref="M:Spring.Pool.IObjectPool.ReturnObject(System.Object)"/>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.AddObject">
            <summary>
            Create an object using the factory set by
            the <see cref="P:Spring.Pool.Support.SimplePool.PoolableObjectFactory"/> property
            or other implementation dependent mechanism
            and place it into the pool.
            </summary>
            <remarks>
            <p>
            This implementation <b>always</b> throws a
            <see cref="T:System.NotSupportedException"/>.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.DoBorrow">
            <summary>
            Synchronized borrow logic.
            </summary>
            <seealso cref="M:Spring.Pool.Support.SimplePool.BorrowObject"/>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.DoReturn(System.Object)">
            <summary>
            Synchronized release logic.
            </summary>
            <param name="target">
            The object to release to the pool.
            </param>
            <returns>
            <see langword="false"/> if the object was not a busy one.
            </returns>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.InitItems(System.Int32)">
            <summary>
            Instantiates the supplied number of instances and adds
            them to the pool.
            </summary>
            <param name="initialInstances">
            The initial number of objects to build.
            </param>
            <exception cref="T:System.ArgumentException">
            If the supplied number of <paramref name="initialInstances"/> is
            less than or equal to zero.
            </exception>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.Close">
            <summary>
            Close the pool and free any resources associated with it.
            </summary>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.Clear">
            <summary>
            Clear objects sitting idle in the pool, releasing any
            associated resources.
            </summary>
            <remarks>
            <p>
            This implementation <b>always</b> throws a
            <see cref="T:System.NotSupportedException"/>.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
        </member>
        <member name="M:Spring.Pool.Support.SimplePool.MakeNotUsable">
            <summary>
            Change the state of the pool to unusable.
            </summary>
        </member>
        <member name="P:Spring.Pool.Support.SimplePool.NumActive">
            <summary>
            Gets the number of instances currently borrowed from the pool.
            </summary>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
            <seealso cref="P:Spring.Pool.IObjectPool.NumActive"/>
        </member>
        <member name="P:Spring.Pool.Support.SimplePool.NumIdle">
            <summary>
            Gets the number of instances currently idle in the pool.
            </summary>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
            <seealso cref="P:Spring.Pool.IObjectPool.NumIdle"/>
        </member>
        <member name="P:Spring.Pool.Support.SimplePool.PoolableObjectFactory">
            <summary>
            Set the factory used to create new instances.
            </summary>
            <remarks>
            <p>
            This implementation <b>always</b> throws a
            <see cref="T:System.NotSupportedException"/>.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If the implementation does not support the operation.
            </exception>
        </member>
        <member name="T:Spring.Pool.IPoolableObjectFactory">
            <summary>
            Defines lifecycle methods for objects that are to be used in an
            <see cref="T:Spring.Pool.IObjectPool"/> implementation.
            </summary>
            <remarks>
            <p>
            The following methods summarize the contract between an
            <see cref="T:Spring.Pool.IObjectPool"/> and an
            an <see cref="T:Spring.Pool.IPoolableObjectFactory"/>.
            </p>
            <list type="number">
              <item>
            	<see cref="M:Spring.Pool.IPoolableObjectFactory.MakeObject"/>
            	is called whenever a new instance is needed.
              </item>
              <item>
            	<see cref="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)"/>
            	is invoked on every instance before it is returned from
            	the pool.
              </item>
              <item>
            	<see cref="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)"/>
            	is invoked on every instance when it is returned to the pool.
              </item>
              <item>
            	<see cref="M:Spring.Pool.IPoolableObjectFactory.DestroyObject(System.Object)"/>
            	is invoked on every instance when it is being dropped from the
            	pool (see
            	<see cref="M:Spring.Pool.IPoolableObjectFactory.ValidateObject(System.Object)"/>
              </item>
            </list>
            <p>
            Based on the Jakarta Commons Pool API.
            </p>
            </remarks>
            <author>Federico Spinazzi</author>
            <seealso cref="T:Spring.Pool.IObjectPool"/>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.MakeObject">
            <summary>
            Creates an instance that can be returned by the pool.
            </summary>
            <returns>
            An instance that can be returned by the pool.
            </returns>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.DestroyObject(System.Object)">
            <summary>
            Destroys an instance no longer needed by the pool.
            </summary>
            <remarks>
            <p>
            Invoked on every instance when it is being "dropped" 
            from the pool (whether due to the return value from a call to the
            <see cref="M:Spring.Pool.IPoolableObjectFactory.ValidateObject(System.Object)"/>
            method, or for reasons specific to the pool implementation.)
            </p>
            </remarks>
            <param name="obj">The instance to be destroyed.</param>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.ValidateObject(System.Object)">
            <summary>
            Ensures that the instance is safe to be returned by the pool. 
            Returns false if this object should be destroyed. 
            </summary>
            <remarks>
            <p>
            Invoked in an implementation-specific fashion to determine if an 
            instance is still valid to be returned by the pool. 
            It will only be invoked on an "activated" instance.
            </p>
            </remarks>
            <param name="obj">The instance to validate.</param>
            <returns>
            <see langword="false"/> if this object is not valid and
            should be dropped from the pool, otherwise <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)">
            <summary>
            Reinitialize an instance to be returned by the pool. 
            </summary>
            <remarks>
            <p>
            Invoked on every instance before it is returned from the pool.
            </p>
            </remarks>
            <param name="obj">The instance to be activated.</param>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)">
            <summary>
            Uninitialize an instance to be returned to the pool.
            </summary>
            <remarks>
            <p>
            Invoked on every instance when it is returned to the pool.
            </p>
            </remarks>
            <param name="obj">The instance returned to the pool.</param>
        </member>
        <member name="T:Spring.Pool.PoolException">
            <summary>
            Base class for all pooling exceptions.
            </summary>
            <author>Federico Spinazzi</author>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Pool.PoolException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Pool.PoolException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Pool.PoolException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="innerException">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Pool.PoolException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Proxy.AbstractProxyMethodBuilder">
            <summary>
            Base class for method builders that contains common functionalities.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Proxy.IProxyMethodBuilder">
            <summary>
            Defines interface that proxy method builders have to implement.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Proxy.IProxyMethodBuilder.BuildProxyMethod(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Dynamically builds proxy method.
            </summary>
            <param name="method">The method to proxy.</param>
            <param name="intfMethod">
            The interface definition of the method, if applicable.
            </param>
            <returns>
            The <see cref="T:System.Reflection.Emit.MethodBuilder"/> for the proxy method.
            </returns>
        </member>
        <member name="F:Spring.Proxy.AbstractProxyMethodBuilder.typeBuilder">
            <summary>
            The type builder to use.
            </summary>
        </member>
        <member name="F:Spring.Proxy.AbstractProxyMethodBuilder.proxyGenerator">
            <summary>
            The <see cref="T:Spring.Proxy.IProxyTypeGenerator"/> implementation to use.
            </summary>
        </member>
        <member name="F:Spring.Proxy.AbstractProxyMethodBuilder.explicitImplementation">
            <summary>
            Indicates whether interfaces should be implemented explicitly.
            </summary>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyTypeGenerator,System.Boolean)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="proxyGenerator">
            The <see cref="T:Spring.Proxy.IProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="explicitImplementation">
            <see langword="true"/> if the interface is to be
            implemented explicitly; otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.BuildProxyMethod(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Dynamically builds proxy method.
            </summary>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
            <returns>
            The <see cref="T:System.Reflection.Emit.MethodBuilder"/> for the proxy method.
            </returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.PushProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the proxy instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.DefineMethod(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Defines proxy method for the target object.
            </summary>
            <param name="method">The method to proxy.</param>
            <param name="intfMethod">
            The interface definition of the method, if applicable.
            </param>
            <param name="explicitImplementation">
            <see langword="true"/> if the supplied <paramref name="intfMethod"/> is to be
            implemented explicitly; otherwise <see langword="false"/>.
            </param>
            <returns>
            The <see cref="T:System.Reflection.Emit.MethodBuilder"/> for the proxy method.
            </returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.DefineGenericParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            Defines generic method parameters based on proxied method metadata.
            </summary>
            <param name="methodBuilder">
            The <see cref="T:System.Reflection.Emit.MethodBuilder"/> to use.
            </param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.GenerateMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Generates the proxy method.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.CallDirectTargetMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls target method directly.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="targetMethod">The method to invoke.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.CallAssertUnderstands(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.String)">
            <summary>
            Emits code to ensure that target on stack understands the method and throw a sensible exception otherwise.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to test for</param>
            <param name="targetName">the name of the target to be used in error messages</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.CallDirectBaseMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls base method directly.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.ProcessReturnValue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Replaces a raw reference with a reference to a proxy.
            </summary>
            <remarks>
            <p>
            If the target object returns reference to itself -- 'this' --
            we need to treat it as a special case and return a reference
            to a proxy object instead.
            </p>
            </remarks>
            <param name="il">The IL generator to use.</param>
            <param name="returnValue">The location of the return value.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyMethodBuilder.EmitThrowException(System.Reflection.Emit.ILGenerator,System.Type,System.String)">
            <summary>
            Generates code that throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="exceptionType">the type of the exception to throw</param>
            <param name="message">Error message to use.</param>
        </member>
        <member name="T:Spring.Proxy.AbstractProxyTypeBuilder">
            <summary>
            Base class for proxy builders that can be used 
            to create a proxy for any class.
            </summary>
            <remarks>
            <p>
            This <see langword="abstract"/> class provides a set of template
            methods that derived classes can override to provide custom behaviour
            appropriate to the type of proxy that is being generated (one of
            inheritance or composition-based proxying).
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Proxy.IProxyTypeBuilder">
            <summary>
            Describes the operations for a generic proxy type builder that can be
            used to create a proxy type for any class.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Proxy.IProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates the proxy type.
            </summary>
            <returns>The generated proxy class.</returns>
        </member>
        <member name="P:Spring.Proxy.IProxyTypeBuilder.Name">
            <summary>
            The name of the proxy <see cref="T:System.Type"/>.
            </summary>
            <value>The name of the proxy <see cref="P:Spring.Proxy.IProxyTypeBuilder.TargetType"/>.</value>
        </member>
        <member name="P:Spring.Proxy.IProxyTypeBuilder.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Proxy.IProxyTypeBuilder.BaseType">
            <summary>
            The <see cref="T:System.Object"/> of the class that the proxy must
            inherit from.
            </summary>
        </member>
        <member name="P:Spring.Proxy.IProxyTypeBuilder.Interfaces">
            <summary>
            Gets or sets the list of interfaces proxy should implement.
            </summary>
        </member>
        <member name="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes">
            <summary>
            Should we proxy target attributes?
            </summary>
            <remarks>
            <see langword="True"/> by default.
            Target type attributes, method attributes, method's return type attributes 
            and method's parameter attributes are copied to the proxy.
            </remarks>
        </member>
        <member name="P:Spring.Proxy.IProxyTypeBuilder.TypeAttributes">
            <summary>
            The list of custom <see cref="T:System.Attribute"/>s that the proxy
            class must be decorated with.
            </summary>
            <remarks>
            <p>
            Note that the list is composed of instances of the actual
            <see cref="T:System.Attribute"/>s that are to be applied, not the
            <see cref="T:System.Attribute"/>s of the <see cref="T:System.Type"/>s.
            </p>
            </remarks>
            <example>
            <p>
            The following code snippets show examples of how to decorate the
            the proxied class with one or more <see cref="T:System.Attribute"/>s.
            </p>
            <code language="C#">
            // get a concrete implementation of an IProxyTypeBuilder...
            IProxyTypeBuilder builder = ... ;
            builder.TargetType = typeof( ... );
            
            IDictionary typeAtts = new Hashtable();
            builder.TypeAttributes = typeAtts;
            
            // applies a single Attribute to the proxied class...
            typeAtts = new Attribute[] { new MyCustomAttribute() });
            
            // applies a number of Attributes to the proxied class...
            typeAtts = new Attribute[]
                {
            		new MyCustomAttribute(),
            		new AnotherAttribute(),
                });
            </code>
            </example>
        </member>
        <member name="P:Spring.Proxy.IProxyTypeBuilder.MemberAttributes">
            <summary>
            The custom <see cref="T:System.Attribute"/>s that the proxy
            members must be decorated with.
            </summary>
            <remarks>
            <p>
            This dictionary must use simple <see cref="T:System.String"/>s for keys
            (denoting the member names that the attributes are to be applied to),
            with the corresponding values being
            <see cref="T:System.Collections.IList"/>s.
            </p>
            <p>
            The key may be wildcarded using the <c>'*'</c> character... if so,
            then those proxy members that match against the key will be
            decorated with the attendant list of
            <see cref="T:System.Attribute"/>s. This naturally implies that using
            the <c>'*'</c> character as a key will result in the attendant list
            of <see cref="T:System.Attribute"/>s being applied to every member of
            the proxied class.
            </p>
            </remarks>
            <example>
            <p>
            The following code snippets show examples of how to decorate the
            members of a proxied class with one or more
            <see cref="T:System.Attribute"/>s.
            </p>
            <code language="C#">
            // get a concrete implementation of an IProxyTypeBuilder...
            IProxyTypeBuilder builder = ... ;
            builder.TargetType = typeof( ... );
            
            IDictionary memAtts = new Hashtable();
            builder.MemberAttributes = memAtts;
            
            // applies a single Attribute to all members of the proxied class...
            memAtts ["*"] = new Attribute[] { new MyCustomAttribute() });
            
            // applies a number of Attributes to all members of the proxied class...
            memAtts ["*"] = new Attribute[]
                {
            		new MyCustomAttribute(),
            		new AnotherAttribute(),
                });
            
            // applies a single Attribute to those members of the proxied class
            //     that have identifiers starting with 'Do' ...
            memAtts ["Do*"] = new Attribute[] { new MyCustomAttribute() });
            
            // applies a number of Attributes to those members of the proxied class
            //     that have identifiers starting with 'Do' ...
            memAtts ["Do*"] = new Attribute[]
                {
            		new MyCustomAttribute(),
            		new AnotherAttribute(),
                }); 
            </code>
            </example>
        </member>
        <member name="T:Spring.Proxy.IProxyTypeGenerator">
            <summary>
            Describes the operations that generates IL instructions 
            used to build the proxy type.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Proxy.IProxyTypeGenerator.PushProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the proxy instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Proxy.IProxyTypeGenerator.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="F:Spring.Proxy.AbstractProxyTypeBuilder.log">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates the proxy type.
            </summary>
            <returns>The generated proxy class.</returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.PushProxy(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the proxy instance on stack.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.CreateTypeBuilder(System.String,System.Type)">
            <summary>
            Creates an appropriate type builder.
            </summary>
            <param name="name">The name to use for the proxy type name.</param>
            <param name="baseType">The type to extends if provided.</param>
            <returns>The type builder to use.</returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ApplyTypeAttributes(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Applies attributes to the proxy class.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="targetType">The proxied class.</param>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.TypeAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ApplyMethodAttributes(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            Applies attributes to the proxied method.
            </summary>
            <param name="methodBuilder">The method builder to use.</param>
            <param name="targetMethod">The proxied method.</param>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.MemberAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ApplyMethodReturnTypeAttributes(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            Applies attributes to the proxied method's return type.
            </summary>
            <param name="methodBuilder">The method builder to use.</param>
            <param name="targetMethod">The proxied method.</param>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ApplyMethodParameterAttributes(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            Applies attributes to proxied method's parameters.
            </summary>
            <param name="methodBuilder">The method builder to use.</param>
            <param name="targetMethod">The proxied method.</param>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.GetTypeAttributes(System.Type)">
            <summary>
            Calculates and returns the list of attributes that apply to the
            specified type.
            </summary>
            <param name="type">The type to find attributes for.</param>
            <returns>
            A list of custom attributes that should be applied to type.
            </returns>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.TypeAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.GetMethodAttributes(System.Reflection.MethodInfo)">
            <summary>
            Calculates and returns the list of attributes that apply to the
            specified method.
            </summary>
            <param name="method">The method to find attributes for.</param>
            <returns>
            A list of custom attributes that should be applied to method.
            </returns>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.MemberAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.GetMethodReturnTypeAttributes(System.Reflection.MethodInfo)">
            <summary>
            Calculates and returns the list of attributes that apply to the
            specified method's return type.
            </summary>
            <param name="method">The method to find attributes for.</param>
            <returns>
            A list of custom attributes that should be applied to method's return type.
            </returns>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.GetMethodParameterAttributes(System.Reflection.MethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            Calculates and returns the list of attributes that apply to the
            specified method's parameters.
            </summary>
            <param name="method">The method to find attributes for.</param>
            <param name="paramInfo">The method's parameter to find attributes for.</param>
            <returns>
            A list of custom attributes that should be applied to the specified method's parameter.
            </returns>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.IsAttributeMatchingType(System.Object,System.Type)">
            <summary>
            Check that the specified object is matching the passed attribute type.
            </summary>
            <remarks>
            <p>
            The specified object can be of different type :
            </p>
            <list type="bullet">
            <item>
            <see cref="T:System.Attribute"/>
            </item>
            <item>
            System.Reflection.CustomAttributeData (Only with .NET 2.0)
            </item>
            <item>
            <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>
            </item>
            </list>
            </remarks>
            <param name="attr">The object instance to check.</param>
            <param name="attrType">The attribute type to test against.</param>
            <returns>
            <see langword="true"/> if the object instance matches the attribute type;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.DefineConstructorParameters(System.Reflection.ConstructorInfo)">
            <summary>
            Defines the types of the parameters for the specified constructor.
            </summary>
            <param name="constructor">The constructor to use.</param>
            <returns>The types for constructor's parameters.</returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements constructors for the proxy class.
            </summary>
            <param name="typeBuilder">
            The <see cref="T:System.Type"/> builder to use.
            </param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.GenerateConstructor(System.Reflection.Emit.ConstructorBuilder,System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Generates the proxy constructor.
            </summary>
            <param name="builder">The constructor builder to use.</param>
            <param name="il">The IL generator to use.</param>
            <param name="constructor">The constructor to use.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ImplementInterface(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyMethodBuilder,System.Type,System.Type)">
            <summary>
            Implements an interface.
            </summary>
            <remarks>
            Generates proxy methods that belongs to the interface 
            using the specified <paramref name="proxyMethodBuilder"/>.
            </remarks>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="proxyMethodBuilder">
            The <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation to use
            </param>
            <param name="intf">The interface to implement.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ImplementInterface(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyMethodBuilder,System.Type,System.Type,System.Boolean)">
            <summary>
            Implements an interface.
            </summary>
            <remarks>
            Generates proxy methods that belongs to the interface 
            using the specified <paramref name="proxyMethodBuilder"/>.
            </remarks>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="proxyMethodBuilder">
            The <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation to use
            </param>
            <param name="intf">The interface to implement.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <param name="proxyVirtualMethods">
            <see langword="false"/> if target virtual methods should not be proxied;
            otherwise <see langword="true"/>.
            </param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.GetInterfaceMapping(System.Type,System.Type)">
            <summary>
            Gets the mapping of the interface to proxy 
            into the actual methods on the target type 
            that does not need to implement that interface.
            </summary>
            <remarks>
            <p>
            If the target type does not implement the interface, 
            we return the interfaces methods as the target methods for many reasons :
            <ul>
            <li>
            The target object can change for an object that implements the interface.
            (See 'Spring.Aop.Framework.DynamicProxy.IAdvisedProxyMethodBuilder' 
            implementation in the Spring AOP framework for an example)
            </li>
            <li>
            Allow Transparent proxies to be proxied.
            (See Spring Remoting framework for an example)
            </li>
            <li>
            Allow null target to be proxied.
            (See Spring AOP framework which avoid calls to the target object 
            by intercepting all methods. Think "dynamic mock")
            (See 'Spring.Web.Services.WebServiceProxyFactory' implementation for another example)
            </li>
            </ul>
            </p>
            </remarks>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <param name="intf">The interface to implement.</param>
            <returns>
            An interface mapping for the interface to proxy.
            </returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.InheritType(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyMethodBuilder,System.Type)">
            <summary>
            Inherit from a type.
            </summary>
            <remarks>
            Generates proxy methods for base virtual methods 
            using the specified <paramref name="proxyMethodBuilder"/>.
            </remarks>
            <param name="typeBuilder">
            The <see cref="T:System.Type"/> builder to use for code generation.
            </param>
            <param name="proxyMethodBuilder">
            The <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation to use to override base virtual methods.
            </param>
            <param name="type">The <see cref="T:System.Type"/> to inherit from.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.InheritType(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyMethodBuilder,System.Type,System.Boolean)">
            <summary>
            Inherit from a type.
            </summary>
            <remarks>
            Generates proxy methods for base virtual methods 
            using the specified <paramref name="proxyMethodBuilder"/>.
            </remarks>
            <param name="typeBuilder">
            The <see cref="T:System.Type"/> builder to use for code generation.
            </param>
            <param name="proxyMethodBuilder">
            The <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> implementation to use to override base virtual methods.
            </param>
            <param name="type">The <see cref="T:System.Type"/> to inherit from.</param>
            <param name="declaredMembersOnly">
            <see langword="true"/> if only members declared at the level 
            of the supplied <paramref name="type"/>'s hierarchy should be proxied; 
            otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ImplementProperty(System.Reflection.Emit.TypeBuilder,System.Type,System.Reflection.PropertyInfo,System.Collections.IDictionary)">
            <summary>
            Implements the specified <paramref name="property"/>.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="type">The type the property is defined on.</param>
            <param name="property">The property to proxy.</param>
            <param name="methodMap">The implemented methods map.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.ImplementEvent(System.Reflection.Emit.TypeBuilder,System.Type,System.Reflection.EventInfo,System.Collections.IDictionary)">
            <summary>
            Implements the specified event.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="type">The type the event is defined on.</param>
            <param name="evt">The event to proxy.</param>
            <param name="methodMap">The implemented methods map.</param>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.GetProxiableInterfaces(System.Type[])">
            <summary>
            Returns an array of <see cref="T:System.Type"/>s that represent 
            the proxiable interfaces.
            </summary>
            <remarks>
            An interface is proxiable if it's not marked with the 
            <see cref="T:Spring.Proxy.ProxyIgnoreAttribute"/>.
            </remarks>
            <param name="interfaces">
            The array of interfaces from which 
            we want to get the proxiable interfaces.
            </param>
            <returns>
            An array containing the interface <see cref="T:System.Type"/>s.
            </returns>
        </member>
        <member name="M:Spring.Proxy.AbstractProxyTypeBuilder.IsSpecialInterface(System.Type)">
            <summary>
            Checks if specified interface is of a special type 
            that should never be proxied (i.e. ISerializable).
            </summary>
            <param name="intf">Interface type to check.</param>
            <returns>
            <c>true</c> if it is, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Proxy.AbstractProxyTypeBuilder.Name">
            <summary>
            The name of the proxy <see cref="T:System.Type"/>.
            </summary>
            <value>The name of the proxy <see cref="T:System.Type"/>.</value>
        </member>
        <member name="P:Spring.Proxy.AbstractProxyTypeBuilder.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the target object.
            </summary>
        </member>
        <member name="P:Spring.Proxy.AbstractProxyTypeBuilder.BaseType">
            <summary>
            The <see cref="T:System.Type"/> of the class that the proxy must
            inherit from.
            </summary>
            <remarks>
            <p>
            The default value of this property is the
            <see cref="T:System.Object"/> <see cref="T:System.Type"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Proxy.AbstractProxyTypeBuilder.Interfaces">
            <summary>
            Gets or sets the list of interfaces proxy should implement.
            </summary>
            <remarks>
            The default value of this property is all the interfaces 
            implemented or inherited by the target type.
            </remarks>
        </member>
        <member name="P:Spring.Proxy.AbstractProxyTypeBuilder.ProxyTargetAttributes">
            <summary>
            Should we proxy target attributes?
            </summary>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
        </member>
        <member name="P:Spring.Proxy.AbstractProxyTypeBuilder.TypeAttributes">
            <summary>
            The list of custom <see cref="T:System.Attribute"/>s that the proxy
            class must be decorated with.
            </summary>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.TypeAttributes"/>
        </member>
        <member name="P:Spring.Proxy.AbstractProxyTypeBuilder.MemberAttributes">
            <summary>
            The custom <see cref="T:System.Attribute"/>s that the proxy
            members must be decorated with.
            </summary>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.MemberAttributes"/>
        </member>
        <member name="T:Spring.Proxy.BaseProxyMethodBuilder">
            <summary>
            Implementation of IProxyMethodBuilder that delegates method calls to the base class.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Proxy.BaseProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyTypeGenerator,System.Boolean)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="proxyGenerator">
            The <see cref="T:Spring.Proxy.IProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="explicitImplementation">
            <see langword="true"/> if the interface is to be
            implemented explicitly; otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Spring.Proxy.BaseProxyMethodBuilder.GenerateMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Generates the proxy method.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="T:Spring.Proxy.CompositionProxyTypeBuilder">
            <summary>
            Builds a proxy type using composition.
            </summary>
            <remarks>
            <note>
            In order for this builder to work, the target <b>must</b> implement
            one or more interfaces.
            </note>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Proxy.CompositionProxyTypeBuilder.targetInstance">
            <summary>
            Target instance calls should be delegated to.
            </summary>
        </member>
        <member name="M:Spring.Proxy.CompositionProxyTypeBuilder.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Proxy.CompositionProxyTypeBuilder"/> class.
            </summary>
        </member>
        <member name="M:Spring.Proxy.CompositionProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates a proxy that delegates calls to an instance of the
            target object.
            </summary>
            <remarks>
            <p>
            Only interfaces can be proxied using composition, so the target
            <b>must</b> implement one or more interfaces.
            </p>
            </remarks>
            <returns>The generated proxy class.</returns>
            <exception cref="T:System.ArgumentException">
            If the <see cref="P:Spring.Proxy.IProxyTypeBuilder.TargetType"/>
            does not implement any interfaces.
            </exception>
        </member>
        <member name="M:Spring.Proxy.CompositionProxyTypeBuilder.CreateTargetProxyMethodBuilder(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Create an <see cref="T:Spring.Proxy.IProxyMethodBuilder"/> to create interface implementations
            </summary>
        </member>
        <member name="M:Spring.Proxy.CompositionProxyTypeBuilder.ImplementCustom(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Allows subclasses to generate additional code
            </summary>
        </member>
        <member name="M:Spring.Proxy.CompositionProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Proxy.CompositionProxyTypeBuilder.DeclareTargetInstanceField(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Deaclares a field that holds the target object instance.
            </summary>
            <param name="builder">
            The <see cref="T:System.Type"/> builder to use for code generation.
            </param>
        </member>
        <member name="M:Spring.Proxy.CompositionProxyTypeBuilder.GenerateConstructor(System.Reflection.Emit.ConstructorBuilder,System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Generates the proxy constructor.
            </summary>
            <remarks>
            <p>
            This implementation creates instance of the target object for delegation
            using constructor arguments.
            </p>
            </remarks>
            <param name="builder">The constructor builder to use.</param>
            <param name="il">The IL generator to use.</param>
            <param name="constructor">The constructor to delegate the creation to.</param>
        </member>
        <member name="P:Spring.Proxy.CompositionProxyTypeBuilder.ExplicitInterfaceImplementation">
            <summary>
            Gets or sets a value indicating whether interfaces should be implemented explicitly.
            </summary>
            <value>
            <see langword="true"/> if they should be; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Spring.Proxy.DynamicProxyManager">
            <summary>
            Allows easy access to existing and creation of new dynamic proxies.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.Proxy.DynamicProxyManager.ASSEMBLY_NAME">
            <summary>
            The name of the assembly that defines proxy types created.
            </summary>
        </member>
        <member name="F:Spring.Proxy.DynamicProxyManager.TYPE_ATTRIBUTES">
            <summary>
            The attributes of the proxy type to generate.
            </summary>
        </member>
        <member name="M:Spring.Proxy.DynamicProxyManager.CreateTypeBuilder(System.String,System.Type)">
            <summary>
            Creates an appropriate type builder.
            </summary>
            <param name="typeName">The proxy type name.</param>
            <param name="baseType">The type to extends if provided.</param>
            <returns>The type builder to use.</returns>
        </member>
        <member name="M:Spring.Proxy.DynamicProxyManager.SaveAssembly">
            <summary>
            Saves dynamically generated assembly to disk.
            Can only be called in DEBUG_DYNAMIC mode, per ConditionalAttribute rules.
            </summary>
        </member>
        <member name="T:Spring.Proxy.InheritanceProxyTypeBuilder">
            <summary>
            Builds a proxy type using inheritance.
            </summary>
            <remarks>
            <note>
            In order for this builder to work, target methods have to be either
            <see langword="virtual"/>, or belong to an interface.
            </note>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Proxy.InheritanceProxyTypeBuilder.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Proxy.InheritanceProxyTypeBuilder"/> class.
            </summary>
        </member>
        <member name="M:Spring.Proxy.InheritanceProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates a proxy that inherits the proxied object's class.
            </summary>
            <remarks>
            <p>
            Only <see langword="virtual"/> (non-final) methods can be proxied,
            unless they are members of one of the interfaces that target class
            implements. In that case, methods will be proxied using explicit
            interface implementation, which means that client code will have
            to cast the proxy to a specific interface in order to invoke the
            methods.
            </p>
            </remarks>
            <returns>The generated proxy class.</returns>
        </member>
        <member name="M:Spring.Proxy.InheritanceProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Proxy.InheritanceProxyTypeBuilder.GenerateConstructor(System.Reflection.Emit.ConstructorBuilder,System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Generates the proxy constructor.
            </summary>
            <remarks>
            <p>
            This implementation delegates the call to a base class constructor.
            </p>
            </remarks>
            <param name="builder">The constructor builder to use.</param>
            <param name="il">The IL generator to use.</param>
            <param name="constructor">
            The base class constructor to delegate the call to.
            </param>
        </member>
        <member name="P:Spring.Proxy.InheritanceProxyTypeBuilder.DeclaredMembersOnly">
            <summary>
            Gets or sets a value indicating whether inherited members should be proxied.
            </summary>
            <value>
            <see langword="true"/> if they should be; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Spring.Proxy.ProxyIgnoreAttribute">
            <summary>
            This attribute can be used to mark interfaces that should not be proxied
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Proxy.ProxyIgnoreAttribute.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Proxy.ProxyIgnoreAttribute"/> class.
            </summary>
        </member>
        <member name="T:Spring.Proxy.TargetProxyMethodBuilder">
            <summary>
            Implementation of IProxyMethodBuilder that delegates method calls to target object.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Proxy.TargetProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyTypeGenerator,System.Boolean)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="proxyGenerator">
            The <see cref="T:Spring.Proxy.IProxyTypeGenerator"/> implementation to use.
            </param>
            <param name="explicitImplementation">
            <see langword="true"/> if the interface is to be
            implemented explicitly; otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Spring.Proxy.TargetProxyMethodBuilder.GenerateMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Generates the proxy method.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.BaseDynamicMember">
            <summary>
            Base class for dynamic members.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Reflection.Dynamic.BaseDynamicMember.METHOD_ATTRIBUTES">
            <summary>
            Method attributes constant.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.BaseDynamicMember.SetupTargetInstance(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Sets up target instance for invocation.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="targetType">Type of target instance.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.BaseDynamicMember.SetupArgument(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            Sets up invocation argument.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="argumentType">Argument type.</param>
            <param name="argumentPosition">Argument position.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.BaseDynamicMember.InvokeMethod(System.Reflection.Emit.ILGenerator,System.Boolean,System.Boolean,System.Reflection.MethodInfo)">
            <summary>
            Generates method invocation code.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="isStatic">Flag specifying whether method is static.</param>
            <param name="isValueType">Flag specifying whether method is on the value type.</param>
            <param name="method">Method to invoke.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.BaseDynamicMember.ProcessReturnValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Generates code to process return value if necessary.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="returnValueType">Type of the return value.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.BaseDynamicMember.ThrowInvalidOperationException(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Generates code that throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="message">Error message to use.</param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.IDynamicConstructor">
            <summary>
            Defines constructors that dynamic constructor class has to implement.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicConstructor.Invoke(System.Object[])">
            <summary>
            Invokes dynamic constructor.
            </summary>
            <param name="arguments">
            Constructor arguments.
            </param>
            <returns>
            A constructor value.
            </returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.SafeConstructor">
            <summary>
            Safe wrapper for the dynamic constructor.
            </summary>
            <remarks>
            <see cref="T:Spring.Reflection.Dynamic.SafeConstructor"/> will attempt to use dynamic
            constructor if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeConstructor.GetOrCreateDynamicConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Obtains cached constructor info or creates a new entry, if none is found.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeConstructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new instance of the safe constructor wrapper.
            </summary>
            <param name="constructorInfo">Constructor to wrap.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeConstructor.Invoke(System.Object[])">
            <summary>
            Invokes dynamic constructor.
            </summary>
            <param name="arguments">
            Constructor arguments.
            </param>
            <returns>
            A constructor value.
            </returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.DynamicConstructor">
            <summary>
            Factory class for dynamic constructors.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicConstructor.Create(System.Reflection.ConstructorInfo)">
            <summary>
            Creates dynamic constructor instance for the specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <param name="constructorInfo">Constructor info to create dynamic constructor for.</param>
            <returns>Dynamic constructor for the specified <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.IDynamicField">
            <summary>
            Defines methods that dynamic field class has to implement.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicField.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to get field value from.
            </param>
            <returns>
            A field value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicField.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to set field value on.
            </param>
            <param name="value">
            A new field value.
            </param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.SafeField">
            <summary>
            Safe wrapper for the dynamic field.
            </summary>
            <remarks>
            <see cref="T:Spring.Reflection.Dynamic.SafeField"/> will attempt to use dynamic
            field if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeField.GetOrCreateDynamicField(System.Reflection.FieldInfo)">
            <summary>
            Obtains cached fieldInfo or creates a new entry, if none is found.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeField.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new instance of the safe field wrapper.
            </summary>
            <param name="field">Field to wrap.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeField.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to get field value from.
            </param>
            <returns>
            A field value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeField.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to set field value on.
            </param>
            <param name="value">
            A new field value.
            </param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.SafeField.DynamicFieldCacheEntry">
            <summary>
            Holds cached Getter/Setter delegates for a Field
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.DynamicField">
            <summary>
            Factory class for dynamic fields.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicField.Create(System.Reflection.FieldInfo)">
            <summary>
            Creates dynamic field instance for the specified <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="field">Field info to create dynamic field for.</param>
            <returns>Dynamic field for the specified <see cref="T:System.Reflection.FieldInfo"/>.</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.IDynamicIndexer">
            <summary>
            Defines methods that dynamic indexer class has to implement.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicIndexer.GetValue(System.Object,System.Int32)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicIndexer.GetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicIndexer.GetValue(System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicIndexer.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set the indexer value on.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicIndexer.SetValue(System.Object,System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set the indexer value on.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicIndexer.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set the indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.SafeIndexer">
            <summary>
            Safe wrapper for the dynamic indexer.
            </summary>
            <remarks>
            <see cref="T:Spring.Reflection.Dynamic.SafeIndexer"/> will attempt to use dynamic
            indexer if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>    
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeIndexer.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of the safe indexer wrapper.
            </summary>
            <param name="indexerInfo">Indexer to wrap.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeIndexer.GetValue(System.Object,System.Int32)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get indexer value from.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeIndexer.GetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeIndexer.GetValue(System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get indexer value from.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeIndexer.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeIndexer.SetValue(System.Object,System.Object,System.Object)">
            <summary>
            Sets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeIndexer.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            Sets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="P:Spring.Reflection.Dynamic.SafeIndexer.IndexerProperty">
            <summary>
            Internal PropertyInfo accessor.
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.DynamicIndexer">
            <summary>
            Factory class for dynamic indexers.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicIndexer.#ctor">
            <summary>
            Prevent instantiation
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicIndexer.Create(System.Reflection.PropertyInfo)">
            <summary>
            Creates dynamic indexer instance for the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="indexer">Indexer info to create dynamic indexer for.</param>
            <returns>Dynamic indexer for the specified <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.IDynamicMethod">
            <summary>
            Defines methods that dynamic method class has to implement.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicMethod.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes dynamic method on the specified target object.
            </summary>
            <param name="target">
            Target object to invoke method on.
            </param>
            <param name="arguments">
            Method arguments.
            </param>
            <returns>
            A method return value.
            </returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.SafeMethod">
            <summary>
            Safe wrapper for the dynamic method.
            </summary>
            <remarks>
            <see cref="T:Spring.Reflection.Dynamic.SafeMethod"/> will attempt to use dynamic
            method if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new instance of the safe method wrapper.
            </summary>
            <param name="methodInfo">Method to wrap.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeMethod.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes dynamic method.
            </summary>
            <param name="target">
            Target object to invoke method on.
            </param>
            <param name="arguments">
            Method arguments.
            </param>
            <returns>
            A method return value.
            </returns>
        </member>
        <member name="P:Spring.Reflection.Dynamic.SafeMethod.DeclaringType">
            <summary>
            Gets the class, that declares this method
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.DynamicMethod">
            <summary>
            Factory class for dynamic methods.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicMethod.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates dynamic method instance for the specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method">Method info to create dynamic method for.</param>
            <returns>Dynamic method for the specified <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.IDynamicProperty">
            <summary>
            Defines methods that dynamic property class has to implement.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicProperty.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to get property value from.
            </param>
            <returns>
            A property value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicProperty.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to set property value on.
            </param>
            <param name="value">
            A new property value.
            </param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicProperty.GetValue(System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to get property value from.
            </param>
            <param name="index">Optional index values for indexed properties. This value should be null reference for non-indexed properties.</param>
            <returns>
            A property value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.IDynamicProperty.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to set property value on.
            </param>
            <param name="value">
            A new property value.
            </param>
            <param name="index">Optional index values for indexed properties. This value should be null reference for non-indexed properties.</param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.SafeProperty">
            <summary>
            Safe wrapper for the dynamic property.
            </summary>
            <remarks>
            <see cref="T:Spring.Reflection.Dynamic.SafeProperty"/> will attempt to use dynamic
            property if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeProperty.GetOrCreateDynamicProperty(System.Reflection.PropertyInfo)">
            <summary>
            Obtains cached property info or creates a new entry, if none is found.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of the safe property wrapper.
            </summary>
            <param name="propertyInfo">Property to wrap.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeProperty.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to get property value from.
            </param>
            <returns>
            A property value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeProperty.GetValue(System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to get property value from.
            </param>
            <param name="index">Optional index values for indexed properties. This value should be null reference for non-indexed properties.</param>
            <returns>
            A property value.
            </returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeProperty.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to set property value on.
            </param>
            <param name="value">
            A new property value.
            </param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.SafeProperty.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to set property value on.
            </param>
            <param name="value">
            A new property value.
            </param>
            <param name="index">Optional index values for indexed properties. This value should be null reference for non-indexed properties.</param>
        </member>
        <member name="P:Spring.Reflection.Dynamic.SafeProperty.PropertyInfo">
            <summary>
            Internal PropertyInfo accessor.
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.SafeProperty.DynamicPropertyCacheEntry">
            <summary>
            Holds cached Getter/Setter delegates for a Property
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.DynamicProperty">
            <summary>
            Factory class for dynamic properties.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicProperty.CreateSafe(System.Reflection.PropertyInfo)">
            <summary>
            Creates safe dynamic property instance for the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <remarks>
            <p>This factory method will create a dynamic property with a "safe" wrapper.</p>
            <p>Safe wrapper will attempt to use generated dynamic property if possible,
            but it will fall back to standard reflection if necessary.</p>
            </remarks>
            <param name="property">Property info to create dynamic property for.</param>
            <returns>Safe dynamic property for the specified <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
            <seealso cref="T:Spring.Reflection.Dynamic.SafeProperty"/>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicProperty.Create(System.Reflection.PropertyInfo)">
            <summary>
            Creates dynamic property instance for the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">Property info to create dynamic property for.</param>
            <returns>Dynamic property for the specified <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.FieldGetterDelegate">
            <summary>
            Represents a Get method
            </summary>
            <param name="target">the target instance when calling an instance method</param>
            <returns>the value return by the Get method</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.FieldSetterDelegate">
            <summary>
            Represents a Set method
            </summary>
            <param name="target">the target instance when calling an instance method</param>
            <param name="value">the value to be set</param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.PropertyGetterDelegate">
            <summary>
            Represents an Indexer Get method
            </summary>
            <param name="target">the target instance when calling an instance method</param>
            <param name="index"></param>
            <returns>the value return by the Get method</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.PropertySetterDelegate">
            <summary>
            Represents a Set method
            </summary>
            <param name="target">the target instance when calling an instance method</param>
            <param name="value">the value to be set</param>
            <param name="index"></param>
        </member>
        <member name="T:Spring.Reflection.Dynamic.FunctionDelegate">
            <summary>
            Represents a method
            </summary>
            <param name="target">the target instance when calling an instance method</param>
            <param name="args">arguments to be passed to the method</param>
            <returns>the value return by the method. <value>null</value> when calling a void method</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.ConstructorDelegate">
            <summary>
            Represents a constructor
            </summary>
            <param name="args">arguments to be passed to the method</param>
            <returns>the new object instance</returns>
        </member>
        <member name="T:Spring.Reflection.Dynamic.CreatePropertyCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Spring.Reflection.Dynamic.IDynamicProperty"/> from a <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.CreateFieldCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Spring.Reflection.Dynamic.IDynamicField"/> from a <see cref="T:System.Reflection.FieldInfo"/> instance.
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.CreateMethodCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Spring.Reflection.Dynamic.IDynamicMethod"/> from a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.CreateConstructorCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Spring.Reflection.Dynamic.IDynamicConstructor"/> from a <see cref="T:System.Reflection.ConstructorInfo"/> instance.
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.CreateIndexerCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Spring.Reflection.Dynamic.IDynamicIndexer"/> from a <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </summary>
        </member>
        <member name="T:Spring.Reflection.Dynamic.DynamicReflectionManager">
            <summary>
            Allows easy access to existing and creation of new dynamic relection members.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Reflection.Dynamic.DynamicReflectionManager.ASSEMBLY_NAME">
            <summary>
            The name of the assembly that defines reflection types created.
            </summary>
        </member>
        <member name="F:Spring.Reflection.Dynamic.DynamicReflectionManager.TYPE_ATTRIBUTES">
            <summary>
            The attributes of the reflection type to generate.
            </summary>
        </member>
        <member name="F:Spring.Reflection.Dynamic.DynamicReflectionManager.propertyCache">
            <summary>
            Cache for dynamic property types.
            </summary>
        </member>
        <member name="F:Spring.Reflection.Dynamic.DynamicReflectionManager.fieldCache">
            <summary>
            Cache for dynamic field types.
            </summary>
        </member>
        <member name="F:Spring.Reflection.Dynamic.DynamicReflectionManager.indexerCache">
            <summary>
            Cache for dynamic indexer types.
            </summary>
        </member>
        <member name="F:Spring.Reflection.Dynamic.DynamicReflectionManager.methodCache">
            <summary>
            Cache for dynamic method types.
            </summary>
        </member>
        <member name="F:Spring.Reflection.Dynamic.DynamicReflectionManager.constructorCache">
            <summary>
            Cache for dynamic constructor types.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreateTypeBuilder(System.String)">
            <summary>
            Creates an appropriate type builder.
            </summary>
            <param name="name">
            The base name to use for the reflection type name.
            </param>
            <returns>The type builder to use.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.GetDynamicProperty(System.Reflection.PropertyInfo,Spring.Reflection.Dynamic.CreatePropertyCallback)">
            <summary>
            Returns dynamic property if one exists.
            </summary>
            <param name="property">Property to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic property</param>
            <returns>An <see cref="T:Spring.Reflection.Dynamic.IDynamicProperty"/> for the given property info.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.GetDynamicField(System.Reflection.FieldInfo,Spring.Reflection.Dynamic.CreateFieldCallback)">
            <summary>
            Returns dynamic field if one exists.
            </summary>
            <param name="field">Field to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic field</param>
            <returns>An <see cref="T:Spring.Reflection.Dynamic.IDynamicField"/> for the given field info.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.GetDynamicIndexer(System.Reflection.PropertyInfo,Spring.Reflection.Dynamic.CreateIndexerCallback)">
            <summary>
            Returns dynamic indexer if one exists.
            </summary>
            <param name="indexer">Indexer to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic indexer</param>
            <returns>An <see cref="T:Spring.Reflection.Dynamic.IDynamicIndexer"/> for the given indexer.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.GetDynamicMethod(System.Reflection.MethodInfo,Spring.Reflection.Dynamic.CreateMethodCallback)">
            <summary>
            Returns dynamic method if one exists.
            </summary>
            <param name="method">Method to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic method</param>
            <returns>An <see cref="T:Spring.Reflection.Dynamic.IDynamicMethod"/> for the given method.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.GetDynamicConstructor(System.Reflection.ConstructorInfo,Spring.Reflection.Dynamic.CreateConstructorCallback)">
            <summary>
            Returns dynamic constructor if one exists.
            </summary>
            <param name="constructor">Constructor to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic constructor</param>
            <returns>An <see cref="T:Spring.Reflection.Dynamic.IDynamicConstructor"/> for the given constructor.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.SaveAssembly">
            <summary>
            Saves dynamically generated assembly to disk.
            Can only be called in DEBUG mode, per ConditionalAttribute rules.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreateFieldGetter(System.Reflection.FieldInfo)">
            <summary>
            Create a new Get method delegate for the specified field using <see cref="T:System.Reflection.Emit.DynamicMethod"/>
            </summary>
            <param name="fieldInfo">the field to create the delegate for</param>
            <returns>a delegate that can be used to read the field</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreateFieldSetter(System.Reflection.FieldInfo)">
            <summary>
            Create a new Set method delegate for the specified field using <see cref="T:System.Reflection.Emit.DynamicMethod"/>
            </summary>
            <param name="fieldInfo">the field to create the delegate for</param>
            <returns>a delegate that can be used to read the field.</returns>
            <remarks>
            If the field's <see cref="P:System.Reflection.FieldInfo.IsLiteral"/> returns true, the returned method 
            will throw an <see cref="T:System.InvalidOperationException"/> when called.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreatePropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Create a new Get method delegate for the specified property using <see cref="T:System.Reflection.Emit.DynamicMethod"/>
            </summary>
            <param name="propertyInfo">the property to create the delegate for</param>
            <returns>a delegate that can be used to read the property.</returns>
            <remarks>
            If the property's <see cref="P:System.Reflection.PropertyInfo.CanRead"/> returns false, the returned method 
            will throw an <see cref="T:System.InvalidOperationException"/> when called.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreatePropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Create a new Set method delegate for the specified property using <see cref="T:System.Reflection.Emit.DynamicMethod"/>
            </summary>
            <param name="propertyInfo">the property to create the delegate for</param>
            <returns>a delegate that can be used to write the property.</returns>
            <remarks>
            If the property's <see cref="P:System.Reflection.PropertyInfo.CanWrite"/> returns false, the returned method 
            will throw an <see cref="T:System.InvalidOperationException"/> when called.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreateMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a new method delegate for the specified method using <see cref="T:System.Reflection.Emit.DynamicMethod"/>
            </summary>
            <param name="methodInfo">the method to create the delegate for</param>
            <returns>a delegate that can be used to invoke the method.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreateConstructor(System.Reflection.ConstructorInfo)">
            <summary>
             Creates a new delegate for the specified constructor.
            </summary>
            <param name="constructorInfo">the constructor to create the delegate for</param>
            <returns>delegate that can be used to invoke the constructor.</returns>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.CreateDynamicMethod(System.String,System.Type,System.Type[],System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.DynamicMethod"/> instance with the highest possible code access security.
            </summary>
            <remarks>
            If allowed by security policy, associates the method with the <paramref name="member"/>s declaring type. 
            Otherwise associates the dynamic method with <see cref="T:Spring.Reflection.Dynamic.DynamicReflectionManager"/>.
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.EmitInvokeMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Delegates a Method(object target, params object[] args) call to the actual underlying method.
            </summary>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.EmitMethodReturn(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Generates code to process return value if necessary.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="returnValueType">Type of the return value.</param>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.ConvertValueTypeArgumentIfNecessary(System.Object,System.Type,System.Int32)">
            <summary>
            Converts <paramref name="value"/> to an instance of <paramref name="targetType"/> if necessary to 
            e.g. avoid e.g. double/int cast exceptions.
            </summary>
            <remarks>
            <para>
            This method mimics the behavior of the compiler that
            automatically performs casts like int to double in "Math.Sqrt(4)".<br/>
            See about implicit, widening type conversions on <a href="http://social.msdn.microsoft.com/Search/en-US/?query=type conversion tables">MSDN - Type Conversion Tables</a>
            </para>
            <para>
            Note: <paramref name="targetType"/> is expected to be a value type! 
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Reflection.Dynamic.DynamicReflectionManager.EmitThrowInvalidOperationException(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Generates code that throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="message">Error message to use.</param>
        </member>
        <member name="T:Spring.Stereotype.ComponentAttribute">
            <summary>
            Indicates that an annotated class is a "component".
            Such classes are considered as candidates for future features such 
            as auto-detection  when using attribute-based configuration and assembly scanning.
            </summary>
            <remarks>Other class-level annotations may be considered as identifying
            a component as well, typically a special kind of component:
            e.g. the Repository attribute.
            </remarks>
            <author>Mark Fisher</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:Spring.Stereotype.RepositoryAttribute"/>
        </member>
        <member name="M:Spring.Stereotype.ComponentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Stereotype.ComponentAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spring.Stereotype.ComponentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Stereotype.ComponentAttribute"/> class.
            </summary>
            <param name="name">The name of the component.</param>
        </member>
        <member name="P:Spring.Stereotype.ComponentAttribute.Name">
            <summary>
            Gets or sets the name of the component
            </summary>
            <value>The name of the component.</value>
        </member>
        <member name="T:Spring.Stereotype.RepositoryAttribute">
            <summary>
            Indicates that an annotated class is a "Repository" (or "DAO").
            </summary>
            <remarks>
            A class with this attribute is eligible for Spring DataAccessException translation.  A class
            with the Repository attribute is also clarified as to its role in the overall application
            architecture for the purpose of tools, aspects, etc.
            <para>
            This attribute also serves as a specialization of the ComponentAttribute, allowing implementation
            classes to be autodetected in future releases through assembly scanning.
            </para>
            </remarks>
            <author>Rod Johnson</author>
            <author>Jueren Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:Spring.Stereotype.ComponentAttribute"/>   
        </member>
        <member name="M:Spring.Stereotype.RepositoryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Stereotype.RepositoryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spring.Stereotype.RepositoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Stereotype.RepositoryAttribute"/> class.
            </summary>
            <param name="name">The name of the repository.</param>
        </member>
        <member name="T:Spring.Stereotype.ServiceAttribute">
            <summary>
            Indicates that an annotated class is a "Service" (e.g. a business service facade).
            </summary>
            <remarks>
            <para>
            This attribute also serves as a specialization of the ComponentAttribute, allowing implementation
            classes to be autodetected in future releases through assembly scanning.
            </para>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Stereotype.ServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Stereotype.ServiceAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spring.Stereotype.ServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Stereotype.ServiceAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Spring.Threading.CallContextStorage">
            <summary>
            Implements <see cref="T:Spring.Threading.IThreadStorage"/> by using <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Threading.IThreadStorage">
            <summary>
            Specifies the contract a strategy must be implement to store and 
            retrieve data that is specific to the executing thread.
            </summary>
            <remarks>
            All implementations of this interface must treat keys case-sensitive.
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Threading.IThreadStorage.GetData(System.String)">
            <summary>
            Retrieves an object with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>
            The object in the current thread's context associated with the 
            specified <paramref name="name"/> or null if no object has been stored previously
            </returns>
        </member>
        <member name="M:Spring.Threading.IThreadStorage.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the current thread's context.</param>
        </member>
        <member name="M:Spring.Threading.IThreadStorage.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <remarks>
            If the object with the specified <paramref name="name"/> is not found, the method does nothing.
            </remarks>
            <param name="name">The name of the object to remove.</param>
        </member>
        <member name="M:Spring.Threading.CallContextStorage.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The object in the call context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Spring.Threading.CallContextStorage.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the call context.</param>
        </member>
        <member name="M:Spring.Threading.CallContextStorage.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Spring.Threading.ISync">
            <summary>
            Acquire/Release protocol, base of many concurrency utilities.
            </summary>
            
            <remarks>
            <p><see cref="T:Spring.Threading.ISync"/> objects isolate waiting and notification for particular logical 
            states, resource availability, events, and the like that are shared 
            across multiple threads.</p>
            
            <p>Use of <see cref="T:Spring.Threading.ISync"/>s sometimes (but by no means always) adds 
            flexibility and efficiency compared to the use of plain 
            .Net monitor methods and locking, and are sometimes (but by no means 
            always) simpler to program with.</p>
            
            <p>Used for implementation of a <see cref="T:Spring.Pool.Support.SimplePool"/></p>
            </remarks>
            
            <author>Doug Lea</author>
            <author>Federico Spinazzi (.Net)</author>
        </member>
        <member name="M:Spring.Threading.ISync.Acquire">
            <summary>  Wait (possibly forever) until successful passage.
            Fail only upon interuption. Interruptions always result in
            `clean' failures. On failure,  you can be sure that it has not 
            been acquired, and that no 
            corresponding release should be performed. Conversely,
            a normal return guarantees that the acquire was successful.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.ISync.Release">
            <summary> Potentially enable others to pass.
            <p>
            Because release does not raise exceptions, 
            it can be used in `finally' clauses without requiring extra
            embedded try/catch blocks. But keep in mind that
            as with any java method, implementations may 
            still throw unchecked exceptions such as Error or NullPointerException
            when faced with uncontinuable errors. However, these should normally
            only be caught by higher-level error handlers.
            </p>
            </summary>
        </member>
        <member name="M:Spring.Threading.ISync.Attempt(System.Int64)">
            <summary>
            Wait at most msecs to pass; report whether passed. 
            <p>
            The method has best-effort semantics:
            The msecs bound cannot
            be guaranteed to be a precise upper bound on wait time in Java.
            Implementations generally can only attempt to return as soon as possible
            after the specified bound. Also, timers in Java do not stop during garbage
            collection, so timeouts can occur just because a GC intervened.
            So, msecs arguments should be used in
            a coarse-grained manner. Further,
            implementations cannot always guarantee that this method
            will return at all without blocking indefinitely when used in
            unintended ways. For example, deadlocks may be encountered
            when called in an unintended context.
            </p>
            </summary>
            <param name="msecs">the number of milleseconds to wait
            An argument less than or equal to zero means not to wait at all. 
            However, this may still require
            access to a synchronization lock, which can impose unbounded
            delay if there is a lot of contention among threads.
            </param>
            <returns>true if acquired</returns>
        </member>
        <member name="T:Spring.Threading.Latch">
             <summary> A latch is a boolean condition that is set at most once, ever.
             Once a single release is issued, all acquires will pass.
             <p>
             <b>Sample usage.</b> Here are a set of classes that use
             a latch as a start signal for a group of worker threads that
             are created and started beforehand, and then later enabled.
             </p>
             <example>
             class Worker implements IRunnable {
               private readonly Latch startSignal;
               Worker(Latch l) 
               { 
                 startSignal = l; 
               }
            
               public void Run() {
                 startSignal.acquire();
                 DoWork();
               }
               
               void DoWork() { ... }
               }
             
               class Driver { // ...
                 void Main() {
                   Latch go = new Latch();
                   for (int i = 0; i &lt; N; ++i) // make threads
                   new Thread(new ThreadStart(new Worker(go)).Start();
                   DoSomethingElse();         // don't let run yet 
                   go.Release();              // let all threads proceed
             } 
             }
             </example>
             </summary>
             <author>Doug Lea</author>
             <author>Federico Spinazzi (.Net)</author>
        </member>
        <member name="F:Spring.Threading.Latch.latched_">
            <summary>
            can acquire ?
            </summary>
        </member>
        <member name="M:Spring.Threading.Latch.Acquire">
            <summary>
            Method mainly used by clients who are trying to get the latch
            </summary>
        </member>
        <member name="M:Spring.Threading.Latch.Attempt(System.Int64)">
            <summary>Wait at most msecs millisconds for a permit</summary>
        </member>
        <member name="M:Spring.Threading.Latch.Release">
            <summary>
            Enable all current and future acquires to pass 
            </summary>
        </member>
        <member name="T:Spring.Threading.LogicalThreadContext">
            <summary>
            An abstraction to safely store "ThreadStatic" data.
            </summary>
            <remarks>
            By default, <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> is used to store thread-specific data. 
            You may switch the storage strategy by calling <see cref="M:Spring.Threading.LogicalThreadContext.SetStorage(Spring.Threading.IThreadStorage)"/>.<p/>
            <b>NOTE:</b> Access to the underlying storage is not synchronized for performance reasons. 
            You should call <see cref="M:Spring.Threading.LogicalThreadContext.SetStorage(Spring.Threading.IThreadStorage)"/> only once at application startup!
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="F:Spring.Threading.LogicalThreadContext.threadStorage">
            <summary>
            Holds the current <see cref="T:Spring.Threading.IThreadStorage"/> strategy.
            </summary>
            <remarks>
            Access to this variable is not synchronized on purpose for performance reasons. 
            Setting a different <see cref="T:Spring.Threading.IThreadStorage"/> strategy should happen only once
            at application startup.
            </remarks>
        </member>
        <member name="M:Spring.Threading.LogicalThreadContext.SetStorage(Spring.Threading.IThreadStorage)">
            <summary>
            Set the new <see cref="T:Spring.Threading.IThreadStorage"/> strategy.
            </summary>
        </member>
        <member name="M:Spring.Threading.LogicalThreadContext.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The object in the context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Spring.Threading.LogicalThreadContext.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the current thread's context.</param>
        </member>
        <member name="M:Spring.Threading.LogicalThreadContext.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Spring.Threading.Semaphore">
            <summary>
            <p>Base class for counting semaphores based on Semaphore implementation
            from Doug Lea.</p>
            </summary>
            <remarks> 
            
            <p>Conceptually, a semaphore 
            maintains a set of permits. Each acquire() blocks if 
            necessary until a permit is available, and then takes it.</p>
            
            <p>Each release adds a permit. However, no actual permit objects are used; 
            the Semaphore just keeps a count of the number available 
            and acts accordingly.</p>
            
            <p>A semaphore initialized to 1 can serve as a mutual exclusion lock. </p>
            
            Used for implementation of a <see cref="T:Spring.Pool.Support.SimplePool"/>
            </remarks>
            <author>Doug Lea</author>
            <author>Federico Spinazzi (.Net)</author>
        </member>
        <member name="F:Spring.Threading.Semaphore.nPermits">
            <summary>
            current number of available permits
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.#ctor(System.Int64)">
            <summary>
            <p>Create a Semaphore with the given initial number of permits.</p>
            <p>Using a seed of 1 makes the semaphore act as a mutual 
            exclusion lock.</p>
            
            <p>Negative seeds are also allowed, 
            in which case no acquires will proceed until the number of 
            releases has pushed the number of permits past 0.</p>
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.Release">
            <summary>
            Release a permit
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.Acquire">
            <summary>
            Acquire a permit
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.Attempt(System.Int64)">
            <summary>
            Wait at most msecs millisconds for a permit
            </summary>
            <param name="msecs">number of ms to wait</param>
            <returns>true if aquired</returns>
        </member>
        <member name="M:Spring.Threading.Semaphore.Release(System.Int64)">
            <summary> Release N permits. <code>release(n)</code> is
            equivalent in effect to:
            <pre>
            for (int i = 0; i &lt; n; ++i) release();
            </pre>
            But may be more efficient in some semaphore implementations.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">  if n is negative.
            
            </exception>
        </member>
        <member name="P:Spring.Threading.Semaphore.Permits">
            <summary> Return the current number of available permits.
            Returns an accurate, but possibly unstable value,
            that may change immediately after returning.
            </summary>
        </member>
        <member name="T:Spring.Threading.SyncHolder">
            <summary>
            Utility class to use an <see cref="T:Spring.Threading.ISync"/> with the 
            C# <c>using () {}</c> idiom
            </summary>
        </member>
        <member name="M:Spring.Threading.SyncHolder.#ctor(Spring.Threading.ISync)">
            <summary>
            Creates a new <see cref="T:Spring.Threading.SyncHolder"/> trying to <see cref="M:Spring.Threading.ISync.Acquire"/> the given 
            <see cref="T:Spring.Threading.ISync"/>
            </summary>
            <param name="sync">the <see cref="T:Spring.Threading.ISync"/> to be held</param>
        </member>
        <member name="M:Spring.Threading.SyncHolder.#ctor(Spring.Threading.ISync,System.Int64)">
            <summary>
            Creates a new <see cref="T:Spring.Threading.SyncHolder"/> trying to <see cref="M:Spring.Threading.ISync.Attempt(System.Int64)"/> the given 
            <see cref="T:Spring.Threading.ISync"/>
            </summary>
            <param name="sync">the <see cref="T:Spring.Threading.ISync"/> to be held</param>
            <param name="msecs">millisecond to try to acquire the lock</param>
        </member>
        <member name="M:Spring.Threading.SyncHolder.Dispose">
            <summary>
            Releases the held <see cref="T:Spring.Threading.ISync"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.SyncHolder.Init(Spring.Threading.ISync)">
            <summary>
            initializes and acquire access to the <see cref="T:Spring.Threading.ISync"/>
            </summary>
            <param name="sync"></param>
        </member>
        <member name="T:Spring.Threading.ThreadStaticStorage">
            <summary>
            Implements <see cref="T:Spring.Threading.IThreadStorage"/> by using a <see cref="T:System.ThreadStaticAttribute"/> hashtable.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Threading.ThreadStaticStorage.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The object in the call context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Spring.Threading.ThreadStaticStorage.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the call context.</param>
        </member>
        <member name="M:Spring.Threading.ThreadStaticStorage.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Spring.Threading.TimeoutException">
            <summary> Thrown by synchronization classes that report
            timeouts via exceptions. The exception is treated
            as a form (subclass) of InterruptedException. This both
            simplifies handling, and conceptually reflects the fact that
            timed-out operations are artificially interrupted by timers.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.TimeoutException._duration">
            <summary> The approximate time that the operation lasted before 
            this timeout exception was thrown.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="innerException">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override of GetObjectData to allow for private serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">streaming context</param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.Int64)">
            <summary> Constructs a TimeoutException with given duration value.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.Int64,System.String)">
            <summary> Constructs a TimeoutException with the
            specified duration value and detail message.
            </summary>
        </member>
        <member name="P:Spring.Threading.TimeoutException.Duration">
            <summary> 
            Gets the approximate time that the operation lasted before 
            this timeout exception was thrown.
            </summary>
        </member>
        <member name="T:Spring.Threading.TimeoutSync">
            <summary> A TimeoutSync is an adaptor class that transforms all
            calls to acquire to instead invoke attempt with a predetermined
            timeout value.
            </summary>
            <seealso cref="T:Spring.Threading.ISync"/>		
        </member>
        <member name="F:Spring.Threading.TimeoutSync.sync_">
            <summary>
            the adapted sync
            </summary>
        </member>
        <member name="F:Spring.Threading.TimeoutSync.timeout_">
            <summary>
            timeout value
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.#ctor(Spring.Threading.ISync,System.Int64)">
            <summary> Create a TimeoutSync using the given Sync object, and
            using the given timeout value for all calls to acquire.
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.Acquire">
            <summary>
            Try to acquire the sync before the timeout
            </summary>
            <exception cref="T:Spring.Threading.TimeoutException">In case a time out occurred</exception>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.Attempt(System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.ISync.Attempt(System.Int64)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.Release">
            <summary>
            <see cref="M:Spring.Threading.ISync.Release"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.Utils">
            <summary>
            Support to account for differences between java nad .NET:
            <ul>
            </ul>
            </summary>
        </member>
        <member name="M:Spring.Threading.Utils.FailFastIfInterrupted">
            <summary>
            .NET threads have not a method to check if they have been interrupted.
            Moreover, differently from java threads, when entering <c>lock</c>ed
            blocks, Monitor, Sleep, SpinWait and so on, a <see cref="T:System.Threading.ThreadInterruptedException"/> 
            will be raised by the runtime.
            <p/>Spring.Threading classes usually call this method before entering a lock block, to mirror java code
            <p>Usually this is non issue because the same exception will be raised entering the monitor 
            associated with the lock (<seealso href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemthreadingmonitorclassentertopic.asp"/>) 
            </p>
            </summary>
            <exception cref="T:System.Threading.ThreadInterruptedException">if the thread has been interrupted</exception>
        </member>
        <member name="M:Spring.Threading.Utils.ToTimeMillis(System.DateTime)">
            <summary>
            Normalize the given <see cref="T:System.DateTime"/> so that 
            is is comparable with <see cref="P:Spring.Threading.Utils.CurrentTimeMillis"/>.
            </summary>
            <param name="date">Date.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Threading.Utils.DeltaTimeMillis(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="one"></param>
            <param name="another"></param>
            <returns>the difference between millisecodns of the first and second date</returns>
        </member>
        <member name="M:Spring.Threading.Utils.CurrentNanoSeconds">
            <summary>
            Returns the number of nanoseconds for the current value of <see cref="P:System.DateTime.Now"/>
            </summary>
            <returns>Current number of nanoseconds</returns>
        </member>
        <member name="M:Spring.Threading.Utils.TimeSpanNanoSeconds(System.TimeSpan)">
            <summary>
            Returns the number of nano seconds represented by the <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan"><see cref="T:System.TimeSpan"/> to use</param>
            <returns>Number of nano seconds for <parmref name="timeSpan"/></returns>
        </member>
        <member name="M:Spring.Threading.Utils.NanoSecondsTimeSpan(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> representing the number of nanoseconds passed in via <paramref name="nanoSeconds"/>.
            </summary>
            <param name="nanoSeconds">Number of nanoseconds.</param>
            <returns><see cref="T:System.TimeSpan"/> representing the number of nanoseconds passed in.</returns>
        </member>
        <member name="P:Spring.Threading.Utils.CurrentTimeMillis">
            <summary>
            Placeholder for <c>java.lang.System.currentTimeMillis</c>
            </summary>
            <returns>The current machine time in milliseconds</returns>
        </member>
        <member name="P:Spring.Threading.Utils.ThreadInterrupted">
            <summary>
            Has been interrupted this thread
            </summary>
        </member>
        <member name="T:Spring.Util.Generic.CollectionUtils">
            <summary>
            Miscellaneous generic collection utility methods.
            </summary>
            <remarks>
            Mainly for internal use within the framework.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Util.Generic.CollectionUtils.HasUniqueObject``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determine whether a given collection only contains
            a single unique object
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Util.Generic.CollectionUtils.Contains``1(System.Collections.Generic.ICollection{``0},System.Object)">
            <summary>
            Determines whether the <paramref name="collection"/> contains the specified <paramref name="element"/>.
            </summary>
            <param name="collection">The collection to check.</param>
            <param name="element">The object to locate in the collection.</param>
            <returns><see lang="true"/> if the element is in the collection, <see lang="false"/> otherwise.</returns>
        </member>
        <member name="M:Spring.Util.Generic.CollectionUtils.ContainsAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection contains all the elements in the specified collection.
            </summary>
            <param name="targetCollection">The collection to check.</param>
            <param name="sourceCollection">Collection whose elements would be checked for containment.</param>
            <returns>true if the target collection contains all the elements of the specified collection.</returns>
        </member>
        <member name="M:Spring.Util.Generic.CollectionUtils.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Removes all the elements from the target collection that are contained in the source collection.
            </summary>
            <param name="targetCollection">Collection where the elements will be removed.</param>
            <param name="sourceCollection">Elements to remove from the target collection.</param>
        </member>
        <member name="T:Spring.Util.ArrayUtils">
            <summary>
            Various utility methods relating to the manipulation of arrays.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Util.ArrayUtils.HasElements(System.Collections.ICollection)">
            <summary>
            Checks if the given array or collection has elements and none of the elements is null.
            </summary>
            <param name="collection">the collection to be checked.</param>
            <returns>true if the collection has a length and contains only non-null elements.</returns>
        </member>
        <member name="M:Spring.Util.ArrayUtils.Sort(System.Array,System.Collections.IComparer)">
            <summary>
            Use this sort method instead of <see cref="M:System.Array.Sort(System.Array,System.Collections.IComparer)"/> to overcome
            bugs in Mono.
            </summary>
        </member>
        <member name="M:Spring.Util.ArrayUtils.HasLength(System.Collections.ICollection)">
            <summary>
            Checks if the given array or collection is null or has no elements.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Util.ArrayUtils.AreEqual(System.Array,System.Array)">
            <summary>
            Tests equality of two single-dimensional arrays by checking each element
            for equality.
            </summary>
            <param name="a">The first array to be checked.</param>
            <param name="b">The second array to be checked.</param>
            <returns>True if arrays are the same, false otherwise.</returns>
        </member>
        <member name="M:Spring.Util.ArrayUtils.GetHashCode(System.Array)">
            <summary>
            Returns hash code for an array that is generated based on the elements.
            </summary>
            <remarks>
            Hash code returned by this method is guaranteed to be the same for
            arrays with equal elements.
            </remarks>
            <param name="array">
            Array to calculate hash code for.
            </param>
            <returns>
            A hash code for the specified array.
            </returns>
        </member>
        <member name="M:Spring.Util.ArrayUtils.ToString(System.Array)">
            <summary>
            Returns string representation of an array.
            </summary>
            <param name="array">
            Array to return as a string.
            </param>
            <returns>
            String representation of the specified <paramref name="array"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.ArrayUtils.Concat(System.Array,System.Array)">
            <summary>
            Concatenates 2 arrays of compatible element types
            </summary>
            <remarks>
            If either of the arguments is null, the other array is returned as the result. 
            The array element types may differ as long as they are assignable. The result array will be of the "smaller" element type.
            </remarks>
        </member>
        <member name="T:Spring.Util.AssertUtils">
            <summary>
            Assertion utility methods that simplify things such as argument checks.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Util.AssertUtils.Understands(System.Object,System.String,System.Reflection.MethodBase)">
            <summary>
             Checks, whether <paramref name="method"/> may be invoked on <paramref name="target"/>. 
             Supports testing transparent proxies.
            </summary>
            <param name="target">the target instance or <c>null</c></param>
            <param name="targetName">the name of the target to be used in error messages</param>
            <param name="method">the method to test for</param>
             <exception cref="T:System.ArgumentNullException">
             if <paramref name="method"/> is <c>null</c>
             </exception>
             <exception cref="T:System.NotSupportedException">
             if it is not possible to invoke <paramref name="method"/> on <paramref name="target"/>
             </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.Understands(System.Object,System.String,System.Type)">
            <summary>
             checks, whether <paramref name="target"/> supports the methods of <paramref name="requiredType"/>.
             Supports testing transparent proxies.
            </summary>
            <param name="target">the target instance or <c>null</c></param>
            <param name="targetName">the name of the target to be used in error messages</param>
            <param name="requiredType">the type to test for</param>
             <exception cref="T:System.ArgumentNullException">
             if <paramref name="requiredType"/> is <c>null</c>
             </exception>
             <exception cref="T:System.NotSupportedException">
             if it is not possible to invoke methods of 
             type <paramref name="requiredType"/> on <paramref name="target"/>
             </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks the value of the supplied <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/>.
            </summary>
            <param name="argument">The object to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentNotNull(System.Object,System.String,System.String)">
            <summary>
            Checks the value of the supplied <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/>.
            </summary>
            <param name="argument">The object to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">
            An arbitrary message that will be passed to any thrown
            <see cref="T:System.ArgumentNullException"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentHasText(System.String,System.String)">
            <summary>
            Checks the value of the supplied string <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or
            contains only whitespace character(s).
            </summary>
            <param name="argument">The string to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentHasText(System.String,System.String,System.String)">
            <summary>
            Checks the value of the supplied string <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or
            contains only whitespace character(s).
            </summary>
            <param name="argument">The string to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">
            An arbitrary message that will be passed to any thrown
            <see cref="T:System.ArgumentNullException"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentHasLength(System.Collections.ICollection,System.String)">
            <summary>
            Checks the value of the supplied <see cref="T:System.Collections.ICollection"/> <paramref name="argument"/> and throws
            an <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or contains no elements.
            </summary>
            <param name="argument">The array or collection to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains no elements.
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentHasLength(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Checks the value of the supplied <see cref="T:System.Collections.ICollection"/> <paramref name="argument"/> and throws
            an <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or contains no elements.
            </summary>
            <param name="argument">The array or collection to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">An arbitrary message that will be passed to any thrown <see cref="T:System.ArgumentNullException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains no elements.
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentHasElements(System.Collections.ICollection,System.String)">
            <summary>
            Checks the value of the supplied <see cref="T:System.Collections.ICollection"/> <paramref name="argument"/> and throws
            an <see cref="T:System.ArgumentException"/> if it is <see langword="null"/>, contains no elements or only null elements.
            </summary>
            <param name="argument">The array or collection to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/>, 
            contains no elements or only null elements.
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.AssertArgumentType(System.Object,System.String,System.Type,System.String)">
            <summary>
            Checks whether the specified <paramref name="argument"/> can be cast 
            into the <paramref name="requiredType"/>.
            </summary>
            <param name="argument">
            The argument to check.
            </param>
            <param name="argumentName">
            The name of the argument to check.
            </param>
            <param name="requiredType">
            The required type for the argument.
            </param>
            <param name="message">
            An arbitrary message that will be passed to any thrown
            <see cref="T:System.ArgumentException"/>.
            </param>
        </member>
        <member name="M:Spring.Util.AssertUtils.IsTrue(System.Boolean,System.String)">
            <summary>
             Assert a boolean expression, throwing <code>ArgumentException</code>
             if the test result is <code>false</code>.
            </summary>
            <param name="expression">a boolean expression.</param>
            <param name="message">The exception message to use if the assertion fails.</param>
            <exception cref="T:System.ArgumentException">
            if expression is <code>false</code>
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.IsTrue(System.Boolean)">
            <summary>
             Assert a boolean expression, throwing <code>ArgumentException</code>
             if the test result is <code>false</code>.
            </summary>
            <param name="expression">a boolean expression.</param>
            <exception cref="T:System.ArgumentException">
            if expression is <code>false</code>
            </exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.State(System.Boolean,System.String)">
            <summary>
            Assert a bool expression, throwing <code>InvalidOperationException</code>
            if the expression is <code>false</code>.
            </summary>
            <param name="expression">a boolean expression.</param>
            <param name="message">The exception message to use if the assertion fails</param>
            <exception cref="T:System.InvalidOperationException">if expression is <code>false</code></exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Util.AssertUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Util.AttributeUtils">
            <summary>
            General utility methods for working with annotations
            </summary>
        </member>
        <member name="M:Spring.Util.AttributeUtils.FindAttribute(System.Type,System.Type)">
            <summary>
            Find a single Attribute of the type 'attributeType' from the supplied class, 
            traversing it interfaces and super classes if no attribute can be found on the 
            class iteslf. 
            </summary>
            <remarks>
            This method explicitly handles class-level attributes which are not declared as
            inherited as well as attributes on interfaces.
            </remarks>
            <param name="type">The class to look for attributes on .</param>
            <param name="attributeType">Type of the attribibute to look for.</param>
            <returns>the attribute of the given type found, or <code>null</code></returns>
        </member>
        <member name="T:Spring.Util.CollectionUtils">
            <summary>
            Miscellaneous collection utility methods.
            </summary>
            <remarks>
            Mainly for internal use within the framework.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Util.CollectionUtils.HasElements(System.Collections.ICollection)">
            <summary>
            Checks if the given array or collection has elements and none of the elements is null.
            </summary>
            <param name="collection">the collection to be checked.</param>
            <returns>true if the collection has a length and contains only non-null elements.</returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.HasLength(System.Collections.ICollection)">
            <summary>
            Checks if the given array or collection is null or has no elements.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.HasUniqueObject(System.Collections.ICollection)">
            <summary>
            Determine whether a given collection only contains
            a single unique object
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Determines whether the <paramref name="collection"/> contains the specified <paramref name="element"/>.
            </summary>
            <param name="collection">The collection to check.</param>
            <param name="element">The object to locate in the collection.</param>
            <returns><see lang="true"/> if the element is in the collection, <see lang="false"/> otherwise.</returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.Add(System.Collections.ICollection,System.Object)">
            <summary>
            Adds the specified <paramref name="element"/> to the specified <paramref name="collection"/> .
            </summary>
            <param name="collection">The collection to add the element to.</param>
            <param name="element">The object to add to the collection.</param>
        </member>
        <member name="M:Spring.Util.CollectionUtils.Add(System.Collections.IEnumerable,System.Object)">
            <summary>
            Adds the specified <paramref name="element"/> to the specified <paramref name="enumerable"/> .
            </summary>
            <param name="enumerable">The enumerable to add the element to.</param>
            <param name="element">The object to add to the collection.</param>
        </member>
        <member name="M:Spring.Util.CollectionUtils.ContainsAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether the collection contains all the elements in the specified collection.
            </summary>
            <param name="targetCollection">The collection to check.</param>
            <param name="sourceCollection">Collection whose elements would be checked for containment.</param>
            <returns>true if the target collection contains all the elements of the specified collection.</returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.RemoveAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Removes all the elements from the target collection that are contained in the source collection.
            </summary>
            <param name="targetCollection">Collection where the elements will be removed.</param>
            <param name="sourceCollection">Elements to remove from the target collection.</param>
        </member>
        <member name="M:Spring.Util.CollectionUtils.ToArrayList(System.Collections.ICollection)">
            <summary>
            Converts an <see cref="T:System.Collections.ICollection"/>instance to an <see cref="T:System.Collections.ArrayList"/> instance.
            </summary>
            <param name="inputCollection">The <see cref="T:System.Collections.ICollection"/> instance to be converted.</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> instance in which its elements are the elements of the <see cref="T:System.Collections.ICollection"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">if the <paramref name="inputCollection"/> is null.</exception>
        </member>
        <member name="M:Spring.Util.CollectionUtils.ToArray(System.Collections.ICollection,System.Type)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a 
            new array of the specified element type.
            </summary>
            <param name="inputCollection">The <see cref="T:System.Collections.ICollection"/> instance to be converted.</param>
            <param name="elementType">The element <see cref="T:System.Type"/> of the destination array to create and copy elements to</param>
            <returns>An array of the specified element type containing copies of the elements of the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.FindFirstMatch(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Returns the first element contained in both, <paramref name="source"/> and <paramref name="candidates"/>.
            </summary>
            <remarks>The implementation assumes that <paramref name="candidates"/> &lt;&lt;&lt; <paramref name="source"/></remarks>
            <param name="source">the source enumerable. may be <c>null</c></param>
            <param name="candidates">the list of candidates to match against <paramref name="source"/> elements. may be <c>null</c></param>
            <returns>the first element found in both enumerables or <c>null</c></returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.FindValueOfType(System.Collections.ICollection,System.Type)">
            <summary>
            Finds a value of the given type in the given collection.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="type">The type to look for.</param>
            <returns>a value of the given type found, or null if none.</returns>
            <exception cref="T:System.ArgumentException">If more than one value of the given type is found</exception>
        </member>
        <member name="M:Spring.Util.CollectionUtils.FindValuesOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Finds a value of the given type in the given collection.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="type">The type to look for.</param>
            <returns>a collection of matching values of the given type found, empty if none found, or null if the input collection was null.</returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.FindValueOfType(System.Collections.ICollection,System.Type[])">
            <summary>
            Find a value of one of the given types in the given Collection, 
            searching the Collection for a value of the first type, then
            searching for a value of the second type, etc.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="types">The types to look for, in prioritized order.</param>
            <returns>a value of the given types found, or <code>null</code> if none</returns>
            <exception cref="T:System.ArgumentException">If more than one value of the given type is found</exception>        
        </member>
        <member name="M:Spring.Util.CollectionUtils.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified collection is null or empty.
            </summary>
            <param name="enumerable">The collection to check.</param>
            <returns>
            	<c>true</c> if the specified collection is empty or null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.IsEmpty(System.Collections.ICollection)">
            <summary>
            Determines whether the specified collection is null or empty.
            </summary>
            <param name="collection">The collection to check.</param>
            <returns>
            	<c>true</c> if the specified collection is empty or null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.IsEmpty(System.Collections.IDictionary)">
            <summary>
            Determines whether the specified dictionary is null empty.
            </summary>
            <param name="dictionary">The dictionary to check.</param>
            <returns>
            	<c>true</c> if the specified dictionary is empty or null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.StableSort(System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            A simple stable sorting routine - far from being efficient, only for small collections.
            </summary>
            <param name="input"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.StableSort(System.Collections.IEnumerable,Spring.Util.CollectionUtils.CompareCallback)">
            <summary>
            A simple stable sorting routine - far from being efficient, only for small collections.
            </summary>
            <remarks>
            Sorting is not(!) done in-place. Instead a sorted copy of the original input is returned.
            </remarks>
            <param name="input">input collection of items to sort</param>
            <param name="comparer">the <see cref="T:Spring.Util.CollectionUtils.CompareCallback"/> for comparing 2 items in <paramref name="input"/>.</param>
            <returns>a new collection of stable sorted items.</returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.StableSortInPlace(System.Collections.IList,System.Collections.IComparer)">
            <summary>
            A simple stable sorting routine - far from being efficient, only for small collections.
            </summary>
            <remarks>
            Sorting is not(!) done in-place. Instead a sorted copy of the original input is returned.
            </remarks>
            <param name="input">input collection of items to sort</param>
            <param name="comparer">the <see cref="T:System.Collections.IComparer"/> for comparing 2 items in <paramref name="input"/>.</param>
            <returns>a new collection of stable sorted items.</returns>
        </member>
        <member name="M:Spring.Util.CollectionUtils.StableSortInPlace(System.Collections.IList,Spring.Util.CollectionUtils.CompareCallback)">
            <summary>
            A simple stable sorting routine - far from being efficient, only for small collections.
            </summary>
            <remarks>
            Sorting is not(!) done in-place. Instead a sorted copy of the original input is returned.
            </remarks>
            <param name="input">input collection of items to sort</param>
            <param name="comparer">the <see cref="T:Spring.Util.CollectionUtils.CompareCallback"/> for comparing 2 items in <paramref name="input"/>.</param>
            <returns>a new collection of stable sorted items.</returns>
        </member>
        <member name="T:Spring.Util.CollectionUtils.CompareCallback">
            <summary>
            A callback method used for comparing to items.
            </summary>
            <remarks>
            </remarks>
            <param name="left">the first object to compare</param>
            <param name="right">the second object to compare</param>
            <returns>Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.</returns>
            <seealso cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/>
            <seealso cref="M:Spring.Util.CollectionUtils.StableSort(System.Collections.IEnumerable,Spring.Util.CollectionUtils.CompareCallback)"/>
        </member>
        <member name="T:Spring.Util.CompareUtils">
            <summary>
            Utility class containing helper methods for object comparison.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Util.CompareUtils.Compare(System.Object,System.Object)">
            <summary>Compares two objects.</summary>
            <param name="first">First object.</param>
            <param name="second">Second object.</param>
            <returns>
            0, if objects are equal; 
            less than zero, if the first object is smaller than the second one;
            greater than zero, if the first object is greater than the second one.</returns>
        </member>
        <member name="T:Spring.Util.ConfigurationUtils">
            <summary>
            Utility class for .NET configuration files management.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.#cctor">
            <summary>
            Avoid BeforeFieldInit pitfall
            </summary>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.GetSection(System.String)">
            <summary>
            Parses the configuration section.
            </summary>
            <remarks>
            <p>
            Primary purpose of this method is to allow us to parse and 
            load configuration sections using the same API regardless
            of the .NET framework version.
            </p>
            <p>
            If Microsoft paid a bit more attention to preserving backwards
            compatibility we would not even need it, but... :(
            </p>
            </remarks>
            <param name="sectionName">Name of the configuration section.</param>
            <returns>Object created by a corresponding <see cref="T:System.Configuration.IConfigurationSectionHandler"/>.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.RefreshSection(System.String)">
            <summary>
            Refresh the configuration section.
            </summary>
            <remarks>
            <p>
            Primary purpose of this method is to allow us to parse and 
            load configuration sections using the same API regardless
            of the .NET framework version.
            </p>
            <p>
            If Microsoft paid a bit more attention to preserving backwards
            compatibility we would not even need it, but... :(
            </p>
            </remarks>
            <param name="sectionName">Name of the configuration section.</param>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.CreateConfigurationException(System.String,System.Exception,System.String,System.Int32)">
            <summary>
            Creates the configuration exception.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="inner">The inner exception.</param>
            <param name="fileName">Name of the configuration file.</param>
            <param name="line">The line where exception occured.</param>
            <returns>Configuration exception.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.CreateConfigurationException(System.String,System.String,System.Int32)">
            <summary>
            Creates the configuration exception.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="fileName">Name of the configuration file.</param>
            <param name="line">The line where exception occured.</param>
            <returns>Configuration exception.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.CreateConfigurationException(System.String,System.Exception,System.Xml.XmlNode)">
            <summary>
            Creates the configuration exception.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="inner">The inner exception.</param>
            <param name="node">XML node where exception occured.</param>
            <returns>Configuration exception.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.CreateConfigurationException(System.String,System.Xml.XmlNode)">
            <summary>
            Creates the configuration exception.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="node">XML node where exception occured.</param>
            <returns>Configuration exception.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.CreateConfigurationException(System.String,System.Exception)">
            <summary>
            Creates the configuration exception.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="inner">The inner exception.</param>
            <returns>Configuration exception.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.CreateConfigurationException(System.String)">
            <summary>
            Creates the configuration exception.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <returns>Configuration exception.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.CreateConfigurationException">
            <summary>
            Creates the configuration exception.
            </summary>
            <returns>Configuration exception.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.IsConfigurationException(System.Exception)">
            <summary>
            Determines whether the specified exception is configuration exception.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns>
            	<c>true</c> if the specified exception is configuration exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.GetLineNumber(System.Xml.XmlNode)">
            <summary>
            Returns the line number of the specified node.
            </summary>
            <param name="node">Node to get the line number for.</param>
            <returns>The line number of the specified node.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.GetFileName(System.Xml.XmlNode)">
            <summary>
            Returns the name of the file specified node is defined in.
            </summary>
            <param name="node">Node to get the file name for.</param>
            <returns>The name of the file specified node is defined in.</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.SetConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem,System.Boolean)">
            <summary>
            Sets the current <see cref="T:System.Configuration.Internal.IInternalConfigSystem"/> to be used by <see cref="T:System.Configuration.ConfigurationManager"/>.
            </summary>
            <remarks>
            íf <paramref name="configSystem"/> implements <see cref="T:Spring.Util.IChainableConfigSystem"/>, this method invokes
            <see cref="M:Spring.Util.IChainableConfigSystem.SetInnerConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem)"/> on the new configSystem to chain them.<br/>
            <b> Note, that this method requires reflection on internals of <see cref="T:System.Configuration.ConfigurationManager"/></b>
            </remarks>
            <param name="configSystem">the configuration system to set</param>
            <param name="enforce">bypasses the check if the current system has already been initialized</param>
            <returns>the previous config system, if any</returns>
        </member>
        <member name="M:Spring.Util.ConfigurationUtils.ResetConfigurationSystem">
            <summary>
            Resets the global configuration system instance. Use for unit testing only!
            </summary>
        </member>
        <member name="T:Spring.Util.ConfigXmlAttribute">
            <summary>
            An <see cref="T:System.Xml.XmlAttribute"/> holding information about its original text source location.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Util.ITextPosition">
            <summary>
            Holds text position information for e.g. error reporting purposes.
            </summary>
            <seealso cref="T:Spring.Util.ConfigXmlElement"/>
            <seealso cref="T:Spring.Util.ConfigXmlAttribute"/>
        </member>
        <member name="P:Spring.Util.ITextPosition.Filename">
            <summary>
             Gets a string specifying the file/resource name related to the configuration details.
            </summary>
        </member>
        <member name="P:Spring.Util.ITextPosition.LineNumber">
            <summary>
             Gets an integer specifying the line number related to the configuration details.
            </summary>
        </member>
        <member name="P:Spring.Util.ITextPosition.LinePosition">
            <summary>
            Gets an integer specifying the line position related to the configuration details.
            </summary>
        </member>
        <member name="M:Spring.Util.ConfigXmlAttribute.#ctor(Spring.Util.ITextPosition,System.String,System.String,System.String,System.Xml.XmlDocument)">
            <summary>
             Creates a new instance of <see cref="T:Spring.Util.ConfigXmlAttribute"/>, storing a copy of the passed 
             <paramref name="currentTextPositionPositionInfo"/>.
            </summary>
        </member>
        <member name="M:Spring.Util.ConfigXmlAttribute.CloneNode(System.Boolean)">
            <summary>
            Creates a duplicate of this node.
            </summary>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself </param>
        </member>
        <member name="P:Spring.Util.ConfigXmlAttribute.Filename">
            <summary>
            The name of the resource this element was read from
            </summary>
        </member>
        <member name="P:Spring.Util.ConfigXmlAttribute.LineNumber">
            <summary>
            The line number within the resource this element was read from
            </summary>
        </member>
        <member name="P:Spring.Util.ConfigXmlAttribute.LinePosition">
            <summary>
            The line position within the resource this element was read from.
            </summary>
        </member>
        <member name="T:Spring.Util.ConfigXmlDocument">
            <summary>
            An <see cref="T:System.Xml.XmlDocument"/> implementation, who's elements retain information
            about their location in the original XML text document the were read from.
            </summary>
            <remarks>
            When loading a document, the used <see cref="T:System.Xml.XmlReader"/> must implement <see cref="T:System.Xml.IXmlLineInfo"/>. 
            Typical XmlReader implementations like <see cref="T:System.Xml.XmlTextReader"/> support this interface.
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.CreateElement(System.String,System.String,System.String)">
            <summary>
            Overridden to create a <see cref="T:Spring.Util.ConfigXmlElement"/> retaining the current 
            text position information.
            </summary>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.CreateAttribute(System.String,System.String,System.String)">
            <summary>
            Overridden to create a <see cref="T:Spring.Util.ConfigXmlAttribute"/> retaining the current 
            text position information.
            </summary>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.LoadXml(System.String,System.String)">
             <summary>
             Load the document from the given <see cref="T:System.Xml.XmlReader"/>.
             Child nodes will store <paramref name="resourceName"/> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
             </summary>
            <param name="resourceName">the name of the resource</param>
            <param name="xml">The XML source </param>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.Load(System.String)">
             <summary>
             Load the document from the given <see cref="T:System.Xml.XmlReader"/>.
             </summary>
            <param name="filePath">The XML source </param>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.Load(System.String,System.String)">
             <summary>
             Load the document from the given <see cref="T:System.Xml.XmlReader"/>.
             Child nodes will store <paramref name="resourceName"/> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
             </summary>
            <param name="resourceName">the name of the resource</param>
            <param name="filePath">The XML source </param>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.Load(System.String,System.IO.Stream)">
             <summary>
             Load the document from the given <see cref="T:System.Xml.XmlReader"/>.
             Child nodes will store <paramref name="resourceName"/> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
             </summary>
            <param name="resourceName">the name of the resource</param>
            <param name="stream">The XML source </param>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.Load(System.String,System.IO.TextReader)">
             <summary>
             Load the document from the given <see cref="T:System.Xml.XmlReader"/>.
             Child nodes will store <paramref name="resourceName"/> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
             </summary>
            <param name="resourceName">the name of the resource</param>
            <param name="reader">The XML source </param>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.Load(System.String,System.Xml.XmlReader)">
             <summary>
             Load the document from the given <see cref="T:System.Xml.XmlReader"/>.
             Child nodes will store <paramref name="resourceName"/> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
             </summary>
            <param name="resourceName">the name of the resource</param>
            <param name="reader">The XML source </param>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.Load(System.Xml.XmlReader)">
            <summary>
            Load the document from the given <see cref="T:System.Xml.XmlReader"/>.
            Child nodes will store <c>null</c> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
            </summary>
            <param name="reader">The XML source </param>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.ReadNode(System.String,System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNode"></see> object based on the information in the <see cref="T:System.Xml.XmlReader"></see>. The reader must be positioned on a node or attribute.
            Child nodes will store <paramref name="resourceName"/> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
            </summary>
            <returns>
            The new XmlNode or null if no more nodes exist.
            </returns>
            <param name="resourceName">the name of the resource</param>
            <param name="reader">The XML source </param>
            <exception cref="T:System.InvalidOperationException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </exception>
        </member>
        <member name="M:Spring.Util.ConfigXmlDocument.ReadNode(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNode"></see> object based on the information in the <see cref="T:System.Xml.XmlReader"></see>. The reader must be positioned on a node or attribute.
            Child nodes will store <c>null</c> as their <see cref="P:Spring.Util.ITextPosition.Filename"/> property.        
            </summary>
            <returns>
            The new XmlNode or null if no more nodes exist.
            </returns>
            <param name="reader">The XML source </param>
            <exception cref="T:System.InvalidOperationException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </exception>
        </member>
        <member name="P:Spring.Util.ConfigXmlDocument.CurrentTextPosition">
            <summary>
            Get info about the current text position during loading a document.
            Outside loading a document, the properties of <see cref="P:Spring.Util.ConfigXmlDocument.CurrentTextPosition"/> 
            will always be <c>null</c>.
            </summary>
        </member>
        <member name="T:Spring.Util.ConfigXmlDocument.CurrentTextPositionHolder">
            <summary>
            Holds the current text position during loading a document
            </summary>
        </member>
        <member name="T:Spring.Util.ConfigXmlElement">
            <summary>
            An <see cref="T:System.Xml.XmlElement"/> holding information about its original text source location.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Util.ConfigXmlElement.#ctor(Spring.Util.ITextPosition,System.String,System.String,System.String,System.Xml.XmlDocument)">
            <summary>
             Creates a new instance of <see cref="T:Spring.Util.ConfigXmlElement"/>, storing a copy of the passed 
             <paramref name="currentTextPositionPositionInfo"/>.
            </summary>
        </member>
        <member name="M:Spring.Util.ConfigXmlElement.CloneNode(System.Boolean)">
            <summary>
            Creates a duplicate of this node.
            </summary>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself </param>
        </member>
        <member name="P:Spring.Util.ConfigXmlElement.Filename">
            <summary>
            The name of the resource this element was read from
            </summary>
        </member>
        <member name="P:Spring.Util.ConfigXmlElement.LineNumber">
            <summary>
            The line number within the resource this element was read from
            </summary>
        </member>
        <member name="P:Spring.Util.ConfigXmlElement.LinePosition">
            <summary>
            The line position within the resource this element was read from.
            </summary>
        </member>
        <member name="T:Spring.Util.ConstructorInstantiationInfo">
            <summary>
            Collects information on the constructor to use to create the instance and the argument instances to pass into the
            constructor.
            </summary>
        </member>
        <member name="M:Spring.Util.ConstructorInstantiationInfo.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Util.ConstructorInstantiationInfo"/> class.
            </summary>
            <param name="constructorInfo">The constructor info.</param>
            <param name="argInstances">The arg instances.</param>
        </member>
        <member name="P:Spring.Util.ConstructorInstantiationInfo.ConstructorInfo">
            <summary>
            Gets the constructor info.
            </summary>
            <value>The constructor info.</value>
        </member>
        <member name="P:Spring.Util.ConstructorInstantiationInfo.ArgInstances">
            <summary>
            Gets the arg instances.
            </summary>
            <value>The arg instances.</value>
        </member>
        <member name="T:Spring.Util.DelegateInfo">
            <summary>
            Discovers the attributes of a <see cref="T:System.Delegate"/>
            <see cref="T:System.Type"/> and provides access to the
            <see cref="T:System.Delegate"/> <see cref="T:System.Type"/>s metadata.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="F:Spring.Util.DelegateInfo.InvocationMethod">
            <summary>
            The method name associated with a delegate invocation.
            </summary>
        </member>
        <member name="M:Spring.Util.DelegateInfo.#ctor(System.Reflection.EventInfo)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Util.DelegateInfo"/> class.
            </summary>
            <param name="eventMeta">
            The event used to extract the delegate <see cref="T:System.Type"/>
            from.
            </param>
            <exception cref="T:System.NullReferenceException">
            if the supplied <paramref name="eventMeta"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.DelegateInfo.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Util.DelegateInfo"/> class.
            </summary>
            <param name="type">
            The delegate <see cref="T:System.Type"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            If the supplied <see cref="T:System.Type"/> is not a subclass of the
            <see cref="T:System.Delegate"/> class, or is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.DelegateInfo.IsSignatureCompatible(System.Reflection.MethodInfo)">
            <summary>
            Checks to see if the method encapsulated by the supplied method
            metadata is compatible with the method signature associated with
            this delegate type.
            </summary>
            <param name="method">The method to be checked.</param>
            <returns>
            <see langword="true"/> if the method signature is compatible with
            the signature of this delegate; <see langword="false"/> if not, or
            if the supplied <paramref name="method"/> parameter is
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.GetParameterTypes">
            <summary>
            Gets the <see cref="T:System.Type"/>s of the parameters of the
            method signature associated with this delegate type.
            </summary>
            <remarks>
            <p>
            This method will never return <see langword="null"/>; the returned
            <see cref="T:System.Type"/> array may be empty, but it most certainly
            will not be <see langword="null"/>.
            </p>
            </remarks>
            <returns>
            A <see cref="T:System.Type"/> array of the parameter
            <see cref="T:System.Type"/>s; or the <see cref="F:System.Type.EmptyTypes"/>
            array if the method signature has no parameters.
            </returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.GetReturnType">
            <summary>
            Gets the return <see cref="T:System.Type"/> of the 
            method signature associated with this delegate type.
            </summary>
            <returns>The return <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.GetMethod">
            <summary>
            Gets the metadata about the method signature associated
            with this delegate type.
            </summary>
            <returns>
            The metadata about the method signature associated
            with this delegate type.
            </returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.IsDelegate(System.Type)">
            <summary>
            Determines whether the supplied <see cref="T:System.Type"/>
            is a <see cref="T:System.Delegate"/> type.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to be checked.
            </param>
            <returns>
            <see langword="true"/> if the supplied <see cref="T:System.Type"/>
            is a <see cref="T:System.Delegate"/> <see cref="T:System.Type"/>;
            <see langword="false"/> if not or the supplied
            <paramref name="type"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.IsSignatureCompatible(System.Reflection.EventInfo,System.Reflection.MethodInfo)">
            <summary>
            Checks if the signature of the supplied <paramref name="handlerMethod"/>
            is compatible with the signature expected by the supplied
            <paramref name="eventMeta"/>.
            </summary>
            <param name="eventMeta">The event to be checked against.</param>
            <param name="handlerMethod">
            The method signature to check for compatibility.
            </param>
            <returns>
            <see langword="true"/> if the signature of the supplied
            <paramref name="handlerMethod"/> is compatible with the signature
            expected by the supplied <paramref name="eventMeta"/>;
            <see langword="false"/> if not or either of the supplied
            parameters is <see langword="null"/>. 
            </returns>
            <seealso cref="M:Spring.Util.DelegateInfo.IsSignatureCompatible(System.Reflection.MethodInfo)"/>
        </member>
        <member name="P:Spring.Util.DelegateInfo.DelegateType">
            <summary>
            The <see cref="T:System.Type"/> of the delegate.
            </summary>
        </member>
        <member name="T:Spring.Util.DynamicCodeManager">
             <summary>
             Use this class for obtaining <see cref="T:System.Reflection.Emit.ModuleBuilder"/> instances for dynamic code generation.
             </summary>
             <remarks>
             <p>
             The purpose of this class is to provide a simple abstraction for creating and managing dynamic assemblies. 
             </p>
             <note>
             Using this factory you can't define several modules within a single dynamic assembly - only a simple one2one relation between assembly/module is used.
             </note>
             </remarks>
             <example>
             <p>The following excerpt from <see cref="T:Spring.Proxy.DynamicProxyManager"/> demonstrates usage:</p>
             <code language="c#">
             public class DynamicProxyManager
             {
               public const string PROXY_ASSEMBLY_NAME = "Spring.Proxy";
            
               public static TypeBuilder CreateTypeBuilder(string name, Type baseType)
               {
                 // Generates type name
                 string typeName = String.Format("{0}.{1}_{2}", PROXY_ASSEMBLY_NAME, name, Guid.NewGuid().ToString("N"));
                 ModuleBuilder module = DynamicCodeManager.GetModuleBuilder(PROXY_ASSEMBLY_NAME);
                 return module.DefineType(typeName, PROXY_TYPE_ATTRIBUTES);
               }
             }
             </code>
             </example>
             <author>Erich Eichinger</author>
             <seealso cref="T:Spring.Reflection.Dynamic.DynamicReflectionManager"/>
             <seealso cref="T:Spring.Proxy.DynamicProxyManager"/>
             <seealso cref="T:Spring.Objects.Factory.Support.MethodInjectingInstantiationStrategy"/>
        </member>
        <member name="M:Spring.Util.DynamicCodeManager.#ctor">
            <summary>
            prevent instantiation
            </summary>
        </member>
        <member name="M:Spring.Util.DynamicCodeManager.GetModuleBuilder(System.String)">
            <summary>
            Returns the <see cref="T:System.Reflection.Emit.ModuleBuilder"/> for the dynamic module within the specified assembly.
            </summary>
            <remarks>
            If the assembly does not exist yet, it will be created.<br/>
            This factory caches any dynamic assembly it creates - calling GetModule() twice with 
            the same name will *not* create 2 distinct modules!
            </remarks>
            <param name="assemblyName">The assembly-name of the module to be returned</param>
            <returns>the <see cref="T:System.Reflection.Emit.ModuleBuilder"/> that can be used to define new types within the specified assembly</returns>
        </member>
        <member name="M:Spring.Util.DynamicCodeManager.SaveAssembly(System.String)">
            <summary>
            Persists the specified dynamic assembly to the file-system
            </summary>
            <param name="assemblyName">the name of the dynamic assembly to persist</param>
            <remarks>
            Can only be called in DEBUG_DYNAMIC mode, per ConditionalAttribute rules.
            </remarks>
        </member>
        <member name="M:Spring.Util.DynamicCodeManager.Clear">
            <summary>
            Removes all registered <see cref="T:System.Reflection.Emit.ModuleBuilder"/>s.
            </summary>
        </member>
        <member name="T:Spring.Util.EventRaiser">
            <summary>
            A utility  class for raising events in a generic and consistent fashion.
            </summary>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Util.EventRaiser.#ctor">
            <summary>
            Create a new EventRaiser instance
            </summary>
        </member>
        <member name="M:Spring.Util.EventRaiser.Raise(System.Delegate,System.Object[])">
            <summary>
            Raises the event encapsulated by the supplied
            <paramref name="source"/>, passing the supplied <paramref name="arguments"/>
            to the event.
            </summary>
            <param name="source">The event to be raised.</param>
            <param name="arguments">The arguments to the event.</param>
            <returns>a map of sink/exception entries that occurred during event raising</returns>
        </member>
        <member name="M:Spring.Util.EventRaiser.Invoke(System.Delegate,System.Object[],Spring.Util.EventRaiser.EventExceptionsCollector)">
            <summary>
            Invokes the supplied <paramref name="sink"/>, passing the supplied
            <paramref name="arguments"/> to the sink.
            </summary>
            <param name="sink">The sink to be invoked.</param>
            <param name="arguments">The arguments to the sink.</param>
            <param name="exceptions">the map of sink/exception entries to add any exception to</param>
        </member>
        <member name="T:Spring.Util.DefensiveEventRaiser">
            <summary>
            Raises events <b>defensively</b>.
            </summary>
            <remarks>
            <p>
            Raising events defensively means that as the raised event is passed to each handler,
            any <see cref="T:System.Exception"/> thrown by a handler will be caught and silently
            ignored.
            </p>
            </remarks>
            <author>Rick Evans</author>
        </member>
        <member name="M:Spring.Util.DefensiveEventRaiser.Invoke(System.Delegate,System.Object[],Spring.Util.EventRaiser.EventExceptionsCollector)">
            <summary>
            <b>Defensively</b> invokes the supplied <paramref name="sink"/>, passing the
            supplied <paramref name="arguments"/> to the sink.
            </summary>
            <param name="sink">The sink to be invoked.</param>
            <param name="arguments">The arguments to the sink.</param>
            <param name="exceptions">the map of sink/exception entries to add any exception to</param>
        </member>
        <member name="T:Spring.Util.IChainableConfigSystem">
            <summary>
            Implement this interface to create your own, delegating <see cref="T:System.Configuration.Internal.IInternalConfigSystem"/>
            and set them using <see cref="M:Spring.Util.ConfigurationUtils.SetConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Spring.Util.IChainableConfigSystem.SetInnerConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem)">
            <summary>
            
            </summary>
            <param name="innerConfigSystem"></param>
        </member>
        <member name="T:Spring.Util.IErrorHandler">
            <summary>
            A strategy for handling errors.  This is especially useful for handling 
            errors that occur during asynchronous execution as in such cases it may not be
            possible to throw the error to the original caller.
            </summary>
            <author>Mark Fisher</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Util.IErrorHandler.HandleError(System.Exception)">
            <summary>
            Handles the error.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Spring.Util.IOUtils">
            <summary>
            Utility methods for IO handling
            </summary>
        </member>
        <member name="M:Spring.Util.IOUtils.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies one stream into another. 
            (Don't forget to call <see cref="M:System.IO.Stream.Flush"/> on the destination stream!)
            </summary>
            <remarks>
            Does not close the input stream!
            </remarks>
        </member>
        <member name="M:Spring.Util.IOUtils.ToByteArray(System.IO.Stream)">
            <summary>
            Reads a stream into a byte array. 
            </summary>
            <remarks>
            Does not close the input stream!
            </remarks>
        </member>
        <member name="T:Spring.Util.NumberUtils">
            <summary>
            Various utility methods relating to numbers.
            </summary>
            <remarks>
            <p>
            Mainly for internal use within the framework.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Util.NumberUtils.IsInteger(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is an integer.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> is an integer.
            </returns>
        </member>
        <member name="M:Spring.Util.NumberUtils.IsDecimal(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is a decimal number.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> is a decimal number.
            </returns>
        </member>
        <member name="M:Spring.Util.NumberUtils.IsNumber(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is of numeric type.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            	<c>true</c> if the specified object is of numeric type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Util.NumberUtils.CanConvertToInteger(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> can be converted to an integer.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> can be converted to an integer.
            </returns>
        </member>
        <member name="M:Spring.Util.NumberUtils.CanConvertToDecimal(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> can be converted to an integer.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> can be converted to an integer.
            </returns>
        </member>
        <member name="M:Spring.Util.NumberUtils.CanConvertToNumber(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> can be converted to a number.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            	<c>true</c> if the specified object is decimal number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Util.NumberUtils.IsZero(System.Object)">
            <summary>
            Is the supplied <paramref name="number"/> equal to zero (0)?
            </summary>
            <param name="number">The number to check.</param>
            <returns>
            <see lang="true"/> id the supplied <paramref name="number"/> is equal to zero (0).
            </returns>
        </member>
        <member name="M:Spring.Util.NumberUtils.Negate(System.Object)">
            <summary>
            Negates the supplied <paramref name="number"/>.
            </summary>
            <param name="number">The number to negate.</param>
            <returns>The supplied <paramref name="number"/> negated.</returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="number"/> is not a supported numeric type.
            </exception>
        </member>
        <member name="M:Spring.Util.NumberUtils.BitwiseNot(System.Object)">
            <summary>
            Returns the bitwise not (~) of the supplied <paramref name="number"/>.
            </summary>
            <param name="number">The number.</param>
            <returns>The value of ~<paramref name="number"/>.</returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="number"/> is not a supported numeric type.
            </exception>
        </member>
        <member name="M:Spring.Util.NumberUtils.BitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwise ANDs (&amp;) the specified integral values.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
            <exception cref="T:System.ArgumentException">
            If one of the supplied arguments is not a supported integral types.
            </exception>
        </member>
        <member name="M:Spring.Util.NumberUtils.BitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwise ORs (|) the specified integral values.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
            <exception cref="T:System.ArgumentException">
            If one of the supplied arguments is not a supported integral types.
            </exception>
        </member>
        <member name="M:Spring.Util.NumberUtils.BitwiseXor(System.Object,System.Object)">
            <summary>
            Bitwise XORs (^) the specified integral values.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
            <exception cref="T:System.ArgumentException">
            If one of the supplied arguments is not a supported integral types.
            </exception>
        </member>
        <member name="M:Spring.Util.NumberUtils.Add(System.Object,System.Object)">
            <summary>
            Adds the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Spring.Util.NumberUtils.Subtract(System.Object,System.Object)">
            <summary>
            Subtracts the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Spring.Util.NumberUtils.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Spring.Util.NumberUtils.Divide(System.Object,System.Object)">
            <summary>
            Divides the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Spring.Util.NumberUtils.Modulus(System.Object,System.Object)">
            <summary>
            Calculates remainder for the specified numbers.
            </summary>
            <param name="m">The first number (dividend).</param>
            <param name="n">The second number (divisor).</param>
        </member>
        <member name="M:Spring.Util.NumberUtils.Power(System.Object,System.Object)">
            <summary>
            Raises first number to the power of the second one.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Spring.Util.NumberUtils.CoerceTypes(System.Object@,System.Object@)">
            <summary>
            Coerces the types so they can be compared.
            </summary>
            <param name="m">The right.</param>
            <param name="n">The left.</param>
        </member>
        <member name="M:Spring.Util.NumberUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Util.NumberUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Util.ObjectUtils">
            <summary>
            Helper methods with regard to objects, types, properties, etc.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Util.ObjectUtils.log">
            <summary>
            The <see cref="T:Common.Logging.ILog"/> instance for this class.
            </summary>
        </member>
        <member name="F:Spring.Util.ObjectUtils.EmptyObjects">
            <summary>
            An empty object array.
            </summary>
        </member>
        <member name="M:Spring.Util.ObjectUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Util.ObjectUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Util.ObjectUtils.InstantiateType(System.Reflection.Assembly,System.String)">
            <summary>
            Instantiates the type using the assembly specified to load the type.
            </summary>
            <remarks>This is a convenience in the case of needing to instantiate a type but not
            wanting to specify in the string the version, culture and public key token.</remarks>
            <param name="assembly">The assembly.</param>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"> 
            If the <paramref name="assembly"/> or <paramref name="typeName"/> is <see langword="null"/>
            </exception>
            <exception cref="T:Spring.Util.FatalReflectionException">
            If cannot load the type from the assembly or the call to <code>InstantiateType(Type)</code> fails.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.InstantiateType(System.Type)">
            <summary>
            Convenience method to instantiate a <see cref="T:System.Type"/> using
            its no-arg constructor.
            </summary>
            <remarks>
            <p>
            As this method doesn't try to instantiate <see cref="T:System.Type"/>s
            by name, it should avoid <see cref="T:System.Type"/> loading issues.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to instantiate*
            </param>
            <returns>A new instance of the <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.ArgumentNullException"> 
            If the <paramref name="type"/> is <see langword="null"/>
            </exception>
            <exception cref="T:Spring.Util.FatalReflectionException">
            If the <paramref name="type"/> is an abstract class, an interface, 
            an open generic type or does not have a public no-argument constructor.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.GetZeroArgConstructorInfo(System.Type)">
            <summary>
            Gets the zero arg ConstructorInfo object, if the type offers such functionality.
            </summary>
            <param name="type">The type.</param>
            <returns>Zero argument ConstructorInfo</returns>
            <exception cref="T:Spring.Util.FatalReflectionException">
            If the type is an interface, abstract, open generic type, or does not have a zero-arg constructor.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.IsInstantiable(System.Type)">
            <summary>
            Determines whether the specified type is instantiable, i.e. not an interface, abstract class or contains
            open generic type parameters.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Spring.Util.ObjectUtils.InstantiateType(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Convenience method to instantiate a <see cref="T:System.Type"/> using
            the given constructor.
            </summary>
            <remarks>
            <p>
            As this method doesn't try to instantiate <see cref="T:System.Type"/>s
            by name, it should avoid <see cref="T:System.Type"/> loading issues.
            </p>
            </remarks>
            <param name="constructor">
            The constructor to use for the instantiation.
            </param>
            <param name="arguments">
            The arguments to be passed to the constructor.
            </param>
            <returns>A new instance.</returns>
            <exception cref="T:System.ArgumentNullException"> 
            If the <paramref name="constructor"/> is <see langword="null"/>
            </exception>
            <exception cref="T:Spring.Util.FatalReflectionException">
            If the <paramref name="constructor"/>'s declaring type is an abstract class, 
            an interface, an open generic type or does not have a public no-argument constructor.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.IsAssignableAndNotTransparentProxy(System.Type,System.Object)">
            <summary>
            Checks whether the supplied <paramref name="instance"/> is not a transparent proxy and is
            assignable to the supplied <paramref name="type"/>. 
            </summary>
            <remarks>
            <p>
            Neccessary when dealing with server-activated remote objects, because the
            object is of the type TransparentProxy and regular <c>is</c> testing for assignable
            types does not work.
            </p>
            <p>
            Transparent proxy instances always return <see langword="true"/> when tested
            with the <c>'is'</c> operator (C#). This method only checks if the object
            is assignable to the type if it is not a transparent proxy.
            </p>
            </remarks>
            <param name="type">The target <see cref="T:System.Type"/> to be checked.</param>
            <param name="instance">The value that should be assigned to the type.</param>
            <returns>
            <see langword="true"/> if the supplied <paramref name="instance"/> is not a
            transparent proxy and is assignable to the supplied <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.ObjectUtils.IsAssignable(System.Type,System.Object)">
            <summary>
            Determine if the given <see cref="T:System.Type"/> is assignable from the
            given value, assuming setting by reflection and taking care of transparent proxies.
            </summary>
            <remarks>
            <p>
            Considers primitive wrapper classes as assignable to the
            corresponding primitive types.
            </p>
            <p>
            For example used in an object factory's constructor resolution.
            </p>
            </remarks>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="obj">The value that should be assigned to the type.</param>
            <returns>True if the type is assignable from the value.</returns>
        </member>
        <member name="M:Spring.Util.ObjectUtils.IsSimpleProperty(System.Type)">
            <summary>
            Check if the given <see cref="T:System.Type"/> represents a
            "simple" property,
            i.e. a primitive, a <see cref="T:System.String"/>, a
            <see cref="T:System.Type"/>, or a corresponding array.
            </summary>
            <remarks>
            <p>
            Used to determine properties to check for a "simple" dependency-check.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
        </member>
        <member name="M:Spring.Util.ObjectUtils.IsPrimitiveArray(System.Type)">
            <summary>
            Check if the given class represents a primitive array,
            i.e. boolean, byte, char, short, int, long, float, or double.
            </summary>
        </member>
        <member name="M:Spring.Util.ObjectUtils.IsEmpty(System.Object[])">
            <summary>
            Determines whether the specified array is null or empty.
            </summary>
            <param name="array">The array to check.</param>
            <returns>
            	<c>true</c> if the specified array is null empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Util.ObjectUtils.NullSafeEquals(System.Object,System.Object)">
            <summary>
            Determine if the given objects are equal, returning <see langword="true"/>
            if both are <see langword="null"/> respectively <see langword="false"/>
            if only one is <see langword="null"/>.
            </summary>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the given objects are equal.
            </returns>
        </member>
        <member name="M:Spring.Util.ObjectUtils.EnumerateFirstElement(System.Collections.IEnumerator)">
            <summary>
            Returns the first element in the supplied <paramref name="enumerator"/>.
            </summary>
            <param name="enumerator">
            The <see cref="T:System.Collections.IEnumerator"/> to use to enumerate
            elements.
            </param>
            <returns>
            The first element in the supplied <paramref name="enumerator"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the supplied <paramref name="enumerator"/> did not have any elements.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.EnumerateFirstElement(System.Collections.IEnumerable)">
            <summary>
            Returns the first element in the supplied <paramref name="enumerable"/>.
            </summary>
            <param name="enumerable">
            The <see cref="T:System.Collections.IEnumerable"/> to use to enumerate
            elements.
            </param>
            <returns>
            The first element in the supplied <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the supplied <paramref name="enumerable"/> did not have any elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="enumerable"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.EnumerateElementAtIndex(System.Collections.IEnumerator,System.Int32)">
            <summary>
            Returns the element at the specified index using the supplied
            <paramref name="enumerator"/>.
            </summary>
            <param name="enumerator">
            The <see cref="T:System.Collections.IEnumerator"/> to use to enumerate
            elements until the supplied <paramref name="index"/> is reached.
            </param>
            <param name="index">
            The index of the element in the enumeration to return.
            </param>
            <returns>
            The element at the specified index using the supplied
            <paramref name="enumerator"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> was less than zero, or the
            supplied <paramref name="enumerator"/> did not contain enough elements
            to be able to reach the supplied <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.EnumerateElementAtIndex(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at the specified index using the supplied
            <paramref name="enumerable"/>.
            </summary>
            <param name="enumerable">
            The <see cref="T:System.Collections.IEnumerable"/> to use to enumerate
            elements until the supplied <paramref name="index"/> is reached.
            </param>
            <param name="index">
            The index of the element in the enumeration to return.
            </param>
            <returns>
            The element at the specified index using the supplied
            <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> was less than zero, or the
            supplied <paramref name="enumerable"/> did not contain enough elements
            to be able to reach the supplied <paramref name="index"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="enumerable"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ObjectUtils.GetQualifiedMethodName(System.Reflection.MethodInfo)">
            <summary>
            Gets the qualified name of the given method, consisting of 
            fully qualified interface/class name + "." method name.
            </summary>
            <param name="method">The method.</param>
            <returns>qualified name of the method.</returns>
        </member>
        <member name="M:Spring.Util.ObjectUtils.IdentityToString(System.Object)">
            <summary>
            Return a String representation of an object's overall identity.
            </summary>
            <param name="obj">The object (may be <code>null</code>).</param>
            <returns>The object's identity as String representation,
            or an empty String if the object was <code>null</code>
            </returns>
        </member>
        <member name="M:Spring.Util.ObjectUtils.GetIdentityHexString(System.Object)">
            <summary>
            Gets a hex String form of an object's identity hash code.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The object's identity code in hex notation</returns>
        </member>
        <member name="T:Spring.Util.PathMatcher">
            <summary>
            Support matching of file system paths in a manner similar to that of the
            <see href="http://nant.sourceforge.net">NAnt</see> <c>FileSet</c>.
            </summary>
            <remarks>
            <p>
            Any (back)slashes are converted to forward slashes.
            </p>
            </remarks>
            <example>
            <code>
            // true
            PathMatcher.Match("c:/*.bat", @"c:\autoexec.bat");
            PathMatcher.Match("c:\fo*\*.bat", @"c:/foobar/autoexec.bat");
            PathMatcher.Match("c:\fo?\*.bat", @"c:/foo/autoexec.bat");
            // false
            PathMatcher.Match("c:\fo?\*.bat", @"c:/fo/autoexec.bat");
            </code>
            </example>
            <author>Federico Spinazzi</author>
        </member>
        <member name="M:Spring.Util.PathMatcher.Match(System.String,System.String,System.Boolean)">
            <summary>
            Determines if a given path matches a <c>NAnt</c>-like pattern.
            </summary>
            <param name="pattern">
            A forward or back-slashed fileset-like pattern.
            </param>
            <param name="path">A forward or back-slashed full path.</param>
            <param name="ignoreCase">should the match consider the case</param>
            <returns>
            <see langword="true"/> if the path is matched by the pattern;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.PathMatcher.Match(System.String,System.String)">
            <summary>
            Determines if a given path matches a <c>NAnt</c>-like pattern.
            </summary>
            <param name="pattern">
            A forward or back-slashed fileset-like pattern.
            </param>
            <param name="path">A forward or back-slashed full path.</param>
            <returns>
            <see langword="true"/> if the path is matched by the pattern;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.PathMatcher.ForwardifySlashes(System.String)">
            <summary>
            Replaces back(slashes) with forward slashes.
            </summary>
            <param name="path">
            The path or the pattern to modify.
            </param>
            <returns>A forward-slashed string.</returns>
        </member>
        <member name="M:Spring.Util.PathMatcher.BuildRegex(System.String)">
            <summary>
            Helper method to convert a <c>NAnt</c>-like pattern into the
            appropriate pattern for a regular expression.
            </summary>
            <param name="pattern">The <c>NAnt</c>-like pattern.</param>
            <returns>A regex-compatible pattern.</returns>
        </member>
        <member name="M:Spring.Util.PathMatcher.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Util.PathMatcher"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Util.PatternMatchUtils">
            <summary> Utility methods for simple pattern matching, in particular for
            Spring's typical "xxx*", "*xxx" and "*xxx*" pattern styles.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Util.PatternMatchUtils.SimpleMatch(System.String,System.String)">
            <summary> Match a String against the given pattern, supporting the following simple
            pattern styles: "xxx*", "*xxx" and "*xxx*" matches, as well as direct equality.
            </summary>
            <param name="pattern">the pattern to match against
            </param>
            <param name="str">the String to match
            </param>
            <returns> whether the String matches the given pattern
            </returns>
        </member>
        <member name="M:Spring.Util.PatternMatchUtils.SimpleMatch(System.String[],System.String)">
            <summary> Match a String against the given patterns, supporting the following simple
            pattern styles: "xxx*", "*xxx" and "*xxx*" matches, as well as direct equality.
            </summary>
            <param name="patterns">the patterns to match against
            </param>
            <param name="str">the String to match
            </param>
            <returns> whether the String matches any of the given patterns
            </returns>
        </member>
        <member name="T:Spring.Util.Properties">
            <summary>
            An implementation of the Java Properties class.
            </summary>
            <remarks>
            For the complete syntax see <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Properties.html#load(java.io.InputStream)">java.util.Properties JavaDoc</a>.
            This class supports an extended syntax. There may also be sole keys on a line, in that case values are treated as <c>null</c>.
            <example>
            <code>
            key1 = value
            key2:
            key3
            </code>
            will result in the name/value pairs: 
            <list>
            <item>key1:="value"</item>
            <item>key2:=string.Empty</item>
            <item>key3:=&lt;null&gt;</item>
            </list>
            note, that to specify a <c>null</c> value, the key <b>must not</b> be followed by any character except newline. 
            </example>
            </remarks>
            <author>Simon White</author>
        </member>
        <member name="M:Spring.Util.Properties.#ctor">
            <summary>
            Creates an empty property list with no default values.
            </summary>
        </member>
        <member name="M:Spring.Util.Properties.#ctor(Spring.Util.Properties)">
            <summary>
            Creates a property list with the specified initial properties.
            </summary>
            <param name="p">The initial properties.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.IO.Stream)">
            <summary>
            Reads a property list (key and element pairs) from the input stream.
            </summary>
            <param name="stream">The stream to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.IO.TextReader)">
            <summary>
            Reads a property list (key and element pairs) from a text reader.
            </summary>
            <param name="textReader">The text reader to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.Collections.IDictionary,System.IO.Stream)">
            <summary>
            Reads a property list (key and element pairs) from the input stream.
            </summary>
            <param name="dictionary">the dictionary to put it in</param>
            <param name="stream">The stream to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.Collections.IDictionary,System.IO.TextReader)">
            <summary>
            Reads a property list (key and element pairs) from a text reader.
            </summary>
            <param name="dictionary">the dictionary to put it in</param>
            <param name="textReader">The text reader to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.RemoveLeadingWhitespace(System.String)">
            <summary>
            Strips whitespace from the front of the specified string.
            </summary>
            <param name="line">The string.</param>
            <returns>The string with all leading whitespace removed.</returns>
        </member>
        <member name="M:Spring.Util.Properties.SplitLine(System.String)">
            <summary>
            Splits the specified string into a key / value pair.
            </summary>
            <param name="line">The line to split.</param>
            <returns>An array containing the key / value pair.</returns>
        </member>
        <member name="M:Spring.Util.Properties.GetProperty(System.String)">
            <summary>
            Searches for the property with the specified key in this property list.
            </summary>
            <param name="key">The key.</param>
            <returns>The property, or null if the key was not found.</returns>
        </member>
        <member name="M:Spring.Util.Properties.GetProperty(System.String,System.String)">
            <summary>
            Searches for the property with the specified key in this property list.
            </summary>
            <param name="key">The key.</param>
            <param name="def">
            The default value to be returned if the key is not found.
            </param>
            <returns>The property, or the default value.</returns>
        </member>
        <member name="M:Spring.Util.Properties.List(System.IO.Stream)">
            <summary>
            Writes this property list out to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Spring.Util.Properties.SetProperty(System.String,System.String)">
            <summary>
            Sets the specified property key / value pair.
            </summary>
            <param name="key">The key.</param>
            <param name="theValue">The value.</param>
        </member>
        <member name="M:Spring.Util.Properties.Store(System.IO.Stream,System.String)">
            <summary>
            Writes the properties in this instance out to the supplied stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="header">Arbitrary header information.</param>
        </member>
        <member name="M:Spring.Util.Properties.Remove(System.Object)">
            <summary>
            Removes the key / value pair identified by the supplied key.
            </summary>
            <param name="key">
            The key identifying the key / value pair to be removed.
            </param>
        </member>
        <member name="M:Spring.Util.Properties.Add(System.Object,System.Object)">
            <summary>
            Adds the specified key / object pair to this collection.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spring.Util.Properties.Item(System.Object)">
            <summary>
            Adds the specified key / object pair to this collection.
            </summary>
        </member>
        <member name="T:Spring.Util.ReflectionUtils">
            <summary>
            Various reflection related methods that are missing from the standard library.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Stan Dvoychenko (.NET)</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:Spring.Util.ReflectionUtils.AllMembersCaseInsensitiveFlags">
            <summary>
            Convenience <see cref="T:System.Reflection.BindingFlags"/> value that will
            match all private and public, static and instance members on a class
            in a case inSenSItivE fashion.
            </summary>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.#cctor">
            <summary>
            Avoid BeforeFieldInit problem
            </summary>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.IsNullableType(System.Type)">
            <summary>
            Checks, if the specified type is a nullable
            </summary>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetSignature(System.Type,System.String,System.Type[])">
            <summary>
            Returns signature for the specified <see cref="T:System.Type"/>, method name and argument
            <see cref="T:System.Type"/>s.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the method is in.</param>
            <param name="method">The method name.</param>
            <param name="argumentTypes">
            The argument <see cref="T:System.Type"/>s.
            </param>
            <returns>The method signature.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Returns method for the specified <see cref="T:System.Type"/>, method
            name and argument
            <see cref="T:System.Type"/>s.
            </summary>
            <remarks>
            <para>Searches with BindingFlags</para>
            <para>When dealing with interface methods, you probable want to 'normalize' method references by calling 
            <see cref="M:Spring.Util.ReflectionUtils.MapInterfaceMethodToImplementationIfNecessary(System.Reflection.MethodInfo,System.Type)"/>. 
            </para>
            </remarks>
            <param name="targetType">
            The target <see cref="T:System.Type"/> to find the method on.
            </param>
            <param name="method">The method to find.</param>
            <param name="argumentTypes">
            The argument <see cref="T:System.Type"/>s. May be
            <see langword="null"/> if the method has no arguments.
            </param>
            <returns>The target method.</returns>
            <seealso cref="M:Spring.Util.ReflectionUtils.MapInterfaceMethodToImplementationIfNecessary(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.MapInterfaceMethodToImplementationIfNecessary(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Resolves a given <paramref name="methodInfo"/> to the <see cref="T:System.Reflection.MethodInfo"/> representing the actual implementation.
            </summary>
            <remarks>
            see article <a href="http://weblog.ikvm.net/CommentView.aspx?guid=7356a87f-e5d7-4723-ae49-b263ab9e40ae">How To Get an Explicit Interface Implementation Method</a>.
            </remarks>
            <param name="methodInfo">a <see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="implementingType">the type to lookup</param>
            <returns>the <see cref="T:System.Reflection.MethodInfo"/> representing the actual implementation method of the specified <paramref name="methodInfo"/></returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Returns an array of parameter <see cref="T:System.Type"/>s for the specified method
            or constructor.
            </summary>
            <param name="method">The method (or constructor).</param>
            <returns>An array containing the parameter <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetParameterTypes(System.Reflection.ParameterInfo[])">
            <summary>
            Returns an array of parameter <see cref="T:System.Type"/>s for the
            specified parameter info array.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>An array containing parameter <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="args"/> is <see langword="null"/> or any of the
            elements <paramref name="args"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetGenericParameterNames(System.Reflection.MethodInfo)">
            <summary>
            Returns an array of <see langword="string"/>s that represent 
            the names of the generic type parameter.
            </summary>
            <param name="method">The method.</param>
            <returns>An array containing the parameter names.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetGenericParameterNames(System.Type[])">
            <summary>
            Returns an array of <see langword="string"/>s that represent 
            the names of the generic type parameter.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>An array containing parameter names.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="args"/> is <see langword="null"/> or any of the
            elements <paramref name="args"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetMethodByArgumentValues(System.Reflection.MethodInfo[],System.Object[])">
            <summary>
            From a given list of methods, selects the method having an exact match on the given <paramref name="argValues"/>' types.
            </summary>
            <param name="methods">the list of methods to choose from</param>
            <param name="argValues">the arguments to the method</param>
            <returns>the method matching exactly the passed <paramref name="argValues"/>' types</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            If more than 1 matching methods are found in the <paramref name="methods"/> list.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetMethodBaseByArgumentValues(System.String,System.Reflection.MethodBase[],System.Object[])">
            <summary>
            From a given list of methods, selects the method having an exact match on the given <paramref name="argValues"/>' types.
            </summary>
            <param name="methodTypeName">the type of method (used for exception reporting only)</param>
            <param name="methods">the list of methods to choose from</param>
            <param name="argValues">the arguments to the method</param>
            <returns>the method matching exactly the passed <paramref name="argValues"/>' types</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            If more than 1 matching methods are found in the <paramref name="methods"/> list.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetConstructorByArgumentValues(System.Reflection.ConstructorInfo[],System.Object[])">
            <summary>
            From a given list of constructors, selects the constructor having an exact match on the given <paramref name="argValues"/>' types.
            </summary>
            <param name="methods">the list of constructors to choose from</param>
            <param name="argValues">the arguments to the method</param>
            <returns>the constructor matching exactly the passed <paramref name="argValues"/>' types</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            If more than 1 matching methods are found in the <paramref name="methods"/> list.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.PackageParamArray(System.Object[],System.Int32,System.Type)">
            <summary>
            Packages arguments into argument list containing parameter array as a last argument.
            </summary>
            <param name="argValues">Argument vaklues to package.</param>
            <param name="argCount">Total number of oarameters.</param>
            <param name="elementType">Type of the param array element.</param>
            <returns>Packaged arguments.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.ToInterfaceArray(System.Type)">
            <summary>
            Convenience method to convert an interface <see cref="T:System.Type"/> 
            to a <see cref="T:System.Type"/> array that contains 
            all the interfaces inherited and the specified interface.
            </summary>
            <param name="intf">The interface to convert.</param>
            <returns>An array of interface <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.ArgumentException">
            If the <see cref="T:System.Type"/> specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="intf"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.PropertyIsIndexer(System.String,System.Type)">
            <summary>
            Is the supplied <paramref name="propertyName"/> the default indexer for the
            supplied <paramref name="type"/>?
            </summary>
            <param name="propertyName">
            The name of the property on the supplied <paramref name="type"/> to be checked.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/>  to be checked.
            </param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="propertyName"/> is the
            default indexer for the supplied <paramref name="type"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            If the supplied <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.MethodIsOnOneOfTheseInterfaces(System.Reflection.MethodBase,System.Type[])">
            <summary>
            Is the supplied <paramref name="method"/> declared on one of these interfaces?
            </summary>
            <param name="method">The method to check.</param>
            <param name="interfaces">The array of interfaces we want to check.</param>
            <returns>
            <see lang="true"/> if the method is declared on one of these interfaces.
            </returns>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="T:System.Type"/>s specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> or any of the specified interfaces is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value for the specified <see cref="T:System.Type"/>
            </summary>
            <remarks>
            <p>
            Follows the standard .NET conventions for default values where
            relevant; for example, all numeric types default to the value
            <c>0</c>.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to return default value for.
            </param>
            <returns>
            The default value for the specified <see cref="T:System.Type"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="type"/> is an enumerated type that
            has no values.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetDefaultValues(System.Type[])">
            <summary>
            Returns an array consisting of the default values for the supplied
            <paramref name="types"/>.
            </summary>
            <param name="types">
            The array of <see cref="T:System.Type"/>s to return default values for.
            </param>
            <returns>
            An array consisting of the default values for the supplied
            <paramref name="types"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If any of the elements in the supplied <paramref name="types"/>
            array is an enumerated type that has no values.
            </exception>
            <seealso cref="M:Spring.Util.ReflectionUtils.GetDefaultValue(System.Type)"/>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.ParameterTypesMatch(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Checks that the parameter <see cref="T:System.Type"/>s of the
            supplied <paramref name="candidate"/> match the parameter
            <see cref="T:System.Type"/>s of the supplied
            <paramref name="parameterTypes"/>.
            </summary>
            <param name="candidate">The method to be checked.</param>
            <param name="parameterTypes">
            The array of parameter <see cref="T:System.Type"/>s to check against.
            </param>
            <returns>
            <see langword="true"/> if the parameter <see cref="T:System.Type"/>s
            match.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetTypes(System.Object[])">
            <summary>
            Returns an array containing the <see cref="T:System.Type"/>s of the
            objects in the supplied array.
            </summary>
            <param name="args">
            The objects array for which the corresponding <see cref="T:System.Type"/>s
            are needed.
            </param>
            <returns>
            An array containing the <see cref="T:System.Type"/>s of the objects
            in the supplied array; this array will be empty (but not
            <see langword="null"/> if the supplied <paramref name="args"/>
            is null or has no elements.
            </returns>
            <example>
            <p>
            [C#]<br/>
            Given an array containing the following objects,
            <code>[83, "Foo", new object ()]</code>, the <see cref="T:System.Type"/>
            array returned from this method call would consist of the following
            <see cref="T:System.Type"/> elements...
            <code>[Int32, String, Object]</code>.
            </p>
            </example>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetTypeFriendlyName(System.Type)">
            <summary>
            Given the <see cref="T:System.Type"/> return its representation as
            it would appear in the source code files.
            </summary>
            <remarks>
            Largely intended to handle generic types where .ToString() will typically return:
            "System.Collections.Generic.List`1[System.Collections.Generic.Dictionary`2[System.String,System.Int32]]"
            and this method will instead return:
            "System.Collections.Generic.List&lt;System.Collections.Generic.Dictionary&lt;string,int&gt;&gt;"
            </remarks>
            <param name="type">The type.</param>
            <returns>Friendly string representing the Type</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.HasAtLeastOneMethodWithName(System.Type,System.String)">
            <summary>
            Does the given <see cref="T:System.Type"/> and/or it's superclasses
            have at least one or more methods with the given name (with any
            argument types)?
            </summary>
            <remarks>
            <p>
            Includes non-public methods in the methods searched.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to be checked.
            </param>
            <param name="name">
            The name of the method to be searched for. Case inSenSItivE.
            </param>
            <returns>
            <see langword="true"/> if the given <see cref="T:System.Type"/> or / and it's
            superclasses have at least one or more methods (with any argument types);
            <see langword="false"/> if not, or either of the parameters is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.MethodCountForName(System.Type,System.String)">
            <summary>
             Within <paramref name="type"/>, counts the number of overloads for the method with the given (case-insensitive!) <paramref name="name"/> 
            </summary>
            <param name="type">The type to be searched</param>
            <param name="name">the name of the method for which overloads shall be counted</param>
            <returns>The number of overloads for method <paramref name="name"/> within type <paramref name="type"/></returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CreateCustomAttribute(System.Type,System.Object[],System.Attribute)">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>.
            </summary>
            <remarks>
            <p>
            Note that if a non-<see langword="null"/> <paramref name="sourceAttribute"/>
            is supplied, any read write properties exposed by the <paramref name="sourceAttribute"/>
            will be used to overwrite values that may have been passed in via the
            <paramref name="ctorArgs"/>. That is, the <paramref name="ctorArgs"/> will be used
            to initialize the custom attribute, and then any read-write properties on the
            <paramref name="sourceAttribute"/> will be plugged in.
            </p>
            </remarks>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <param name="ctorArgs">
            Any constructor arguments for the attribute (may be <see langword="null"/>
            in the case of no arguments).
            </param>
            <param name="sourceAttribute">
            Source attribute to copy properties from (may be <see langword="null"/>).
            </param>
            <returns>A custom attribute builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="type"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="type"/> parameter is not a <see cref="T:System.Type"/>
            that derives from the <see cref="T:System.Attribute"/> class.
            </exception>
            <seealso cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CreateCustomAttribute(System.Type,System.Attribute)">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>.
            </summary>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <param name="sourceAttribute">
            Source attribute to copy properties from (may be <see langword="null"/>).
            </param>
            <returns>A custom attribute builder.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CreateCustomAttribute(System.Attribute)">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>.
            </summary>
            <param name="sourceAttribute">
            The source attribute to copy properties from.
            </param>
            <returns>A custom attribute builder.</returns>
            <exception cref="T:System.NullReferenceException">
            If the supplied <paramref name="sourceAttribute"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CreateCustomAttribute(System.Type)">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>.
            </summary>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <returns>A custom attribute builder.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CreateCustomAttribute(System.Type,System.Object[])">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>.
            </summary>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <param name="ctorArgs">
            Any constructor arguments for the attribute (may be <see langword="null"/>
            in the case of no arguments).
            </param>
            <returns>A custom attribute builder.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CreateCustomAttribute(System.Reflection.CustomAttributeData)">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>.
            </summary>
            <param name="attributeData">
            The <see cref="T:System.Reflection.CustomAttributeData"/> to create 
            the custom attribute builder from.
            </param>
            <returns>A custom attribute builder.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            Calculates and returns the list of attributes that apply to the
            specified type or method.
            </summary>
            <param name="member">The type or method to find attributes for.</param>
            <returns>
            A list of custom attributes (CustomAttributeData or Attribute instances) 
            that should be applied to type or method.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetMatchingMethods(System.Type,System.Reflection.MethodInfo[],System.Boolean)">
            <summary>
            Tries to find matching methods in the specified <see cref="T:System.Type"/>
            for each method in the supplied <paramref name="methods"/> list.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to look for matching methods in.
            </param>
            <param name="methods">The methods to match.</param>
            <param name="strict">
            A flag that specifies whether to throw an exception if a matching
            method is not found.
            </param>
            <returns>A list of the matched methods.</returns>
            <exception cref="T:System.ArgumentNullException">
            If either of the <paramref name="type"/> or
            <paramref name="methods"/> parameters are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.TypeOfOrType(System.Object)">
            <summary>
            Returns the <see cref="T:System.Type"/> of the supplied
            <paramref name="source"/>.
            </summary>
            <remarks>
            <p>
            If the <paramref name="source"/> is a <see cref="T:System.Type"/>
            instance, the return value of this method call with be the
            <paramref name="source"/> parameter cast to a
            <see cref="T:System.Type"/>. If the <paramref name="source"/> is
            anything other than a <see cref="T:System.Type"/>, the return value
            will be the result of invoking the <paramref name="source"/>'s
            <see cref="M:System.Object.GetType"/> method.
            </p>
            </remarks>
            <param name="source">
            A <see cref="T:System.Type"/> or <see cref="T:System.Object"/> instance.
            </param>
            <returns>
            The <paramref name="source"/>argument if it is a
            <see cref="T:System.Type"/> or the result of invoking
            <see cref="M:System.Object.GetType"/> on the argument if it
            is an <see cref="T:System.Object"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            If the <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.UnwrapTargetInvocationException(System.Reflection.TargetInvocationException)">
            <summary>
            Unwraps the supplied <see cref="T:System.Reflection.TargetInvocationException"/> 
            and returns the inner exception preserving the stack trace.
            </summary>
            <param name="ex">
            The <see cref="T:System.Reflection.TargetInvocationException"/> to unwrap.
            </param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.IsTypeVisible(System.Type)">
            <summary>
            Is the supplied <paramref name="type"/> can be accessed outside the assembly ?
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <see langword="true"/> if the type can be accessed outside the assembly;
            Otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.IsTypeVisible(System.Type,System.String)">
            <summary>
            Is the supplied <paramref name="type"/> can be accessed 
            from the supplied friendly assembly ?
            </summary>
            <param name="type">The type to check.</param>
            <param name="friendlyAssemblyName">The friendly assembly name.</param>
            <returns>
            <see langword="true"/> if the type can be accessed 
            from the supplied friendly assembly; Otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetInterfaces(System.Type)">
            <summary>
            Gets all of the interfaces implemented by 
            the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The object to get the interfaces of.
            </param>
            <returns>
            All of the interfaces implemented by the
            <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetExplicitBaseException(System.Exception)">
            <summary>
            Returns the explicit <see cref="T:System.Exception"/> that is the root cause of an exception.
            </summary>
            <remarks>
            If the InnerException property of the current exception is a null reference 
            or a <see cref="T:System.NullReferenceException"/>, returns the current exception.
            </remarks>
            <param name="ex">The last exception thrown.</param>
            <returns>
            The first explicit exception thrown in a chain of exceptions.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.MemberwiseCopy(System.Object,System.Object)">
            <summary>
            Copies all fields from one object to another. 
            </summary>
            <remarks>
            The types of both objects must be related. This means, that either of the following is true:
            <list type="bullet">
            	<item><description>fromObject.GetType() == toObject.GetType()</description></item>
            	<item><description>fromObject.GetType() is derived from toObject.GetType()</description></item>
            	<item><description>toObject.GetType() is derived from fromObject.GetType()</description></item>
            </list>
            </remarks>
            <param name="fromObject">The source object</param>
            <param name="toObject">The object, who's fields will be populated with values from the source object</param>
            <exception cref="T:System.ArgumentException">If the object's types are not related</exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetInstanceFieldValue(System.Object,System.String)">
            <summary>
            Convenience method that uses reflection to return the value of a non-public field of a given object.
            </summary>
            <remarks>Useful in certain instances during testing to avoid the need to add protected properties, etc. to a class just to facilitate testing.</remarks>
            <param name="obj">The instance of the object from which to retrieve the field value.</param>
            <param name="fieldName">Name of the field on the object from which to retrieve the value.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.SetInstanceFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Convenience method that uses reflection to set the value of a non-public field of a given object.
            </summary>
            <remarks>Useful in certain instances during testing to avoid the need to add protected properties, etc. to a class just to facilitate testing.</remarks>
            <param name="obj">The instance of the object from which to set the field value.</param>
            <param name="fieldName">Name of the field on the object to which to set the value.</param>
            <param name="fieldValue">The field value to set.</param>
        </member>
        <member name="T:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder.#ctor(System.Type)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder"/> class.
            </summary>
            <param name="attributeType">The custom attribute type.</param>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder.#ctor(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder"/> class.
            </summary>
            <param name="attributeType">The custom attribute type.</param>
            <param name="constructorArgs">The custom attribute constructor arguments.</param>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder.AddContructorArgument(System.Object[])">
            <summary>
            Adds the specified values to the constructor argument list 
            used to create the custom attribute.
            </summary>
            <param name="values">An array of argument values.</param>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder.AddPropertyValue(System.String,System.Object)">
            <summary>
            Adds a property value to the custom attribute.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder.Build">
            <summary>
            Creates the <see cref="T:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder"/>.
            </summary>
            <returns>The created <see cref="T:Spring.Util.ReflectionUtils.CustomAttributeBuilderBuilder"/>.</returns>
        </member>
        <member name="T:Spring.Util.SecurityCritical">
            <summary>
            Utility class to be used from within this assembly for executing security critical code 
            NEVER EVER MAKE THIS PUBLIC!
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Util.StringUtils">
            <summary>
            Miscellaneous <see cref="T:System.String"/> utility methods.
            </summary>
            <remarks>
            <p>
            Mainly for internal use within the framework.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Keith Donald</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <author>Erich Eichinger (.NET)</author>
        </member>
        <member name="F:Spring.Util.StringUtils.AntExpressionPrefix">
            <summary>
            The string that signals the start of an Ant-style expression.
            </summary>
        </member>
        <member name="F:Spring.Util.StringUtils.AntExpressionSuffix">
            <summary>
            The string that signals the end of an Ant-style expression.
            </summary>
        </member>
        <member name="F:Spring.Util.StringUtils.EmptyStrings">
            <summary>
            An empty array of <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:Spring.Util.StringUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Util.StringUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Util.StringUtils.Split(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Tokenize the given <see cref="T:System.String"/> into a
            <see cref="T:System.String"/> array.
            </summary>
            <remarks>
            <p>
            If <paramref name="s"/> is <see langword="null"/>, returns an empty
            <see cref="T:System.String"/> array.
            </p>
            <p>
            If <paramref name="delimiters"/> is <see langword="null"/> or the empty
            <see cref="T:System.String"/>, returns a <see cref="T:System.String"/> array with one
            element: <paramref name="s"/> itself.
            </p>
            </remarks>
            <param name="s">The <see cref="T:System.String"/> to tokenize.</param>
            <param name="delimiters">
            The delimiter characters, assembled as a <see cref="T:System.String"/>.
            </param>
            <param name="trimTokens">
            Trim the tokens via <see cref="M:System.String.Trim"/>.
            </param>
            <param name="ignoreEmptyTokens">
            Omit empty tokens from the result array.</param>
            <returns>An array of the tokens.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.Split(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Tokenize the given <see cref="T:System.String"/> into a
            <see cref="T:System.String"/> array.
            </summary>
            <remarks>
            <p>
            If <paramref name="s"/> is <see langword="null"/>, returns an empty
            <see cref="T:System.String"/> array.
            </p>
            <p>
            If <paramref name="delimiters"/> is <see langword="null"/> or the empty
            <see cref="T:System.String"/>, returns a <see cref="T:System.String"/> array with one
            element: <paramref name="s"/> itself.
            </p>
            </remarks>
            <param name="s">The <see cref="T:System.String"/> to tokenize.</param>
            <param name="delimiters">
            The delimiter characters, assembled as a <see cref="T:System.String"/>.
            </param>
            <param name="trimTokens">
            Trim the tokens via <see cref="M:System.String.Trim"/>.
            </param>
            <param name="ignoreEmptyTokens">
            Omit empty tokens from the result array.
            </param>
            <param name="quoteChars">
            Pairs of quote characters. <paramref name="delimiters"/> within a pair of quotes are ignored
            </param>
            <returns>An array of the tokens.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.CommaDelimitedListToStringArray(System.String)">
            <summary>
            Convert a CSV list into an array of <see cref="T:System.String"/>s.
            </summary>
            <remarks>
            Values may also be quoted using doublequotes.
            </remarks>
            <param name="s">A CSV list.</param>
            <returns>
            An array of <see cref="T:System.String"/>s, or the empty array
            if <paramref name="s"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.StringUtils.DelimitedListToStringArray(System.String,System.String)">
            <summary>
            Take a <see cref="T:System.String"/> which is a delimited list
            and convert it to a <see cref="T:System.String"/> array.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="delimiter"/> is a
            <cref lang="null"/> or zero-length string, then a single element
            <see cref="T:System.String"/> array composed of the supplied
            <paramref name="input"/> <see cref="T:System.String"/> will be 
            eturned. If the supplied <paramref name="input"/>
            <see cref="T:System.String"/> is <cref lang="null"/>, then an empty,
            zero-length <see cref="T:System.String"/> array will be returned.
            </p>
            </remarks>
            <param name="input">
            The <see cref="T:System.String"/> to be parsed.
            </param>
            <param name="delimiter">
            The delimeter (this will not be returned). Note that only the first
            character of the supplied <paramref name="delimiter"/> is used.
            </param>
            <returns>
            An array of the tokens in the list.
            </returns>
        </member>
        <member name="M:Spring.Util.StringUtils.CollectionToDelimitedString(System.Collections.ICollection,System.String)">
            <summary>
            Convenience method to return an
            <see cref="T:System.Collections.ICollection"/> as a delimited
            (e.g. CSV) <see cref="T:System.String"/>.
            </summary>
            <param name="c">
            The <see cref="T:System.Collections.ICollection"/> to parse.
            </param>
            <param name="delimiter">
            The delimiter to use (probably a ',').
            </param>
            <returns>The delimited string representation.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.CollectionToCommaDelimitedString(System.Collections.ICollection)">
            <summary>
            Convenience method to return an
            <see cref="T:System.Collections.ICollection"/> as a CSV
            <see cref="T:System.String"/>.
            </summary>
            <param name="collection">
            The <see cref="T:System.Collections.ICollection"/> to display.
            </param>
            <returns>The delimited string representation.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.ArrayToCommaDelimitedString(System.Object[])">
            <summary>
            Convenience method to return an array as a CSV
            <see cref="T:System.String"/>.
            </summary>
            <param name="source">
            The array to parse. Elements may be of any type (
            <see cref="M:System.Object.ToString"/> will be called on each
            element).
            </param>
        </member>
        <member name="M:Spring.Util.StringUtils.ArrayToDelimitedString(System.Object[],System.String)">
            <summary>
            Convenience method to return a <see cref="T:System.String"/>
            array as a delimited (e.g. CSV) <see cref="T:System.String"/>.
            </summary>
            <param name="source">
            The array to parse. Elements may be of any type (
            <see cref="M:System.Object.ToString"/> will be called on each
            element).
            </param>
            <param name="delimiter">
            The delimiter to use (probably a ',').
            </param>
        </member>
        <member name="M:Spring.Util.StringUtils.HasLength(System.String)">
            <summary>Checks if a string has length.</summary>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the string has length and is not
            <see langword="null"/>.
            </returns>
            <example>
            <code lang="C#">
            StringUtils.HasLength(null) = false
            StringUtils.HasLength("") = false
            StringUtils.HasLength(" ") = true
            StringUtils.HasLength("Hello") = true
            </code>
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.HasText(System.String)">
            <summary>
            Checks if a <see cref="T:System.String"/> has text.
            </summary>
            <remarks>
            <p>
            More specifically, returns <see langword="true"/> if the string is
            not <see langword="null"/>, it's <see cref="P:System.String.Length"/> is &gt;
            zero <c>(0)</c>, and it has at least one non-whitespace character.
            </p>
            </remarks>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="target"/> is not
            <see langword="null"/>,
            <see cref="P:System.String.Length"/> &gt; zero <c>(0)</c>, and does not consist
            solely of whitespace.
            </returns>
            <example>
            <code language="C#">
            StringUtils.HasText(null) = false
            StringUtils.HasText("") = false
            StringUtils.HasText(" ") = false
            StringUtils.HasText("12345") = true
            StringUtils.HasText(" 12345 ") = true
            </code>
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.IsNullOrEmpty(System.String)">
            <summary>
            Checks if a <see cref="T:System.String"/> is <see langword="null"/>
            or an empty string.
            </summary>
            <remarks>
            <p>
            More specifically, returns <see langword="false"/> if the string is
            <see langword="null"/>, it's <see cref="P:System.String.Length"/> is equal
            to zero <c>(0)</c>, or it is composed entirely of whitespace
            characters.
            </p>
            </remarks>
            <param name="target">
            The string to check, may (obviously) be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="target"/> is
            <see langword="null"/>, has a length equal to zero <c>(0)</c>, or
            is composed entirely of whitespace characters.
            </returns>
            <example>
            <code language="C#">
            StringUtils.IsNullOrEmpty(null) = true
            StringUtils.IsNullOrEmpty("") = true
            StringUtils.IsNullOrEmpty(" ") = true
            StringUtils.IsNullOrEmpty("12345") = false
            StringUtils.IsNullOrEmpty(" 12345 ") = false
            </code>
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.GetTextOrNull(System.String)">
            <summary>
            Returns <paramref name="value"/>, if it contains non-whitespaces. <c>null</c> otherwise.
            </summary>
        </member>
        <member name="M:Spring.Util.StringUtils.StripFirstAndLastCharacter(System.String)">
            <summary>
            Strips first and last character off the string.
            </summary>
            <param name="text">The string to strip.</param>
            <returns>The stripped string.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.GetAntExpressions(System.String)">
            <summary>
            Returns a list of Ant-style expressions from the specified text.
            </summary>
            <param name="text">The text to inspect.</param>
            <returns>
            A list of expressions that exist in the specified text.
            </returns>
            <exception cref="T:System.FormatException">
            If any of the expressions in the supplied <paramref name="text"/>
            is empty (<c>${}</c>).
            </exception>
        </member>
        <member name="M:Spring.Util.StringUtils.SetAntExpression(System.String,System.String,System.Object)">
            <summary>
            Replaces Ant-style expression placeholder with expression value.
            </summary>
            <remarks>
            <p>
            
            </p>
            </remarks>
            <param name="text">The string to set the value in.</param>
            <param name="expression">The name of the expression to set.</param>
            <param name="expValue">The expression value.</param>
            <returns>
            A new string with the expression value set; the
            <see cref="F:System.String.Empty"/> value if the supplied
            <paramref name="text"/> is <see langword="null"/>, has a length
            equal to zero <c>(0)</c>, or is composed entirely of whitespace
            characters.
            </returns>
        </member>
        <member name="M:Spring.Util.StringUtils.Surround(System.Object,System.Object)">
            <summary>
            Surrounds (prepends and appends) the string value of the supplied
            <paramref name="fix"/> to the supplied <paramref name="target"/>.
            </summary>
            <remarks>
            <p>
            The return value of this method call is always guaranteed to be non
            <see langword="null"/>. If every value passed as a parameter to this method is
            <see langword="null"/>, the <see cref="F:System.String.Empty"/> string will be returned.
            </p>
            </remarks>
            <param name="fix">
            The pre<b>fix</b> and suf<b>fix</b> that respectively will be prepended and
            appended to the target <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="target">
            The target that is to be surrounded. If this value is not a
            <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <returns>The surrounded string.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.Surround(System.Object,System.Object,System.Object)">
            <summary>
            Surrounds (prepends and appends) the string values of the supplied
            <paramref name="prefix"/> and <paramref name="suffix"/> to the supplied
            <paramref name="target"/>.
            </summary>
            <remarks>
            <p>
            The return value of this method call is always guaranteed to be non
            <see langword="null"/>. If every value passed as a parameter to this method is
            <see langword="null"/>, the <see cref="F:System.String.Empty"/> string will be returned.
            </p>
            </remarks>
            <param name="prefix">
            The value that will be prepended to the <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="target">
            The target that is to be surrounded. If this value is not a
            <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="suffix">
            The value that will be appended to the <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <returns>The surrounded string.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.ConvertEscapedCharacters(System.String)">
            <summary>
            Converts escaped characters (for example "\t") within a string
            to their real character.
            </summary>
            <param name="inputString">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:Spring.Util.SystemUtils">
            <summary>
            Utility class containing miscellaneous system-level functionality.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Util.SystemUtils.RegisterLoadedAssemblyResolver">
            <summary>
            Registers assembly resolver that iterates over the
            assemblies loaded into the current <see cref="T:System.AppDomain"/>
            in order to find an assembly that cannot be resolved.
            </summary>
            <remarks>
            This method has to be called if you need to serialize dynamically
            generated types in transient assemblies, such as Spring AOP proxies,
            because standard .NET serialization engine always tries to load
            assembly from the disk.
            </remarks>
        </member>
        <member name="P:Spring.Util.SystemUtils.MonoRuntime">
            <summary>
            Returns true if running on Mono
            </summary>
            <remarks>Tests for the presence of the type Mono.Runtime</remarks>
        </member>
        <member name="P:Spring.Util.SystemUtils.Clr4Runtime">
            <summary>
            Returns true if running on CLR 4.0 under InProc SxS mode
            </summary>
        </member>
        <member name="P:Spring.Util.SystemUtils.ThreadId">
            <summary>
            Gets the thread id for the current thread. Use thread name is available,
            otherwise use CurrentThread.GetHashCode() for .NET 1.0/1.1 and 
            CurrentThread.ManagedThreadId otherwise.
            </summary>
            <value>The thread id.</value>
        </member>
        <member name="T:Spring.Util.TextPositionInfo">
            <summary>
            Holds text position information for e.g. error reporting purposes.
            </summary>
            <seealso cref="T:Spring.Util.ConfigXmlElement"/>
            <seealso cref="T:Spring.Util.ConfigXmlAttribute"/>
        </member>
        <member name="M:Spring.Util.TextPositionInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new TextPositionInfo instance.
            </summary>
        </member>
        <member name="M:Spring.Util.TextPositionInfo.#ctor(Spring.Util.ITextPosition)">
            <summary>
            Creates a new TextPositionInfo instance, copying values from another instance.
            </summary>
        </member>
        <member name="P:Spring.Util.TextPositionInfo.Filename">
            <summary>
            The filename related to this text position
            </summary>
        </member>
        <member name="P:Spring.Util.TextPositionInfo.LineNumber">
            <summary>
            The line number related to this text position
            </summary>
        </member>
        <member name="P:Spring.Util.TextPositionInfo.LinePosition">
            <summary>
            The line position related to this text position
            </summary>
        </member>
        <member name="T:Spring.Util.UniqueKey">
            <summary>
            UniqueKey allows for generating keys unique to a type or particular instance and a partial name, 
            that can e.g. be used as keys in <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <example>
            // shows usage type-scoped keys
            UniqueKey classAKey = UniqueKey.GetTypeScoped(typeof(ClassA), "myKey");
            UniqueKey classBKey = UniqueKey.GetTypeScoped(typeof(ClassB), "myKey");
            
            HttpContext.Current.Items.Add( classAKey, "some value unqiue for class A having key 'myKey'");
            object value = HttpContext.Current.Items[ UniqueKey.GetTypeScoped(typeof(ClassA), "myKey") ];
            Assert.AreEqual( "some value unique for class A having key 'myKey'", value);
            
            HttpContext.Current.Items.Add( classBKey, "some value unqiue for class B having key 'myKey'");
            object value = HttpContext.Current.Items[ UniqueKey.GetTypeScoped(typeof(ClassB), "myKey") ];
            Assert.AreEqual( "some value unique for class B having key 'myKey'", value);
            </example>
        </member>
        <member name="M:Spring.Util.UniqueKey.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Spring.Util.UniqueKey"/> from its string representation.  
            See <see cref="M:Spring.Util.UniqueKey.GetInstanceScoped(System.Object,System.String)"/> and See <see cref="M:Spring.Util.UniqueKey.GetTypeScoped(System.Type,System.String)"/> for details.
            </summary>
            <param name="key">The string representation of the new <see cref="T:Spring.Util.UniqueKey"/> instance.</param>
        </member>
        <member name="M:Spring.Util.UniqueKey.Equals(Spring.Util.UniqueKey)">
            <summary>
            Compares this instance to another.
            </summary>
        </member>
        <member name="M:Spring.Util.UniqueKey.Equals(System.Object)">
            <summary>
            Compares this instance to another.
            </summary>
        </member>
        <member name="M:Spring.Util.UniqueKey.GetHashCode">
            <summary>
            Returns the hash code for this key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Util.UniqueKey.ToString">
            <summary>
            Returns a string representation of this key.
            </summary>
        </member>
        <member name="M:Spring.Util.UniqueKey.GetInstanceScoped(System.Object,System.String)">
            <summary>
            Creates a new key instance unique to the given instance.
            </summary>
            <param name="instance">The instance the key shall be unique to</param>
            <param name="partialKey">The partial key to be made unique</param>
            <remarks>
            </remarks>
            <exception cref="T:System.ArgumentException">If <paramref name="instance"/> is of type <see cref="T:System.Type"/></exception>
        </member>
        <member name="M:Spring.Util.UniqueKey.GetTypeScoped(System.Type,System.String)">
            <summary>
            Creates a new key instance unique to the given type.
            </summary>
            <param name="type">The type the key shall be unique to</param>
            <param name="partialKey">The partial key to be made unique</param>
        </member>
        <member name="M:Spring.Util.UniqueKey.GetInstanceScopedString(System.Object,System.String)">
            <summary>
            Returns a key unique for the given instance.
            </summary>
            <param name="instance">The instance the key shall be unique to</param>
            <param name="partialKey">The partial key to be made unique</param>
            <returns>A key formatted as <i>typename[instance-id].partialkey</i></returns>
        </member>
        <member name="M:Spring.Util.UniqueKey.GetTypeScopedString(System.Type,System.String)">
            <summary>
            Returns a key unique for the given type.
            </summary>
            <param name="type">The type the key shall be unique to</param>
            <param name="partialKey">The partial key to be made unique</param>
            <returns>A key formatted as <i>typename.partialkey</i></returns>
        </member>
        <member name="T:Spring.Util.XmlUtils">
            <summary>
            XML utility methods.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Util.XmlUtils.CreateValidatingReader(System.IO.Stream,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Gets an appropriate <see cref="T:System.Xml.XmlReader"/> implementation
            for the supplied <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The XML <see cref="T:System.IO.Stream"/> that is going to be read.</param>
            <param name="schemas">XML schemas that should be used for validation.</param>
            <param name="eventHandler">Validation event handler.</param>
            <returns>
            A validating <see cref="T:System.Xml.XmlReader"/> implementation.
            </returns>
        </member>
        <member name="M:Spring.Util.XmlUtils.CreateValidatingReader(System.IO.Stream,System.Xml.XmlResolver,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Gets an appropriate <see cref="T:System.Xml.XmlReader"/> implementation
            for the supplied <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The XML <see cref="T:System.IO.Stream"/> that is going to be read.</param>
            <param name="xmlResolver"><see cref="T:System.Xml.XmlResolver"/> to be used for resolving external references</param>
            <param name="schemas">XML schemas that should be used for validation.</param>
            <param name="eventHandler">Validation event handler.</param>
            <returns>
            A validating <see cref="T:System.Xml.XmlReader"/> implementation.
            </returns>
        </member>
        <member name="M:Spring.Util.XmlUtils.CreateReader(System.IO.Stream)">
            <summary>
            Gets an appropriate <see cref="T:System.Xml.XmlReader"/> implementation 
            for the supplied <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The XML <see cref="T:System.IO.Stream"/> that is going to be read.</param>
            <returns>
            A non-validating <see cref="T:System.Xml.XmlReader"/> implementation.
            </returns>
        </member>
        <member name="T:Spring.Validation.Actions.ErrorMessageAction">
            <summary>
            Implementation of <see cref="T:Spring.Validation.IValidationAction"/> that adds error message
            to the validation errors container.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Validation.BaseValidationAction">
            <summary>
            Abstract base class that should be extended by all
            validation actions.
            </summary>
            <remarks>
            <p>
            This class implements template <c>Execute</c> method
            and defines <c>OnValid</c> and <c>OnInvalid</c> methods that 
            can be overriden
            by specific validation actions.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Validation.IValidationAction">
            <summary>
            An action that should be executed after validator is evaluated.
            </summary>
            <remarks>
            <p>
            This interface allows us to define the actions that should be executed
            after validation in a generic fashion.
            </p>
            <p>
            For example, addition of error messages to validation errors collection
            is performed by one specific implementation of this interface, <see cref="T:Spring.Validation.Actions.ErrorMessageAction"/>.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.IValidationAction.Execute(System.Boolean,System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Executes the action.
            </summary>
            <param name="isValid">Whether associated validator is valid or not.</param>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidationAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.BaseValidationAction"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.BaseValidationAction.Execute(System.Boolean,System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Executes the action.
            </summary>
            <param name="isValid">Whether associated validator is valid or not.</param>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidationAction.OnValid(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Called when associated validator is valid.
            </summary>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidationAction.OnInvalid(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Called when associated validator is not valid.
            </summary>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidationAction.EvaluateWhen(System.Object,System.Collections.IDictionary)">
            <summary>
            Evaluates 'when' expression.
            </summary>
            <param name="rootContext">Root context to use for expression evaluation.</param>
            <param name="contextParams">Additional context parameters.</param>
            <returns><c>True</c> if the condition is true, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:Spring.Validation.BaseValidationAction.When">
            <summary>
            Gets or sets the expression that determines if this validator should be evaluated.
            </summary>
            <value>The expression that determines if this validator should be evaluated.</value>
        </member>
        <member name="M:Spring.Validation.Actions.ErrorMessageAction.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Actions.ErrorMessageAction"/> class.
            </summary>
            <param name="messageId">Error message resource identifier.</param>
            <param name="providers">Names of the error providers this message should be added to.</param>
        </member>
        <member name="M:Spring.Validation.Actions.ErrorMessageAction.OnInvalid(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Called when associated validator is invalid.
            </summary>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="M:Spring.Validation.Actions.ErrorMessageAction.CreateErrorMessage(System.Object,System.Collections.IDictionary)">
            <summary>
            Resolves the error message.
            </summary>
            <param name="validationContext">Validation context to resolve message parameters against.</param>
            <param name="contextParams">Additional context parameters.</param>
            <returns>Resolved error message</returns>
        </member>
        <member name="M:Spring.Validation.Actions.ErrorMessageAction.ResolveMessageParameters(System.Collections.IList,System.Object,System.Collections.IDictionary)">
            <summary>
            Resolves the message parameters.
            </summary>
            <param name="messageParams">List of parameters to resolve.</param>
            <param name="validationContext">Validation context to resolve parameters against.</param>
            <param name="contextParams">Additional context parameters.</param>
            <returns>Resolved message parameters.</returns>
        </member>
        <member name="P:Spring.Validation.Actions.ErrorMessageAction.Parameters">
            <summary>
            Sets the expressions that should be resolved to error message parameters.
            </summary>
            <value>The expressions that should be resolved to error message parameters.</value>
        </member>
        <member name="M:Spring.Validation.Actions.ExceptionAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Actions.ExceptionAction"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.Actions.ExceptionAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Actions.ExceptionAction"/> class.
            </summary>
            <param name="exceptionExpression">Expression that defines the exception to throw when the validator is not valid.</param>        
        </member>
        <member name="M:Spring.Validation.Actions.ExceptionAction.#ctor(Spring.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Actions.ExceptionAction"/> class with an expression
            that defines the exception to throw. 
            </summary>
        </member>
        <member name="M:Spring.Validation.Actions.ExceptionAction.OnInvalid(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Called when associated validator is invalid.
            </summary>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="P:Spring.Validation.Actions.ExceptionAction.ThrowsExpression">
            <summary>
            Gets or sets the exception to throw
            </summary>
            <value>The throws.</value>
        </member>
        <member name="T:Spring.Validation.Actions.ExpressionAction">
            <summary>
            Implementation of <see cref="T:Spring.Validation.IValidationAction"/> that allows you
            to define Spring.NET expressions that should be evaluated after
            validation.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.Actions.ExpressionAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Actions.ExpressionAction"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.Actions.ExpressionAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Actions.ExpressionAction"/> class.
            </summary>
            <param name="onValid">Expression to execute when validator is valid.</param>
            <param name="onInvalid">Expression to execute when validator is not valid.</param>
        </member>
        <member name="M:Spring.Validation.Actions.ExpressionAction.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Actions.ExpressionAction"/> class.
            </summary>
            <param name="onValid">Expression to execute when validator is valid.</param>
            <param name="onInvalid">Expression to execute when validator is not valid.</param>
        </member>
        <member name="M:Spring.Validation.Actions.ExpressionAction.OnValid(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Called when associated validator is valid.
            </summary>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="M:Spring.Validation.Actions.ExpressionAction.OnInvalid(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Called when associated validator is invalid.
            </summary>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="P:Spring.Validation.Actions.ExpressionAction.Valid">
            <summary>
            Gets or sets the expression to execute when validator is valid.
            </summary>
            <value>The expression to execute when validator is valid.</value>
        </member>
        <member name="P:Spring.Validation.Actions.ExpressionAction.Invalid">
            <summary>
            Gets or sets the expression to execute when validator is not valid.
            </summary>
            <value>The expression to execute when validator is not valid.</value>
        </member>
        <member name="T:Spring.Validation.Config.ValidationNamespaceParser">
            <summary>
            Implementation of the custom configuration parser for validator definitions.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.Config.ValidationNamespaceParser"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified element and register any resulting
            IObjectDefinitions with the IObjectDefinitionRegistry that is
            embedded in the supplied ParserContext.
            </summary>
            <param name="element">The element to be parsed into one or more IObjectDefinitions</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>
            The primary IObjectDefinition (can be null as explained above)
            </returns>
            <remarks>
            Implementations should return the primary IObjectDefinition
            that results from the parse phase if they wish to used nested
            inside (for example) a <code>&lt;property&gt;</code> tag.
            <para>Implementations may return null if they will not
            be used in a nested scenario.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.ParseValidator(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the validator definition.
            </summary>
            <param name="id">Validator's identifier.</param>
            <param name="element">The element to parse.</param>
            <param name="parserContext">The parser helper.</param>
            <returns>Validator object definition.</returns>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.ParseAttributeIntoProperty(System.Xml.XmlElement,System.String,Spring.Objects.MutablePropertyValues,System.String)">
            <summary>
            Parses the attribute of the given <paramref name="attName"/> from the XmlElement and, if available, adds a property of the given <paramref name="propName"/> with
            the parsed value.
            </summary>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.ParseAndRegisterValidator(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses and potentially registers a validator.
            </summary>
            <remarks>
            Only validators that have <code>id</code> attribute specified are registered 
            as separate object definitions within application context.
            </remarks>
            <param name="element">Validator XML element.</param>
            <param name="parserContext">The parser helper.</param>
            <returns>Validator object definition.</returns>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.GetTypeName(System.Xml.XmlElement)">
            <summary>
            Gets the name of the object type for the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>The name of the object type.</returns>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.ParseErrorMessageAction(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Creates an error message action based on the specified message element.
            </summary>
            <param name="message">The message element.</param>
            <param name="parserContext">The parser helper.</param>
            <returns>The error message action definition.</returns>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.ParseGenericAction(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Creates a generic action based on the specified element.
            </summary>
            <param name="element">The action definition element.</param>
            <param name="parserContext">The parser helper.</param>
            <returns>Generic validation action definition.</returns>
        </member>
        <member name="M:Spring.Validation.Config.ValidationNamespaceParser.ParseValidatorReference(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Creates object definition for the validator reference.
            </summary>
            <param name="element">The action definition element.</param>
            <param name="parserContext">The parser helper.</param>
            <returns>Generic validation action definition.</returns>
        </member>
        <member name="T:Spring.Validation.ConditionValidator">
            <summary>
            Evaluates validator test using condition evaluator.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="T:Spring.Validation.BaseSimpleValidator">
            <summary>
            Base class that defines common properties for all single validators.
            </summary>
            <remarks>
            <p>
            Custom single validators should always extend this class instead of 
            simply implementing <see cref="T:Spring.Validation.IValidator"/> interface, in 
            order to inherit common validator functionality.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Validation.BaseValidator">
            <summary>
            Base class that defines common properties for all validators.
            </summary>
            <remarks>
            <p>
            Custom validators should always extend this class instead of 
            simply implementing <see cref="T:Spring.Validation.IValidator"/> interface, in 
            order to inherit common validator functionality.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Validation.IValidator">
            <summary>
            An object that can validate application-specific objects.
            </summary>
            <remarks>
            <p>
            The primary motivation for this interface is to enable validation to be
            decoupled from the (user) interface and placed in business objects.
            </p>
            <p>
            Application developers writing their own custom
            <see cref="T:Spring.Validation.IValidator"/> implementations will
            typically not implement this interface directly. In most cases, custom
            validators woud be better served deriving from the
            <see lang="abstract"/> <see cref="T:Spring.Validation.BaseValidator"/> class, with the
            custom validation ligic being implemented in an override of the
            <see lang="abstract"/>
            <see cref="M:Spring.Validation.BaseValidator.Validate(System.Object,Spring.Validation.IValidationErrors)"/>
            template method.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Spring.Validation.BaseValidator"/>
        </member>
        <member name="M:Spring.Validation.IValidator.Validate(System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="errors">
            The <see cref="T:Spring.Validation.ValidationErrors"/> instance to add any error
            messages to in the case of validation failure.
            </param>
            <returns>
            <see lang="true"/> if validation was successful.
            </returns>
        </member>
        <member name="M:Spring.Validation.IValidator.Validate(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">
            The <see cref="T:Spring.Validation.ValidationErrors"/> instance to add any error
            messages to in the case of validation failure.
            </param>
            <returns>
            <see lang="true"/> if validation was successful.
            </returns>
        </member>
        <member name="M:Spring.Validation.BaseValidator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.BaseValidator"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.BaseValidator.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.BaseValidator"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidator.#ctor(Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.BaseValidator"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidator.Validate(System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.BaseValidator.Validate(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.BaseValidator.EvaluateWhen(System.Object,System.Collections.IDictionary)">
            <summary>
            Evaluates when expression.
            </summary>
            <param name="rootContext">Root context to use for expression evaluation.</param>
            <param name="contextParams">Additional context parameters.</param>
            <returns><c>True</c> if the condition is true, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.BaseValidator.ProcessActions(System.Boolean,System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Processes the error messages.
            </summary>
            <param name="isValid">Whether validator is valid or not.</param>
            <param name="validationContext">Validation context.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors">Validation errors container.</param>
        </member>
        <member name="P:Spring.Validation.BaseValidator.When">
            <summary>
            Gets or sets the expression that determines if this validator should be evaluated.
            </summary>
            <value>The expression that determines if this validator should be evaluated.</value>
        </member>
        <member name="P:Spring.Validation.BaseValidator.Actions">
            <summary>
            Gets or sets the validation actions.
            </summary>
            <value>The actions that should be executed after validation.</value>
        </member>
        <member name="M:Spring.Validation.BaseSimpleValidator.#ctor">
            <summary>
            Creates a new instance of the validator without any <see cref="P:Spring.Validation.BaseSimpleValidator.Test"/> 
            and <see cref="P:Spring.Validation.BaseValidator.When"/> criteria
            </summary>
        </member>
        <member name="M:Spring.Validation.BaseSimpleValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.BaseValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.BaseSimpleValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.BaseValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.BaseSimpleValidator.Validate(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.BaseSimpleValidator.Validate(System.Object)">
            <summary>
            Validates test object.
            </summary>
            <param name="objectToValidate">Object to validate.</param>
            <returns><c>True</c> if specified object is valid, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.BaseSimpleValidator.EvaluateTest(System.Object,System.Collections.IDictionary)">
            <summary>
            Evaluates test expression.
            </summary>
            <param name="rootContext">Root context to use for expression evaluation.</param>
            <param name="contextParams">Additional context parameters.</param>
            <returns>Result of the test expression evaluation, or validation context if test is <c>null</c>.</returns>
        </member>
        <member name="P:Spring.Validation.BaseSimpleValidator.Test">
            <summary>
            Gets or sets the test expression.
            </summary>
            <value>The test expression.</value>
        </member>
        <member name="M:Spring.Validation.ConditionValidator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.ConditionValidator"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.ConditionValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.ConditionValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.ConditionValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.ConditionValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.ConditionValidator.Validate(System.Object)">
            <summary>
            Evaluates the test using condition evaluator.
            </summary>
            <remarks>
            <p>
            Test can be any logical expression that is supported by the Spring.NET logical
            expression evaluation engine, and can use any variables that can be resolved 
            by the variable resolver used by the validation engine.
            </p>
            </remarks>
            <param name="objectToValidate">The object to validate.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="objectToValidate"/> is valid.
            </returns>
        </member>
        <member name="T:Spring.Validation.Validators.CreditCardValidator">
            <summary>
            Perform credit card validations.
            </summary>
            <remarks>
            By default, all supported card types are allowed. You can specify
            which credit card type validator should be used by setting
            the value of <see cref="P:Spring.Validation.Validators.CreditCardValidator.CardType"/> property to a concrete <see cref="T:Spring.Validation.Validators.ICreditCardType"/>
            instance.
            </remarks>
        </member>
        <member name="M:Spring.Validation.Validators.CreditCardValidator.#ctor">
            <summary>
            Creates a new instance of the <b>UrlValidator</b> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.CreditCardValidator.#ctor(System.String,System.String,Spring.Validation.Validators.ICreditCardType)">
            <summary>
            Creates a new instance of the <b>UrlValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
            <param name="cardType">Credit Card type validator to use.</param>
        </member>
        <member name="M:Spring.Validation.Validators.CreditCardValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression,Spring.Validation.Validators.ICreditCardType)">
            <summary>
            Creates a new instance of the <b>UrlValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
            <param name="cardType">Credit Card type validator to use.</param>
        </member>
        <member name="M:Spring.Validation.Validators.CreditCardValidator.Validate(System.Object)">
            <summary>
            Validates the supplied <paramref name="objectToValidate"/>.
            </summary>
            <remarks>
            In the case of the <see cref="T:Spring.Validation.Validators.CreditCardValidator"/> class,
            the test should be a string variable that will be evaluated and the object
            obtained as a result of this evaluation will be checked if it is
            a valid credit card number.
            </remarks>
            <param name="objectToValidate">The object to validate.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="objectToValidate"/> is valid 
            credit card number.
            </returns>
        </member>
        <member name="M:Spring.Validation.Validators.CreditCardValidator.IsValid(System.String)">
            <summary>
            Checks if the <paramref name="card"/> is a valid credit card number.
            </summary>
            <param name="card">
            The card number to validate.
            </param>
            <returns>
            <b>true</b> if the card number is valid.
            </returns>
        </member>
        <member name="M:Spring.Validation.Validators.CreditCardValidator.ValidateCard(System.String)">
            <summary>
            Validates card number with the specified <see cref="P:Spring.Validation.Validators.CreditCardValidator.CardType"/> validator.
            </summary>
            <param name="cardNumber">
            Credit card number to validate.
            </param>
            <returns>
            <b>true</b> if credit card number is a valid number of credit card type specified.
            </returns>
        </member>
        <member name="M:Spring.Validation.Validators.CreditCardValidator.LuhnCheck(System.String)">
            <summary>
            Checks for a valid credit card number.
            </summary>
            <param name="cardNumber">
            Credit Card Number.
            </param>
            <returns>
            <b>true</b> if the card number passes the LuhnCheck.
            </returns>
        </member>
        <member name="P:Spring.Validation.Validators.CreditCardValidator.CardType">
            <summary>
            Credit card type validator to use.
            </summary>
            <remarks>
            Can be concrete implementations of <see cref="T:Spring.Validation.Validators.ICreditCardType"/> 
            interface. The following are available implementations:
            <see cref="T:Spring.Validation.Validators.Visa"/>, <see cref="T:Spring.Validation.Validators.Mastercard"/>, <see cref="T:Spring.Validation.Validators.Amex"/>, 
            <see cref="T:Spring.Validation.Validators.Discover"/>.
            </remarks>
        </member>
        <member name="T:Spring.Validation.Validators.ICreditCardType">
            <summary>
            CreditCardType interface defines how validation is performed
            for one type/brand of credit card.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.ICreditCardType.Matches(System.String)">
            <summary>
            Returns true if the card number matches this type of 
            credit card.
            </summary>
            <param name="card">
            The card number, never null.
            </param>
            <returns>
            <b>true</b> if the number matches.
            </returns>
        </member>
        <member name="T:Spring.Validation.Validators.Visa">
            <summary>
            Visa credit card type validation support.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.Visa.Matches(System.String)">
            <summary>
            Indicates, wheter the given credit card number matches a visa number.
            </summary>
        </member>
        <member name="T:Spring.Validation.Validators.Amex">
            <summary>
            American Express credit card type validation support.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.Amex.Matches(System.String)">
            <summary>
            Indicates, wheter the given credit card number matches an amex number.
            </summary>
        </member>
        <member name="T:Spring.Validation.Validators.Discover">
            <summary>
            Discover credit card type validation support.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.Discover.Matches(System.String)">
            <summary>
            Indicates, wheter the given credit card number matches a discover number.
            </summary>
        </member>
        <member name="T:Spring.Validation.Validators.Mastercard">
            <summary>
            Mastercard credit card type validation support.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.Mastercard.Matches(System.String)">
            <summary>
            Indicates, wheter the given credit card number matches a mastercard number.
            </summary>
        </member>
        <member name="T:Spring.Validation.Validators.EmailValidator">
            <summary>
            Perform email validations.
            </summary>
            <remarks>
            <p/>
            This implementation is not guaranteed to catch all possible errors in an 
            email address. For example, an address like nobody@noplace.nowhere will 
            pass validator, even though there is no TLD "nowhere".
            </remarks>
            <author>Goran Milosavljevic</author>    
        </member>
        <member name="M:Spring.Validation.Validators.EmailValidator.#ctor">
            <summary>
            Creates a new instance of the <b>EmailValidator</b> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.EmailValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <b>EmailValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.Validators.EmailValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <b>EmailValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.Validators.EmailValidator.Validate(System.Object)">
            <summary>
            Validates the supplied <paramref name="objectToValidate"/>.
            </summary>
            <remarks>
            In the case of the <see cref="T:Spring.Validation.Validators.EmailValidator"/> class,
            the test should be a string variable that will be evaluated and the object
            obtained as a result of this evaluation will be checked if it is
            a valid e-mail address.
            </remarks>
            <param name="objectToValidate">The object to validate.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="objectToValidate"/> is valid 
            e-mail address.
            </returns>
        </member>
        <member name="F:Spring.Validation.Validators.EmailValidator.emailCheck">
            <summary>
            Regular expression used for validation of object passed to this <see cref="T:Spring.Validation.Validators.EmailValidator"/>.
            </summary>
        </member>
        <member name="T:Spring.Validation.Validators.ISBNValidator">
            <summary>
            Validates that the object is valid ISBN-10 or ISBN-13 value.
            </summary>
            <author>Goran Milosavljevic</author>
        </member>
        <member name="M:Spring.Validation.Validators.ISBNValidator.#ctor">
            <summary>
            Creates a new instance of the <b>ISBNValidator</b> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.ISBNValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <b>ISBNValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.Validators.ISBNValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <b>ISBNValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.Validators.ISBNValidator.Validate(System.Object)">
            <summary>
            Validates the supplied <paramref name="objectToValidate"/>.
            </summary>
            <remarks>
            In the case of the <see cref="T:Spring.Validation.Validators.ISBNValidator"/> class,
            the test should be a string variable that will be evaluated and the object
            obtained as a result of this evaluation will be tested using the ISBN-10 or
            ISBN-13 validation rules.
            </remarks>
            <param name="objectToValidate">The object to validate.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="objectToValidate"/> is valid ISBN.
            </returns>
        </member>
        <member name="M:Spring.Validation.Validators.ISBNValidator.IsValid(System.String)">
            <summary>
            Validates <paramref name="isbn"/> against ISBN-10 or ISBN-13 validation 
            rules.
            </summary>
            <param name="isbn">
            ISBN string to validate.
            </param>
            <returns>
            <b>true</b> if <paramref name="isbn"/> is a valid ISBN-10 or ISBN-13 code.
            </returns>
        </member>
        <member name="F:Spring.Validation.Validators.ISBNValidator.ISBN10_PATTERN">
            <summary>
            ISBN-10 consists of 4 groups of numbers separated by either 
            dashes (-) or spaces.  
            </summary>
            <remarks>
            The first group is 1-5 characters, second 1-7, third 1-6, 
            and fourth is 1 digit or an X.
            </remarks>
        </member>
        <member name="F:Spring.Validation.Validators.ISBNValidator.ISBN13_PATTERN">
            <summary>
            ISBN-13 consists of 5 groups of numbers separated by either 
            dashes (-) or spaces.  
            </summary>
            <remarks>
            The first group is 978 or 979, the second group is 
            1-5 characters, third 1-7, fourth 1-6, and fifth is 1 digit.
            </remarks>
        </member>
        <member name="T:Spring.Validation.RegularExpressionValidator">
            <summary>
            Validates that object matches specified regular expression.
            </summary>
            <remarks>
            <p>
            The test expression must evaluate to a <see cref="T:System.String"/>;
            otherwise, an exception is thrown.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.RegularExpressionValidator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.RegularExpressionValidator"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.RegularExpressionValidator.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.RegularExpressionValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
            <param name="expression">The regular expression to match against.</param>
        </member>
        <member name="M:Spring.Validation.RegularExpressionValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.RegularExpressionValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
            <param name="expression">The regular expression to match against.</param>
        </member>
        <member name="M:Spring.Validation.RegularExpressionValidator.Validate(System.Object)">
            <summary>
            Validates an object.
            </summary>
            <param name="objectToValidate">Object to validate.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="objectToValidate"/>
            object is valid.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="objectToValidate"/> is not a
            <see cref="T:System.String"/>
            </exception>
        </member>
        <member name="P:Spring.Validation.RegularExpressionValidator.Expression">
            <summary>
            The regular expression <b>text</b> to match against.
            </summary>
            <value>The regular expression <b>text</b>.</value>
        </member>
        <member name="P:Spring.Validation.RegularExpressionValidator.AllowPartialMatching">
            <summary>
            Gets or sets a value indicating whether to do a partial match instead of a full match.  
            Default is false.
            </summary>
        </member>
        <member name="P:Spring.Validation.RegularExpressionValidator.Options">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> for the regular expression evaluation.
            </summary>
            <value>The regular expression evaluation options.</value>
            <seealso cref="T:System.Text.RegularExpressions.RegexOptions"/> 
        </member>
        <member name="T:Spring.Validation.RequiredValidator">
            <summary>
            Validates that required value is not empty.
            </summary>
            <remarks>
            <p>
            This validator uses following rules to determine if target value is valid:
            <table>
                <tr>
                    <th>Target <see cref="T:System.Type"/></th>
                    <th>Valid Value</th>
                </tr>
                <tr>
                    <td>A <see cref="T:System.String"/>.</td>
                    <td>Not <see lang="null"/> or an empty string.</td>
                </tr>
                <tr>
                    <td>A <see cref="T:System.DateTime"/>.</td>
                    <td>Not <see cref="F:System.DateTime.MinValue"/> and not <see cref="F:System.DateTime.MaxValue"/>.</td>
                </tr>
                <tr>
                    <td>One of the number types.</td>
                    <td>Not zero.</td>
                </tr>
                <tr>
                    <td>A <see cref="T:System.Char"/>.</td>
                    <td>Not <see cref="F:System.Char.MinValue"/> or whitespace.</td>
                </tr>
                <tr>
                    <td>Any reference type other than <see cref="T:System.String"/>.</td>
                    <td>Not <see lang="null"/>.</td>
                </tr>
            </table>
            </p>
            <p>
            You cannot use this validator to validate any value types other than the ones
            specified in the table above. 
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.RequiredValidator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.RequiredValidator"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.RequiredValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.RequiredValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.RequiredValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.RequiredValidator"/> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.RequiredValidator.Validate(System.Object)">
            <summary>
            Validates the supplied <paramref name="objectToValidate"/>.
            </summary>
            <remarks>
            In the case of the <see cref="T:Spring.Validation.RequiredValidator"/> class,
            the test should be a variable expression that will be evaluated and the object
            obtained as a result of this evaluation will be tested using the rules described
            in the class overview of the <see cref="T:Spring.Validation.RequiredValidator"/>
            class.
            </remarks>
            <param name="objectToValidate">The object to validate.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="objectToValidate"/> is valid.
            </returns>
        </member>
        <member name="T:Spring.Validation.Validators.UrlValidator">
            <summary>
            Validates that the value is valid URL.
            </summary>
            <author>Goran Milosavljevic</author>
        </member>
        <member name="M:Spring.Validation.Validators.UrlValidator.#ctor">
            <summary>
            Creates a new instance of the <b>UrlValidator</b> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.Validators.UrlValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <b>UrlValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.Validators.UrlValidator.#ctor(Spring.Expressions.IExpression,Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <b>UrlValidator</b> class.
            </summary>
            <param name="test">The expression to validate.</param>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.Validators.UrlValidator.Validate(System.Object)">
            <summary>
            Validates the supplied <paramref name="objectToValidate"/>.
            </summary>
            <remarks>
            In the case of the <see cref="T:Spring.Validation.Validators.UrlValidator"/> class,
            the test should be a string variable that will be evaluated and the object
            obtained as a result of this evaluation will be tested using the URL validation rules.
            </remarks>
            <param name="objectToValidate">The object to validate.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="objectToValidate"/> is valid.
            </returns>
        </member>
        <member name="F:Spring.Validation.Validators.UrlValidator.urlCheck">
            <summary>
            Regular expression used for validation of object passed to this <see cref="T:Spring.Validation.Validators.UrlValidator"/>.
            </summary>
        </member>
        <member name="T:Spring.Validation.AnyValidatorGroup">
            <summary>
            <see cref="T:Spring.Validation.IValidator"/> implementation that supports grouping of validators.
            </summary>
            <remarks>
            <p>
            This validator will be valid when <b>one or more</b> of the validators in the <c>Validators</c>
            collection are valid.
            </p>
            <p>
            <c>ValidationErrors</c> property will return a union of all validation error messages 
            for the contained validators, but only if this validator is not valid (meaning, when none
            of the contained validators are valid).
            </p>
            <p><b>Note</b>, that <see cref="P:Spring.Validation.BaseValidatorGroup.FastValidate"/> defaults to <c>true</c> for this validator type!</p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:Spring.Validation.BaseValidatorGroup">
            <summary>
            Base class for composite validators
            </summary>
        </member>
        <member name="M:Spring.Validation.BaseValidatorGroup.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Spring.Validation.BaseValidatorGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidatorGroup.#ctor(Spring.Expressions.IExpression)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.BaseValidatorGroup.Validate(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.BaseValidatorGroup.ValidateGroup(System.Collections.IDictionary,Spring.Validation.IValidationErrors,System.Object)">
            <summary>
            Actual implementation how to validate the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:Spring.Validation.BaseValidatorGroup.Validators">
            <summary>
            Gets or sets the child validators.
            </summary>
            <value>The validators.</value>
        </member>
        <member name="P:Spring.Validation.BaseValidatorGroup.FastValidate">
            <summary>
            When set <c>true</c>, shortcircuits evaluation.
            </summary>
            <remarks>
            Setting this property true causes the evaluation process to prematurely abort
            if the end result is known. Any remaining child validators will not be considered then.
            Setting this value false causes implementations to evaluate all child validators, regardless
            of the potentially already known result.
            </remarks>
        </member>
        <member name="M:Spring.Validation.AnyValidatorGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.AnyValidatorGroup"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.AnyValidatorGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.AnyValidatorGroup"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.AnyValidatorGroup.#ctor(Spring.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.AnyValidatorGroup"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.AnyValidatorGroup.ValidateGroup(System.Collections.IDictionary,Spring.Validation.IValidationErrors,System.Object)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="T:Spring.Validation.CollectionValidator">
            <summary>
            <see cref="T:Spring.Validation.IValidator"/> implementation that supports validating collections.
            </summary>
            <remarks>
            <p>
            This validator will be valid only when all of the validators in the <c>Validators</c>
            collection are valid for all of the objects in the specified collection.
            </p>
            <p>
            You can specify if you want to validate all of the collection elements regardless of the errors by
            setting the <see cref="P:Spring.Validation.BaseValidatorGroup.FastValidate"/> property to <c>false</c>.
            </p>
            <p><b>Note</b>, that <see cref="P:Spring.Validation.BaseValidatorGroup.FastValidate"/> defaults to <c>true</c> for this validator type!</p>
            <p>
            If you set the <c>IncludeElementErrors</c> property to <c>true</c>, 
            <c>ValidationErrors</c> collection will contain a union of all validation error messages 
            for the contained validators; 
            Otherwise it will contain only error messages that were set for this Validator.
            </p>
            </remarks>
            <author>Damjan Tomic</author>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.CollectionValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.CollectionValidator"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.CollectionValidator.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.CollectionValidator"/> class.
            </summary>
            <param name="validateAll">The bool that determines if all elements of the collection should be evaluated.
            regardless of the Errors
            </param>
            <param name="includeElementErrors">The bool that determines whether Validate method should collect 
            all error messages returned by the item validators</param>        
        </member>
        <member name="M:Spring.Validation.CollectionValidator.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.CollectionValidator"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
            <param name="validateAll">The bool that determines if this all elements of the collection should be evaluated.
            regardless of the Errors
            </param>
            <param name="includeElementErrors">The bool that determines whether Validate method should collect 
            all error messages returned by the item validators</param>
        </member>
        <member name="M:Spring.Validation.CollectionValidator.#ctor(Spring.Expressions.IExpression,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.CollectionValidator"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
            <param name="validateAll">The bool that determines if this all elements of the collection should be evaluated.
            regardless of the Errors
            </param>
            <param name="includeElementErrors">The bool that determines whether Validate method should collect 
            all error messages returned by the item validators</param>
        </member>
        <member name="M:Spring.Validation.CollectionValidator.Validate(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified collection of objects.
            If the <c>IncludeElementErrors</c> property was set to <c>true</c>, 
            <paramref name="errors"/> collection will contain a union of all validation error messages 
            for the contained validators; 
            Otherwise it will contain only error messages that were set for this Validator.
            </summary>
            <param name="validationContext">The collection to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.CollectionValidator.ValidateGroup(System.Collections.IDictionary,Spring.Validation.IValidationErrors,System.Object)">
            <summary>
            Actual implementation how to validate the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:Spring.Validation.CollectionValidator.ValidateAll">
            <summary>
            Gets or sets the value that indicates whether to validate all elements of the collection
            regardless of the errors.
            </summary>        
            <remarks>This is just an alias for <see cref="P:Spring.Validation.BaseValidatorGroup.FastValidate"/> property</remarks>
        </member>
        <member name="P:Spring.Validation.CollectionValidator.IncludeElementErrors">
            <summary>
            Gets or sets the value that indicates whether to capture all the errors of the specific 
            elements of the collection
            </summary>        
        </member>
        <member name="P:Spring.Validation.CollectionValidator.Context">
            <summary>
            Gets or sets the expression that should be used to narrow validation context.
            </summary>
            <value>The expression that should be used to narrow validation context.</value>
        </member>
        <member name="T:Spring.Validation.ExclusiveValidatorGroup">
            <summary>
            <see cref="T:Spring.Validation.IValidator"/> implementation that supports grouping of validators.
            </summary>
            <remarks>
            <p>
            This validator will be valid when <b>one and only one</b> of the validators in the <c>Validators</c> collection are valid
            </p>
            <p>
            <c>ValidationErrors</c> property will return a union of all validation error messages 
            for the contained validators, but only if this validator is not valid (meaning, when none
            of the contained validators are valid).
            </p>
            <p>
            By default, this validator group uses <c><see cref="P:Spring.Validation.BaseValidatorGroup.FastValidate"/> == true</c> semantics.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Validation.ExclusiveValidatorGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.ExclusiveValidatorGroup"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.ExclusiveValidatorGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.ExclusiveValidatorGroup"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.ExclusiveValidatorGroup.#ctor(Spring.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Validation.ExclusiveValidatorGroup"/> class.
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.ExclusiveValidatorGroup.ValidateGroup(System.Collections.IDictionary,Spring.Validation.IValidationErrors,System.Object)">
            <summary>
            Actual implementation how to validate the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="T:Spring.Validation.IValidationErrors">
            <summary>
            An interface that validation errors containers have to implement.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.IValidationErrors.AddError(System.String,Spring.Validation.ErrorMessage)">
            <summary>
            Adds the supplied <paramref name="message"/> to this
            instance's collection of errors.
            </summary>
            <param name="provider">
            The provider that should be used for message grouping; can't be
            <see lang="null"/>.
            </param>
            <param name="message">The error message to add.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="provider"/> or <paramref name="message"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Validation.IValidationErrors.MergeErrors(Spring.Validation.IValidationErrors)">
            <summary>
            Merges another instance of <see cref="T:Spring.Validation.ValidationErrors"/> into this one.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="errorsToMerge"/> is <see lang="null"/>,
            then no errors will be added to this instance, and this method will
            (silently) return.
            </p>
            </remarks>
            <param name="errorsToMerge">
            The validation errors to merge; can be <see lang="null"/>.
            </param>
        </member>
        <member name="M:Spring.Validation.IValidationErrors.GetErrors(System.String)">
            <summary>
            Gets the list of errors for the supplied error <paramref name="provider"/>.
            </summary>
            <remarks>
            <p>
            If there are no errors for the supplied <paramref name="provider"/>,
            an <b>empty</b> <see cref="T:System.Collections.IList"/> will be returned.
            </p>
            </remarks>
            <param name="provider">Error key that was used to group messages.</param>
            <returns>
            A list of all <see cref="T:Spring.Validation.ErrorMessage"/>s for the supplied lookup <paramref name="provider"/>.
            </returns>
        </member>
        <member name="M:Spring.Validation.IValidationErrors.GetResolvedErrors(System.String,Spring.Context.IMessageSource)">
            <summary>
            Gets the list of resolved error messages for the supplied lookup <paramref name="provider"/>.
            </summary>
            <remarks>
            <p>
            If there are no errors for the supplied lookup <paramref name="provider"/>,
            an <b>empty</b> <see cref="T:System.Collections.IList"/> will be returned.
            </p>
            </remarks>
            <param name="provider">Error key that was used to group messages.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> to resolve messages against.</param>
            <returns>
            A list of resolved error messages for the supplied lookup <paramref name="provider"/>.
            </returns>
        </member>
        <member name="P:Spring.Validation.IValidationErrors.IsEmpty">
            <summary>
            Does this instance contain any validation errors?
            </summary>
            <remarks>
            <p>
            If this returns <see lang="true"/>, this means that it (obviously)
            contains no validation errors.
            </p>
            </remarks>
            <value><see lang="true"/> if this instance is empty.</value>
        </member>
        <member name="P:Spring.Validation.IValidationErrors.Providers">
            <summary>
            Gets the list of all error providers.
            </summary>
        </member>
        <member name="T:Spring.Validation.ValidatedAttribute">
            <summary>
            Allows developers to specify which validator should be used
            to validate method argument.
            </summary>
            <author>Damjan Tomic</author>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.ValidatedAttribute.#ctor(System.String)">
            <summary>
            Creates an attribute instance.
            </summary>
            <param name="validatorName">
            The name of the validator to use (must be defined within
            Spring application context).
            </param>
        </member>
        <member name="P:Spring.Validation.ValidatedAttribute.ValidatorName">
            <summary>
            Gets the name of the validator to use.
            </summary>
            <value>The name of the validator to use.</value>
        </member>
        <member name="T:Spring.Validation.ValidationErrors">
            <summary>
            A container for validation errors.
            </summary>
            <remarks>
            <p>
            This class groups validation errors by validator names and allows
            access to both the complete errors collection and to the errors for a
            certain validator.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Goran Milosavljevic</author>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.GetSchema">
            <summary>
            This property is reserved, apply the 
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />
            to the class instead. 
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the 
            XML representation of the object that is produced by 
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 
            method and consumed by the 
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 
            method.
            </returns>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"></see> stream 
            from which the object is deserialized. 
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"></see> stream 
            to which the object is serialized. 
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.AddError(System.String,Spring.Validation.ErrorMessage)">
            <summary>
            Adds the supplied <paramref name="message"/> to this
            instance's collection of errors.
            </summary>
            <param name="provider">
            The provider that should be used for message grouping; can't be
            <see lang="null"/>.
            </param>
            <param name="message">The error message to add.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="provider"/> or <paramref name="message"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.MergeErrors(Spring.Validation.IValidationErrors)">
            <summary>
            Merges another instance of <see cref="T:Spring.Validation.ValidationErrors"/> into this one.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="errorsToMerge"/> is <see lang="null"/>,
            then no errors will be added to this instance, and this method will
            (silently) return.
            </p>
            </remarks>
            <param name="errorsToMerge">
            The validation errors to merge; can be <see lang="null"/>.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.GetErrors(System.String)">
            <summary>
            Gets the list of errors for the supplied lookup <paramref name="provider"/>.
            </summary>
            <remarks>
            <p>
            If there are no errors for the supplied lookup <paramref name="provider"/>,
            an <b>empty</b> <see cref="T:System.Collections.IList"/> will be returned.
            </p>
            </remarks>
            <param name="provider">Error key that was used to group messages.</param>
            <returns>
            A list of all <see cref="T:Spring.Validation.ErrorMessage"/>s for the supplied lookup <paramref name="provider"/>.
            </returns>
        </member>
        <member name="M:Spring.Validation.ValidationErrors.GetResolvedErrors(System.String,Spring.Context.IMessageSource)">
            <summary>
            Gets the list of resolved error messages for the supplied lookup <paramref name="provider"/>.
            </summary>
            <remarks>
            <p>
            If there are no errors for the supplied lookup <paramref name="provider"/>,
            an <b>empty</b> <see cref="T:System.Collections.IList"/> will be returned.
            </p>
            </remarks>
            <param name="provider">Error key that was used to group messages.</param>
            <param name="messageSource"><see cref="T:Spring.Context.IMessageSource"/> to resolve messages against.</param>
            <returns>
            A list of resolved error messages for the supplied lookup <paramref name="provider"/>.
            </returns>
        </member>
        <member name="P:Spring.Validation.ValidationErrors.IsEmpty">
            <summary>
            Does this instance contain any validation errors?
            </summary>
            <remarks>
            <p>
            If this returns <see lang="true"/>, this means that it (obviously)
            contains no validation errors.
            </p>
            </remarks>
            <value><see lang="true"/> if this instance is empty.</value>
        </member>
        <member name="P:Spring.Validation.ValidationErrors.Providers">
            <summary>
            Gets the list of all providers.
            </summary>
        </member>
        <member name="T:Spring.Validation.ValidationException">
            <summary>
            Thrown by the validation advice if the method parameters validation fails.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.ValidationException.#ctor">
            <summary>
            Creates a new instance of the ValidationException class.
            </summary>
        </member>
        <member name="M:Spring.Validation.ValidationException.#ctor(Spring.Validation.IValidationErrors)">
            <summary>
            Creates a new instance of the ValidationException class with
            specified validation errors.
            </summary>
            <param name="errors">
            Validation errors.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ValidationException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationException.#ctor(System.String,Spring.Validation.IValidationErrors)">
            <summary>
            Creates a new instance of the ValidationException class with the
            specified message and validation errors.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="errors">
            Validation errors.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ValidationException class with the
            specified message and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationException.#ctor(System.String,System.Exception,Spring.Validation.IValidationErrors)">
            <summary>
            Creates a new instance of the ValidationException class with the
            specified message, root cause and validation errors.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
            <param name="errors">
            Validation errors.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ValidationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements object serialization.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Validation.ValidationException.ValidationErrors">
            <summary>
            Gets validation errors.
            </summary>
            <value>Validation errors.</value>
        </member>
        <member name="T:Spring.Validation.ValidatorGroup">
            <summary>
            <see cref="T:Spring.Validation.IValidator"/> implementation that supports grouping of validators.
            </summary>
            <remarks>
            <p>
            This validator will be valid only when all of the validators in the <c>Validators</c>
            collection are valid.
            </p>
            <p>
            <c>ValidationErrors</c> property will return a union of all validation error messages 
            for the contained validators.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.Validation.ValidatorGroup.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Spring.Validation.ValidatorGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.ValidatorGroup.#ctor(Spring.Expressions.IExpression)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="when">The expression that determines if this validator should be evaluated.</param>
        </member>
        <member name="M:Spring.Validation.ValidatorGroup.ValidateGroup(System.Collections.IDictionary,Spring.Validation.IValidationErrors,System.Object)">
            <summary>
            Actual implementation how to validate the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="T:Spring.Validation.ValidatorReference">
            <summary>
            Represents a reference to an externally defined validator object
            </summary>
            <remarks>
            <p>
            This class allows validation groups to reference validators that
            are defined outside of the group itself.
            </p>
            <p>
            It also allows users to narrow the context for the referenced validator
            by specifying value for the <c>Context</c> property.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Validation.ValidatorReference.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.ValidatorReference"/> class.
            </summary>
        </member>
        <member name="M:Spring.Validation.ValidatorReference.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.ValidatorReference"/> class.
            </summary>
            <param name="when">
            The expression that determines if this validator should be evaluated.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidatorReference.#ctor(Spring.Expressions.IExpression)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Validation.ValidatorReference"/> class.
            </summary>
            <param name="when">
            The expression that determines if this validator should be evaluated.
            </param>
        </member>
        <member name="M:Spring.Validation.ValidatorReference.Validate(System.Object,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Validation.ValidatorReference.Validate(System.Object,System.Collections.IDictionary,Spring.Validation.IValidationErrors)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="validationContext">The object to validate.</param>
            <param name="contextParams">Additional context parameters.</param>
            <param name="errors"><see cref="T:Spring.Validation.ValidationErrors"/> instance to add error messages to.</param>
            <returns><c>True</c> if validation was successful, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:Spring.Validation.ValidatorReference.Name">
            <summary>
            Gets or sets the name of the referenced validator.
            </summary>
            <value>The name of the referenced validator.</value>
        </member>
        <member name="P:Spring.Validation.ValidatorReference.Context">
            <summary>
            Gets or sets the expression that should be used to narrow validation context.
            </summary>
            <value>The expression that should be used to narrow validation context.</value>
        </member>
        <member name="P:Spring.Validation.ValidatorReference.When">
            <summary>
            Gets or sets the expression that determines if this validator should be evaluated.
            </summary>
            <value>The expression that determines if this validator should be evaluated.</value>
        </member>
        <member name="P:Spring.Validation.ValidatorReference.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
    </members>
</doc>
